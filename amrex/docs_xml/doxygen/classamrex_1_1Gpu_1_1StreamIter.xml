<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1Gpu_1_1StreamIter" kind="class" language="C++" prot="public">
    <compoundname>amrex::Gpu::StreamIter</compoundname>
    <includes refid="AMReX__GpuUtility_8H" local="no">AMReX_GpuUtility.H</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1StreamIter_1a52a24ab365296e0cb90e053580751fb1" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::Gpu::StreamIter::m_n</definition>
        <argsstring></argsstring>
        <name>m_n</name>
        <qualifiedname>amrex::Gpu::StreamIter::m_n</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="213" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1StreamIter_1a73f6c5940e933d6a33f935f750fbbcc0" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::Gpu::StreamIter::m_i</definition>
        <argsstring></argsstring>
        <name>m_i</name>
        <qualifiedname>amrex::Gpu::StreamIter::m_i</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="214" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1StreamIter_1a52b41c558e2c01ea2386c5ffcf258759" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Gpu::StreamIter::m_threadsafe</definition>
        <argsstring></argsstring>
        <name>m_threadsafe</name>
        <qualifiedname>amrex::Gpu::StreamIter::m_threadsafe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="215" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1StreamIter_1ac43afd05d7a1429cfc3457df64e89d23" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Gpu::StreamIter::m_sync</definition>
        <argsstring></argsstring>
        <name>m_sync</name>
        <qualifiedname>amrex::Gpu::StreamIter::m_sync</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="216" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="216" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1ad1e005cac4e3e6d15766802cba5b183a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::StreamIter::StreamIter</definition>
        <argsstring>(int n, bool is_thread_safe=true) noexcept</argsstring>
        <name>StreamIter</name>
        <qualifiedname>amrex::Gpu::StreamIter::StreamIter</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_thread_safe</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="190" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1afce690e05e05809c2b1cd96c1c7ad395" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::StreamIter::StreamIter</definition>
        <argsstring>(int n, const StreamItInfo &amp;info, bool is_thread_safe=true) noexcept</argsstring>
        <name>StreamIter</name>
        <qualifiedname>amrex::Gpu::StreamIter::StreamIter</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Gpu_1_1StreamItInfo" kindref="compound">StreamItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_thread_safe</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="191" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.cpp" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1a08fc187035cb7994ed7b74652d1ae60a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::StreamIter::~StreamIter</definition>
        <argsstring>()</argsstring>
        <name>~StreamIter</name>
        <qualifiedname>amrex::Gpu::StreamIter::~StreamIter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="193" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.cpp" bodystart="65" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1a9cf45fbf148f2bfa9d9abfe9951180fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::StreamIter::StreamIter</definition>
        <argsstring>(StreamIter const &amp;)=delete</argsstring>
        <name>StreamIter</name>
        <qualifiedname>amrex::Gpu::StreamIter::StreamIter</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1StreamIter" kindref="compound">StreamIter</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="195" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1a64c0f94193da32d65e2fcbf3f22ae362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::StreamIter::StreamIter</definition>
        <argsstring>(StreamIter &amp;&amp;)=delete</argsstring>
        <name>StreamIter</name>
        <qualifiedname>amrex::Gpu::StreamIter::StreamIter</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1StreamIter" kindref="compound">StreamIter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="196" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1a3eee12a2f15003889a101481a9e485b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::StreamIter::operator=</definition>
        <argsstring>(StreamIter const &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::Gpu::StreamIter::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1StreamIter" kindref="compound">StreamIter</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="197" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1ae6cd2ae66399648d2f4ff89b5f7f1848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::StreamIter::operator=</definition>
        <argsstring>(StreamIter &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::Gpu::StreamIter::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1StreamIter" kindref="compound">StreamIter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="198" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1a05619d7fde43cbc85b534cfe67bc457f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Gpu::StreamIter::operator()</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Gpu::StreamIter::operator()</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="200" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1a2bce50aff08af02208f587bd3f810804" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::StreamIter::isValid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isValid</name>
        <qualifiedname>amrex::Gpu::StreamIter::isValid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="202" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1a07805b5419bb6d709a1e7b3b4502443b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::StreamIter::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <qualifiedname>amrex::Gpu::StreamIter::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="207" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.cpp" bodystart="81" bodyend="88"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1StreamIter_1a080715e65757bd58b0c8e6468b0c09aa" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::StreamIter::init</definition>
        <argsstring>() noexcept</argsstring>
        <name>init</name>
        <qualifiedname>amrex::Gpu::StreamIter::init</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="211" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.cpp" bodystart="36" bodyend="63"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="187" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="188" bodyend="217"/>
    <listofallmembers>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a080715e65757bd58b0c8e6468b0c09aa" prot="private" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>init</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a2bce50aff08af02208f587bd3f810804" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>isValid</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a73f6c5940e933d6a33f935f750fbbcc0" prot="private" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>m_i</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a52a24ab365296e0cb90e053580751fb1" prot="private" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>m_n</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1ac43afd05d7a1429cfc3457df64e89d23" prot="private" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>m_sync</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a52b41c558e2c01ea2386c5ffcf258759" prot="private" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>m_threadsafe</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a05619d7fde43cbc85b534cfe67bc457f" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>operator()</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a07805b5419bb6d709a1e7b3b4502443b" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>operator++</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a3eee12a2f15003889a101481a9e485b0" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1ae6cd2ae66399648d2f4ff89b5f7f1848" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1ad1e005cac4e3e6d15766802cba5b183a" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>StreamIter</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1afce690e05e05809c2b1cd96c1c7ad395" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>StreamIter</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a9cf45fbf148f2bfa9d9abfe9951180fd" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>StreamIter</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a64c0f94193da32d65e2fcbf3f22ae362" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>StreamIter</name></member>
      <member refid="classamrex_1_1Gpu_1_1StreamIter_1a08fc187035cb7994ed7b74652d1ae60a" prot="public" virt="non-virtual"><scope>amrex::Gpu::StreamIter</scope><name>~StreamIter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
