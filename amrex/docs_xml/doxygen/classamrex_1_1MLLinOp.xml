<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLLinOp" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::MLLinOp</compoundname>
    <derivedcompoundref refid="classamrex_1_1MLCellLinOp" prot="public" virt="non-virtual">amrex::MLCellLinOp</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1MLNodeLinOp" prot="public" virt="non-virtual">amrex::MLNodeLinOp</derivedcompoundref>
    <derivedcompoundref refid="classamrex__temp_1_1MLLinOpTemp" prot="public" virt="non-virtual">amrex_temp::MLLinOpTemp</derivedcompoundref>
    <includes refid="AMReX__MLLinOp_8H" local="no">AMReX_MLLinOp.H</includes>
    <innerclass refid="structamrex_1_1MLLinOp_1_1CommContainer" prot="protected">amrex::MLLinOp::CommContainer</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" static="no" strong="yes">
        <type></type>
        <name>BCMode</name>
        <enumvalue id="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884a548465e8241b26162c8e0a7b0cdfc5e7" prot="public">
          <name>Homogeneous</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884ae9990b3a39151b6f2175caa7621e0c4b" prot="public">
          <name>Inhomogeneous</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="89" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" static="no" strong="yes">
        <type></type>
        <name>StateMode</name>
        <enumvalue id="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3a49b21ad0d38942f635877e7bbc5d7a1e" prot="public">
          <name>Solution</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3a8e42c4bdb2369a1c5b19f6f120737334" prot="public">
          <name>Correction</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="92" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" static="no" strong="yes">
        <type></type>
        <name>Location</name>
        <enumvalue id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3ad1a130e88790663b2124d7dbd3e9f81e" prot="public">
          <name>FaceCenter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3a91efbc33209256821c57a53ef9ddbc51" prot="public">
          <name>FaceCentroid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3af5c101b5f19e97166e7531ffa1c706c4" prot="public">
          <name>CellCenter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3a7dfdce1e88bc91f46ae0d30f856f7ca9" prot="public">
          <name>CellCentroid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="94" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" static="no">
        <type>LinOpBCType</type>
        <definition>using amrex::MLLinOp::BCType =  LinOpBCType</definition>
        <argsstring></argsstring>
        <name>BCType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="90" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1MLLinOp_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MLMG</definition>
        <argsstring></argsstring>
        <name>MLMG</name>
        <param>
          <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="84" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOp_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MLCGSolver</definition>
        <argsstring></argsstring>
        <name>MLCGSolver</name>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="85" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOp_1a6b8679aecd5dee44bee1b262c40e8f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MLPoisson</definition>
        <argsstring></argsstring>
        <name>MLPoisson</name>
        <param>
          <type><ref refid="classamrex_1_1MLPoisson" kindref="compound">MLPoisson</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="86" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOp_1ada5e4315ec415d41c21e9e092d0dd478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MLABecLaplacian</definition>
        <argsstring></argsstring>
        <name>MLABecLaplacian</name>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacian" kindref="compound">MLABecLaplacian</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="87" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MLLinOp::mg_coarsen_ratio</definition>
        <argsstring></argsstring>
        <name>mg_coarsen_ratio</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="341" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MLLinOp::mg_box_min_width</definition>
        <argsstring></argsstring>
        <name>mg_box_min_width</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="342" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MLLinOp::mg_domain_min_width</definition>
        <argsstring></argsstring>
        <name>mg_domain_min_width</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="346" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="346" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref></type>
        <definition>LPInfo amrex::MLLinOp::info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="349" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="351" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::maxorder</definition>
        <argsstring></argsstring>
        <name>maxorder</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="353" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::enforceSingularSolvable</definition>
        <argsstring></argsstring>
        <name>enforceSingularSolvable</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="355" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::m_num_amr_levels</definition>
        <argsstring></argsstring>
        <name>m_num_amr_levels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="357" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOp::m_amr_ref_ratio</definition>
        <argsstring></argsstring>
        <name>m_amr_ref_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="358" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOp::m_num_mg_levels</definition>
        <argsstring></argsstring>
        <name>m_num_mg_levels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="360" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> *</type>
        <definition>const MLLinOp* amrex::MLLinOp::m_parent</definition>
        <argsstring></argsstring>
        <name>m_parent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="361" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MLLinOp::m_ixtype</definition>
        <argsstring></argsstring>
        <name>m_ixtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="363" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::m_do_agglomeration</definition>
        <argsstring></argsstring>
        <name>m_do_agglomeration</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="365" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::m_do_consolidation</definition>
        <argsstring></argsstring>
        <name>m_do_consolidation</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="366" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::m_do_semicoarsening</definition>
        <argsstring></argsstring>
        <name>m_do_semicoarsening</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="368" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
        <definition>Vector&lt;IntVect&gt; amrex::MLLinOp::mg_coarsen_ratio_vec</definition>
        <argsstring></argsstring>
        <name>mg_coarsen_ratio_vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="369" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Geometry&gt; &gt; amrex::MLLinOp::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
<para>first <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> is for amr level and second is mg level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="372" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;BoxArray&gt; &gt; amrex::MLLinOp::m_grids</definition>
        <argsstring></argsstring>
        <name>m_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="373" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;DistributionMapping&gt; &gt; amrex::MLLinOp::m_dmap</definition>
        <argsstring></argsstring>
        <name>m_dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="374" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;FabFactory&lt;FArrayBox&gt; &gt; &gt; &gt; amrex::MLLinOp::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="375" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOp::m_domain_covered</definition>
        <argsstring></argsstring>
        <name>m_domain_covered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="376" column="37" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::m_default_comm</definition>
        <argsstring></argsstring>
        <name>m_default_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="378" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::m_bottom_comm</definition>
        <argsstring></argsstring>
        <name>m_bottom_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="379" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1MLLinOp_1_1CommContainer" kindref="compound">CommContainer</ref> &gt;</type>
        <definition>std::unique_ptr&lt;CommContainer&gt; amrex::MLLinOp::m_raii_comm</definition>
        <argsstring></argsstring>
        <name>m_raii_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="393" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOp::m_lobc</definition>
        <argsstring></argsstring>
        <name>m_lobc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="396" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOp::m_hibc</definition>
        <argsstring></argsstring>
        <name>m_hibc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="397" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aec9b82494ef69731d10e9b293b64fdd8" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOp::m_lobc_orig</definition>
        <argsstring></argsstring>
        <name>m_lobc_orig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="400" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a94066c5e255464485d5af0d1f174e1c2" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOp::m_hibc_orig</definition>
        <argsstring></argsstring>
        <name>m_hibc_orig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="401" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;Real, AMREX_SPACEDIM&gt; amrex::MLLinOp::m_domain_bloc_lo</definition>
        <argsstring></argsstring>
        <name>m_domain_bloc_lo</name>
        <initializer>{{AMREX_D_DECL(0.,0.,0.)}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="403" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;Real, AMREX_SPACEDIM&gt; amrex::MLLinOp::m_domain_bloc_hi</definition>
        <argsstring></argsstring>
        <name>m_domain_bloc_hi</name>
        <initializer>{{AMREX_D_DECL(0.,0.,0.)}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="404" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::m_needs_coarse_data_for_bc</definition>
        <argsstring></argsstring>
        <name>m_needs_coarse_data_for_bc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="406" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::m_coarse_data_crse_ratio</definition>
        <argsstring></argsstring>
        <name>m_coarse_data_crse_ratio</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="407" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::MLLinOp::m_coarse_bc_loc</definition>
        <argsstring></argsstring>
        <name>m_coarse_bc_loc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="408" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        <definition>const MultiFab* amrex::MLLinOp::m_coarse_data_for_bc</definition>
        <argsstring></argsstring>
        <name>m_coarse_data_for_bc</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="409" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="96" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="97" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="97" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="116" bodyend="125"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOp::MLLinOp</definition>
        <argsstring>()</argsstring>
        <name>MLLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="99" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLLinOp::~MLLinOp</definition>
        <argsstring>()</argsstring>
        <name>~MLLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="100" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOp::MLLinOp</definition>
        <argsstring>(const MLLinOp &amp;)=delete</argsstring>
        <name>MLLinOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="102" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOp::MLLinOp</definition>
        <argsstring>(MLLinOp &amp;&amp;)=delete</argsstring>
        <name>MLLinOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="103" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        <definition>MLLinOp&amp; amrex::MLLinOp::operator=</definition>
        <argsstring>(const MLLinOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="104" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        <definition>MLLinOp&amp; amrex::MLLinOp::operator=</definition>
        <argsstring>(MLLinOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="105" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa0ba245918a01db26fdc8289b4e4ed29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory, bool eb_limit_coarsening=true)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>eb_limit_coarsening</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="107" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="132" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string amrex::MLLinOp::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1a30b8c12319907caf82b87005902a6bcc">name</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1aec78f58fa749e98da726f5a64e91874a">name</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1a3c81e1f8171bcfb4e9090a36f5f3ebaa">name</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="114" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setDomainBC</definition>
        <argsstring>(const Array&lt; BCType, AMREX_SPACEDIM &gt; &amp;lobc, const Array&lt; BCType, AMREX_SPACEDIM &gt; &amp;hibc) noexcept</argsstring>
        <name>setDomainBC</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
<para>Boundary of the whole domain. This functions must be called, and must be called before other bc functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lobc</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hibc</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="124" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="564" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setDomainBC</definition>
        <argsstring>(const Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &amp;lobc, const Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &amp;hibc) noexcept</argsstring>
        <name>setDomainBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="128" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="573" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setDomainBCLoc</definition>
        <argsstring>(const Array&lt; Real, AMREX_SPACEDIM &gt; &amp;lo_bcloc, const Array&lt; Real, AMREX_SPACEDIM &gt; &amp;hi_bcloc) noexcept</argsstring>
        <name>setDomainBCLoc</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>lo_bcloc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>hi_bcloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="136" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="656" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::needsCoarseDataForBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>needsCoarseDataForBC</name>
        <briefdescription>
<para>Needs coarse data for bc? If the lowest level grids does not cover the entire domain, coarse level data are needed for supplying Dirichlet bc at coarse/fine boundary, even when the domain bc is not Dirichlet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="145" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setCoarseFineBC</definition>
        <argsstring>(const MultiFab *crse, int crse_ratio) noexcept</argsstring>
        <name>setCoarseFineBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_ratio</declname>
        </param>
        <briefdescription>
<para>For cell-centered solves only: if we want to do a linear solve where the boundary conditions on the coarsest AMR level of the solve come from a coarser level (e.g. the base AMR level of the solve is &gt; 0 and does not cover the entire domain), we must explicitly provide the coarser data. Boundary conditions from a coarser level are always Dirichlet. The <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> crse does not need to have ghost cells and is at a coarser resolution than the coarsest AMR level of the solve; it is used to supply (interpolated) boundary conditions for the solve. NOTE: If this is called, it must be called before <computeroutput>setLevelBC</computeroutput>. If crse is nullptr, then the bc values are assumed to be zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="163" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="664" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a04008d16768c19836e3ea78add024630" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::setLevelBC</definition>
        <argsstring>(int, const MultiFab *, const MultiFab *=nullptr, const MultiFab *=nullptr, const MultiFab *=nullptr)</argsstring>
        <name>setLevelBC</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a17b29b5c93f25181f34313b42b795a9e">setLevelBC</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>For cell-centered solves only: this must be called for each level. Argument <computeroutput>levelbcdata</computeroutput> is used to supply Dirichlet or Neumann bc at the physical domain; if those data are homogeneous we can pass nullptr instead of levelbcdata. Regardless, this function must be called. If used, the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> levelbcdata must have one ghost cell. Only the data outside the physical domain will be used. It is assumed that the data in those ghost cells outside the domain live exactly on the face of the physical domain. Argument <computeroutput>amrlev</computeroutput> is relative level such that the lowest to the solver is always 0. The optional arguments robinbc_[a|b|f] provide Robin boundary condition <computeroutput>a*phi + b*dphi/dn = f</computeroutput>. Note that <computeroutput>d./dn</computeroutput> is <computeroutput>d./dx</computeroutput> at the upper boundary and <computeroutput>-d./dx</computeroutput> at the lower boundary, for Robin BC. However, for inhomogeneous Neumann BC, the value in leveldata is assumed to be <computeroutput>d./dx</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="181" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="186" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setMaxOrder</definition>
        <argsstring>(int o) noexcept</argsstring>
        <name>setMaxOrder</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="188" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::getMaxOrder</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getMaxOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="189" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setEnforceSingularSolvable</definition>
        <argsstring>(bool o) noexcept</argsstring>
        <name>setEnforceSingularSolvable</name>
        <param>
          <type>bool</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="191" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::getEnforceSingularSolvable</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getEnforceSingularSolvable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="192" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" kindref="member">BottomSolver</ref></type>
        <definition>virtual BottomSolver amrex::MLLinOp::getDefaultBottomSolver</definition>
        <argsstring>() const</argsstring>
        <name>getDefaultBottomSolver</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a6733cc0185bbfe0f1a5430b961ac84d7">getDefaultBottomSolver</reimplementedby>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a75cb44a29909aa245fc41da536a69775">getDefaultBottomSolver</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="194" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a525b102eb592e2b44a864c62e64e9566" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLLinOp::getNComp</definition>
        <argsstring>() const</argsstring>
        <name>getNComp</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ad5e85d6b70f2ee501328d4ec5efb0771">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1afc580050d59cf53595c895acb8893034">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a315f85d5190597877f1c42a08a58ddd8">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1aa929b7d2769524dcb8144eb97f268b87">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a2f6702ea1b79e9775bf8937f165ec6fd">getNComp</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="195" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aea3bbedd2e663d88f153e88ce06a59c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLLinOp::getNGrow</definition>
        <argsstring>(int=0, int=0) const</argsstring>
        <name>getNGrow</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="196" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a210b4c125747c6a4a6f171dcff941579" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::needsUpdate</definition>
        <argsstring>() const</argsstring>
        <name>needsUpdate</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ab6dd50ea71733ee23625ef3fe6634d98">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a65030fea7dc90010188af0e7b33fb6ab">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1acf27ddd13356c7c675ec2527d8e80223">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a9b2247b87648cdbe1e66f1f62067a91b">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1adb891ed98442838db52ab71e703ff752">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a0073d05770099d89c87a60e25ab3cc47">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898">needsUpdate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="198" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a3c4aac7c4c8cec7458fd1b5b3ac8c3f4">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a2974162f8c208ea9130dbe20a99a76e1">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a7e612906bd561e6b5db7ce47ea0e7d14">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a6cbd359ec0116baed950bbc003e1ea09">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1aa107a7270bd64cf582e25812c5e5cbab">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a6de98ea7f86803972368acd05180431d">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="199" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1afd006e1aba81687f29e30e7a26bcba04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::restriction</definition>
        <argsstring>(int, int, MultiFab &amp;, MultiFab &amp;) const</argsstring>
        <name>restriction</name>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1a79f111ea6c182c3ca749babb56729051">restriction</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1adfa34733af6c1ade7b084ee4519c3851">restriction</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1a3d7d8f08d42c1958ee46caa17dde18c5">restriction</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a4e02281f596d4f8d9fc0ccad62f8525b">restriction</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1aa95312f91d2baeeba018a231d162ad9a">restriction</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="201" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a250ef9650a08f752045410345cd3a408" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::interpolation</definition>
        <argsstring>(int, int, MultiFab &amp;, const MultiFab &amp;) const</argsstring>
        <name>interpolation</name>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a15a2cb048460b6619e61e66fb3a8e3d5">interpolation</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1af8a22ae6d414c1b98b3229132f35d539">interpolation</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1adce212d6785b5cedafa7b823adbc582e">interpolation</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1ad886e81a6fbce7dda6d9a8cf569fb707">interpolation</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a0044458b3dd79241c2b74483b70cb7e7">interpolation</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="202" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac055c06cab956b521c8b66bed595ef79" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::interpAssign</definition>
        <argsstring>(int, int, MultiFab &amp;, MultiFab &amp;) const</argsstring>
        <name>interpAssign</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1afc69014267331541efe7c497b31118e4">interpAssign</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a4d49ac5447d6ea1fc807b221460fb54d">interpAssign</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="203" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a9b5321e037b2534811f295b767c58398" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::averageDownSolutionRHS</definition>
        <argsstring>(int, MultiFab &amp;, MultiFab &amp;, const MultiFab &amp;, const MultiFab &amp;)</argsstring>
        <name>averageDownSolutionRHS</name>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a184c8bb62e01581cfc6d1d936f7eeca0">averageDownSolutionRHS</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1ac78cd13e2533f566292aed726e19f7c5">averageDownSolutionRHS</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a01995bfb648c50b3a15598d09e07b83e">averageDownSolutionRHS</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1aa8b834ce4429f552256ed5e1aae9be74">averageDownSolutionRHS</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1adfefa1b34d6988c4bf97957616b61c8f">averageDownSolutionRHS</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="204" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="204" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a268158a66466e7fec51ef1240689b687" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::apply</definition>
        <argsstring>(int, int, MultiFab &amp;, MultiFab &amp;, BCMode, StateMode, const MLMGBndry *=nullptr) const</argsstring>
        <name>apply</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a492bdb86a17eff7aa7b01a99d68eefed">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a3bcbe4767274ef89df6f5eaaacded060">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1ab27ab49bb00008a08ebb46ae961492a9">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a62ea55fae7824c00b3237cf57616dd1d">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a8e392e42b5c238124145af83776d575a">apply</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="207" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="207" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af39026c5bf9ff3a7826a8804526ba9a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::smooth</definition>
        <argsstring>(int, int, MultiFab &amp;, const MultiFab &amp;, bool=false) const</argsstring>
        <name>smooth</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a240eadd9886e8df70f955fecb56bcdfe">smooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1a241a70e73822570252d889e7e7bd6110">smooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1aa6f77ffd080d73ac9346cc408ee7a6d8">smooth</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>bool</type>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="209" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="209" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a86207e36440100ba012296cb95b51713" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::normalize</definition>
        <argsstring>(int, int, MultiFab &amp;) const</argsstring>
        <name>normalize</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1af3a38005298c98dec1874957bccc31a6">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a1ba4a6db3bd8895f95ac90ff5decc461">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1ae8e6a26dbbd7e415c6c071e85a19cef3">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1aa8cf07e47ac20ab67630e14aa8b10685">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1a895ef13fc5b9a48796e5a704768eceee">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1a046105a74813755262bda44ded8cfae9">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a20808fac34051da57f423f026ce05e26">normalize</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="213" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a10c2c2bf1622b6359e830155d7b5352c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::solutionResidual</definition>
        <argsstring>(int, MultiFab &amp;, MultiFab &amp;, const MultiFab &amp;, const MultiFab *=nullptr)</argsstring>
        <name>solutionResidual</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345">solutionResidual</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a9577a87ff76e6c9406e3cbe716d26746">solutionResidual</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="215" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="215" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a1cc4a740107bec84bb7bac80b4a34f53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::correctionResidual</definition>
        <argsstring>(int, int, MultiFab &amp;, MultiFab &amp;, const MultiFab &amp;, BCMode, const MultiFab *=nullptr)</argsstring>
        <name>correctionResidual</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a3c1832912375e08e8bd38775b6b532b3">correctionResidual</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a2018b943fdab7019461dc9580b04177c">correctionResidual</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="217" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="217" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ab1f098dbddd9ad2068278fc3a51a7b56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::reflux</definition>
        <argsstring>(int, MultiFab &amp;, const MultiFab &amp;, const MultiFab &amp;, MultiFab &amp;, MultiFab &amp;, const MultiFab &amp;) const</argsstring>
        <name>reflux</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1afc76c452e2704200c3b596ba1c1cb1a2">reflux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1ab24f43cada8f1a1daa112e1c17ea635d">reflux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1af07a158131d2bb5078c0840365cea305">reflux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1a011f0b17c95908e2eb6f61483229b6f3">reflux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="220" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a7dfae9fa431aefebde79a4d5aff2ac5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::compFlux</definition>
        <argsstring>(int, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;, MultiFab &amp;, Location) const</argsstring>
        <name>compFlux</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1acd6c78c0e6307234b1539ba81caadb9c">compFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a739281050ab5aebe8d61a56992049a58">compFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1ab07ec8381bce1e90f83ecf92d6581547">compFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1ad4308a8cc2e4cb0ee8850640a80ca2a2">compFlux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="223" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="223" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ab6f46c05df22dbda4d2da6e198f98344" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::compGrad</definition>
        <argsstring>(int, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;, MultiFab &amp;, Location) const</argsstring>
        <name>compGrad</name>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1afc09237149ffffd61a4fc209955f9ff8">compGrad</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1aead98967987fb3826008fc69f3270247">compGrad</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1ae749675d0ae6abd70771a049598a64dc">compGrad</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a02d03e47f411047c83284bfe2c9686fc">compGrad</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a1d9985ccb20acc6419c9dcfaf5a365fb">compGrad</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="225" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="225" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a8e31761ce1106732dd8db8e72894d1bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::applyMetricTerm</definition>
        <argsstring>(int, int, Any &amp;) const</argsstring>
        <name>applyMetricTerm</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a3ecef53f14386209e60edf69cab15bb1">applyMetricTerm</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a1860614d12e92fb59fbc981b9bdadfd5">applyMetricTerm</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="228" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af73a5461ea6c841bc1293a1c0a9d91a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::unapplyMetricTerm</definition>
        <argsstring>(int, int, MultiFab &amp;) const</argsstring>
        <name>unapplyMetricTerm</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a4ee573102053163e673153f3334153fe">unapplyMetricTerm</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a2dd8986c8dee800d2a3b9003b8188d5c">unapplyMetricTerm</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="229" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a806af8f6ea146fdf513e1cc82305c822" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::unimposeNeumannBC</definition>
        <argsstring>(int, Any &amp;) const</argsstring>
        <name>unimposeNeumannBC</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a6c10d9dffbce563895108a99cb1db099">unimposeNeumannBC</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="231" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a6f31b79968da09d7a713f6581fe8e3dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::applyInhomogNeumannTerm</definition>
        <argsstring>(int, Any &amp;) const</argsstring>
        <name>applyInhomogNeumannTerm</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1a1776ab863b406f855c04737879f98523">applyInhomogNeumannTerm</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="232" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a15c57a1dbcd04052f52b9ca0701d603d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::applyOverset</definition>
        <argsstring>(int, Any &amp;) const</argsstring>
        <name>applyOverset</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1a41b8fd47ae330f346ee7e5ff6b90ca62">applyOverset</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="233" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af32f494664d6666bdd94d92998f4b5f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::scaleRHS</definition>
        <argsstring>(int, Any &amp;) const</argsstring>
        <name>scaleRHS</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="234" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a21d5ab7f7712cf681083ed6763399132" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>virtual Vector&lt;Real&gt; amrex::MLLinOp::getSolvabilityOffset</definition>
        <argsstring>(int, int, Any const &amp;) const</argsstring>
        <name>getSolvabilityOffset</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a83f585ffe6e99a77143a4ae564b9f988">getSolvabilityOffset</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1af04b9620a526881c747edcf7e3d6eeee">getSolvabilityOffset</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a89994d8a9689ab0d5dcdcd74dbb89bfe">getSolvabilityOffset</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="235" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="235" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a9437bf41a67df3f776428c41f284a022" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::fixSolvabilityByOffset</definition>
        <argsstring>(int, int, Any &amp;, Vector&lt; Real &gt; const &amp;) const</argsstring>
        <name>fixSolvabilityByOffset</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a8a9e84cdae16cefb1f4dac19ac06c793">fixSolvabilityByOffset</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a9d01d5b7955be1815f3d4c9b5a8792f4">fixSolvabilityByOffset</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1aa9c4b7b43d5b2f42c4ca4662e1125914">fixSolvabilityByOffset</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="237" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="237" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::prepareForSolve</definition>
        <argsstring>()=0</argsstring>
        <name>prepareForSolve</name>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a0273d9fc3ae644bc006c08af0d891660">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1a31d3fbddab89750d2dc6212d4fe6fc9a">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1adb58fe08c96787422aaf6449a03a76e8">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a87443891a5437af65f59dc9a02c72d35">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1af3750449862fc251b642c8105e748fc9">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1af7ed92c7fa5541ead4182b86c3a7d275">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a7d6264e24870296cd61ca4ce20b118df">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a627779ad059394a0bd2b3bede177e12a">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1a7d6d2646e9f6afaf7ed70bf0c86fa762">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a142ae4b8e4c68254e81516b5c8e00f4d">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a1ed54df7b2361419471f1650c90a4ef1">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a997cf1a004e76b021a262f35a834da32">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="240" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1abdb84e18739d3e95d406166acb56a9a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::isSingular</definition>
        <argsstring>(int) const</argsstring>
        <name>isSingular</name>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a3681713acaa645f62ab556c96ea733e5">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1aefdfec1d9ad383609a1becaa7974d15a">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a4304750fa837f09df7c0d400b147fe2f">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1accc281e18237ce18823e3a1a00cbbf01">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a18804aba43a14c7ffea9b6bc3f3179ba">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1a50d42cd15eea1fb4b562d26a88d6b05c">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1abe98c1ca87f919a66405ece51d590f07">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1abb68b7b79b8bb488979e6b25b05f6d82">isSingular</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="241" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae5110978eac9ec01689bec96866ad8d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::isBottomSingular</definition>
        <argsstring>() const</argsstring>
        <name>isBottomSingular</name>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a8c9a07d262d0dc09dbfd73b5f5e5c863">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1a85a019414c7e2a4c0a5e7db9beaa9fc6">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a82e9a304ae27837aa45c9215df9d2b15">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1aee620ca36a51d37385f849f261eb6502">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a1ebac1979e56e1354afa11b556bf074a">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1aa0ead02bedca70191f223b455654b49b">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a74d6ab8dcd6375bed793437c83271aaa">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a5ebdba6239eb393431835a2f2ad724df">isBottomSingular</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="242" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1adeb9c046c943c797ebe796a72ad0c895" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLLinOp::xdoty</definition>
        <argsstring>(int, int, const MultiFab &amp;, const MultiFab &amp;, bool) const</argsstring>
        <name>xdoty</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a2d3d01dcb4fddb4f2df39484b6f58f97">xdoty</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1ae81b0104718c1f31d4b1bba2450d32b6">xdoty</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="243" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a1ce310367908f9f10842859e92c5fd3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt;MLLinOp&gt; amrex::MLLinOp::makeNLinOp</definition>
        <argsstring>(int) const</argsstring>
        <name>makeNLinOp</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1a92cdc76d121dbcf72edad3dd82b25e77">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1afe42320f6ba8574d18aefce6492ee6b5">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a51c74968da344ad604efb62e7200f899">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1acd7d1f624947d653cfb4b3ea3f2fd193">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a2a3faa786b7090c2c15f76f2e29f6a28">makeNLinOp</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="245" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a16bfe483ac9088f65f81d12166adecb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::getFluxes</definition>
        <argsstring>(const Vector&lt; Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &gt; &amp;, const Vector&lt; MultiFab * &gt; &amp;, Location) const</argsstring>
        <name>getFluxes</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a6bb3a208259c28f0d2b81329dfa3d2d4">getFluxes</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1add88d6133181d2515575e939e3bd0aa5">getFluxes</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="247" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="247" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac495d1d722cbb68c31af46b2e860fa9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::getFluxes</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;, const Vector&lt; MultiFab * &gt; &amp;) const</argsstring>
        <name>getFluxes</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1a34cb682ceb72e31c45cadb89bc2e3a9f">getFluxes</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a380e1a75b761e811ab4870a18baddc78">getFluxes</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="252" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a9d05943073d4f01c9a6d03c2ec9f0602" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::supportNSolve</definition>
        <argsstring>() const</argsstring>
        <name>supportNSolve</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1ab8725018ab20ba9130eccd4b9eb82e17">supportNSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1a02af5f787e3630e0de7112f48fcb0160">supportNSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="282" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="282" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aff1b5ba7a45c7e320550f99f88984301" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::copyNSolveSolution</definition>
        <argsstring>(MultiFab &amp;, MultiFab const &amp;) const</argsstring>
        <name>copyNSolveSolution</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a6e2d3bd2582d97baffe5204f5867c2a3">copyNSolveSolution</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1afad3ba6e2e581217bde559c9d7b92098">copyNSolveSolution</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="284" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad40e38b311ffc4f58f39b1ada8619294" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref></type>
        <definition>Any amrex::MLLinOp::AnyMake</definition>
        <argsstring>(int amrlev, int mglev, IntVect const &amp;ng) const</argsstring>
        <name>AnyMake</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a983f8f4c9e12cc6da2ff0cfeb0129b38">AnyMake</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="286" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="900" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a4e8d808ba57a2331615f1e256cf85e4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref></type>
        <definition>Any amrex::MLLinOp::AnyMakeCoarseMG</definition>
        <argsstring>(int amrlev, int mglev, IntVect const &amp;ng) const</argsstring>
        <name>AnyMakeCoarseMG</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1abe1f030de398704261c228eaaa8f6943">AnyMakeCoarseMG</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="287" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="908" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a9f7fcc41c14f77079d509e5eb85cbfe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref></type>
        <definition>Any amrex::MLLinOp::AnyMakeCoarseAmr</definition>
        <argsstring>(int famrlev, IntVect const &amp;ng) const</argsstring>
        <name>AnyMakeCoarseAmr</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1ab6c24334926ec7f7329f94c362f6bc5d">AnyMakeCoarseAmr</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="288" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="918" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a768ff0c44cdf30e07b0c9ddb0a30ffef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref></type>
        <definition>Any amrex::MLLinOp::AnyMakeAlias</definition>
        <argsstring>(Any const &amp;a) const</argsstring>
        <name>AnyMakeAlias</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a158eb5a2983b02171137df48df4b8ed9">AnyMakeAlias</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="289" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="928" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aca0a26169b857efbc1bd1e424e787886" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MLLinOp::AnyGrowVect</definition>
        <argsstring>(Any const &amp;a) const</argsstring>
        <name>AnyGrowVect</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a751cc742613140af9bb0a023f6505a4f">AnyGrowVect</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="290" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="936" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0bcab258419204e22344e10166971f25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyCopy</definition>
        <argsstring>(Any &amp;dst, Any const &amp;src, IntVect const &amp;ng) const</argsstring>
        <name>AnyCopy</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a77b0cc8dd4bcadbad869465e6faebf23">AnyCopy</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="291" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="970" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a798b4eaeb4638b01352daba1ce7a5e44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyAdd</definition>
        <argsstring>(Any &amp;dst, Any const &amp;src, IntVect const &amp;ng) const</argsstring>
        <name>AnyAdd</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1ae6f9908fe5ae9dc23f2aeb2c88310dd3">AnyAdd</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="292" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="979" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a8cd14b1829a52c3f9eedfc975274242d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnySetToZero</definition>
        <argsstring>(Any &amp;a) const</argsstring>
        <name>AnySetToZero</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1abeb4b960dcd100be602581072784292c">AnySetToZero</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="293" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="944" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad28403dda85895d123abdaf36365cf29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnySetBndryToZero</definition>
        <argsstring>(Any &amp;a) const</argsstring>
        <name>AnySetBndryToZero</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1afb0c384afc863fe5196db3f79fdab669">AnySetBndryToZero</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="294" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="952" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1acfd9e2b3acdcd9494d321c020b6ce98f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyParallelCopy</definition>
        <argsstring>(Any &amp;dst, Any const &amp;src, IntVect const &amp;src_nghost, IntVect const &amp;dst_nghost, Periodicity const &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>AnyParallelCopy</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a72f511d2ea81051a7429d342d4bd2277">AnyParallelCopy</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="298" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1003" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a47701945960629a5fab242da32add560" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::MLLinOp::AnyNormInf</definition>
        <argsstring>(Any &amp;a) const</argsstring>
        <name>AnyNormInf</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a86f199a4c79aec7951dd2df979d8f8d5">AnyNormInf</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="302" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1014" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a64f4ec813a013e966d0d9d8fb87cdbb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLLinOp::AnyNormInfMask</definition>
        <argsstring>(int amrlev, Any const &amp;a, bool local) const =0</argsstring>
        <name>AnyNormInfMask</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a94ae8f1860c2181aecda4e989685ff1a">AnyNormInfMask</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1aaacf8a4f3f2c127b3ea2bb7035897b19">AnyNormInfMask</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a8d8f0c75dbf4b4befd03223bb683fee4">AnyNormInfMask</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="304" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1acd3c616a0a54d9367a924b3779108f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnySolutionResidual</definition>
        <argsstring>(int amrlev, Any &amp;resid, Any &amp;x, Any const &amp;b, Any const *crse_bcdata=nullptr)</argsstring>
        <name>AnySolutionResidual</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1aab95bd2cce19cdb0aa9b7a2d3529971d">AnySolutionResidual</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="306" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1021" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0a60ca7809271135f39ea4294f3890ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyCorrectionResidual</definition>
        <argsstring>(int amrlev, int mglev, Any &amp;resid, Any &amp;x, const Any &amp;b, BCMode bc_mode, const Any *crse_bcdata=nullptr)</argsstring>
        <name>AnyCorrectionResidual</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="308" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1030" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a316bc42d433c2d77a6110ac5632324f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyReflux</definition>
        <argsstring>(int crse_amrlev, Any &amp;res, const Any &amp;crse_sol, const Any &amp;crse_rhs, Any &amp;fine_res, Any &amp;fine_sol, const Any &amp;fine_rhs)</argsstring>
        <name>AnyReflux</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a3ebc058ff69e971128ba0295e5a8968c">AnyReflux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine_res</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="311" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1040" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1abea292e743cd597afb9543a76261990b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::AnyAvgDownResAmr</definition>
        <argsstring>(int clev, Any &amp;cres, Any const &amp;fres) const =0</argsstring>
        <name>AnyAvgDownResAmr</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a27bbbe363b028cf1083493615db6bb64">AnyAvgDownResAmr</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1af7c27ed28c0d3038c44e786416fcfa27">AnyAvgDownResAmr</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1ac708104455ff3de644bd18889ffd1028">AnyAvgDownResAmr</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>clev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>cres</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>fres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="315" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1afbe1037430dd65ce6f5f90ff47fa3abf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyAvgDownResMG</definition>
        <argsstring>(int clev, Any &amp;cres, Any const &amp;fres) const</argsstring>
        <name>AnyAvgDownResMG</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1adef89de45ee6a9225f2908b93b0f8182">AnyAvgDownResMG</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>clev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>cres</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>fres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="316" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1121" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af6f520cd860d3be048f5bf04a219aa85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnySmooth</definition>
        <argsstring>(int amrlev, int mglev, Any &amp;sol, const Any &amp;rhs, bool skip_fillboundary=false) const</argsstring>
        <name>AnySmooth</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a4a01e4b7965f666bc840bf2619083f8a">AnySmooth</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="318" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1134" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae135c931d3ceb31f1d21f06253e73658" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyRestriction</definition>
        <argsstring>(int amrlev, int cmglev, Any &amp;crse, Any &amp;fine) const</argsstring>
        <name>AnyRestriction</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1aa54b9e9ee9067c70503cbd3f33cadfaa">AnyRestriction</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="321" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1142" bodyend="1146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1adbdf9aaf1ccc800c62487b24f336b502" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyInterpolationMG</definition>
        <argsstring>(int amrlev, int fmglev, Any &amp;fine, const Any &amp;crse) const</argsstring>
        <name>AnyInterpolationMG</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1ad0aa77a6b8f70e07fc4a0c404639714d">AnyInterpolationMG</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="323" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1149" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aebb9d5705330c057bdb1bd8800a6f430" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyInterpAssignMG</definition>
        <argsstring>(int amrlev, int fmglev, Any &amp;fine, Any &amp;crse) const</argsstring>
        <name>AnyInterpAssignMG</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a5a150b34eca280af42f2532e246c9457">AnyInterpAssignMG</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="324" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1156" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac0a74a280b8321de86dbf25297ed95ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::AnyInterpolationAmr</definition>
        <argsstring>(int famrlev, Any &amp;fine, const Any &amp;crse, IntVect const &amp;) const =0</argsstring>
        <name>AnyInterpolationAmr</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a645d14435020ae3e48d1af3cc01fc004">AnyInterpolationAmr</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a9bc26851381c49d35f14bbcf2e0bbb75">AnyInterpolationAmr</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a86728c40ba63428f3f98297a5e9309a5">AnyInterpolationAmr</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="325" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a7053d4e8db13b9bc6aa1505228e42b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::AnyAverageDownSolutionRHS</definition>
        <argsstring>(int camrlev, Any &amp;crse_sol, Any &amp;crse_rhs, const Any &amp;fine_sol, const Any &amp;fine_rhs)</argsstring>
        <name>AnyAverageDownSolutionRHS</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1a09f00880ccef6be45584ea0c1cd3ed66">AnyAverageDownSolutionRHS</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="328" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="988" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a19f2a99b89fdb222ff2c006c3e623625" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::AnyAverageDownAndSync</definition>
        <argsstring>(Vector&lt; Any &gt; &amp;sol) const =0</argsstring>
        <name>AnyAverageDownAndSync</name>
        <reimplementedby refid="classamrex__temp_1_1MLLinOpTemp_1ac44d0d0ad9e98fd7cc8d718111c70de9">AnyAverageDownAndSync</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a3efe1958435b3fde0ea3acb0f404f54e">AnyAverageDownAndSync</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a8ba9590cf173c7884a4cbcb3b4aa9795">AnyAverageDownAndSync</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &gt; &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="331" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aea26a4fe6d5a15d23a347501c6be1c71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::postSolve</definition>
        <argsstring>(Vector&lt; Any &gt; &amp;sol) const</argsstring>
        <name>postSolve</name>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1a8f1dfc2bee2ca70d77c93242144374ce">postSolve</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &gt; &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="333" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1163" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a63aaab910ae5e9c6bd653804eb1c8148" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLLinOp::MFNormInf</definition>
        <argsstring>(MultiFab const &amp;mf, iMultiFab const *fine_mask, bool local) const</argsstring>
        <name>MFNormInf</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const *</type>
          <declname>fine_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="335" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1049" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af8de1257ddde2a40a49011ef34d68100" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::isMFIterSafe</definition>
        <argsstring>(int amrlev, int mglev1, int mglev2) const</argsstring>
        <name>isMFIterSafe</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="337" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="1166" bodyend="1170"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::NAMRLevels</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NAMRLevels</name>
        <briefdescription>
<para>functions </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="414" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::NMGLevels</definition>
        <argsstring>(int amrlev) const noexcept</argsstring>
        <name>NMGLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="415" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
        <definition>const Vector&lt;int&gt;&amp; amrex::MLLinOp::AMRRefRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>AMRRefRatio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="416" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="416" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::AMRRefRatio</definition>
        <argsstring>(int amr_lev) const noexcept</argsstring>
        <name>AMRRefRatio</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amr_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="417" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="417" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::MLLinOp::Geom</definition>
        <argsstring>(int amr_lev, int mglev=0) const noexcept</argsstring>
        <name>Geom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amr_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="419" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const  *</type>
        <definition>FabFactory&lt;FArrayBox&gt; const* amrex::MLLinOp::Factory</definition>
        <argsstring>(int amr_lev, int mglev=0) const noexcept</argsstring>
        <name>Factory</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amr_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="420" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="420" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a7ef6c8434223ac6e052359cd4f27fbe6" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;BCType,AMREX_SPACEDIM&gt; amrex::MLLinOp::LoBC</definition>
        <argsstring>(int icomp=0) const noexcept</argsstring>
        <name>LoBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="424" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac313a2de49bd67c23fad23d5c4045e70" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;BCType,AMREX_SPACEDIM&gt; amrex::MLLinOp::HiBC</definition>
        <argsstring>(int icomp=0) const noexcept</argsstring>
        <name>HiBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="429" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="429" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a4910f22e3c63b572ef364cdf8177e392" prot="protected" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::hasInhomogNeumannBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasInhomogNeumannBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="435" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="624" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a4b2636d8115debeeefa38b4b34186ecc" prot="protected" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::hasRobinBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasRobinBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="436" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="640" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a01c4cbbbf82530a8d3523d07ad3a9e9f" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::supportRobinBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>supportRobinBC</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a9d739e672638ca44112f3c6729ffc23e">supportRobinBC</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="438" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="438" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a638713cd5f8bf8cb703eca1ed94da5dc" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::supportInhomogNeumannBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>supportInhomogNeumannBC</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1ade6948bc20dfcd07ac886cee8b072c9b">supportInhomogNeumannBC</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="439" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="439" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::isBottomActive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isBottomActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="444" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="444" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::BottomCommunicator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>BottomCommunicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="446" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="446" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::Communicator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Communicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="447" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="447" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setCoarseFineBCLocation</definition>
        <argsstring>(const RealVect &amp;cloc) noexcept</argsstring>
        <name>setCoarseFineBCLocation</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>cloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="449" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="449" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::doAgglomeration</definition>
        <argsstring>() const noexcept</argsstring>
        <name>doAgglomeration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="451" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="451" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::doConsolidation</definition>
        <argsstring>() const noexcept</argsstring>
        <name>doConsolidation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="452" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="452" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::doSemicoarsening</definition>
        <argsstring>() const noexcept</argsstring>
        <name>doSemicoarsening</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="453" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="453" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::isCellCentered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isCellCentered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="455" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="455" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af653a69980f01d30f178caede72b3843" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::make</definition>
        <argsstring>(Vector&lt; Vector&lt; Any &gt; &gt; &amp;mf, IntVect const &amp;ng) const</argsstring>
        <name>make</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &gt; &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="457" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="549" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac31926ba837b440475e0715a8fa4b87b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt;</type>
        <definition>virtual std::unique_ptr&lt;FabFactory&lt;FArrayBox&gt; &gt; amrex::MLLinOp::makeFactory</definition>
        <argsstring>(int, int) const</argsstring>
        <name>makeFactory</name>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a95879abefc0ff8610b6534d919892a1a">makeFactory</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="459" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="459" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae80c21d0f29e6878cf478dfeef8dd4f2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::resizeMultiGrid</definition>
        <argsstring>(int new_size)</argsstring>
        <name>resizeMultiGrid</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1abe8255742bf5756e6659344cfa6ef5c4">resizeMultiGrid</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1ae30f379cc649f0136c1da5771e1f5ae4">resizeMultiGrid</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="463" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="883" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a6d7b1e0e21fd61d71bbe342df0f1a5d4" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::hasHiddenDimension</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasHiddenDimension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="465" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="465" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af0793198f529f4474139fa9366b2e1aa" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOp::hiddenDirection</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hiddenDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="466" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="466" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af37726771c106055867bf88ade1f65d7" prot="protected" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MLLinOp::compactify</definition>
        <argsstring>(Box const &amp;b) const noexcept</argsstring>
        <name>compactify</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="467" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="862" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae3dae2320c8c9e64274e8d41131187dc" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>Array4&lt;T&gt; amrex::MLLinOp::compactify</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) const noexcept</argsstring>
        <name>compactify</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="470" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="470" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa429808b0b8d8a9efcf3380620f6263a" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::MLLinOp::get_d0</definition>
        <argsstring>(T const &amp;dx, T const &amp;dy, T const &amp;) const noexcept</argsstring>
        <name>get_d0</name>
        <param>
          <type>T const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>T const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="484" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="484" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad16cb6cbf7bcb78cc0d0af59611ae00a" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::MLLinOp::get_d1</definition>
        <argsstring>(T const &amp;, T const &amp;dy, T const &amp;dz) const noexcept</argsstring>
        <name>get_d1</name>
        <param>
          <type>T const &amp;</type>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>dz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="494" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="494" bodyend="501"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::defineGrids</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory)</argsstring>
        <name>defineGrids</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="505" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="176" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae772fff45d8190c7c2c694931858b834" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::defineAuxData</definition>
        <argsstring>()</argsstring>
        <name>defineAuxData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="509" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="538" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a9288d1d0123d4e3d8097fd568a706a15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::defineBC</definition>
        <argsstring>()</argsstring>
        <name>defineBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="510" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="543" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::makeSubCommunicator</definition>
        <argsstring>(const DistributionMapping &amp;dm)</argsstring>
        <name>makeSubCommunicator</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="514" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="671" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::remapNeighborhoods</definition>
        <argsstring>(Vector&lt; DistributionMapping &gt; &amp;dms)</argsstring>
        <name>remapNeighborhoods</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="515" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="820" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a91cf65a68d76e83272098df8829e0dca" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::checkPoint</definition>
        <argsstring>(std::string const &amp;) const</argsstring>
        <name>checkPoint</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1ad798a370022ba9766ddc8423c8c3cdf6">checkPoint</reimplementedby>
        <param>
          <type>std::string const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="517" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="517" bodyend="519"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::makeAgglomeratedDMap</definition>
        <argsstring>(const Vector&lt; BoxArray &gt; &amp;ba, Vector&lt; DistributionMapping &gt; &amp;dm)</argsstring>
        <name>makeAgglomeratedDMap</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="511" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="738" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::makeConsolidatedDMap</definition>
        <argsstring>(const Vector&lt; BoxArray &gt; &amp;ba, Vector&lt; DistributionMapping &gt; &amp;dm, int ratio, int strategy)</argsstring>
        <name>makeConsolidatedDMap</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="512" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="766" bodyend="817"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::MLALaplacian</label>
        <link refid="classamrex_1_1MLALaplacian"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::MLPoisson</label>
        <link refid="classamrex_1_1MLPoisson"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::MLEBNodeFDLaplacian</label>
        <link refid="classamrex_1_1MLEBNodeFDLaplacian"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex_temp::MLLinOpTemp</label>
        <link refid="classamrex__temp_1_1MLLinOpTemp"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::MLNodeTensorLaplacian</label>
        <link refid="classamrex_1_1MLNodeTensorLaplacian"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacian"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="12">
        <label>amrex::MLNodeLaplacian</label>
        <link refid="classamrex_1_1MLNodeLaplacian"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="56">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="38" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="59">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="24">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="18" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
      </node>
      <node id="45">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="27" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>K</label>
      </node>
      <node id="25">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="9">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="9" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>T</label>
      </node>
      <node id="62">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
      </node>
      <node id="7">
        <label>Real</label>
      </node>
      <node id="3">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="57">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="58" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="59" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="43" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="29">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="9" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="20" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>std::unique_ptr&lt; amrex::MLLinOp::CommContainer &gt;</label>
      </node>
      <node id="23">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="20">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="21" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="55" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="6" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="46">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="49" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="38" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="9" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
      </node>
      <node id="49">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="33">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="34" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="70">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="21">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="34">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="35" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="43">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="40">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="41" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="28" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="51">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
      </node>
      <node id="10">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="55">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="56" relation="public-inheritance">
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="29" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="38">
        <label>std::string</label>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="81" bodyend="520"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a798b4eaeb4638b01352daba1ce7a5e44" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyAdd</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19f2a99b89fdb222ff2c006c3e623625" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>AnyAverageDownAndSync</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7053d4e8db13b9bc6aa1505228e42b82" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyAverageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1abea292e743cd597afb9543a76261990b" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>AnyAvgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1afbe1037430dd65ce6f5f90ff47fa3abf" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyAvgDownResMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0bcab258419204e22344e10166971f25" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyCopy</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0a60ca7809271135f39ea4294f3890ca" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyCorrectionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca0a26169b857efbc1bd1e424e787886" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyGrowVect</name></member>
      <member refid="classamrex_1_1MLLinOp_1aebb9d5705330c057bdb1bd8800a6f430" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyInterpAssignMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0a74a280b8321de86dbf25297ed95ef" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>AnyInterpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1adbdf9aaf1ccc800c62487b24f336b502" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyInterpolationMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad40e38b311ffc4f58f39b1ada8619294" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyMake</name></member>
      <member refid="classamrex_1_1MLLinOp_1a768ff0c44cdf30e07b0c9ddb0a30ffef" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyMakeAlias</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9f7fcc41c14f77079d509e5eb85cbfe9" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyMakeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4e8d808ba57a2331615f1e256cf85e4e" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyMakeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a47701945960629a5fab242da32add560" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyNormInf</name></member>
      <member refid="classamrex_1_1MLLinOp_1a64f4ec813a013e966d0d9d8fb87cdbb5" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>AnyNormInfMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1acfd9e2b3acdcd9494d321c020b6ce98f" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyParallelCopy</name></member>
      <member refid="classamrex_1_1MLLinOp_1a316bc42d433c2d77a6110ac5632324f6" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyReflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae135c931d3ceb31f1d21f06253e73658" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnyRestriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad28403dda85895d123abdaf36365cf29" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnySetBndryToZero</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8cd14b1829a52c3f9eedfc975274242d" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnySetToZero</name></member>
      <member refid="classamrex_1_1MLLinOp_1af6f520cd860d3be048f5bf04a219aa85" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnySmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1acd3c616a0a54d9367a924b3779108f8b" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>AnySolutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a268158a66466e7fec51ef1240689b687" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6f31b79968da09d7a713f6581fe8e3dd" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8e31761ce1106732dd8db8e72894d1bd" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a15c57a1dbcd04052f52b9ca0701d603d" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9b5321e037b2534811f295b767c58398" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a91cf65a68d76e83272098df8829e0dca" prot="private" virt="virtual"><scope>amrex::MLLinOp</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1af37726771c106055867bf88ade1f65d7" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae3dae2320c8c9e64274e8d41131187dc" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dfae9fa431aefebde79a4d5aff2ac5e" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab6f46c05df22dbda4d2da6e198f98344" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLLinOp_1aff1b5ba7a45c7e320550f99f88984301" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1cc4a740107bec84bb7bac80b4a34f53" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa0ba245918a01db26fdc8289b4e4ed29" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae772fff45d8190c7c2c694931858b834" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9288d1d0123d4e3d8097fd568a706a15" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9437bf41a67df3f776428c41f284a022" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa429808b0b8d8a9efcf3380620f6263a" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad16cb6cbf7bcb78cc0d0af59611ae00a" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a16bfe483ac9088f65f81d12166adecb4" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac495d1d722cbb68c31af46b2e860fa9f" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a525b102eb592e2b44a864c62e64e9566" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1aea3bbedd2e663d88f153e88ce06a59c3" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOp_1a21d5ab7f7712cf681083ed6763399132" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d7b1e0e21fd61d71bbe342df0f1a5d4" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4910f22e3c63b572ef364cdf8177e392" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4b2636d8115debeeefa38b4b34186ecc" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac313a2de49bd67c23fad23d5c4045e70" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af0793198f529f4474139fa9366b2e1aa" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac055c06cab956b521c8b66bed595ef79" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLLinOp_1a250ef9650a08f752045410345cd3a408" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae5110978eac9ec01689bec96866ad8d5" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLLinOp_1af8de1257ddde2a40a49011ef34d68100" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLLinOp_1abdb84e18739d3e95d406166acb56a9a3" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7ef6c8434223ac6e052359cd4f27fbe6" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a94066c5e255464485d5af0d1f174e1c2" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec9b82494ef69731d10e9b293b64fdd8" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1af653a69980f01d30f178caede72b3843" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac31926ba837b440475e0715a8fa4b87b" prot="protected" virt="virtual"><scope>amrex::MLLinOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ce310367908f9f10842859e92c5fd3d" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a63aaab910ae5e9c6bd653804eb1c8148" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MFNormInf</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1ada5e4315ec415d41c21e9e092d0dd478" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6b8679aecd5dee44bee1b262c40e8f8f" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLPoisson</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a210b4c125747c6a4a6f171dcff941579" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a86207e36440100ba012296cb95b51713" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aea26a4fe6d5a15d23a347501c6be1c71" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab1f098dbddd9ad2068278fc3a51a7b56" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>remapNeighborhoods</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae80c21d0f29e6878cf478dfeef8dd4f2" prot="protected" virt="virtual"><scope>amrex::MLLinOp</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLLinOp_1afd006e1aba81687f29e30e7a26bcba04" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1af32f494664d6666bdd94d92998f4b5f0" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a04008d16768c19836e3ea78add024630" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLLinOp_1af39026c5bf9ff3a7826a8804526ba9a9" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a10c2c2bf1622b6359e830155d7b5352c" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1a638713cd5f8bf8cb703eca1ed94da5dc" prot="protected" virt="virtual"><scope>amrex::MLLinOp</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9d05943073d4f01c9a6d03c2ec9f0602" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1a01c4cbbbf82530a8d3523d07ad3a9e9f" prot="protected" virt="virtual"><scope>amrex::MLLinOp</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af73a5461ea6c841bc1293a1c0a9d91a3" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a806af8f6ea146fdf513e1cc82305c822" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLLinOp_1adeb9c046c943c797ebe796a72ad0c895" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>~MLLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
