<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1MLLinOp" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::MLLinOp</compoundname>
    <derivedcompoundref refid="classamrex_1_1MLCellLinOp" prot="public" virt="non-virtual">amrex::MLCellLinOp</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1MLNodeLinOp" prot="public" virt="non-virtual">amrex::MLNodeLinOp</derivedcompoundref>
    <includes refid="AMReX__MLLinOp_8H" local="no">AMReX_MLLinOp.H</includes>
    <innerclass refid="structamrex_1_1MLLinOp_1_1CommContainer" prot="protected">amrex::MLLinOp::CommContainer</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" static="no">
        <name>BCMode</name>
        <enumvalue id="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884a548465e8241b26162c8e0a7b0cdfc5e7" prot="public">
          <name>Homogeneous</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884ae9990b3a39151b6f2175caa7621e0c4b" prot="public">
          <name>Inhomogeneous</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" static="no">
        <name>StateMode</name>
        <enumvalue id="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3a49b21ad0d38942f635877e7bbc5d7a1e" prot="public">
          <name>Solution</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3a8e42c4bdb2369a1c5b19f6f120737334" prot="public">
          <name>Correction</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" static="no">
        <name>Location</name>
        <enumvalue id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3ad1a130e88790663b2124d7dbd3e9f81e" prot="public">
          <name>FaceCenter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3a91efbc33209256821c57a53ef9ddbc51" prot="public">
          <name>FaceCentroid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3af5c101b5f19e97166e7531ffa1c706c4" prot="public">
          <name>CellCenter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3a7dfdce1e88bc91f46ae0d30f856f7ca9" prot="public">
          <name>CellCentroid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" static="no">
        <type>LinOpBCType</type>
        <definition>using amrex::MLLinOp::BCType =  LinOpBCType</definition>
        <argsstring></argsstring>
        <name>BCType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1MLLinOp_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLMG</definition>
        <argsstring></argsstring>
        <name>MLMG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOp_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLCGSolver</definition>
        <argsstring></argsstring>
        <name>MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOp_1a6b8679aecd5dee44bee1b262c40e8f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLPoisson</definition>
        <argsstring></argsstring>
        <name>MLPoisson</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOp_1ada5e4315ec415d41c21e9e092d0dd478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLABecLaplacian</definition>
        <argsstring></argsstring>
        <name>MLABecLaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::MLLinOp::mg_coarsen_ratio</definition>
        <argsstring></argsstring>
        <name>mg_coarsen_ratio</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="226" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::MLLinOp::mg_box_min_width</definition>
        <argsstring></argsstring>
        <name>mg_box_min_width</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="227" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::MLLinOp::mg_domain_min_width</definition>
        <argsstring></argsstring>
        <name>mg_domain_min_width</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref></type>
        <definition>LPInfo amrex::MLLinOp::info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MLLinOp::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="236" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MLLinOp::maxorder</definition>
        <argsstring></argsstring>
        <name>maxorder</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MLLinOp::m_num_amr_levels</definition>
        <argsstring></argsstring>
        <name>m_num_amr_levels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="240" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOp::m_amr_ref_ratio</definition>
        <argsstring></argsstring>
        <name>m_amr_ref_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOp::m_num_mg_levels</definition>
        <argsstring></argsstring>
        <name>m_num_mg_levels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="243" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> *</type>
        <definition>const MLLinOp* amrex::MLLinOp::m_parent</definition>
        <argsstring></argsstring>
        <name>m_parent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="244" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MLLinOp::m_ixtype</definition>
        <argsstring></argsstring>
        <name>m_ixtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="246" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::m_do_agglomeration</definition>
        <argsstring></argsstring>
        <name>m_do_agglomeration</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="248" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::m_do_consolidation</definition>
        <argsstring></argsstring>
        <name>m_do_consolidation</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="249" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Geometry&gt; &gt; amrex::MLLinOp::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
<para>first <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> is for amr level and second is mg level </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="253" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;BoxArray&gt; &gt; amrex::MLLinOp::m_grids</definition>
        <argsstring></argsstring>
        <name>m_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="254" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;DistributionMapping&gt; &gt; amrex::MLLinOp::m_dmap</definition>
        <argsstring></argsstring>
        <name>m_dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;FabFactory&lt;FArrayBox&gt; &gt; &gt; &gt; amrex::MLLinOp::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="256" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOp::m_domain_covered</definition>
        <argsstring></argsstring>
        <name>m_domain_covered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="257" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::m_default_comm</definition>
        <argsstring></argsstring>
        <name>m_default_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="259" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::m_bottom_comm</definition>
        <argsstring></argsstring>
        <name>m_bottom_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="260" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1MLLinOp_1_1CommContainer" kindref="compound">CommContainer</ref> &gt;</type>
        <definition>std::unique_ptr&lt;CommContainer&gt; amrex::MLLinOp::m_raii_comm</definition>
        <argsstring></argsstring>
        <name>m_raii_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOp::m_lobc</definition>
        <argsstring></argsstring>
        <name>m_lobc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOp::m_hibc</definition>
        <argsstring></argsstring>
        <name>m_hibc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="278" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;Real, AMREX_SPACEDIM&gt; amrex::MLLinOp::m_domain_bloc_lo</definition>
        <argsstring></argsstring>
        <name>m_domain_bloc_lo</name>
        <initializer>{{<ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(0.,0.,0.)}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="280" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;Real, AMREX_SPACEDIM&gt; amrex::MLLinOp::m_domain_bloc_hi</definition>
        <argsstring></argsstring>
        <name>m_domain_bloc_hi</name>
        <initializer>{{<ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(0.,0.,0.)}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="281" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::m_needs_coarse_data_for_bc</definition>
        <argsstring></argsstring>
        <name>m_needs_coarse_data_for_bc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MLLinOp::m_coarse_data_crse_ratio</definition>
        <argsstring></argsstring>
        <name>m_coarse_data_crse_ratio</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="284" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::MLLinOp::m_coarse_bc_loc</definition>
        <argsstring></argsstring>
        <name>m_coarse_bc_loc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="285" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        <definition>const MultiFab* amrex::MLLinOp::m_coarse_data_for_bc</definition>
        <argsstring></argsstring>
        <name>m_coarse_data_for_bc</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="286" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="91" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="110" bodyend="119"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOp::MLLinOp</definition>
        <argsstring>()</argsstring>
        <name>MLLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLLinOp::~MLLinOp</definition>
        <argsstring>()</argsstring>
        <name>~MLLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOp::MLLinOp</definition>
        <argsstring>(const MLLinOp &amp;)=delete</argsstring>
        <name>MLLinOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOp::MLLinOp</definition>
        <argsstring>(MLLinOp &amp;&amp;)=delete</argsstring>
        <name>MLLinOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        <definition>MLLinOp&amp; amrex::MLLinOp::operator=</definition>
        <argsstring>(const MLLinOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        <definition>MLLinOp&amp; amrex::MLLinOp::operator=</definition>
        <argsstring>(MLLinOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a139c75b19d7740ff6b78b390ab7996d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="126" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a9f6145ef119707fa7ce4fd43542d1c24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string amrex::MLLinOp::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1aec78f58fa749e98da726f5a64e91874a">name</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setDomainBC</definition>
        <argsstring>(const Array&lt; BCType, AMREX_SPACEDIM &gt; &amp;lobc, const Array&lt; BCType, AMREX_SPACEDIM &gt; &amp;hibc) noexcept</argsstring>
        <name>setDomainBC</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
<para>Boundary of the whole domain. This functions must be called, and must be called before other bc functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lobc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hibc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="462" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setDomainBC</definition>
        <argsstring>(const Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &amp;lobc, const Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &amp;hibc) noexcept</argsstring>
        <name>setDomainBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="483" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setDomainBCLoc</definition>
        <argsstring>(const Array&lt; Real, AMREX_SPACEDIM &gt; &amp;lo_bcloc, const Array&lt; Real, AMREX_SPACEDIM &gt; &amp;hi_bcloc) noexcept</argsstring>
        <name>setDomainBCLoc</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>lo_bcloc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>hi_bcloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="105" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="506" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::needsCoarseDataForBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>needsCoarseDataForBC</name>
        <briefdescription>
<para>Needs coarse data for bc? If the lowest level grids does not cover the entire domain, coarse level data are needed for supplying Dirichlet bc at coarse/fine boundary, even when the domain bc is not Dirichlet. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setCoarseFineBC</definition>
        <argsstring>(const MultiFab *crse, int crse_ratio) noexcept</argsstring>
        <name>setCoarseFineBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>crse_ratio</declname>
        </param>
        <briefdescription>
<para>If needs coarse data for bc, this should be called. <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> crse does not need to have ghost cells. The data are at coarse resolution. If this is called, it <emphasis>MUST</emphasis> be called before <computeroutput>setLevelBC</computeroutput>. If crse is nullptr, then bc value is assumed to be zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="127" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="514" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a52d97117bad0d48c8e73546e7092e7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::setLevelBC</definition>
        <argsstring>(int amrlev, const MultiFab *levelbcdata)=0</argsstring>
        <name>setLevelBC</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1aa3a81a04971b2edce1cb836ebaad4b87">setLevelBC</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a15e11c647b57a19a393a2ca6a323a85a">setLevelBC</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>levelbcdata</declname>
        </param>
        <briefdescription>
<para>Must be called for each level. Argument <computeroutput>levelbcdata</computeroutput> is used to supply Dirichlet bc at the physical domain. However, even if there is no Dirichlet bc, this funcion must still be called. In that case, argument <computeroutput>levelbcdata</computeroutput> will be ignored and thus could be nullptr. The supplied <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> must have one ghost cell. Only the data outside the physical domain at Dirichlet boundary will be used. It is assumed that the data in those ghost cells outside the domain live exactly on the face of the physical domain. Argument <computeroutput>amrlev</computeroutput> is relative level such that the lowest to the solver is always 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levelbcdata</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setVerbose</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="147" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setMaxOrder</definition>
        <argsstring>(int o) noexcept</argsstring>
        <name>setMaxOrder</name>
        <param>
          <type>int</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="149" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLLinOp::getMaxOrder</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getMaxOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="150" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a7c1c62615a265e25a92ce37b3b287933" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" kindref="member">BottomSolver</ref></type>
        <definition>virtual BottomSolver amrex::MLLinOp::getDefaultBottomSolver</definition>
        <argsstring>() const </argsstring>
        <name>getDefaultBottomSolver</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1af6d2be33c0d71092e0231e878c6b7cd9">getDefaultBottomSolver</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int amrex::MLLinOp::getNComp</definition>
        <argsstring>() const </argsstring>
        <name>getNComp</name>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1ad8e26be957c9fcae944341aeac82ed44">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ad0816a3544ac9068766ffa765185c96a">getNComp</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="153" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int amrex::MLLinOp::getNGrow</definition>
        <argsstring>() const </argsstring>
        <name>getNGrow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ab68d7b11273242e632c9f8a422c911d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::needsUpdate</definition>
        <argsstring>() const </argsstring>
        <name>needsUpdate</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1adb891ed98442838db52ab71e703ff752">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a0073d05770099d89c87a60e25ab3cc47">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1acf27ddd13356c7c675ec2527d8e80223">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a07b60f41a959afec82a27d5c356b9f7c">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1aff624fcffcf28c0cb516cfbc58a29247">needsUpdate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="156" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1aa107a7270bd64cf582e25812c5e5cbab">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a6de98ea7f86803972368acd05180431d">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a7e612906bd561e6b5db7ce47ea0e7d14">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a869e2f4f990e7cb411847fd27ad0daf4">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a92541ea02dfd6fbbe75711a57be748fd">update</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="157" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a5a1bffd08a85405f9a9fbeed7c20fd97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::restriction</definition>
        <argsstring>(int amrlev, int cmglev, MultiFab &amp;crse, MultiFab &amp;fine) const =0</argsstring>
        <name>restriction</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a049861a9a5c04611f13be0978ebb6232">restriction</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ab9c04dc81e8745dbed91a8865edcc3d2">restriction</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1aa95312f91d2baeeba018a231d162ad9a">restriction</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a55d585de64a0263a1b2308553cbaee13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MultiFab &amp;fine, const MultiFab &amp;crse) const =0</argsstring>
        <name>interpolation</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a44f3d04638b6cde86deb3520faafcac5">interpolation</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a4aa7488ae178be35bccf784f59799d8d">interpolation</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a0044458b3dd79241c2b74483b70cb7e7">interpolation</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a49e8248c4a3a27e8bfc77227bdfb433a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::averageDownSolutionRHS</definition>
        <argsstring>(int camrlev, MultiFab &amp;crse_sol, MultiFab &amp;crse_rhs, const MultiFab &amp;fine_sol, const MultiFab &amp;fine_rhs)=0</argsstring>
        <name>averageDownSolutionRHS</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a1f56925dec0934532aaaf4dd1c6c7c42">averageDownSolutionRHS</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a928e32d0caf9f0a8783cb120f4ec8135">averageDownSolutionRHS</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1adfefa1b34d6988c4bf97957616b61c8f">averageDownSolutionRHS</reimplementedby>
        <param>
          <type>int</type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a01cdaaf631b81b52be1ffaf606d8f9e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const =0</argsstring>
        <name>apply</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a668c3faa79d094f72e351a8ec1736fc2">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a8e392e42b5c238124145af83776d575a">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1aa7acec7ef41f148b92b54c9ee1c1faf0">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a41724f08da04298ded08c9e8d6e9bfc4">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a62ea55fae7824c00b3237cf57616dd1d">apply</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1acf3d13b45072c825f835b9b9a536e774" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::smooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rhs, bool skip_fillboundary=false) const =0</argsstring>
        <name>smooth</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a049936d38ba7f07adcf9c435849bca64">smooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a5a8012e233f7f198d99be52e18a30f1a">smooth</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a3e0f34318790ba3e087ecf8b870dd12f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::normalize</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const </argsstring>
        <name>normalize</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1aa31608deee2579be5cb3e852b7923c6c">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a19eb818cfea5a5c0e249977f29edad10">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1ad06bbe924dd6379bb53f3da68c8e28d6">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a37d0b9fecc4417af93082a652676c9bf">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1aae5e2a5876ca539035a6cee8fa025c29">normalize</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="170" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a37cdc5b58be54be165fee5cc26a5f5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::solutionResidual</definition>
        <argsstring>(int amrlev, MultiFab &amp;resid, MultiFab &amp;x, const MultiFab &amp;b, const MultiFab *crse_bcdata=nullptr)=0</argsstring>
        <name>solutionResidual</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a9577a87ff76e6c9406e3cbe716d26746">solutionResidual</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345">solutionResidual</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a824432661ed84da479fefccbf118f6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::correctionResidual</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;resid, MultiFab &amp;x, const MultiFab &amp;b, BCMode bc_mode, const MultiFab *crse_bcdata=nullptr)=0</argsstring>
        <name>correctionResidual</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a2018b943fdab7019461dc9580b04177c">correctionResidual</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1ac3037ce3c60a5c1a0ccb07dc5ab67197">correctionResidual</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::reflux</definition>
        <argsstring>(int crse_amrlev, MultiFab &amp;res, const MultiFab &amp;crse_sol, const MultiFab &amp;crse_rhs, MultiFab &amp;fine_res, MultiFab &amp;fine_sol, const MultiFab &amp;fine_rhs) const =0</argsstring>
        <name>reflux</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1aa16d5801347ae1d56216e72cbe4da5ae">reflux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a30135624482a762f12f6e66a5b3b10ce">reflux</reimplementedby>
        <param>
          <type>int</type>
          <declname>crse_amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_res</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a5e7404bd72d5372194a5012f9783fd6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const =0</argsstring>
        <name>compFlux</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1afe48a02e5be6dd3beac70271de7a02da">compFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a7537000b838b1009188ad927ce91616c">compFlux</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa811fc7672cda86a04b37b7a36380823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::compGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;grad, MultiFab &amp;sol, Location loc) const =0</argsstring>
        <name>compGrad</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a264af834600d85a8773131c87ccfeb1b">compGrad</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ad0297fb6eb4f835e9ea6f964103a8258">compGrad</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1aead98967987fb3826008fc69f3270247">compGrad</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a1097a30ac7246a9ef37ab71e8281a8c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::applyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;rhs) const =0</argsstring>
        <name>applyMetricTerm</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a7e5c287fd5bd6078ccc3afc7e18fd69a">applyMetricTerm</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1af750016d817d62fec79c71777ec48b36">applyMetricTerm</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a3493bb63b041a05c4f4f6de28df1b37e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::unapplyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;rhs) const =0</argsstring>
        <name>unapplyMetricTerm</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a700bdd6e43250739cc3f571b94b81688">unapplyMetricTerm</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1ac54e10e50b8b0a19c1424d5a7c311003">unapplyMetricTerm</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a93fed17bd53a16d98faaa1c8a6a6e401" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::fillSolutionBC</definition>
        <argsstring>(int amrlev, MultiFab &amp;sol, const MultiFab *crse_bcdata=nullptr)=0</argsstring>
        <name>fillSolutionBC</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1af31692542848e1defea74b813d801a81">fillSolutionBC</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1af360736b1a452aa605ea48a8b2489615">fillSolutionBC</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::prepareForSolve</definition>
        <argsstring>()=0</argsstring>
        <name>prepareForSolve</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1a7d6d2646e9f6afaf7ed70bf0c86fa762">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1ae640f7b961f96991b1510f316e512cd5">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1ad0614934d429a1dec25baadcebf6b88c">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a627779ad059394a0bd2b3bede177e12a">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1ac604e9b47938e183cd38f8f9ad400668">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a6591c6b5827c394fe13e119f33ac3fbc">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ac5b58dbd133f156387504e220e53148b">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1ae2134173a1bd7b925000e8072a87082f">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a142ae4b8e4c68254e81516b5c8e00f4d">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa8d6ef9e77180f9076ef5cb83f48bb50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::isSingular</definition>
        <argsstring>(int amrlev) const =0</argsstring>
        <name>isSingular</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1a611416a6df32bc3c09b9adabe569b835">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1affef9d8dccfa1d80753639e5c44c33ae">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a4304750fa837f09df7c0d400b147fe2f">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1aaccfcd45ed23a3c9dc414d032b91e797">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1accc281e18237ce18823e3a1a00cbbf01">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ace14a326c022d10e53a664f6a86648b8">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a38f2c190f07653019e5f5a9a7d378f4b">isSingular</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa6ff4935f1246d7c94ac38dc65c25d7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOp::isBottomSingular</definition>
        <argsstring>() const =0</argsstring>
        <name>isBottomSingular</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1af931d27f11a0689a99f1e6802e03a647">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a3327d13677ab679ac755d53bf4b62c4d">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1aa0ead02bedca70191f223b455654b49b">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1aef4a818ac9d4702068c50ef6d8a330f4">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a74d6ab8dcd6375bed793437c83271aaa">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1afda17bcb311370e54715ed7069ac87df">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a87e37e53d1a9848d96020c9cb907b6f2">isBottomSingular</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a37371995331ab213ba93ed280b9c71ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLLinOp::xdoty</definition>
        <argsstring>(int amrlev, int mglev, const MultiFab &amp;x, const MultiFab &amp;y, bool local) const =0</argsstring>
        <name>xdoty</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1ab1e7a8ff6a4f712576a8eff0baef1772">xdoty</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOp_1a33b01ffee4faf80cdfbe14f6f7d8a6e9">xdoty</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a5137ff000c6f8940f4b07a28f3bf9375" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::fixUpResidualMask</definition>
        <argsstring>(int amrlev, iMultiFab &amp;resmsk)</argsstring>
        <name>fixUpResidualMask</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a1156c6a363950889ca5e456aed6187b7">fixUpResidualMask</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>resmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="194" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a92b49ce3cd6f8877018a284c9a05663b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::nodalSync</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const </argsstring>
        <name>nodalSync</name>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a0e91f952317f3b9bfb4c20bb68624e1b">nodalSync</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af7992c664d65948c99e3661e6d23a646" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt;MLLinOp&gt; amrex::MLLinOp::makeNLinOp</definition>
        <argsstring>(int grid_size) const =0</argsstring>
        <name>makeNLinOp</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1a891410ecae52b84ce7bd4177f3c645f8">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1aa9962b86dd603eb746f7a97793ea6e10">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1afdfa7bc321be610fd40835e6fdf9531f">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a5fffb41bbd6d2ee5cf4454e0e3768898">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ad8df3d453fa9c9ee0e4b565aa00ebe5f">makeNLinOp</reimplementedby>
        <param>
          <type>int</type>
          <declname>grid_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae6a653e83929e0f2c41482551c10b4e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::getFluxes</definition>
        <argsstring>(const Vector&lt; Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &gt; &amp;a_flux, const Vector&lt; MultiFab * &gt; &amp;a_sol, Location a_loc) const </argsstring>
        <name>getFluxes</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1a913212b62872ccbdfaf19880d8114073">getFluxes</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="199" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ad2419e6b4d384edbd5695daca078e310" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::getFluxes</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;a_flux, const Vector&lt; MultiFab * &gt; &amp;a_sol) const </argsstring>
        <name>getFluxes</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1ace1773b3f7fa41c2c6af25fae9c5de6b">getFluxes</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="204" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="204" bodyend="207"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLLinOp::NAMRLevels</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NAMRLevels</name>
        <briefdescription>
<para>functions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="291" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLLinOp::NMGLevels</definition>
        <argsstring>(int amrlev) const noexcept</argsstring>
        <name>NMGLevels</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
        <definition>const Vector&lt;int&gt;&amp; amrex::MLLinOp::AMRRefRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>AMRRefRatio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="293" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLLinOp::AMRRefRatio</definition>
        <argsstring>(int amr_lev) const noexcept</argsstring>
        <name>AMRRefRatio</name>
        <param>
          <type>int</type>
          <declname>amr_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="294" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::MLLinOp::Geom</definition>
        <argsstring>(int amr_lev, int mglev=0) const noexcept</argsstring>
        <name>Geom</name>
        <param>
          <type>int</type>
          <declname>amr_lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="296" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const *</type>
        <definition>FabFactory&lt;FArrayBox&gt; const* amrex::MLLinOp::Factory</definition>
        <argsstring>(int amr_lev, int mglev=0) const noexcept</argsstring>
        <name>Factory</name>
        <param>
          <type>int</type>
          <declname>amr_lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="297" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="297" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::isBottomActive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isBottomActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="304" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::BottomCommunicator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>BottomCommunicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="306" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae56dfc1030a8066132a2cb67334b1aaa" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::Communicator</definition>
        <argsstring>(int amrlev, int mglev) const noexcept</argsstring>
        <name>Communicator</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="307" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::setCoarseFineBCLocation</definition>
        <argsstring>(const RealVect &amp;cloc) noexcept</argsstring>
        <name>setCoarseFineBCLocation</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>cloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="315" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::doAgglomeration</definition>
        <argsstring>() const noexcept</argsstring>
        <name>doAgglomeration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="317" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="317" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::doConsolidation</definition>
        <argsstring>() const noexcept</argsstring>
        <name>doConsolidation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="318" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOp::isCellCentered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isCellCentered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="320" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a6249249666804079176507b88626a72c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::make</definition>
        <argsstring>(Vector&lt; Vector&lt; MultiFab &gt; &gt; &amp;mf, int nc, int ng) const </argsstring>
        <name>make</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="322" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="446" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1af58f71c827253ca415f218f6cf77f1fb" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt;</type>
        <definition>virtual std::unique_ptr&lt;FabFactory&lt;FArrayBox&gt; &gt; amrex::MLLinOp::makeFactory</definition>
        <argsstring>(int amrlev, int mglev) const </argsstring>
        <name>makeFactory</name>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a25b9af37f43b13e0f16e0091673b6fba">makeFactory</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="324" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="324" bodyend="326"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::defineGrids</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory)</argsstring>
        <name>defineGrids</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="330" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="154" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1ae772fff45d8190c7c2c694931858b834" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::defineAuxData</definition>
        <argsstring>()</argsstring>
        <name>defineAuxData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="334" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="435" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a9288d1d0123d4e3d8097fd568a706a15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::defineBC</definition>
        <argsstring>()</argsstring>
        <name>defineBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="335" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="440" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOp::makeSubCommunicator</definition>
        <argsstring>(const DistributionMapping &amp;dm)</argsstring>
        <name>makeSubCommunicator</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="339" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="521" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::remapNeighborhoods</definition>
        <argsstring>(Vector&lt; DistributionMapping &gt; &amp;dms)</argsstring>
        <name>remapNeighborhoods</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="340" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="669" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a19f8f18b021a5b9caf959de14247bd92" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOp::checkPoint</definition>
        <argsstring>(std::string const &amp;file_name) const </argsstring>
        <name>checkPoint</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1ad798a370022ba9766ddc8423c8c3cdf6">checkPoint</reimplementedby>
        <param>
          <type>std::string const &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="342" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="342" bodyend="344"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::makeAgglomeratedDMap</definition>
        <argsstring>(const Vector&lt; BoxArray &gt; &amp;ba, Vector&lt; DistributionMapping &gt; &amp;dm)</argsstring>
        <name>makeAgglomeratedDMap</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="336" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="587" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOp::makeConsolidatedDMap</definition>
        <argsstring>(const Vector&lt; BoxArray &gt; &amp;ba, Vector&lt; DistributionMapping &gt; &amp;dm, int ratio, int strategy)</argsstring>
        <name>makeConsolidatedDMap</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="337" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.cpp" bodystart="615" bodyend="666"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4785">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="4784" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4788">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="4787" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4786">
        <label>amrex::MLALaplacian</label>
        <link refid="classamrex_1_1MLALaplacian"/>
        <childnode refid="4783" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4789">
        <label>amrex::MLPoisson</label>
        <link refid="classamrex_1_1MLPoisson"/>
        <childnode refid="4783" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4784">
        <label>amrex::MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacian"/>
        <childnode refid="4783" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4790">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="4781" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4787">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="4783" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4781">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="4791">
        <label>amrex::MLNodeLaplacian</label>
        <link refid="classamrex_1_1MLNodeLaplacian"/>
        <childnode refid="4790" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4783">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4782" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4782">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="4781" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4823">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="4805">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="4806" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="4808">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="4801">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4801" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4798">
        <label>Real</label>
      </node>
      <node id="4824">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4825" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4830">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="4818">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="4799">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4800" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4800">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="4809">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4810" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4806">
        <label>string</label>
      </node>
      <node id="4826">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="4801" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="4820">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="4819">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4820" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4793">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4794" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4796">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="4821">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="4795">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4796" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4797">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="4797" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="4798" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="4827">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4828" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4825">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="4810">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="4815">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="4801" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="4816" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="4792">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="4793" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="4795" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="4797" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="4799" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="4801" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="4802" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="4809" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="4827" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="4829" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc</edgelabel>
        </childnode>
        <childnode refid="4792" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="4831" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="4829">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4830" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4813">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="4814" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="4822">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4823" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4831">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="4816">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="4814">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="4809" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="4817">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4818" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4807">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="4811">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="4812" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="4813" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="4802">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="4803" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4803">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="4804" relation="public-inheritance">
        </childnode>
        <childnode refid="4801" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="4809" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="4817" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="4819" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="4821" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="4822" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="4824" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="4826" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="4812">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="4804">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4805" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="4807" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="4801" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="4808" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="4809" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="4811" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="4815" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="4828">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="4794">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="50" bodyend="345"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a01cdaaf631b81b52be1ffaf606d8f9e1" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1097a30ac7246a9ef37ab71e8281a8c9" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a49e8248c4a3a27e8bfc77227bdfb433a" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19f8f18b021a5b9caf959de14247bd92" prot="private" virt="virtual"><scope>amrex::MLLinOp</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae56dfc1030a8066132a2cb67334b1aaa" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5e7404bd72d5372194a5012f9783fd6c" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa811fc7672cda86a04b37b7a36380823" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLLinOp_1a824432661ed84da479fefccbf118f6fe" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a139c75b19d7740ff6b78b390ab7996d0" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae772fff45d8190c7c2c694931858b834" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9288d1d0123d4e3d8097fd568a706a15" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1a93fed17bd53a16d98faaa1c8a6a6e401" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5137ff000c6f8940f4b07a28f3bf9375" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7c1c62615a265e25a92ce37b3b287933" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae6a653e83929e0f2c41482551c10b4e8" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad2419e6b4d384edbd5695daca078e310" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLLinOp_1a55d585de64a0263a1b2308553cbaee13" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa6ff4935f1246d7c94ac38dc65c25d7d" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa8d6ef9e77180f9076ef5cb83f48bb50" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6249249666804079176507b88626a72c" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1af58f71c827253ca415f218f6cf77f1fb" prot="protected" virt="virtual"><scope>amrex::MLLinOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLLinOp_1af7992c664d65948c99e3661e6d23a646" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1ada5e4315ec415d41c21e9e092d0dd478" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6b8679aecd5dee44bee1b262c40e8f8f" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>MLPoisson</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9f6145ef119707fa7ce4fd43542d1c24" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab68d7b11273242e632c9f8a422c911d7" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a92b49ce3cd6f8877018a284c9a05663b" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3e0f34318790ba3e087ecf8b870dd12f" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>remapNeighborhoods</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5a1bffd08a85405f9a9fbeed7c20fd97" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a52d97117bad0d48c8e73546e7092e7dc" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLLinOp_1acf3d13b45072c825f835b9b9a536e774" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a37cdc5b58be54be165fee5cc26a5f5e1" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3493bb63b041a05c4f4f6de28df1b37e" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLLinOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLLinOp_1a37371995331ab213ba93ed280b9c71ed" prot="public" virt="pure-virtual"><scope>amrex::MLLinOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLLinOp</scope><name>~MLLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
