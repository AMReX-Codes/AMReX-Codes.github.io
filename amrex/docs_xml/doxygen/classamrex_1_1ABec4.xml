<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1ABec4" kind="class" language="C++" prot="public">
    <compoundname>amrex::ABec4</compoundname>
    <basecompoundref refid="classamrex_1_1LinOp" prot="public" virt="non-virtual">amrex::LinOp</basecompoundref>
    <includes refid="AMReX__ABec4_8H" local="no">AMReX_ABec4.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1ABec4_1a49ff7d2a8cc866928d9b43a6bb248bde" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::ABec4::resL</definition>
        <argsstring></argsstring>
        <name>resL</name>
        <briefdescription>
<para>A temporary needed for relaxations at mg level = 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="266" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1a84b32e79b057d67ebb05ced2c2892a1f" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ABec2" kindref="compound">ABec2</ref> *</type>
        <definition>ABec2* amrex::ABec4::LO_Op</definition>
        <argsstring></argsstring>
        <name>LO_Op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="318" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="318" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1ABec4_1afa7ef4d698cd7e905212b18d2dbaf784" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; MultiFab* &gt; amrex::ABec4::acoefs</definition>
        <argsstring></argsstring>
        <name>acoefs</name>
        <briefdescription>
<para>Array (on level) of &quot;a&quot; coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="323" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1ab93786ae188a018f70c924f64a934707" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; MultiFab* &gt; amrex::ABec4::bcoefs</definition>
        <argsstring></argsstring>
        <name>bcoefs</name>
        <briefdescription>
<para>Array (on level) of &quot;b&quot; coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="326" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1a113b6911ebbc42bb219b60fb8eb70323" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::ABec4::alpha</definition>
        <argsstring></argsstring>
        <name>alpha</name>
        <briefdescription>
<para>Scalar &quot;alpha&quot; coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="329" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1a406ab3a9c784755032693bda2f051103" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::ABec4::beta</definition>
        <argsstring></argsstring>
        <name>beta</name>
        <briefdescription>
<para>Scalar &quot;beta&quot; coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="332" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1ad6946df10d223ffded52ff8cb5baad34" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::ABec4::a_valid</definition>
        <argsstring></argsstring>
        <name>a_valid</name>
        <briefdescription>
<para>Flag, can a coeffs be trusted at a level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="335" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1af240e7d9ef36a76be5a3f6311da23412" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::ABec4::b_valid</definition>
        <argsstring></argsstring>
        <name>b_valid</name>
        <briefdescription>
<para>Flag, can b coeffs be trusted at a level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="338" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="338" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1ABec4_1ae04e25353c1dea93d93e92069a8b9723" prot="private" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::ABec4::a_def</definition>
        <argsstring></argsstring>
        <name>a_def</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>Default value for a (<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>) coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="341" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1af67bcb51813f4fef7c44affe69655023" prot="private" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::ABec4::b_def</definition>
        <argsstring></argsstring>
        <name>b_def</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
<para>Default value for b (<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>) coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="344" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1afc41f9f2cc9f503fa3758e18ea86bd9c" prot="private" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::ABec4::alpha_def</definition>
        <argsstring></argsstring>
        <name>alpha_def</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
<para>Default value for alpha (scalar) coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="347" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ABec4_1a07edccb3418583122a104acb07b8cd9b" prot="private" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::ABec4::beta_def</definition>
        <argsstring></argsstring>
        <name>beta_def</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
<para>Default value for beta (scalar) coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="350" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="350" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ABec4_1afc32fd958928b9bb5d48df0f7215e4ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ABec4::ABec4</definition>
        <argsstring>(const BndryData &amp;bd, const Real *_h)</argsstring>
        <name>ABec4</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>constructor for box array, boundary data and vector mesh spacing </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="16" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a152bfa647897c665d9f04320854ce000" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::ABec4::~ABec4</definition>
        <argsstring>()</argsstring>
        <name>~ABec4</name>
        <briefdescription>
<para>destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="80" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a52d7a01a4cce9b4045b3214b2ce3e07b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::compFlux</definition>
        <argsstring>(AMREX_D_DECL(MultiFab &amp;xflux, MultiFab &amp;yflux, MultiFab &amp;zflux), MultiFab &amp;in, const BC_Mode &amp;bc_mode=LinOp::Inhomogeneous_BC, int src_comp=0, int dst_comp=0, int num_comp=1, int bnd_comp=0)</argsstring>
        <name>compFlux</name>
        <reimplements refid="classamrex_1_1LinOp_1a66f650936c7785e8958617b91e7ef2a6">compFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;xflux, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;yflux, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;zflux)</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">BC_Mode</ref> &amp;</type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dst_comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bnd_comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compute extensive (area-weighted) flux associated with the op. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xflux</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yflux</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zflux</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bnd_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="397" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a2e397fa215d47845aa5e3b8e83d0d426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::compFlux</definition>
        <argsstring>(AMREX_D_DECL(MultiFab &amp;xflux, MultiFab &amp;yflux, MultiFab &amp;zflux), MultiFab &amp;in, bool do_ApplyBC, const BC_Mode &amp;bc_mode=LinOp::Inhomogeneous_BC, int src_comp=0, int dst_comp=0, int num_comp=1, int bnd_comp=0)</argsstring>
        <name>compFlux</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;xflux, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;yflux, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;zflux)</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_ApplyBC</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">BC_Mode</ref> &amp;</type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dst_comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bnd_comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="405" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a7c71f90b13ae2df25e59d5b9006861e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::residual</definition>
        <argsstring>(MultiFab &amp;residL, const MultiFab &amp;rhsL, MultiFab &amp;solnL, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC, bool local=false)</argsstring>
        <name>residual</name>
        <reimplements refid="classamrex_1_1LinOp_1ab77a2e7e90d65073fccb8a54fd128177">residual</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>residL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute the residual. If level==0, use 4th order otherwise use lower order. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>residL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="601" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a9d3b23ff5d26e9e94a1a757c07ef1b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::smooth</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC)</argsstring>
        <name>smooth</name>
        <reimplements refid="classamrex_1_1LinOp_1a11f5dfbd38e5b5551dbcec9df469e11d">smooth</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <briefdescription>
<para>Smooth the level system L(solnL)=rhsL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="483" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1aee8ae235af57c533202b719b7d8e86dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::jacobi_smooth</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC)</argsstring>
        <name>jacobi_smooth</name>
        <reimplements refid="classamrex_1_1LinOp_1a81bae1e07a9908f6b677d1619d5eb4ee">jacobi_smooth</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="125" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="505" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1aa43b9218fb2965bb93e3c79150d81e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::apply</definition>
        <argsstring>(MultiFab &amp;out, MultiFab &amp;in, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC, bool local=false, int src_comp=0, int dst_comp=0, int num_comp=1, int bndry_comp=0)</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1LinOp_1ac5b9fd4b970fee2132c2ea0c5db97149">apply</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dst_comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bndry_comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Applies level <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> to &quot;in&quot;, returns &quot;out&quot;, uses BC_mode flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bndry_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="130" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="578" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a4859a1d04776ed7a1f8f379e75747db8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::setScalars</definition>
        <argsstring>(Real _alpha, Real _beta)</argsstring>
        <name>setScalars</name>
        <param>
          <type>Real</type>
          <declname>_alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>_beta</declname>
        </param>
        <briefdescription>
<para>Set scalar coefficients. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_alpha</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_beta</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1ac4ac8db1f5906ff6d432891a14e27ee3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::ABec4::get_alpha</definition>
        <argsstring>() const </argsstring>
        <name>get_alpha</name>
        <reimplements refid="classamrex_1_1LinOp_1a5823bb22e92e48ddbc13ceae382d0747">get_alpha</reimplements>
        <briefdescription>
<para>get scalar alpha coefficient </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="151" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1aa3cb2ce5caf5ce37d3d16868e9108f8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::ABec4::get_beta</definition>
        <argsstring>() const </argsstring>
        <name>get_beta</name>
        <reimplements refid="classamrex_1_1LinOp_1af245a02cfc92f3ddf30d6ace1c1683bb">get_beta</reimplements>
        <briefdescription>
<para>get scalar beta coefficient </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="156" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1aaa91c6f3d872a0382438ce0406441ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::ABec4::aCoefficients</definition>
        <argsstring>(int level=0)</argsstring>
        <name>aCoefficients</name>
        <reimplements refid="classamrex_1_1LinOp_1ac8d092273a44066329b73468fe885d2d">aCoefficients</reimplements>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>return reference to &quot;a&quot; coefficient </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="163" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="341" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a1b615d4e2686b0fe15664f12adb5f314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::ABec4::bCoefficients</definition>
        <argsstring>(int level=0)</argsstring>
        <name>bCoefficients</name>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>return reference to &quot;b&quot; coefficients </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="170" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="348" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1aa347c39b5b26605c718e69932904114c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::aCoefficients</definition>
        <argsstring>(const MultiFab &amp;_a)</argsstring>
        <name>aCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_a</declname>
        </param>
        <briefdescription>
<para>copy _a into &quot;a&quot; coeffs for base level </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="177" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="307" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a0c9f833c150951d8a88fd711f57a5dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::ZeroACoefficients</definition>
        <argsstring>()</argsstring>
        <name>ZeroACoefficients</name>
        <briefdescription>
<para>Zero out the &quot;a&quot; coeffs for base level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="182" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a20b28086cb2026735ea52d2cc803474e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::bCoefficients</definition>
        <argsstring>(const MultiFab &amp;_b)</argsstring>
        <name>bCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_b</declname>
        </param>
        <briefdescription>
<para>copy _b into &quot;b&quot; coeffs for base level </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="189" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="323" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a230f8f00ae08bb2c108b6fff1ae7e22b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::bCoefficients</definition>
        <argsstring>(const FArrayBox &amp;_b, int gridno)</argsstring>
        <name>bCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>_b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gridno</declname>
        </param>
        <briefdescription>
<para>copy _b into &quot;b&quot; coeffs for base level at supplied gridno </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gridno</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="197" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="332" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1af76e4448fb4cd3e1de010f66241952f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::setCoefficients</definition>
        <argsstring>(const MultiFab &amp;_a, const MultiFab &amp;_b)</argsstring>
        <name>setCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_b</declname>
        </param>
        <briefdescription>
<para>alternative (older) version of above members </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="206" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="355" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a59c652ddcb6d1c1d3255843ed415ca49" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::prepareForLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>prepareForLevel</name>
        <reimplements refid="classamrex_1_1LinOp_1a63537ed5b853907fc8a3b7adace5a383">prepareForLevel</reimplements>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>allocate/fill internal data for new level </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="214" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="274" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a4508fa8422aab37ac2e27b77fb0b4bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::clearToLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>clearToLevel</name>
        <reimplements refid="classamrex_1_1LinOp_1a4d4e5333f7d48ad27505ca77110d3e3a">clearToLevel</reimplements>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>remove internal data for this level and all levels above </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="221" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="255" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a1050d6f06b963126a578609fd5b86b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::invalidate_a_to_level</definition>
        <argsstring>(int lev)</argsstring>
        <name>invalidate_a_to_level</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>set flags so that a coeffs at lev and coarser require recalculation </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="228" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="377" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1ab26af2267abaaff2d227dc5ebf99a831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::invalidate_b_to_level</definition>
        <argsstring>(int lev)</argsstring>
        <name>invalidate_b_to_level</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>set flags so that b coeffs at lev and coarser require recalculation </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="387" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a7ee1aebd0c0065d57d802a5f62174e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::ABec4::norm</definition>
        <argsstring>(int nm=0, int level=0, const bool local=false)</argsstring>
        <name>norm</name>
        <reimplements refid="classamrex_1_1LinOp_1a187358833ef9bd25a218c2fd0ac499c5">norm</reimplements>
        <param>
          <type>int</type>
          <declname>nm</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Estimate the norm of the operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="237" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a009633468429627f9a24413d24361400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int amrex::ABec4::NumGrow</definition>
        <argsstring>(int level=0) const </argsstring>
        <name>NumGrow</name>
        <reimplements refid="classamrex_1_1LinOp_1a8489bd97fdad9c4de15a5610a38f0652">NumGrow</reimplements>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the number of grow cells this operator expects in the input state to compute &quot;apply&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="239" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="44" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1aeddfbd519c0af2fc240e64846b19df67" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::applyBC</definition>
        <argsstring>(MultiFab &amp;inout, int src_comp, int num_comp, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC, bool local=false, int bndryComp=0)</argsstring>
        <name>applyBC</name>
        <reimplements refid="classamrex_1_1LinOp_1a7bb88ff651d23b6908c7b2bceaa34b0e">applyBC</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>inout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bndryComp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Fills level boundary cells using BC_mode flag, int. BC data if reqd. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inout</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bndryComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="79" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a0a0c48d9fc31bc66bd5ba2b4e360e8ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int amrex::ABec4::numLevels</definition>
        <argsstring>() const </argsstring>
        <name>numLevels</name>
        <reimplements refid="classamrex_1_1LinOp_1a9d552129ce2624a83a6ba56ead0f4d87">numLevels</reimplements>
        <briefdescription>
<para>Return the number of levels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="249" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a917c979cf538ff2bb160764d6a81a4e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int amrex::ABec4::numLevelsHO</definition>
        <argsstring>() const </argsstring>
        <name>numLevelsHO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="250" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a3f788634a59b47732b149cdb4084fabb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::ABec4::boxArray</definition>
        <argsstring>(int level=0) const </argsstring>
        <name>boxArray</name>
        <reimplements refid="classamrex_1_1LinOp_1a5f70912a54c7de221e2d51c4f432a11d">boxArray</reimplements>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the box array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="252" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="68" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1ABec4_1ab541f87adcdcb8f888b4020cef1cca06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::ca2cc</definition>
        <argsstring>(const MultiFab &amp;ca, MultiFab &amp;cc, int sComp, int dComp, int nComp)</argsstring>
        <name>ca2cc</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>ca</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sComp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dComp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nComp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="254" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="189" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a984a7910126ba95817d86f9fc2b88e8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::cc2ca</definition>
        <argsstring>(const MultiFab &amp;cc, MultiFab &amp;ca, int sComp, int dComp, int nComp)</argsstring>
        <name>cc2ca</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>ca</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sComp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dComp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nComp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="257" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="210" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1ad279bdeb9a51a96c27ed985d689172b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::lo_cc2ec</definition>
        <argsstring>(const MultiFab &amp;cc, MultiFab &amp;ec, int sComp, int dComp, int nComp, int dir, bool do_harm)</argsstring>
        <name>lo_cc2ec</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>ec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sComp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dComp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nComp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_harm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="260" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="229" bodyend="246"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1ABec4_1a78c7ef9e7b3e3a01b8921cec17cdd775" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::buildWorkSpace</definition>
        <argsstring>()</argsstring>
        <name>buildWorkSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="264" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a43312dba2d68a80e0c96c9f25bc04bdc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ABec4::initCoefficients</definition>
        <argsstring>(const BoxArray &amp;_ba, const DistributionMapping &amp;_dm)</argsstring>
        <name>initCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>_dm</declname>
        </param>
        <briefdescription>
<para>initialize a full set (a,b) of coefficients on the box array </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_ba</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_dm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="275" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="288" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a3b03cb05f11e08ab62203d864ece9803" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::Fapply</definition>
        <argsstring>(MultiFab &amp;out, const MultiFab &amp;in, int level)</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1LinOp_1a2aa4b0f8262bca0542f508adfd6d528f">Fapply</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>compute <computeroutput>out=L(in)</computeroutput> at level=level </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="284" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="516" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a515e9f2ce28ecd0c9bbf1c3434246be8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::Fapply</definition>
        <argsstring>(MultiFab &amp;out, int dst_comp, const MultiFab &amp;in, int src_comp, int num_comp, int level)</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1LinOp_1ab06ab51c6301f1491dee04f05eadd471">Fapply</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="287" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="527" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1aa286995bcbcc3532f2c8273e619370e4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::Fsmooth</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level, int rgbflag)</argsstring>
        <name>Fsmooth</name>
        <reimplements refid="classamrex_1_1LinOp_1a2d3bf8d174818c5a90880d7178b0bfb9">Fsmooth</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rgbflag</declname>
        </param>
        <briefdescription>
<para>apply GSRB smoother to improve residual to <computeroutput>L(solnL)=rhsL</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgbflag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="302" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="466" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a5bb5cd536c1f0e2be3f94f2988b5ed76" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ABec4::Fsmooth_jacobi</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level)</argsstring>
        <name>Fsmooth_jacobi</name>
        <reimplements refid="classamrex_1_1LinOp_1aacd9da04ef7c21a4fa606fac28b082e6">Fsmooth_jacobi</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>apply Jacobi smoother to improve residual to <computeroutput>L(solnL)=rhsL</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="314" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.cpp" bodystart="475" bodyend="480"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1ABec4_1aa1aba799ad79888c8a6813d273df415d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ABec4::ABec4</definition>
        <argsstring>(const ABec4 &amp;)</argsstring>
        <name>ABec4</name>
        <param>
          <type>const <ref refid="classamrex_1_1ABec4" kindref="compound">ABec4</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Disallow copy constructors (for now...to be fixed) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ABec4_1a0b58f8fcd813ff4d1c7826ca4e2f3ab3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ABec4" kindref="compound">ABec4</ref> &amp;</type>
        <definition>ABec4&amp; amrex::ABec4::operator=</definition>
        <argsstring>(const ABec4 &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1ABec4" kindref="compound">ABec4</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="357" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An <ref refid="classamrex_1_1ABec4" kindref="compound">ABec4</ref> tailors the description of a linear operator to apply the fourth-order central difference approximation to the differential operator, <computeroutput>alpha*a(x).phi - beta*div[b(x).grad(phi)]</computeroutput>, on a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, phi. Here, alpha and beta are constants, a(x) is a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, and b(x) is a vector of wall-centered MultiFabs, 1 per dimension. phi can have multiple components, but all coefficient info is scalar, and norm reports on ALL components together. </para>    </briefdescription>
    <detaileddescription>
<para>An <ref refid="classamrex_1_1ABec4" kindref="compound">ABec4</ref> tailors a <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> (a virtual base class for general linear operators) to compute the fourth-order central difference approximation to the differential operator, <verbatim>  ``alpha*a(x).phi - beta*div[b(x).grad(phi)]``
</verbatim></para><para>on a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, phi. Here, alpha and beta are constants, a(x) is a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, and b(x) is a vector of wall-centered MultiFabs, 1 per dimension. phi can have multiple components, but all coefficient info is scalar, and norm reports on ALL components together.</para><para>This class provides the necessary implementations for applying the operator, and for smoothing a guessed solution to the linear equation system, L(phi) = rhs (where rhs is another cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>). This class also provides access functions to set/control the coefficient MulitFabs a and b, as well as the scalars, alpha and beta. These customizations are designed for 2D and 3D, with constant (but not necessarily equal) mesh spacing in each direction.</para><para>Application of the operator and smoothing are &quot;level&quot; operations, and therefore must access &quot;hidden&quot; level data (such as boundary conditions, etc) as required, in concert with the semantics of the underlying <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> defintions. Accordingly, these implementations are &quot;protected&quot; and called only by the publically accessible members of the virtual base class, <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref>. Note that these implementations may therefore assume that boundary (ghost) nodes and other pertinent information are filled properly by the base class functions prior to call.</para><para>Defaults are as follows for the coefficients:</para><para>``alpha = 1.0 beta = 1.0 a (<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>) = 0.0 b (<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>) = 1.0``</para><para>This class does NOT provide a copy constructor or assignment operator. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="63">
        <label>amrex::LinOp</label>
        <link refid="classamrex_1_1LinOp"/>
      </node>
      <node id="62">
        <label>amrex::ABec4</label>
        <link refid="classamrex_1_1ABec4"/>
        <childnode refid="63" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="71">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiMask &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt; &gt;</label>
      </node>
      <node id="65">
        <label>amrex::LinOp</label>
        <link refid="classamrex_1_1LinOp"/>
        <childnode refid="66" relation="usage">
          <edgelabel>h</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>undrrelxr</edgelabel>
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>maskvals</edgelabel>
          <edgelabel>lmaskvals</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>gbox</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>geomarray</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>bgb</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="73">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="82">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="83" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="85">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="85" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>amrex::Vector&lt; amrex::BndryRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
        <childnode refid="116" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="107">
        <label>Real</label>
      </node>
      <node id="75">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="102">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="103" relation="public-inheritance">
        </childnode>
      </node>
      <node id="76">
        <label>amrex::BndryData</label>
        <link refid="classamrex_1_1BndryData"/>
        <childnode refid="77" relation="public-inheritance">
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>bcloc</edgelabel>
        </childnode>
        <childnode refid="113" relation="usage">
          <edgelabel>masks</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>bcond</edgelabel>
        </childnode>
      </node>
      <node id="96">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="87">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="88" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>string</label>
      </node>
      <node id="104">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="85" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="114">
        <label>std::vector&lt; amrex::MultiMask, std::allocator&lt; amrex::MultiMask &gt; &gt;</label>
      </node>
      <node id="72">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="98" relation="public-inheritance">
        </childnode>
      </node>
      <node id="117">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="99">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="113">
        <label>amrex::Vector&lt; amrex::MultiMask &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="114" relation="public-inheritance">
        </childnode>
      </node>
      <node id="118">
        <label>amrex::ABec2</label>
        <link refid="classamrex_1_1ABec2"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="64">
        <label>amrex::ABec4</label>
        <link refid="classamrex_1_1ABec4"/>
        <childnode refid="65" relation="public-inheritance">
        </childnode>
        <childnode refid="118" relation="usage">
          <edgelabel>LO_Op</edgelabel>
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>bcoefs</edgelabel>
          <edgelabel>acoefs</edgelabel>
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>resL</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>a_valid</edgelabel>
          <edgelabel>b_valid</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>a_def</edgelabel>
          <edgelabel>beta</edgelabel>
          <edgelabel>beta_def</edgelabel>
          <edgelabel>b_def</edgelabel>
          <edgelabel>alpha</edgelabel>
          <edgelabel>alpha_def</edgelabel>
        </childnode>
      </node>
      <node id="103">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="88">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="69">
        <label>std::vector&lt; amrex::BndryRegister, std::allocator&lt; amrex::BndryRegister &gt; &gt;</label>
      </node>
      <node id="93">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="85" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="107" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="116">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="117" relation="public-inheritance">
        </childnode>
      </node>
      <node id="109">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="85" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="92" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="100">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
      <node id="121">
        <label>std::vector&lt; amrex::MultiFab *, std::allocator&lt; amrex::MultiFab * &gt; &gt;</label>
      </node>
      <node id="106">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="107" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="123">
        <label>std::vector&lt; Array&lt; amrex::MultiFab *, BL_SPACEDIM &gt;, std::allocator&lt; Array&lt; amrex::MultiFab *, BL_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="94">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="92">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="87" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="79" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="96" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="89">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="90" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
        <childnode refid="78" relation="usage">
          <edgelabel>bndry</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="106" relation="public-inheritance">
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="109" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>std::vector&lt; RealTuple, std::allocator&lt; RealTuple &gt; &gt;</label>
      </node>
      <node id="110">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="111">
        <label>amrex::Vector&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="80">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="95" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="97" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="99" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="100" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="104" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="119">
        <label>amrex::ABecLaplacian</label>
        <link refid="classamrex_1_1ABecLaplacian"/>
        <childnode refid="65" relation="public-inheritance">
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>acoefs</edgelabel>
        </childnode>
        <childnode refid="122" relation="usage">
          <edgelabel>bcoefs</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>a_valid</edgelabel>
          <edgelabel>b_valid</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>a_def</edgelabel>
          <edgelabel>beta</edgelabel>
          <edgelabel>beta_def</edgelabel>
          <edgelabel>b_def</edgelabel>
          <edgelabel>alpha</edgelabel>
          <edgelabel>alpha_def</edgelabel>
        </childnode>
      </node>
      <node id="90">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="122">
        <label>amrex::Vector&lt; Array&lt; amrex::MultiFab *, BL_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="120">
        <label>amrex::Vector&lt; amrex::MultiFab * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="82" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>std::vector&lt; Array&lt; Real, BL_SPACEDIM &gt;, std::allocator&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="70">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="71" relation="public-inheritance">
        </childnode>
      </node>
      <node id="66">
        <label>amrex::Vector&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="67" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG4/AMReX_ABec4.H" bodystart="63" bodyend="358"/>
    <listofallmembers>
      <member refid="classamrex_1_1ABec4_1ae04e25353c1dea93d93e92069a8b9723" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>a_def</name></member>
      <member refid="classamrex_1_1ABec4_1ad6946df10d223ffded52ff8cb5baad34" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>a_valid</name></member>
      <member refid="classamrex_1_1ABec4_1afc32fd958928b9bb5d48df0f7215e4ab" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>ABec4</name></member>
      <member refid="classamrex_1_1ABec4_1aa1aba799ad79888c8a6813d273df415d" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>ABec4</name></member>
      <member refid="classamrex_1_1ABec4_1aaa91c6f3d872a0382438ce0406441ef1" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>aCoefficients</name></member>
      <member refid="classamrex_1_1ABec4_1aa347c39b5b26605c718e69932904114c" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>aCoefficients</name></member>
      <member refid="classamrex_1_1ABec4_1afa7ef4d698cd7e905212b18d2dbaf784" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>acoefs</name></member>
      <member refid="classamrex_1_1ABec4_1a113b6911ebbc42bb219b60fb8eb70323" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>alpha</name></member>
      <member refid="classamrex_1_1ABec4_1afc41f9f2cc9f503fa3758e18ea86bd9c" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>alpha_def</name></member>
      <member refid="classamrex_1_1ABec4_1aa43b9218fb2965bb93e3c79150d81e5c" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>apply</name></member>
      <member refid="classamrex_1_1ABec4_1aeddfbd519c0af2fc240e64846b19df67" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1ABec4_1af67bcb51813f4fef7c44affe69655023" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>b_def</name></member>
      <member refid="classamrex_1_1ABec4_1af240e7d9ef36a76be5a3f6311da23412" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>b_valid</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>BC_Mode</name></member>
      <member refid="classamrex_1_1ABec4_1a1b615d4e2686b0fe15664f12adb5f314" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1ABec4_1a20b28086cb2026735ea52d2cc803474e" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1ABec4_1a230f8f00ae08bb2c108b6fff1ae7e22b" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1a7bb1e7f6286ace56305bcb17a2ebd06a" prot="public" virt="virtual" ambiguityscope="amrex::LinOp::"><scope>amrex::ABec4</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1ABec4_1ab93786ae188a018f70c924f64a934707" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>bcoefs</name></member>
      <member refid="classamrex_1_1ABec4_1a406ab3a9c784755032693bda2f051103" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>beta</name></member>
      <member refid="classamrex_1_1ABec4_1a07edccb3418583122a104acb07b8cd9b" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>beta_def</name></member>
      <member refid="classamrex_1_1LinOp_1aa82bdf791430c2a09b3b436edf9396b5" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>bgb</name></member>
      <member refid="classamrex_1_1LinOp_1ab6ad6639bc139043d7e905f8d50e942c" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>bndryData</name></member>
      <member refid="classamrex_1_1LinOp_1a4091f3d4047359da4093f5174d56f13d" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>bndryData</name></member>
      <member refid="classamrex_1_1ABec4_1a3f788634a59b47732b149cdb4084fabb" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1ABec4_1a78c7ef9e7b3e3a01b8921cec17cdd775" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>buildWorkSpace</name></member>
      <member refid="classamrex_1_1ABec4_1ab541f87adcdcb8f888b4020cef1cca06" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>ca2cc</name></member>
      <member refid="classamrex_1_1ABec4_1a984a7910126ba95817d86f9fc2b88e8b" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>cc2ca</name></member>
      <member refid="classamrex_1_1ABec4_1a4508fa8422aab37ac2e27b77fb0b4bb6" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>clearToLevel</name></member>
      <member refid="classamrex_1_1ABec4_1a52d7a01a4cce9b4045b3214b2ce3e07b" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1ABec4_1a2e397fa215d47845aa5e3b8e83d0d426" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1LinOp_1a209d6c6a23f1627c3dd246b737b342a5" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>def_harmavg</name></member>
      <member refid="classamrex_1_1LinOp_1a46c9e9b959b202156654ab2a806d36b3" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>def_maxorder</name></member>
      <member refid="classamrex_1_1LinOp_1a4bc7f813757f64c47583b5c110504644" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>def_verbose</name></member>
      <member refid="classamrex_1_1LinOp_1aed40103a32e7a986e5b58594031ee887" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1ABec4_1a3b03cb05f11e08ab62203d864ece9803" prot="protected" virt="virtual"><scope>amrex::ABec4</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1ABec4_1a515e9f2ce28ecd0c9bbf1c3434246be8" prot="protected" virt="virtual"><scope>amrex::ABec4</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1LinOp_1a3e96cce265979ab38b675c22fab24657" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1ABec4_1aa286995bcbcc3532f2c8273e619370e4" prot="protected" virt="virtual"><scope>amrex::ABec4</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1ABec4_1a5bb5cd536c1f0e2be3f94f2988b5ed76" prot="protected" virt="virtual"><scope>amrex::ABec4</scope><name>Fsmooth_jacobi</name></member>
      <member refid="classamrex_1_1LinOp_1aaacb98abdbfa3d9377c369fe5cc79b68" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>gbox</name></member>
      <member refid="classamrex_1_1LinOp_1a447bf2c68e5e4fb5b275fefe879fe1e5" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>geomarray</name></member>
      <member refid="classamrex_1_1ABec4_1ac4ac8db1f5906ff6d432891a14e27ee3" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>get_alpha</name></member>
      <member refid="classamrex_1_1ABec4_1aa3cb2ce5caf5ce37d3d16868e9108f8b" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>get_beta</name></member>
      <member refid="classamrex_1_1LinOp_1a61745f14570d6a595ab67ec1bf283c18" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>getDx</name></member>
      <member refid="classamrex_1_1LinOp_1a399736dcc956ff8f1fffaa2757028874" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>getGeom</name></member>
      <member refid="classamrex_1_1LinOp_1aa9588834363609399b2953a1285311fc" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>h</name></member>
      <member refid="classamrex_1_1LinOp_1a6b431b3abaa1031a23c3d7972d7dab93" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>harmavg</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5deae1724332b6960ec73ce5040947963f78" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>Homogeneous_BC</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>Inhomogeneous_BC</name></member>
      <member refid="classamrex_1_1ABec4_1a43312dba2d68a80e0c96c9f25bc04bdc" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>initCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1a123f74bf002cbcc02fcfef0ac794cc57" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>initConstruct</name></member>
      <member refid="classamrex_1_1LinOp_1a089bb8eb0f74b22a7abbd60b3e872c8f" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1ABec4_1a1050d6f06b963126a578609fd5b86b7b" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>invalidate_a_to_level</name></member>
      <member refid="classamrex_1_1ABec4_1ab26af2267abaaff2d227dc5ebf99a831" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>invalidate_b_to_level</name></member>
      <member refid="classamrex_1_1ABec4_1aee8ae235af57c533202b719b7d8e86dc" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>jacobi_smooth</name></member>
      <member refid="classamrex_1_1LinOp_1a528f7163d138d4c86f826821e751fae5" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1a11923eefafc8a3c572854a571edc03c8" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1adc5128fa53133f87d6beea7127766a17" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1afbf053df86bb20e076291152600f06ac" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>LinOp_grow</name></member>
      <member refid="classamrex_1_1LinOp_1a42cf216bf54bd0cb244669a91635dbec" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>lmaskvals</name></member>
      <member refid="classamrex_1_1ABec4_1ad279bdeb9a51a96c27ed985d689172b4" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>lo_cc2ec</name></member>
      <member refid="classamrex_1_1ABec4_1a84b32e79b057d67ebb05ced2c2892a1f" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>LO_Op</name></member>
      <member refid="classamrex_1_1LinOp_1a48100b02251f55f0394e976eca1e8211" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>makeCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1af9de09651d7047e04a70de03facb5398" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>maskvals</name></member>
      <member refid="classamrex_1_1LinOp_1a09492904c8111d7108412a034efd4b1e" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>maxOrder</name></member>
      <member refid="classamrex_1_1LinOp_1a4e9d794124be8ae04fa7c4c6ab2d5fee" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>maxOrder</name></member>
      <member refid="classamrex_1_1LinOp_1aa898f6575bb89bf315bb7a5309ad944f" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1ABec4_1a7ee1aebd0c0065d57d802a5f62174e3e" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>norm</name></member>
      <member refid="classamrex_1_1LinOp_1aba1ac78a74d1ca7be2e9ef523c185800" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>numGrids</name></member>
      <member refid="classamrex_1_1ABec4_1a009633468429627f9a24413d24361400" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>NumGrow</name></member>
      <member refid="classamrex_1_1ABec4_1a0a0c48d9fc31bc66bd5ba2b4e360e8ed" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1ABec4_1a917c979cf538ff2bb160764d6a81a4e9" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>numLevelsHO</name></member>
      <member refid="classamrex_1_1ABec4_1a0b58f8fcd813ff4d1c7826ca4e2f3ab3" prot="private" virt="non-virtual"><scope>amrex::ABec4</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ABec4_1a59c652ddcb6d1c1d3255843ed415ca49" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>prepareForLevel</name></member>
      <member refid="classamrex_1_1ABec4_1a7c71f90b13ae2df25e59d5b9006861e7" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>residual</name></member>
      <member refid="classamrex_1_1ABec4_1a49ff7d2a8cc866928d9b43a6bb248bde" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>resL</name></member>
      <member refid="classamrex_1_1ABec4_1af76e4448fb4cd3e1de010f66241952f3" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>setCoefficients</name></member>
      <member refid="classamrex_1_1ABec4_1a4859a1d04776ed7a1f8f379e75747db8" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1ABec4_1a9d3b23ff5d26e9e94a1a757c07ef1b27" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>smooth</name></member>
      <member refid="classamrex_1_1LinOp_1a58088c44f9d858885f1125efb3b4222e" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>undrrelxr</name></member>
      <member refid="classamrex_1_1LinOp_1a24a48ff7792144be5c69884015388367" prot="protected" virt="non-virtual"><scope>amrex::ABec4</scope><name>verbose</name></member>
      <member refid="classamrex_1_1ABec4_1a0c9f833c150951d8a88fd711f57a5dfd" prot="public" virt="non-virtual"><scope>amrex::ABec4</scope><name>ZeroACoefficients</name></member>
      <member refid="classamrex_1_1ABec4_1a152bfa647897c665d9f04320854ce000" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>~ABec4</name></member>
      <member refid="classamrex_1_1LinOp_1a62ce7afd9c1479ee90df81e055e88a1c" prot="public" virt="virtual"><scope>amrex::ABec4</scope><name>~LinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
