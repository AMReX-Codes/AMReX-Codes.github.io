<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1MLEBNodeFDLaplacian" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLEBNodeFDLaplacian</compoundname>
    <basecompoundref refid="classamrex_1_1MLNodeLinOp" prot="public" virt="non-virtual">amrex::MLNodeLinOp</basecompoundref>
    <includes refid="AMReX__MLEBNodeFDLaplacian_8H" local="no">AMReX_MLEBNodeFDLaplacian.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1a02fb01e3b998e41c2afb9b523a3a091d" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt;</type>
        <definition>GpuArray&lt;Real,3&gt; amrex::MLEBNodeFDLaplacian::m_sigma</definition>
        <argsstring></argsstring>
        <name>m_sigma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="94" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1ad48c24f09145f008fdbfce5f08f02351" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLEBNodeFDLaplacian::m_s_phi_eb</definition>
        <argsstring></argsstring>
        <name>m_s_phi_eb</name>
        <initializer>= std::numeric_limits&lt;Real&gt;::lowest()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="95" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1aac77fee4af067d987c117ae62a73d9ce" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>Vector&lt;MultiFab&gt; amrex::MLEBNodeFDLaplacian::m_phi_eb</definition>
        <argsstring></argsstring>
        <name>m_phi_eb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="96" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1aa1946437fba75854321fa1b73beedd58" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>Vector&lt;MultiFab&gt; amrex::MLEBNodeFDLaplacian::m_acoef</definition>
        <argsstring></argsstring>
        <name>m_acoef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="97" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1a824178034487842a323be9ae255c249c" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLEBNodeFDLaplacian::m_a_huge</definition>
        <argsstring></argsstring>
        <name>m_a_huge</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="98" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a6a37b89b81d888d0d30755a2b21449b7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</definition>
        <argsstring>() noexcept</argsstring>
        <name>MLEBNodeFDLaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="23" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a113bbbc7b506ed3317fae98364062a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const * &gt; &amp;a_factory)</argsstring>
        <name>MLEBNodeFDLaplacian</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="24" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="8" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a251fdcde4525e545fad25663d3bc31d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::~MLEBNodeFDLaplacian</definition>
        <argsstring>()</argsstring>
        <name>~MLEBNodeFDLaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="30" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a4b86eda13fc31604d8ca3bf79a158902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</definition>
        <argsstring>(const MLEBNodeFDLaplacian &amp;)=delete</argsstring>
        <name>MLEBNodeFDLaplacian</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="32" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ac5576c35f7765ea07f41688107686ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</definition>
        <argsstring>(MLEBNodeFDLaplacian &amp;&amp;)=delete</argsstring>
        <name>MLEBNodeFDLaplacian</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="33" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1aa1055e6ea600020a60c4d6e223e811a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;</type>
        <definition>MLEBNodeFDLaplacian&amp; amrex::MLEBNodeFDLaplacian::operator=</definition>
        <argsstring>(const MLEBNodeFDLaplacian &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="34" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a614f7af31b508f6601751d868cda4f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;</type>
        <definition>MLEBNodeFDLaplacian&amp; amrex::MLEBNodeFDLaplacian::operator=</definition>
        <argsstring>(MLEBNodeFDLaplacian &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="35" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1abb9ba9cd4602bb3e85b82c70284915f5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::setSigma</definition>
        <argsstring>(Array&lt; Real, 3 &gt; const &amp;a_sigma) noexcept</argsstring>
        <name>setSigma</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>a_sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="37" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a4620fd82574c119b58c63e9a84ecd3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::setEBDirichlet</definition>
        <argsstring>(Real a_phi_eb)</argsstring>
        <name>setEBDirichlet</name>
        <param>
          <type>Real</type>
          <declname>a_phi_eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="40" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1addd0c91c53d2097103f32918237a65b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref></type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; std::decay_t&lt; decltype(std::declval&lt; <ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &gt;)(AMREX_D_DECL(Real(0.), Real(0.), Real(0.))))&gt;, Real &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; std::is_same&lt; std::decay_t&lt; decltype(std::declval&lt; F &gt;)(AMREX_D_DECL(Real(0.), Real(0.), Real(0.))))&gt;, Real &gt;::value &gt; amrex::MLEBNodeFDLaplacian::setEBDirichlet</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>setEBDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="46" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="105" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a8e002699c92b9ddb2d980dea04bd4311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const * &gt; &amp;a_factory)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="48" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="36" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1aa7c91e7540b34a1ac3b805c34b7e355e" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt; FabFactory&lt; FArrayBox &gt; &gt; amrex::MLEBNodeFDLaplacian::makeFactory</definition>
        <argsstring>(int amrlev, int mglev) const final override</argsstring>
        <name>makeFactory</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ac31926ba837b440475e0715a8fa4b87b">makeFactory</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="54" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="66" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a30b8c12319907caf82b87005902a6bcc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string amrex::MLEBNodeFDLaplacian::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="56" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a79f111ea6c182c3ca749babb56729051" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::restriction</definition>
        <argsstring>(int amrlev, int cmglev, MultiFab &amp;crse, MultiFab &amp;fine) const final override</argsstring>
        <name>restriction</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a5a1bffd08a85405f9a9fbeed7c20fd97">restriction</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="58" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="79" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1af8a22ae6d414c1b98b3229132f35d539" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MultiFab &amp;fine, const MultiFab &amp;crse) const final override</argsstring>
        <name>interpolation</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a55d585de64a0263a1b2308553cbaee13">interpolation</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="59" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="116" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ac78cd13e2533f566292aed726e19f7c5" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::averageDownSolutionRHS</definition>
        <argsstring>(int camrlev, MultiFab &amp;crse_sol, MultiFab &amp;crse_rhs, const MultiFab &amp;fine_sol, const MultiFab &amp;fine_rhs) final override</argsstring>
        <name>averageDownSolutionRHS</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a49e8248c4a3a27e8bfc77227bdfb433a">averageDownSolutionRHS</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="60" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="150" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ab24f43cada8f1a1daa112e1c17ea635d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::reflux</definition>
        <argsstring>(int crse_amrlev, MultiFab &amp;res, const MultiFab &amp;crse_sol, const MultiFab &amp;crse_rhs, MultiFab &amp;fine_res, MultiFab &amp;fine_sol, const MultiFab &amp;fine_rhs) const final override</argsstring>
        <name>reflux</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537">reflux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_res</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="63" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="159" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a31d3fbddab89750d2dc6212d4fe6fc9a" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::prepareForSolve</definition>
        <argsstring>() final override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1ac604e9b47938e183cd38f8f9ad400668">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="67" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="168" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a846a760756357f5040395e50249cbe9d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, const MultiFab &amp;in) const final override</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1afaae44c30405c4c8c2fdabede17a34ef">Fapply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="68" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="260" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a4c82d05fb5f0114b96fec9850a13940b" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rhs) const final override</argsstring>
        <name>Fsmooth</name>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1ac856c51055f30434fd54c59eeeeb2f9b">Fsmooth</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="69" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="329" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ae8e6a26dbbd7e415c6c071e85a19cef3" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::normalize</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const final override</argsstring>
        <name>normalize</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a86207e36440100ba012296cb95b51713">normalize</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="70" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="398" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ab8a56b262d500064fee4f687b293c268" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::fixUpResidualMask</definition>
        <argsstring>(int amrlev, iMultiFab &amp;resmsk) final override</argsstring>
        <name>fixUpResidualMask</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ac94ee917e5350722a537af7e127984d3">fixUpResidualMask</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>resmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="72" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a50d42cd15eea1fb4b562d26a88d6b05c" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBNodeFDLaplacian::isSingular</definition>
        <argsstring>(int) const final override</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1a18804aba43a14c7ffea9b6bc3f3179ba">isSingular</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="74" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a2f06d0dc6928f21025362f8ce8a1c4d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::compGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, 3 &gt; &amp;grad, MultiFab &amp;sol, Location) const override</argsstring>
        <name>compGrad</name>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1a3e12753fe4ed715ff6018404d9ec476c">compGrad</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, 3 &gt; &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="76" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="428" bodyend="499"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MLEBNodeFDLaplacian</label>
        <link refid="classamrex_1_1MLEBNodeFDLaplacian"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="20">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="12">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="12" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::vector&lt; Array&lt; BCType, 3 &gt;, std::allocator&lt; Array&lt; BCType, 3 &gt; &gt; &gt;</label>
      </node>
      <node id="1">
        <label>amrex::MLEBNodeFDLaplacian</label>
        <link refid="classamrex_1_1MLEBNodeFDLaplacian"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_sigma</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_acoef</edgelabel>
          <edgelabel>m_phi_eb</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_a_huge</edgelabel>
          <edgelabel>m_s_phi_eb</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>amrex::Vector&lt; Array&lt; BCType, 3 &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>Real</label>
      </node>
      <node id="24">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="25" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="19" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="15">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="16" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="17" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="19">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="20" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bottom_dot_mask</edgelabel>
          <edgelabel>m_coarse_dot_mask</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_nd_fine_mask</edgelabel>
          <edgelabel>m_cc_fine_mask</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_owner_mask</edgelabel>
          <edgelabel>m_dirichlet_mask</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_has_fine_bndry</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::Vector&lt; amrex::MultiFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="23">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="8">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="8" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="28">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="3">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="17" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="41">
        <label>amrex::GpuArray&lt; Real, 3 &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
        <childnode refid="9" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="13">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="43">
        <label>std::vector&lt; amrex::MultiFab, std::allocator&lt; amrex::MultiFab &gt; &gt;</label>
      </node>
      <node id="14">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="29">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="5">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="18" bodyend="99"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a3bcbe4767274ef89df6f5eaaacded060" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aa9fa2b91ea03801026b780cde826b225" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a79b6bca7f31b09333bc7caae80d39136" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a4107b1bf507cc31aadeb7c547b85574a" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1af43ce113549e125050df7b81c1e6feca" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ac78cd13e2533f566292aed726e19f7c5" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aa43fb0696cb5782669c8ee368b743099" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>buildMasks</name></member>
      <member refid="classamrex_1_1MLLinOp_1a91cf65a68d76e83272098df8829e0dca" prot="private" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2ddc20eaca70aaa6da5935648ce06a82" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>CoarseningStrategy</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1af37726771c106055867bf88ade1f65d7" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae3dae2320c8c9e64274e8d41131187dc" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a1d047ef6041f1736874f53278b908a7c" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a2f06d0dc6928f21025362f8ce8a1c4d2" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLLinOp_1aff1b5ba7a45c7e320550f99f88984301" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2018b943fdab7019461dc9580b04177c" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a8e002699c92b9ddb2d980dea04bd4311" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2032ea2a9fd37bb9179bc442d4949514" prot="public" virt="non-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa0ba245918a01db26fdc8289b4e4ed29" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae772fff45d8190c7c2c694931858b834" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9288d1d0123d4e3d8097fd568a706a15" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a846a760756357f5040395e50249cbe9d" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7905a0afbcd61f0ea15b85a987ec15c5" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ab8a56b262d500064fee4f687b293c268" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a4c82d05fb5f0114b96fec9850a13940b" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa429808b0b8d8a9efcf3380620f6263a" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad16cb6cbf7bcb78cc0d0af59611ae00a" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a104a4357466a0d6c744416dba20e03ad" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac495d1d722cbb68c31af46b2e860fa9f" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a525b102eb592e2b44a864c62e64e9566" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a53fabf0ebd4dd86e92a3c7e5a161f5a6" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d7b1e0e21fd61d71bbe342df0f1a5d4" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4910f22e3c63b572ef364cdf8177e392" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4b2636d8115debeeefa38b4b34186ecc" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a458383f5dc4aba88329db715fd027d7a" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af0793198f529f4474139fa9366b2e1aa" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1af8a22ae6d414c1b98b3229132f35d539" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a5ebdba6239eb393431835a2f2ad724df" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a50d42cd15eea1fb4b562d26a88d6b05c" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ac509d7066244935918fdff0326ca95" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a824178034487842a323be9ae255c249c" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_a_huge</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1aa1946437fba75854321fa1b73beedd58" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_acoef</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a4b398a735f5c05d0919bc24efc9a7025" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_bottom_dot_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a91c9e98ef8edd4106aace72a6c7a4294" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_cc_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a117db04aae22221b83130cff6e6fdb52" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_dot_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1af4d1bfea4dae502fae40e6b71fd4deae" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarsening_strategy</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aaa52abefe4405ee59158a27c112ccfa9" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_dirichlet_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77492a5974990e96061d11c681ceb55d" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62d8b5644f8ca07d5e27a4d33cc9528f" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a76a73246b9e7679b93591f2093a857c3" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_has_fine_bndry</name></member>
      <member refid="classamrex_1_1MLLinOp_1afabfb801a5e93c7c2d74250dd7223aff" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a187bf73f893ba53dc2ee3e70c8f8811f" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a28e2b90709541cf46d64d3d382e6ade7" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_in_solution_mode</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a51345471274acc0bdd0b5477285d4db1" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_is_bottom_singular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae74ca314ec3dcba18a97daf57896baaa" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOp_1adc90c319d9f918dac74fe5c500cc2fc4" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2bb5e031c87b6bdf67618f9c25dc6945" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_masks_built</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a034b72948cecb00630515b6a2de77109" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_nd_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7c0bb3eeb87e33f76c055d78e1e68df2" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_overset_dirichlet_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a192598f12e56d51e8f952913e8fdf72c" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_owner_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1aac77fee4af067d987c117ae62a73d9ce" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_phi_eb</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ad48c24f09145f008fdbfce5f08f02351" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_s_phi_eb</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a02fb01e3b998e41c2afb9b523a3a091d" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_sigma</name></member>
      <member refid="classamrex_1_1MLLinOp_1a02f3afbdee5598f2cae332d7946a5a70" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1aa7c91e7540b34a1ac3b805c34b7e355e" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2a3faa786b7090c2c15f76f2e29f6a28" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ae050e4fda0843b175da8fbcfb8462392" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeOwnerMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a6a37b89b81d888d0d30755a2b21449b7" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a113bbbc7b506ed3317fae98364062a77" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a4b86eda13fc31604d8ca3bf79a158902" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ac5576c35f7765ea07f41688107686ebb" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aaf264472c0b70b5588a04b930fbcd8ff" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a712873309064abf30aafcb2d277890fb" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a02892864c3a177a34cc38d3d55a972fd" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a30b8c12319907caf82b87005902a6bcc" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a210b4c125747c6a4a6f171dcff941579" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a96c1c36d7c2f9acf4e469e7669aaecc2" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ae8e6a26dbbd7e415c6c071e85a19cef3" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1aa1055e6ea600020a60c4d6e223e811a6" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a614f7af31b508f6601751d868cda4f38" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a1f11eab31e2487056a5befd79c8a22a0" prot="public" virt="non-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a8dcf3f92d3ef1932e03ad470e29d1517" prot="public" virt="non-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a31d3fbddab89750d2dc6212d4fe6fc9a" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ab24f43cada8f1a1daa112e1c17ea635d" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>remapNeighborhoods</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a79f111ea6c182c3ca749babb56729051" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0d2cc5acbd59af429bb23cea82e1cb4e" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af86e2902f472568fc0056d403f9787ff" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a46abcf3897135febcc172d96e03b7603" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a4620fd82574c119b58c63e9a84ecd3d1" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1addd0c91c53d2097103f32918237a65b5" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a9c212333d250c722b7c8ff2d21f19073" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2566fb073888a16ec6c6242c5a9b47a3" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setOversetMask</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1abb9ba9cd4602bb3e85b82c70284915f5" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setSigma</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ae280045164562bc4e371043d97d73d2e" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a9577a87ff76e6c9406e3cbe716d26746" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1a638713cd5f8bf8cb703eca1ed94da5dc" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9d05943073d4f01c9a6d03c2ec9f0602" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1a01c4cbbbf82530a8d3523d07ad3a9e9f" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2dd8986c8dee800d2a3b9003b8188d5c" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac62698656785dd3261f05e9dc76cd8fa" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>update</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ae81b0104718c1f31d4b1bba2450d32b6" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a251fdcde4525e545fad25663d3bc31d1" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>~MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>~MLLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a07faf757bcc476afe8bf3b88997d3039" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>~MLNodeLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
