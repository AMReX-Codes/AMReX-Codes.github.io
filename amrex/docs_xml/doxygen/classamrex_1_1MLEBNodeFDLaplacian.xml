<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLEBNodeFDLaplacian" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLEBNodeFDLaplacian</compoundname>
    <basecompoundref refid="classamrex_1_1MLNodeLinOp" prot="public" virt="non-virtual">amrex::MLNodeLinOp</basecompoundref>
    <includes refid="AMReX__MLEBNodeFDLaplacian_8H" local="no">AMReX_MLEBNodeFDLaplacian.H</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1a7d8ad0e6e2657c16c753f60cc17434af" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;Real,AMREX_SPACEDIM&gt; amrex::MLEBNodeFDLaplacian::m_sigma</definition>
        <argsstring></argsstring>
        <name>m_sigma</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::m_sigma</qualifiedname>
        <initializer>{{<ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(1_rt,1_rt,1_rt)}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="123" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1af397473ffaa999e0ac6f0fa478d895a0" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; &gt; amrex::MLEBNodeFDLaplacian::m_sigma_mf</definition>
        <argsstring></argsstring>
        <name>m_sigma_mf</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::m_sigma_mf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="124" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1af1c4b0f8fc67f356ca5716e94634a6f5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBNodeFDLaplacian::m_has_sigma_mf</definition>
        <argsstring></argsstring>
        <name>m_has_sigma_mf</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::m_has_sigma_mf</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="125" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1ad48c24f09145f008fdbfce5f08f02351" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLEBNodeFDLaplacian::m_s_phi_eb</definition>
        <argsstring></argsstring>
        <name>m_s_phi_eb</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::m_s_phi_eb</qualifiedname>
        <initializer>= std::numeric_limits&lt;Real&gt;::lowest()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="126" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1aac77fee4af067d987c117ae62a73d9ce" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>Vector&lt;MultiFab&gt; amrex::MLEBNodeFDLaplacian::m_phi_eb</definition>
        <argsstring></argsstring>
        <name>m_phi_eb</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::m_phi_eb</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="127" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1a37504f75c2cf6b138aa349ec76e7a078" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLEBNodeFDLaplacian::m_rz</definition>
        <argsstring></argsstring>
        <name>m_rz</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::m_rz</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="128" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBNodeFDLaplacian_1a78cd20ff53eafb5fcd69e357e221d08a" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLEBNodeFDLaplacian::m_rz_alpha</definition>
        <argsstring></argsstring>
        <name>m_rz_alpha</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::m_rz_alpha</qualifiedname>
        <initializer>= 0._rt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="129" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="129" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a6442123515a236dc0a9947517279c8c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</definition>
        <argsstring>()=default</argsstring>
        <name>MLEBNodeFDLaplacian</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="32" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a0998f6ae5bff0e310795526582972f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info)</argsstring>
        <name>MLEBNodeFDLaplacian</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="42" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1aeaa0c73ddfcd7079562b0dc98c5235d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::~MLEBNodeFDLaplacian</definition>
        <argsstring>() override=default</argsstring>
        <name>~MLEBNodeFDLaplacian</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::~MLEBNodeFDLaplacian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a4b86eda13fc31604d8ca3bf79a158902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</definition>
        <argsstring>(const MLEBNodeFDLaplacian &amp;)=delete</argsstring>
        <name>MLEBNodeFDLaplacian</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="49" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ac5576c35f7765ea07f41688107686ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</definition>
        <argsstring>(MLEBNodeFDLaplacian &amp;&amp;)=delete</argsstring>
        <name>MLEBNodeFDLaplacian</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::MLEBNodeFDLaplacian</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="50" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a28124d996f580004f5fbdb48c576094f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;</type>
        <definition>MLEBNodeFDLaplacian &amp; amrex::MLEBNodeFDLaplacian::operator=</definition>
        <argsstring>(const MLEBNodeFDLaplacian &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="51" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ae674894b2cd0d469d622e20339720e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;</type>
        <definition>MLEBNodeFDLaplacian &amp; amrex::MLEBNodeFDLaplacian::operator=</definition>
        <argsstring>(MLEBNodeFDLaplacian &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MLEBNodeFDLaplacian" kindref="compound">MLEBNodeFDLaplacian</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="52" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ab81f654708d4756a07160c7eaa343d48" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::setSigma</definition>
        <argsstring>(Array&lt; Real, AMREX_SPACEDIM &gt; const &amp;a_sigma) noexcept</argsstring>
        <name>setSigma</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::setSigma</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>a_sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="54" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ae912d5edf5cef0c5118f70ba1bf9aa4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::setSigma</definition>
        <argsstring>(int amrlev, MultiFab const &amp;a_sigma)</argsstring>
        <name>setSigma</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::setSigma</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>a_sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="44" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a7aa065c26dda1e04e7433b12f6c09648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::setRZ</definition>
        <argsstring>(bool flag)</argsstring>
        <name>setRZ</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::setRZ</qualifiedname>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="58" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a3eca729943f3b29da314d62bcb5937d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::setAlpha</definition>
        <argsstring>(Real a_alpha)</argsstring>
        <name>setAlpha</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::setAlpha</qualifiedname>
        <param>
          <type>Real</type>
          <declname>a_alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="60" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a9e748bc534997b5de6b2df7295905616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="123" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a1abd0ae30a7a51ffe7672505fd171c2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string amrex::MLEBNodeFDLaplacian::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::name</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="88" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a0565c8afd01c7446c5c0b37373f49c24" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::restriction</definition>
        <argsstring>(int amrlev, int cmglev, MultiFab &amp;crse, MultiFab &amp;fine) const final</argsstring>
        <name>restriction</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::restriction</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="167" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a3b6fb22e3c88f4ab7b5ca96c075a8323" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MultiFab &amp;fine, const MultiFab &amp;crse) const final</argsstring>
        <name>interpolation</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::interpolation</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="91" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="214" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ad5475aafb15a2e53a6dada12839c27c9" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::prepareForSolve</definition>
        <argsstring>() final</argsstring>
        <name>prepareForSolve</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::prepareForSolve</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1af8740f5bcf25e80b3e074a99be681c47">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="258" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a978a4e15703a7ddf71c557eba128dcbe" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, const MultiFab &amp;in) const final</argsstring>
        <name>Fapply</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::Fapply</qualifiedname>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1afaae44c30405c4c8c2fdabede17a34ef">Fapply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="403" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a375d3d3edaa7f6d3a16bf7a8456027f7" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rhs) const final</argsstring>
        <name>Fsmooth</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::Fsmooth</qualifiedname>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1a426c6b64def1c391b305be2ad1649103">Fsmooth</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="95" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="526" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ab93f943cc0e03e4f1d5966700f3edf85" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::normalize</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const final</argsstring>
        <name>normalize</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::normalize</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="96" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="631" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1af851a769ccbcd52c5950734a24067440" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::fixUpResidualMask</definition>
        <argsstring>(int amrlev, iMultiFab &amp;resmsk) final</argsstring>
        <name>fixUpResidualMask</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::fixUpResidualMask</qualifiedname>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1a29f7b2267b3d4d5847b1685e1ffd14ae">fixUpResidualMask</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>resmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="98" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="637" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1afdc35cf0e4f9853590f3857b567c5aaf" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLEBNodeFDLaplacian::isSingular</definition>
        <argsstring>(int) const final</argsstring>
        <name>isSingular</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::isSingular</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1ae4208159e7121c341be4c40f148563ad">isSingular</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
<para>Is it singular on given AMR level? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="100" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1a1ddc66c86313eb322b25f378139bc6d0" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLEBNodeFDLaplacian::isBottomSingular</definition>
        <argsstring>() const final</argsstring>
        <name>isBottomSingular</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::isBottomSingular</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1a8a5fce59ba5bb0e9eb9d65e8615050ea">isBottomSingular</reimplements>
        <briefdescription>
<para>Is the bottom of MG singular? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="101" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1ae749675d0ae6abd70771a049598a64dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::compGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;grad, MultiFab &amp;sol, Location) const override</argsstring>
        <name>compGrad</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::compGrad</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1LinOpEnumType_1acc2058c2f5b3c370c08f75fc71ff3bb4" kindref="member">Location</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="643" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBNodeFDLaplacian_1afda0a0f1ebd7ae2e71370ed2e627d6f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBNodeFDLaplacian::postSolve</definition>
        <argsstring>(Vector&lt; MultiFab * &gt; const &amp;sol) const override</argsstring>
        <name>postSolve</name>
        <qualifiedname>amrex::MLEBNodeFDLaplacian::postSolve</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="120" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp" bodystart="759" bodyend="793"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>MLLinOp</label>
        <link refid="classamrex_1_1MLLinOpT"/>
      </node>
      <node id="1">
        <label>amrex::MLEBNodeFDLaplacian</label>
        <link refid="classamrex_1_1MLEBNodeFDLaplacian"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="92">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="93" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="93" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="131">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="134">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="101" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="109" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="113" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="100">
        <label>amrex::FBData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="101" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="109" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="113" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="126">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
        <childnode refid="127" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="129" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="133" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="135" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="137" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="99" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="118" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="128">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="75">
        <label>amrex::FabFactory&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="140">
        <label>amrex::GpuArray&lt; Real, AMREX_SPACEDIM &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
        <childnode refid="24" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="33">
        <label>K</label>
      </node>
      <node id="3">
        <label>MLLinOp</label>
        <link refid="classamrex_1_1MLLinOpT"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_coarse_data_crse_ratio</edgelabel>
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>levelbc_raii</edgelabel>
          <edgelabel>robin_a_raii</edgelabel>
          <edgelabel>robin_b_raii</edgelabel>
          <edgelabel>robin_f_raii</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="92" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="95" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="136">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="117" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="126" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="109" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="116">
        <label>amrex::PCData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="117" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="109" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="4">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="111">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
      </node>
      <node id="113">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="114" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; amrex::IntVectND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="138">
        <label>amrex::Vector&lt; amrex::MultiFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="141">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="119">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="120" relation="public-inheritance">
        </childnode>
      </node>
      <node id="107">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="109">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="110" relation="public-inheritance">
        </childnode>
      </node>
      <node id="96">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>amrex::Vector&lt; std::unique_ptr&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="123">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="124" relation="public-inheritance">
        </childnode>
      </node>
      <node id="121">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="122" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="78" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="80" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="52">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="50" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="10" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="41">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="42" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="43" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="41" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="52" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="71" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="76">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="77" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="60">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="61" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="62" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="132">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="130">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="131" relation="public-inheritance">
        </childnode>
        <childnode refid="132" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="30">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="31" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="65" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="117">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="102" relation="public-inheritance">
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_dstng</edgelabel>
          <edgelabel>m_srcng</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_dstba</edgelabel>
          <edgelabel>m_srcba</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="35" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="103" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="102" relation="public-inheritance">
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="69">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="41" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="87">
        <label>amrex::IArrayBox</label>
        <link refid="classamrex_1_1IArrayBox"/>
        <childnode refid="88" relation="public-inheritance">
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>ifabio</edgelabel>
        </childnode>
      </node>
      <node id="90">
        <label>amrex::IFABio</label>
        <link refid="classamrex_1_1IFABio"/>
      </node>
      <node id="31">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="7">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="1">
        <label>amrex::MLEBNodeFDLaplacian</label>
        <link refid="classamrex_1_1MLEBNodeFDLaplacian"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="140" relation="usage">
          <edgelabel>m_sigma</edgelabel>
        </childnode>
        <childnode refid="141" relation="usage">
          <edgelabel>m_sigma_mf</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_rz_alpha</edgelabel>
          <edgelabel>m_s_phi_eb</edgelabel>
        </childnode>
        <childnode refid="138" relation="usage">
          <edgelabel>m_phi_eb</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::MLLinOpT&lt; MF &gt;::CommContainer</label>
        <link refid="structamrex_1_1MLLinOpT_1_1CommContainer"/>
      </node>
      <node id="2">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_owner_mask_bottom</edgelabel>
          <edgelabel>m_owner_mask_top</edgelabel>
        </childnode>
        <childnode refid="119" relation="usage">
          <edgelabel>m_dirichlet_mask</edgelabel>
        </childnode>
        <childnode refid="121" relation="usage">
          <edgelabel>m_cc_fine_mask</edgelabel>
          <edgelabel>m_nd_fine_mask</edgelabel>
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="123" relation="usage">
          <edgelabel>m_has_fine_bndry</edgelabel>
        </childnode>
        <childnode refid="125" relation="usage">
          <edgelabel>m_bottom_dot_mask</edgelabel>
          <edgelabel>m_coarse_dot_mask</edgelabel>
        </childnode>
        <childnode refid="138" relation="usage">
          <edgelabel>m_precond_weight_mask</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="82">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="125">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="126" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="106">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="10" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>Real</label>
      </node>
      <node id="23">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="23" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="85">
        <label>amrex::detail::SingleChunkArena</label>
        <link refid="classamrex_1_1detail_1_1SingleChunkArena"/>
        <childnode refid="77" relation="public-inheritance">
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
      </node>
      <node id="72">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="64" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="35" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="35" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="64" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="52" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="59" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="62" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="67">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>std::mutex</label>
      </node>
      <node id="35">
        <label>std::string</label>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="104">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="114">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="139">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="142">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="120">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="110">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="97">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="124">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="122">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="103">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="104" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="67" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="133">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="134" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="99">
        <label>std::unique_ptr&lt; amrex::FBData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="100" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="137">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="126" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="118">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="127">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="128" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="74">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="75" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="89">
        <label>std::unique_ptr&lt; amrex::IFABio &gt;</label>
        <childnode refid="90" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>std::unique_ptr&lt; amrex::MLLinOpT::CommContainer &gt;</label>
        <childnode refid="22" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="135">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="136" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="115">
        <label>std::unique_ptr&lt; amrex::PCData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="116" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="84">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
        <childnode refid="85" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::unique_ptr&lt; amrex::iMultiFab &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="31" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="83">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="129">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="130" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>std::vector&lt; IArrayBox * &gt;</label>
        <childnode refid="87" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="57">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="39">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="35" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H" bodystart="29" bodyend="130"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOpT_1a6f91fe74021d0128d1fcb8f49ee88bf5" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1abc2fbffffd5da85d5d31c81bae2db67e" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7aea888ca18e54df62e7dffc8378d872" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1af78475fe4fe5c23c340632733e045bd0" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa73c9a5abc4c1289c181dc297906221" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a862b45e632c8fa045d0857e13843481d" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af3ef819a79d23afc7993a4f6750d7a1d" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a98b3d591031f4803e388224bc1a477bb" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaef6b6d5b5aa06ad781f7c81b996ad78" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac933a7f88c4daa600f3737080c18a09e" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a76a13a28a0aeb3f09971b6d18abf3a82" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab2a0d1464333955b58343210d15bbb8" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>avgDownResMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad3f214e6e55b5de314dd5725a4148467" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af1d68aed7561ecff91f8bcb69ebed1f2" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>beginPrecondBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aa43fb0696cb5782669c8ee368b743099" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>buildMasks</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2ddc20eaca70aaa6da5935648ce06a82" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>CoarseningStrategy</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a49ce93875b124aaf77be7299ad685c80" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6f26e44f0e91bdfd3f6e9830c71a2ec6" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ae749675d0ae6abd70771a049598a64dc" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1044f61a2f9270efa01fce0898988ec6" prot="public" virt="virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4b8c0b3d1fd866b3b9a787bdcb056e77" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2018b943fdab7019461dc9580b04177c" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6f18465de0228f8ec4609e9e45367e5d" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a9e748bc534997b5de6b2df7295905616" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2032ea2a9fd37bb9179bc442d4949514" prot="public" virt="non-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a50ba282a5c21fc37d3b1c286e726abc8" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a11969b4ee11a7fcf44cf99859174b702" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>dotProductPrecond</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a96396d7924dbdfd503b5bad5e2b029c3" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>dotProductPrecond</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9e00df855bac527e0d4a11a5c31eb435" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>endPrecondBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6266e785b547d5c2632730beeedbd91c" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>FAB</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a23933063b2982e47f97dcc3f0adbaec6" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a978a4e15703a7ddf71c557eba128dcbe" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a8f7f76427fa0ea163014406f3d923933" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9b6ac2fe55b5951ef0aee9cfdf3e56c0" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1af851a769ccbcd52c5950734a24067440" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a375d3d3edaa7f6d3a16bf7a8456027f7" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9ba919a4ce697c39607efb32a8f08d82" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ae10763b783ce6190c161927125dd63" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4fc56d4aef22e014e4743cc6745f92e9" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4f45234f33332dbaf9406e4daa01b475" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a8f0f9865915b5d7c47bbff26bc46d442" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getNGrowVectRestriction</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7cdf303d65cabf9d64d4279622ca4fad" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a58bd68d622620c2000ac3eb4291811b2" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hasBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7b0475fe83f250e9f2b7baed5323ef93" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>info</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a4d49ac5447d6ea1fc807b221460fb54d" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2f7c32a95d9e511ccee3f3f256341141" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a3b6fb22e3c88f4ab7b5ca96c075a8323" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1c8739b0c8b387f82d1c4cb3ba3ea509" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a66229ad6a25ab3503f99f67a86be8fef" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add47eb9821c3b08db62d7f0f68554a4f" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a1ddc66c86313eb322b25f378139bc6d0" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1afdc35cf0e4f9853590f3857b567c5aaf" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>levelbc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab3de85fc7f1fa6ed5c182e15a4641164" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac1e86de83222345c43a378d8698c9543" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a4b398a735f5c05d0919bc24efc9a7025" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_bottom_dot_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a91c9e98ef8edd4106aace72a6c7a4294" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_cc_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6d6305f5cb6d0df287f766719bb9566d" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_data_for_bc_raii</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a117db04aae22221b83130cff6e6fdb52" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_dot_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae152107703463ca7e27c2e3dccf7538d" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarse_fine_bc_type</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1af4d1bfea4dae502fae40e6b71fd4deae" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_coarsening_strategy</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aaa52abefe4405ee59158a27c112ccfa9" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_dirichlet_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a76a73246b9e7679b93591f2093a857c3" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_has_fine_bndry</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1af1c4b0f8fc67f356ca5716e94634a6f5" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_has_sigma_mf</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a28e2b90709541cf46d64d3d382e6ade7" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_in_solution_mode</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a51345471274acc0bdd0b5477285d4db1" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_is_bottom_singular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2bb5e031c87b6bdf67618f9c25dc6945" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_masks_built</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a034b72948cecb00630515b6a2de77109" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_nd_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aac3b69575b67cb155459d699783d537f" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_norm_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7c0bb3eeb87e33f76c055d78e1e68df2" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_overset_dirichlet_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2f43f1de03008aad9e578d76ad0551be" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_owner_mask_bottom</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aa6f3b2435897100cfd9e1cba8c95d7af" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_owner_mask_top</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1aac77fee4af067d987c117ae62a73d9ce" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_phi_eb</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a82891a6e0ee05aa37590fe877158ec65" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_precond_mode</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ae362e5b9bd75ede998b3d2d049fff5b2" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_precond_weight_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a37504f75c2cf6b138aa349ec76e7a078" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_rz</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a78cd20ff53eafb5fcd69e357e221d08a" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_rz_alpha</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ad48c24f09145f008fdbfce5f08f02351" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_s_phi_eb</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a7d8ad0e6e2657c16c753f60cc17434af" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_sigma</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1af397473ffaa999e0ac6f0fa478d895a0" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_sigma_mf</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ab0b6c523511d1ccca7263730a75019f9" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>m_smooth_num_sweeps</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a847a98884f2bef463cfc9530e80ff0e8" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adea199dcf10fe80676dac612c77b4585" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ae050e4fda0843b175da8fbcfb8462392" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeOwnerMask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac42612ebc576bd674db633fd6d0363db" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MFType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2c3fc7b84d860915b7aa6bb06417800f" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a6442123515a236dc0a9947517279c8c8" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a0998f6ae5bff0e310795526582972f22" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a4b86eda13fc31604d8ca3bf79a158902" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ac5576c35f7765ea07f41688107686ebb" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aaf264472c0b70b5588a04b930fbcd8ff" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a712873309064abf30aafcb2d277890fb" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a02892864c3a177a34cc38d3d55a972fd" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a1abd0ae30a7a51ffe7672505fd171c2d" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1aeab1e2fe2f589ecdc3b9751208a22a" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a0e84e7809b2a53d3c039783fdb5c33a2" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a8b9d85ac7ef2b8ce584bf0ca16a02ef2" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>norm2Precond</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aac64e5e3f43ee3a11d6d657063abfa75" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>norm2Precond</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ab93f943cc0e03e4f1d5966700f3edf85" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa66bfea39287ead35be91ec940d0bb1" prot="public" virt="virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a6da7b56049ef0af652cdac637f1ce1e6" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a637cc2c475b32f4606119af00617d840" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a28124d996f580004f5fbdb48c576094f" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ae674894b2cd0d469d622e20339720e9e" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a5686c143c41d8e57733f9ec99cc733de" prot="public" virt="non-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1abaf2d3c82c8129007667300570326e44" prot="public" virt="non-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ccb3bf677188e12ee5c3447a7440982" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1f0362cc64cc8e85e445ce06edd81fd2" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1afda0a0f1ebd7ae2e71370ed2e627d6f8" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae4e5e8a7a396d2e9297e617bc575315a" prot="public" virt="virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae101fd3f33bbd0f0085d668b196cb527" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>prepareForFluxes</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ad5475aafb15a2e53a6dada12839c27c9" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a8b74b7733772e39028653b2450e9682f" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>preparePrecond</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a8b1c71665134af1b1ceccc4d17df2615" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1abe8255742bf5756e6659344cfa6ef5c4" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a0565c8afd01c7446c5c0b37373f49c24" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee3f3df0d83ef41c04eb1eef68f41797" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>robin_a_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>robin_b_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>robin_f_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a80a99742a01b1ee964cfbadaab285f51" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>RT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaef4ad9c7d2eb912a054b9583208c75e" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a3eca729943f3b29da314d62bcb5937d4" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setAlpha</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a776db3c3a85a3f2d3938446d7ce6b19c" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab12336bb4e985ab158e63397b4960171" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a455030051a17d954b7aeb6323b0a4fba" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3210982bb202d42999661f1c3920bf1e" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ad08f58adbfad6d97a54eec4261b8ce46" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setDirichletNodesToZero</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3c105d805c87469e86c653692af55428" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setDirichletNodesToZero</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a85ee06a6171baffc7d8ba4e7470a44ef" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1ca9d659068ffdf4e8d78d035aa9450c" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1afa9f37a1e4264b48744a5110fdb1c4ec" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setOversetMask</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1a7aa065c26dda1e04e7433b12f6c09648" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setRZ</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ab81f654708d4756a07160c7eaa343d48" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setSigma</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1ae912d5edf5cef0c5118f70ba1bf9aa4f" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setSigma</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1acf2ee340ce60a3e241d9d06e4d14db59" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setSmoothNumSweeps</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aa6f77ffd080d73ac9346cc408ee7a6d8" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a03189718c2f8cd40c34158bb4ddf6120" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a9577a87ff76e6c9406e3cbe716d26746" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4c4d498e615acd98b90da20eaee2a529" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a246fbbc22c78e2327ea936e3433fddf1" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae0ca480e28c3c9c318f0e4d5beee0143" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa9b2cbde953686aaf94f7f6442a0ea5c" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa1fde319e32db3c05ca0f7fd944c111" prot="protected" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a87aa267936bffcd4ed6387b3138bd9d5" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a81443deada65588ba7a71e191def4aa0" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>update</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a949d0c22ae1cd96ffa1961b06edee5d9" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc521ed02a450f7efc4d24f18d8ee7aa" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBNodeFDLaplacian</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLEBNodeFDLaplacian_1aeaa0c73ddfcd7079562b0dc98c5235d6" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>~MLEBNodeFDLaplacian</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" virt="virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>~MLLinOpT</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1af4372a5e9a6d9a6e71fb6f5c12d1e996" prot="public" virt="non-virtual"><scope>amrex::MLEBNodeFDLaplacian</scope><name>~MLNodeLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
