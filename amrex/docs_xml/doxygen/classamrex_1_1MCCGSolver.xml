<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1MCCGSolver" kind="class" language="C++" prot="public">
    <compoundname>amrex::MCCGSolver</compoundname>
    <includes refid="AMReX__MCCGSolver_8H" local="no">AMReX_MCCGSolver.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1aeee5195f76b84b035425eedc100bcf19" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MCMultiGrid" kindref="compound">MCMultiGrid</ref> *</type>
        <definition>MCMultiGrid* amrex::MCCGSolver::mg_precond</definition>
        <argsstring></argsstring>
        <name>mg_precond</name>
        <briefdescription>
<para><ref refid="classamrex_1_1MCMultiGrid" kindref="compound">MCMultiGrid</ref> solver to be used as preconditioner. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1ad9b81280f291f125be775cfbcc43149b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MCCGSolver::use_mg_precond</definition>
        <argsstring></argsstring>
        <name>use_mg_precond</name>
        <briefdescription>
<para>Flag: use multigrid as a preconditioner. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="218" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1a67daa471cadd81cbb09965c635596445" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MCCGSolver::isExpert</definition>
        <argsstring></argsstring>
        <name>isExpert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="225" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1a775fea91c8de5771a4d217d7ea20e213" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MCCGSolver::maxiter</definition>
        <argsstring></argsstring>
        <name>maxiter</name>
        <briefdescription>
<para>Current maximum number of allowed iterations, verbosity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="228" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1a1a06491cdcef828b05e36f74ad9724f7" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MCCGSolver::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="228" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1a166d6c36b89a891affdcf6119ccd84be" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref> &amp;</type>
        <definition>MCLinOp&amp; amrex::MCCGSolver::Lp</definition>
        <argsstring></argsstring>
        <name>Lp</name>
        <briefdescription>
<para>Reference to operator for linear system to be solved. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1aed9b8949788d702a4f659f9edb7215a4" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MCCGSolver::lev</definition>
        <argsstring></argsstring>
        <name>lev</name>
        <briefdescription>
<para>Integer to choose which &quot;level&quot; of the linear operator to use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1ae05da5eb36acf3226889ff349b982cc5" prot="protected" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::MCCGSolver::def_maxiter</definition>
        <argsstring></argsstring>
        <name>def_maxiter</name>
        <briefdescription>
<para>Default maximum number of allowed iterations, verbosity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="215" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1a00208f13edc6adf1d115624d2f0e5896" prot="protected" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::MCCGSolver::def_verbose</definition>
        <argsstring></argsstring>
        <name>def_verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="215" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1ab7c9edae0568cb7221b4f2a7a6c8bf89" prot="protected" static="yes" mutable="no">
        <type>double</type>
        <definition>double amrex::MCCGSolver::def_unstable_criterion</definition>
        <argsstring></argsstring>
        <name>def_unstable_criterion</name>
        <briefdescription>
<para>Default unstable_criterion used to test for loss of accuracy in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="221" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MCCGSolver_1adbb2d6c25ce5d9a779e799534b5b90a3" prot="protected" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::MCCGSolver::def_isExpert</definition>
        <argsstring></argsstring>
        <name>def_isExpert</name>
        <briefdescription>
<para>Flag determining action when error conditions are hit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="224" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1ab55bf033f00e65a388658d9956f666c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MCCGSolver::MCCGSolver</definition>
        <argsstring>(MCLinOp &amp;_lp, bool _use_mg_precond=false, int _lev=0)</argsstring>
        <name>MCCGSolver</name>
        <param>
          <type><ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref> &amp;</type>
          <declname>_lp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_use_mg_precond</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_lev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_lp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_use_mg_precond</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_lev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="59" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a4c096b58139bcee0a597db9fe71d8655" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MCCGSolver::~MCCGSolver</definition>
        <argsstring>()</argsstring>
        <name>~MCCGSolver</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1ace6373248b084bc0f3bda2389408f32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::solve</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel=-1.0, Real eps_abs=-1.0, MCBC_Mode bc_mode=MCInhomogeneous_BC)</argsstring>
        <name>solve</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
          <defval>-1.0</defval>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
          <defval>-1.0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ac6a345f3c5f30b5d97087d43bbf1c7ae" kindref="member">MCBC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="namespaceamrex_1ac6a345f3c5f30b5d97087d43bbf1c7aea372bb314280acee54f7e683ec43bbc19" kindref="member">MCInhomogeneous_BC</ref></defval>
        </param>
        <briefdescription>
<para>Solve the system, Lp(solnL)=rhsL to relative err, tolerance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps_rel</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps_abs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="113" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1aa9c96febb684f0912a5d3113be02af4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::setMaxIter</definition>
        <argsstring>(int _maxiter)</argsstring>
        <name>setMaxIter</name>
        <param>
          <type>int</type>
          <declname>_maxiter</declname>
        </param>
        <briefdescription>
<para>Set maximum allowed number of CG iterations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_maxiter</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a141954027a0fa1ea7aa08d8a6521ee27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MCCGSolver::getMaxIter</definition>
        <argsstring>() const </argsstring>
        <name>getMaxIter</name>
        <briefdescription>
<para>Get maximum allowed number of CG iterations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a9ef4d42eb110b4f318134b9a3b2292d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::setExpert</definition>
        <argsstring>(bool flag)</argsstring>
        <name>setExpert</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Set expert mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="122" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a467ee14e8fe781bda0fd8c94d2d04bc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MCCGSolver::getExpert</definition>
        <argsstring>()</argsstring>
        <name>getExpert</name>
        <briefdescription>
<para>Get expert flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="127" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1ac422ea3828ab3118a881044e3b3fdb1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::setUseMGPrecond</definition>
        <argsstring>(bool _use_mg_precond)</argsstring>
        <name>setUseMGPrecond</name>
        <param>
          <type>bool</type>
          <declname>_use_mg_precond</declname>
        </param>
        <briefdescription>
<para>Set flag determining whether MG preconditioning is used. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_use_mg_precond</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="134" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a32f68d215f26b64f1d0bc6cc7dc75467" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MCCGSolver::getUseMGPrecond</definition>
        <argsstring>() const </argsstring>
        <name>getUseMGPrecond</name>
        <briefdescription>
<para>Get flag determining whether MG preconditioning is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="139" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1aeb03ea644c46bb909ffd2443dfab9f75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::setVerbose</definition>
        <argsstring>(int _verbose)</argsstring>
        <name>setVerbose</name>
        <param>
          <type>int</type>
          <declname>_verbose</declname>
        </param>
        <briefdescription>
<para>Set the verbosity value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_verbose</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a916db148e30b0cf6af44003a7c918721" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MCCGSolver::getVerbose</definition>
        <argsstring>()</argsstring>
        <name>getVerbose</name>
        <briefdescription>
<para>Return the verbosity value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="151" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="284" bodyend="287"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a5bfc289cf8e870cc5b1f3c8bcbef259c" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>Construct work space, initialize parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="158" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="23" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1af51e8dc97acea4a946ae8eab56ff01d2" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="160" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="54" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a29525b43a69948599ddf8f28ee19ed16" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::set_mg_precond</definition>
        <argsstring>()</argsstring>
        <name>set_mg_precond</name>
        <briefdescription>
<para>if (use_mg_precond == 1) then define the <ref refid="classamrex_1_1MCMultiGrid" kindref="compound">MCMultiGrid</ref> * mg_precond </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="165" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a1a14c82bd18f0e27f95922a978baa11c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::advance</definition>
        <argsstring>(MultiFab &amp;p, Real beta, const MultiFab &amp;z)</argsstring>
        <name>advance</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Compute <computeroutput>p = z + beta p</computeroutput> in the CG algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="174" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="321" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1ae50e37542d2b4e0541dadba8c6d70718" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MCCGSolver::update</definition>
        <argsstring>(MultiFab &amp;sol, Real alpha, MultiFab &amp;r, const MultiFab &amp;p, const MultiFab &amp;w)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Compute <computeroutput>x =+ alpha p</computeroutput> and <computeroutput>r -= alpha w</computeroutput> in the CG algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="187" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="334" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1a7cc070d27df8fb7a2fae8791f02138d2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MCCGSolver::axp</definition>
        <argsstring>(MultiFab &amp;w, MultiFab &amp;p, MCBC_Mode bc_mode)</argsstring>
        <name>axp</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ac6a345f3c5f30b5d97087d43bbf1c7ae" kindref="member">MCBC_Mode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <briefdescription>
<para>Compute <computeroutput>w = A.p</computeroutput>, and return <computeroutput>Transpose(p).w</computeroutput> in the CG algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="349" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1aba7af676d39a70ba4eeedaf9a4d8b76c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MCCGSolver::norm</definition>
        <argsstring>(const MultiFab &amp;res)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Compute a suitable norm of the residual, used to check stopping criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.cpp" bodystart="92" bodyend="110"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1af7ee3ecbb71ab8437ffddd5e8ca3870d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MCCGSolver::MCCGSolver</definition>
        <argsstring>(const MCCGSolver &amp;)</argsstring>
        <name>MCCGSolver</name>
        <param>
          <type>const <ref refid="classamrex_1_1MCCGSolver" kindref="compound">MCCGSolver</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Disable copy constructor, = operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MCCGSolver_1ac385e84dfcde72774ade2a0ad744c0b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MCCGSolver" kindref="compound">MCCGSolver</ref> &amp;</type>
        <definition>MCCGSolver&amp; amrex::MCCGSolver::operator=</definition>
        <argsstring>(const MCCGSolver &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MCCGSolver" kindref="compound">MCCGSolver</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="243" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A CGColver solves the linear equation, L(phi)=rhs, for a <ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref> L and MultiFabs rhs and phi, using the conjugate gradient algorithm, either vanilla, or preconditioned via a single V-cycle of multigrid.</para><para>A <ref refid="classamrex_1_1MCCGSolver" kindref="compound">MCCGSolver</ref> object solves the linear equation, L(phi)=rhs for a <ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref> L, and MultiFabs phi and rhs. A <ref refid="classamrex_1_1MCCGSolver" kindref="compound">MCCGSolver</ref> is constructed with a fully initialized 2D or 3D <ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref>, and responds to &quot;solve&quot; requests of various signatures. The solve request (implicitly) includes a flag as to whether the system is to be solved with homogeneous boundary conditions or no. If homogeneous BCs are requested, all boundary information within the <ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref> is used, except that the values of boundary FabSets are zeroed. The algorithm follows closely that described of p15 of the SIAM book, &quot;Templates for the Solution of
Linear Systems&quot;. Before solving a system, a small number of control parameters may be modified (maximum number of allowed iterations, reporting verbosity, etc). Also, either on construction or via member access functions, the user may choose to use a V-cycle 1-step <ref refid="classamrex_1_1MCMultiGrid" kindref="compound">MCMultiGrid</ref> preconditioner within the CG loop by setting the appropriate bool flag (see members/ctrs below). The MG preconditioner used is just an instantiation of a <ref refid="classamrex_1_1MCMultiGrid" kindref="compound">MCMultiGrid</ref> class object (the <ref refid="classamrex_1_1MCMultiGrid" kindref="compound">MCMultiGrid</ref> class is documented separately).</para><para>Implementation Notes:</para><para>This algorithm implements solution of equations in a way that requires linearity of the operator. In &quot;residual correction form&quot;, equations are solved only for the &quot;correction&quot; to the initial guess that is required to solve the desired system. In particular, boundary conditions are assumed to be satisfied after a single application of the linear operator (therefore, the correction is homogeneous at the boundary). As a result, after putting the problem in residual correction form, the entire system CG system has homigeneous boundary conditions. This solver therefore cannot incorporate fully nonlinear systems.</para><para>In general, a <ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref> has the ability to apply high-order interpolation methods for computing boundary values. However, if the operator used in this <ref refid="classamrex_1_1MCCGSolver" kindref="compound">MCCGSolver</ref> is non-symmetric, cg performance suffers tremendously. As a result, BC&apos;s should be applied with interpolants of order less than or equal to 2. We do not enforce this condition rigourosly, since it would interfere with the user&apos;s definition of the operator. If cg performance is bad however, setting the <ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref>&apos;s maxorder=2 is a good place to start.</para><para>Default settings: The user has access to the following options in the cg algorithm:</para><para>maxiter(40) Maximum number of cg cycles allowed to solve the system before abandoning verbose(0) Verbosity (1-results, 2-progress, 3-detailed progress) use_mg_precond(false) Whether to use the V-cycle multigrid solver for the preconditioner system </para>    </detaileddescription>
    <collaborationgraph>
      <node id="4019">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiMask &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt; &gt;</label>
      </node>
      <node id="4049">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="4021">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="4030">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="4031" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="4034">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="4033">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4033" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4016">
        <label>amrex::Vector&lt; amrex::BndryRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4017" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4063">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="4029" relation="public-inheritance">
        </childnode>
        <childnode refid="4064" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="4055">
        <label>Real</label>
      </node>
      <node id="4023">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="4050">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4051" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4024">
        <label>amrex::BndryData</label>
        <link refid="classamrex_1_1BndryData"/>
        <childnode refid="4025" relation="public-inheritance">
        </childnode>
        <childnode refid="4053" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="4058" relation="usage">
          <edgelabel>bcloc</edgelabel>
        </childnode>
        <childnode refid="4061" relation="usage">
          <edgelabel>masks</edgelabel>
        </childnode>
        <childnode refid="4063" relation="usage">
          <edgelabel>bcond</edgelabel>
        </childnode>
      </node>
      <node id="4044">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="4035">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4036" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4031">
        <label>string</label>
      </node>
      <node id="4052">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="4033" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="4046">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="4062">
        <label>std::vector&lt; amrex::MultiMask, std::allocator&lt; amrex::MultiMask &gt; &gt;</label>
      </node>
      <node id="4020">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4021" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4045">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4046" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4065">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4047">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="4061">
        <label>amrex::Vector&lt; amrex::MultiMask &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4062" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4051">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="4036">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="4017">
        <label>std::vector&lt; amrex::BndryRegister, std::allocator&lt; amrex::BndryRegister &gt; &gt;</label>
      </node>
      <node id="4041">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="4033" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="4042" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="4013">
        <label>amrex::MCLinOp</label>
        <link refid="classamrex_1_1MCLinOp"/>
        <childnode refid="4014" relation="usage">
          <edgelabel>h</edgelabel>
        </childnode>
        <childnode refid="4016" relation="usage">
          <edgelabel>undrrelxr</edgelabel>
          <edgelabel>tangderiv</edgelabel>
        </childnode>
        <childnode refid="4018" relation="usage">
          <edgelabel>maskvals</edgelabel>
        </childnode>
        <childnode refid="4020" relation="usage">
          <edgelabel>gbox</edgelabel>
        </childnode>
        <childnode refid="4022" relation="usage">
          <edgelabel>geomarray</edgelabel>
        </childnode>
        <childnode refid="4024" relation="usage">
          <edgelabel>bgb</edgelabel>
        </childnode>
      </node>
      <node id="4056">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="4055" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="4064">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4065" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4057">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="4033" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="4042" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="4039">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="4040" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="4048">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4049" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4068">
        <label>std::vector&lt; amrex::MultiFab *, std::allocator&lt; amrex::MultiFab * &gt; &gt;</label>
      </node>
      <node id="4054">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="4055" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="4042">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="4040">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="4035" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="4012">
        <label>amrex::MCCGSolver</label>
        <link refid="classamrex_1_1MCCGSolver"/>
        <childnode refid="4013" relation="usage">
          <edgelabel>Lp</edgelabel>
        </childnode>
        <childnode refid="4066" relation="usage">
          <edgelabel>mg_precond</edgelabel>
        </childnode>
      </node>
      <node id="4026">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="4027" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="4043">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4044" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4032">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="4037">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="4038" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="4039" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="4027">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="4028" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4025">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
        <childnode refid="4026" relation="usage">
          <edgelabel>bndry</edgelabel>
        </childnode>
        <childnode refid="4041" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="4053">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="4054" relation="public-inheritance">
        </childnode>
        <childnode refid="4056" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="4057" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="4060">
        <label>std::vector&lt; RealTuple, std::allocator&lt; RealTuple &gt; &gt;</label>
      </node>
      <node id="4058">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="4029" relation="public-inheritance">
        </childnode>
        <childnode refid="4059" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="4059">
        <label>amrex::Vector&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4060" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4022">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4023" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4028">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="4029" relation="public-inheritance">
        </childnode>
        <childnode refid="4033" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="4035" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="4043" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="4045" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="4047" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="4048" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="4050" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="4052" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="4038">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="4067">
        <label>amrex::Vector&lt; amrex::MultiFab * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4029">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4030" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="4032" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="4033" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="4034" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="4035" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="4037" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="4041" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="4015">
        <label>std::vector&lt; Array&lt; Real, BL_SPACEDIM &gt;, std::allocator&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="4018">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4019" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4066">
        <label>amrex::MCMultiGrid</label>
        <link refid="classamrex_1_1MCMultiGrid"/>
        <childnode refid="4067" relation="usage">
          <edgelabel>cor</edgelabel>
          <edgelabel>rhs</edgelabel>
          <edgelabel>res</edgelabel>
        </childnode>
        <childnode refid="4013" relation="usage">
          <edgelabel>Lp</edgelabel>
        </childnode>
        <childnode refid="4027" relation="usage">
          <edgelabel>initialsolution</edgelabel>
        </childnode>
        <childnode refid="4055" relation="usage">
          <edgelabel>atol_b</edgelabel>
          <edgelabel>rtol_b</edgelabel>
          <edgelabel>def_atol_b</edgelabel>
          <edgelabel>def_rtol_b</edgelabel>
        </childnode>
      </node>
      <node id="4014">
        <label>amrex::Vector&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4015" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCCGSolver.H" bodystart="70" bodyend="244"/>
    <listofallmembers>
      <member refid="classamrex_1_1MCCGSolver_1a1a14c82bd18f0e27f95922a978baa11c" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>advance</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a7cc070d27df8fb7a2fae8791f02138d2" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>axp</name></member>
      <member refid="classamrex_1_1MCCGSolver_1adbb2d6c25ce5d9a779e799534b5b90a3" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>def_isExpert</name></member>
      <member refid="classamrex_1_1MCCGSolver_1ae05da5eb36acf3226889ff349b982cc5" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>def_maxiter</name></member>
      <member refid="classamrex_1_1MCCGSolver_1ab7c9edae0568cb7221b4f2a7a6c8bf89" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>def_unstable_criterion</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a00208f13edc6adf1d115624d2f0e5896" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>def_verbose</name></member>
      <member refid="classamrex_1_1MCCGSolver_1af51e8dc97acea4a946ae8eab56ff01d2" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a467ee14e8fe781bda0fd8c94d2d04bc1" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>getExpert</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a141954027a0fa1ea7aa08d8a6521ee27" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>getMaxIter</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a32f68d215f26b64f1d0bc6cc7dc75467" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>getUseMGPrecond</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a916db148e30b0cf6af44003a7c918721" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>getVerbose</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a5bfc289cf8e870cc5b1f3c8bcbef259c" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a67daa471cadd81cbb09965c635596445" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>isExpert</name></member>
      <member refid="classamrex_1_1MCCGSolver_1aed9b8949788d702a4f659f9edb7215a4" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>lev</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a166d6c36b89a891affdcf6119ccd84be" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>Lp</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a775fea91c8de5771a4d217d7ea20e213" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>maxiter</name></member>
      <member refid="classamrex_1_1MCCGSolver_1ab55bf033f00e65a388658d9956f666c4" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>MCCGSolver</name></member>
      <member refid="classamrex_1_1MCCGSolver_1af7ee3ecbb71ab8437ffddd5e8ca3870d" prot="private" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>MCCGSolver</name></member>
      <member refid="classamrex_1_1MCCGSolver_1aeee5195f76b84b035425eedc100bcf19" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>mg_precond</name></member>
      <member refid="classamrex_1_1MCCGSolver_1aba7af676d39a70ba4eeedaf9a4d8b76c" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>norm</name></member>
      <member refid="classamrex_1_1MCCGSolver_1ac385e84dfcde72774ade2a0ad744c0b3" prot="private" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a29525b43a69948599ddf8f28ee19ed16" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>set_mg_precond</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a9ef4d42eb110b4f318134b9a3b2292d1" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>setExpert</name></member>
      <member refid="classamrex_1_1MCCGSolver_1aa9c96febb684f0912a5d3113be02af4a" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>setMaxIter</name></member>
      <member refid="classamrex_1_1MCCGSolver_1ac422ea3828ab3118a881044e3b3fdb1c" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>setUseMGPrecond</name></member>
      <member refid="classamrex_1_1MCCGSolver_1aeb03ea644c46bb909ffd2443dfab9f75" prot="public" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MCCGSolver_1ace6373248b084bc0f3bda2389408f32a" prot="public" virt="virtual"><scope>amrex::MCCGSolver</scope><name>solve</name></member>
      <member refid="classamrex_1_1MCCGSolver_1ae50e37542d2b4e0541dadba8c6d70718" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>update</name></member>
      <member refid="classamrex_1_1MCCGSolver_1ad9b81280f291f125be775cfbcc43149b" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>use_mg_precond</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a1a06491cdcef828b05e36f74ad9724f7" prot="protected" virt="non-virtual"><scope>amrex::MCCGSolver</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MCCGSolver_1a4c096b58139bcee0a597db9fe71d8655" prot="public" virt="virtual"><scope>amrex::MCCGSolver</scope><name>~MCCGSolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
