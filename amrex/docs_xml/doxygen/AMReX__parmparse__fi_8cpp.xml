<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__parmparse__fi_8cpp" kind="file" language="C++">
    <compoundname>AMReX_parmparse_fi.cpp</compoundname>
    <includes local="no">cstring</includes>
    <includes refid="AMReX__ParmParse_8H" local="no">AMReX_ParmParse.H</includes>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <includes refid="AMReX__Vector_8H" local="no">AMReX_Vector.H</includes>
    <includes refid="AMReX__REAL_8H" local="no">AMReX_REAL.H</includes>
    <includes refid="AMReX__Print_8H" local="no">AMReX_Print.H</includes>
    <incdepgraph>
      <node id="31531">
        <label>list</label>
      </node>
      <node id="31555">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="31542" relation="include">
        </childnode>
        <childnode refid="31553" relation="include">
        </childnode>
        <childnode refid="31550" relation="include">
        </childnode>
        <childnode refid="31536" relation="include">
        </childnode>
      </node>
      <node id="31554">
        <label>iomanip</label>
      </node>
      <node id="31540">
        <label>functional</label>
      </node>
      <node id="31569">
        <label>limits</label>
      </node>
      <node id="31562">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="31528" relation="include">
        </childnode>
        <childnode refid="31548" relation="include">
        </childnode>
      </node>
      <node id="31563">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="31529" relation="include">
        </childnode>
        <childnode refid="31564" relation="include">
        </childnode>
        <childnode refid="31566" relation="include">
        </childnode>
        <childnode refid="31536" relation="include">
        </childnode>
        <childnode refid="31567" relation="include">
        </childnode>
        <childnode refid="31571" relation="include">
        </childnode>
        <childnode refid="31572" relation="include">
        </childnode>
        <childnode refid="31547" relation="include">
        </childnode>
        <childnode refid="31543" relation="include">
        </childnode>
        <childnode refid="31573" relation="include">
        </childnode>
        <childnode refid="31550" relation="include">
        </childnode>
        <childnode refid="31535" relation="include">
        </childnode>
        <childnode refid="31546" relation="include">
        </childnode>
      </node>
      <node id="31567">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="31529" relation="include">
        </childnode>
        <childnode refid="31558" relation="include">
        </childnode>
        <childnode refid="31568" relation="include">
        </childnode>
        <childnode refid="31569" relation="include">
        </childnode>
        <childnode refid="31570" relation="include">
        </childnode>
        <childnode refid="31551" relation="include">
        </childnode>
        <childnode refid="31536" relation="include">
        </childnode>
        <childnode refid="31547" relation="include">
        </childnode>
        <childnode refid="31543" relation="include">
        </childnode>
        <childnode refid="31550" relation="include">
        </childnode>
        <childnode refid="31565" relation="include">
        </childnode>
        <childnode refid="31533" relation="include">
        </childnode>
        <childnode refid="31549" relation="include">
        </childnode>
        <childnode refid="31535" relation="include">
        </childnode>
      </node>
      <node id="31534">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="31535" relation="include">
        </childnode>
        <childnode refid="31536" relation="include">
        </childnode>
        <childnode refid="31537" relation="include">
        </childnode>
        <childnode refid="31539" relation="include">
        </childnode>
        <childnode refid="31540" relation="include">
        </childnode>
        <childnode refid="31528" relation="include">
        </childnode>
        <childnode refid="31541" relation="include">
        </childnode>
        <childnode refid="31530" relation="include">
        </childnode>
        <childnode refid="31542" relation="include">
        </childnode>
      </node>
      <node id="31550">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="31551" relation="include">
        </childnode>
        <childnode refid="31530" relation="include">
        </childnode>
        <childnode refid="31542" relation="include">
        </childnode>
        <childnode refid="31533" relation="include">
        </childnode>
      </node>
      <node id="31552">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="31545" relation="include">
        </childnode>
        <childnode refid="31553" relation="include">
        </childnode>
        <childnode refid="31554" relation="include">
        </childnode>
        <childnode refid="31534" relation="include">
        </childnode>
        <childnode refid="31555" relation="include">
        </childnode>
        <childnode refid="31556" relation="include">
        </childnode>
      </node>
      <node id="31568">
        <label>cmath</label>
      </node>
      <node id="31538">
        <label>stdexcept</label>
      </node>
      <node id="31575">
        <label>numeric</label>
      </node>
      <node id="31528">
        <label>string</label>
      </node>
      <node id="31553">
        <label>fstream</label>
      </node>
      <node id="31524">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp</label>
        <link refid="AMReX_parmparse_fi.cpp"/>
        <childnode refid="31525" relation="include">
        </childnode>
        <childnode refid="31526" relation="include">
        </childnode>
        <childnode refid="31543" relation="include">
        </childnode>
        <childnode refid="31550" relation="include">
        </childnode>
        <childnode refid="31548" relation="include">
        </childnode>
        <childnode refid="31552" relation="include">
        </childnode>
      </node>
      <node id="31566">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="31548" relation="include">
        </childnode>
      </node>
      <node id="31543">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="31532" relation="include">
        </childnode>
        <childnode refid="31542" relation="include">
        </childnode>
        <childnode refid="31544" relation="include">
        </childnode>
        <childnode refid="31528" relation="include">
        </childnode>
        <childnode refid="31539" relation="include">
        </childnode>
        <childnode refid="31545" relation="include">
        </childnode>
        <childnode refid="31541" relation="include">
        </childnode>
        <childnode refid="31534" relation="include">
        </childnode>
        <childnode refid="31535" relation="include">
        </childnode>
        <childnode refid="31546" relation="include">
        </childnode>
        <childnode refid="31533" relation="include">
        </childnode>
        <childnode refid="31547" relation="include">
        </childnode>
        <childnode refid="31548" relation="include">
        </childnode>
      </node>
      <node id="31547">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="31549">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="31574">
        <label>typeinfo</label>
      </node>
      <node id="31541">
        <label>cstdio</label>
      </node>
      <node id="31546">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="31535" relation="include">
        </childnode>
      </node>
      <node id="31557">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="31527" relation="include">
        </childnode>
        <childnode refid="31528" relation="include">
        </childnode>
        <childnode refid="31544" relation="include">
        </childnode>
        <childnode refid="31545" relation="include">
        </childnode>
        <childnode refid="31541" relation="include">
        </childnode>
        <childnode refid="31558" relation="include">
        </childnode>
        <childnode refid="31559" relation="include">
        </childnode>
        <childnode refid="31560" relation="include">
        </childnode>
        <childnode refid="31561" relation="include">
        </childnode>
      </node>
      <node id="31530">
        <label>vector</label>
      </node>
      <node id="31527">
        <label>stack</label>
      </node>
      <node id="31533">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="31534" relation="include">
        </childnode>
      </node>
      <node id="31535">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="31544">
        <label>utility</label>
      </node>
      <node id="31532">
        <label>array</label>
      </node>
      <node id="31545">
        <label>sstream</label>
      </node>
      <node id="31537">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="31538" relation="include">
        </childnode>
      </node>
      <node id="31564">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="31551" relation="include">
        </childnode>
        <childnode refid="31535" relation="include">
        </childnode>
        <childnode refid="31549" relation="include">
        </childnode>
        <childnode refid="31565" relation="include">
        </childnode>
      </node>
      <node id="31556">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="31536" relation="include">
        </childnode>
        <childnode refid="31555" relation="include">
        </childnode>
        <childnode refid="31557" relation="include">
        </childnode>
        <childnode refid="31562" relation="include">
        </childnode>
        <childnode refid="31533" relation="include">
        </childnode>
        <childnode refid="31548" relation="include">
        </childnode>
        <childnode refid="31543" relation="include">
        </childnode>
        <childnode refid="31550" relation="include">
        </childnode>
        <childnode refid="31563" relation="include">
        </childnode>
        <childnode refid="31539" relation="include">
        </childnode>
        <childnode refid="31530" relation="include">
        </childnode>
        <childnode refid="31528" relation="include">
        </childnode>
        <childnode refid="31574" relation="include">
        </childnode>
        <childnode refid="31551" relation="include">
        </childnode>
        <childnode refid="31540" relation="include">
        </childnode>
        <childnode refid="31569" relation="include">
        </childnode>
        <childnode refid="31575" relation="include">
        </childnode>
      </node>
      <node id="31572">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="31529" relation="include">
        </childnode>
        <childnode refid="31533" relation="include">
        </childnode>
        <childnode refid="31547" relation="include">
        </childnode>
        <childnode refid="31535" relation="include">
        </childnode>
      </node>
      <node id="31565">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="31539" relation="include">
        </childnode>
        <childnode refid="31548" relation="include">
        </childnode>
        <childnode refid="31543" relation="include">
        </childnode>
      </node>
      <node id="31529">
        <label>iosfwd</label>
      </node>
      <node id="31558">
        <label>cstdlib</label>
      </node>
      <node id="31561">
        <label>cfenv</label>
      </node>
      <node id="31539">
        <label>iostream</label>
      </node>
      <node id="31571">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="31529" relation="include">
        </childnode>
        <childnode refid="31536" relation="include">
        </childnode>
        <childnode refid="31567" relation="include">
        </childnode>
        <childnode refid="31547" relation="include">
        </childnode>
      </node>
      <node id="31573">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="31567" relation="include">
        </childnode>
      </node>
      <node id="31570">
        <label>climits</label>
      </node>
      <node id="31560">
        <label>csignal</label>
      </node>
      <node id="31536">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="31526">
        <label>AMReX_ParmParse.H</label>
        <link refid="AMReX__ParmParse_8H"/>
        <childnode refid="31527" relation="include">
        </childnode>
        <childnode refid="31528" relation="include">
        </childnode>
        <childnode refid="31529" relation="include">
        </childnode>
        <childnode refid="31530" relation="include">
        </childnode>
        <childnode refid="31531" relation="include">
        </childnode>
        <childnode refid="31532" relation="include">
        </childnode>
        <childnode refid="31533" relation="include">
        </childnode>
      </node>
      <node id="31551">
        <label>algorithm</label>
      </node>
      <node id="31559">
        <label>execinfo.h</label>
      </node>
      <node id="31525">
        <label>cstring</label>
      </node>
      <node id="31542">
        <label>memory</label>
      </node>
      <node id="31548">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="31549" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a1d6fc43a4d487f75e36f2f1fab425d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_new_parmparse</definition>
        <argsstring>(ParmParse *&amp;pp, const char *name)</argsstring>
        <name>amrex_new_parmparse</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *&amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="12" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a03286b25639077c73a045730dc364d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_delete_parmparse</definition>
        <argsstring>(ParmParse *pp)</argsstring>
        <name>amrex_delete_parmparse</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a2782e04273b87daa680dc605b2ed07c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_parmparse_get_counts</definition>
        <argsstring>(ParmParse *pp, const char *name)</argsstring>
        <name>amrex_parmparse_get_counts</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="22" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a058050ce64222b08b2d2ad92add09876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_get_int</definition>
        <argsstring>(ParmParse *pp, const char *name, int *v)</argsstring>
        <name>amrex_parmparse_get_int</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a8e422f987eadc02120bc10eb8dd63ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_get_real</definition>
        <argsstring>(ParmParse *pp, const char *name, Real *v)</argsstring>
        <name>amrex_parmparse_get_real</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a92ec31caec3866b5b1ae97c629051c9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_get_bool</definition>
        <argsstring>(ParmParse *pp, const char *name, int *v)</argsstring>
        <name>amrex_parmparse_get_bool</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a78ee350073ec9be9c0939e35df045495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_get_string</definition>
        <argsstring>(ParmParse *pp, const char *name, char *&amp;v, int *len)</argsstring>
        <name>amrex_parmparse_get_string</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1ad97e291a4928e5576fdba224610bee1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_delete_cp_char</definition>
        <argsstring>(char **v, int len)</argsstring>
        <name>amrex_parmparse_delete_cp_char</name>
        <param>
          <type>char **</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1afc0a4b89b85545036a7a2f69be7d832f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_get_intarr</definition>
        <argsstring>(ParmParse *pp, const char *name, int v[], int len)</argsstring>
        <name>amrex_parmparse_get_intarr</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1aa1f35637a9bbff607365e8087dd63052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_get_realarr</definition>
        <argsstring>(ParmParse *pp, const char *name, Real v[], int len)</argsstring>
        <name>amrex_parmparse_get_realarr</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="69" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a769222d114fde3ca240bdf899fded050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_get_stringarr</definition>
        <argsstring>(ParmParse *pp, const char *name, char **v, int *sv, int n)</argsstring>
        <name>amrex_parmparse_get_stringarr</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a0443448295e069d522ebf267e54b29a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_parmparse_query_int</definition>
        <argsstring>(ParmParse *pp, const char *name, int *v)</argsstring>
        <name>amrex_parmparse_query_int</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="90" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1ac35391a012f0a82a935d40dba14361b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_parmparse_query_real</definition>
        <argsstring>(ParmParse *pp, const char *name, Real *v)</argsstring>
        <name>amrex_parmparse_query_real</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a179cd5db20084cda63c1950524f41254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_parmparse_query_bool</definition>
        <argsstring>(ParmParse *pp, const char *name, int *v)</argsstring>
        <name>amrex_parmparse_query_bool</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="100" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="100" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a6a0c46fca953eadfae278a68536e02c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_parmparse_query_string</definition>
        <argsstring>(ParmParse *pp, const char *name, char *&amp;v, int *len)</argsstring>
        <name>amrex_parmparse_query_string</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="111" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a1f08ca59454dd6d07c91b8902a2231e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_add_int</definition>
        <argsstring>(ParmParse *pp, const char *name, int v)</argsstring>
        <name>amrex_parmparse_add_int</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a2e54abaf0efc6afa15b00e805cdda701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_add_real</definition>
        <argsstring>(ParmParse *pp, const char *name, Real v)</argsstring>
        <name>amrex_parmparse_add_real</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="126" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1aed6edbec3197c33eb366b072e8a0fda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_add_bool</definition>
        <argsstring>(ParmParse *pp, const char *name, int v)</argsstring>
        <name>amrex_parmparse_add_bool</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1afa8246483ab8c777d88fb8603d3f4a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_add_string</definition>
        <argsstring>(ParmParse *pp, const char *name, const char *v)</argsstring>
        <name>amrex_parmparse_add_string</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a6eb0be7c4660c79070721ddc32aa11e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_add_intarr</definition>
        <argsstring>(ParmParse *pp, const char *name, const int v[], int len)</argsstring>
        <name>amrex_parmparse_add_intarr</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>v</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="141" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1ab81148f285ec4bdd2586cf66077ff34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_add_realarr</definition>
        <argsstring>(ParmParse *pp, const char *name, const Real v[], int len)</argsstring>
        <name>amrex_parmparse_add_realarr</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>v</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__parmparse__fi_8cpp_1a8f3018431606cb83862edff8c75be86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_parmparse_add_stringarr</definition>
        <argsstring>(ParmParse *pp, const char *name, const char *v, int len)</argsstring>
        <name>amrex_parmparse_add_stringarr</name>
        <param>
          <type><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> *</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" line="151" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp" bodystart="151" bodyend="161"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParmParse_8H" kindref="compound">AMReX_ParmParse.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Array_8H" kindref="compound">AMReX_Array.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Vector_8H" kindref="compound">AMReX_Vector.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__REAL_8H" kindref="compound">AMReX_REAL.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Print_8H" kindref="compound">AMReX_Print.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a1d6fc43a4d487f75e36f2f1fab425d25" kindref="member">amrex_new_parmparse</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*&amp;<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>(std::string(name));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a03286b25639077c73a045730dc364d64" kindref="member">amrex_delete_parmparse</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pp;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a2782e04273b87daa680dc605b2ed07c2" kindref="member">amrex_parmparse_get_counts</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a5fa6149dba1e6786bb41d612daabe9bf" kindref="member">countval</ref>(name);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a058050ce64222b08b2d2ad92add09876" kindref="member">amrex_parmparse_get_int</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>v)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a89ba46adc293a144e85d982e0637c5ae" kindref="member">get</ref>(name,<sp/>*v);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a8e422f987eadc02120bc10eb8dd63ecf" kindref="member">amrex_parmparse_get_real</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>Real*<sp/>v)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a89ba46adc293a144e85d982e0637c5ae" kindref="member">get</ref>(name,<sp/>*v);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a92ec31caec3866b5b1ae97c629051c9e" kindref="member">amrex_parmparse_get_bool</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>v)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a89ba46adc293a144e85d982e0637c5ae" kindref="member">get</ref>(name,<sp/>b);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a78ee350073ec9be9c0939e35df045495" kindref="member">amrex_parmparse_get_string</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>len)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>b;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a89ba46adc293a144e85d982e0637c5ae" kindref="member">get</ref>(name,<sp/>b);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>b.size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[*len];</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strncpy(v,<sp/>b.c_str(),<sp/>*len);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1ad97e291a4928e5576fdba224610bee1c" kindref="member">amrex_parmparse_delete_cp_char</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>v[i];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1afc0a4b89b85545036a7a2f69be7d832f" kindref="member">amrex_parmparse_get_intarr</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>r;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a5a8f186b863ed042920cb966cb490a84" kindref="member">getarr</ref>(name,<sp/>r);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>r[i];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1aa1f35637a9bbff607365e8087dd63052" kindref="member">amrex_parmparse_get_realarr</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>Real<sp/>v[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>r;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a5a8f186b863ed042920cb966cb490a84" kindref="member">getarr</ref>(name,<sp/>r);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>r[i];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a769222d114fde3ca240bdf899fded050" kindref="member">amrex_parmparse_get_stringarr</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>b;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a5a8f186b863ed042920cb966cb490a84" kindref="member">getarr</ref>(name,<sp/>b);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(n<sp/>==<sp/>static_cast&lt;int&gt;(b.size()));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sv[i]<sp/>=<sp/>b[i].size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[sv[i]];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strncpy(v[i],<sp/>b[i].c_str(),<sp/>sv[i]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a0443448295e069d522ebf267e54b29a2" kindref="member">amrex_parmparse_query_int</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>v)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a6d30fe0a4cd81ba121804385f40a65f5" kindref="member">query</ref>(name,<sp/>*v);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1ac35391a012f0a82a935d40dba14361b8" kindref="member">amrex_parmparse_query_real</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>Real*<sp/>v)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a6d30fe0a4cd81ba121804385f40a65f5" kindref="member">query</ref>(name,<sp/>*v);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a179cd5db20084cda63c1950524f41254" kindref="member">amrex_parmparse_query_bool</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>v)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp-&gt;<ref refid="classamrex_1_1ParmParse_1a6d30fe0a4cd81ba121804385f40a65f5" kindref="member">query</ref>(name,<sp/>b))<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a6a0c46fca953eadfae278a68536e02c1" kindref="member">amrex_parmparse_query_string</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>len)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>b;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a6d30fe0a4cd81ba121804385f40a65f5" kindref="member">query</ref>(name,<sp/>b);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>b.size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[*len];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::strncpy(v,<sp/>b.c_str(),<sp/>*len);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a1f08ca59454dd6d07c91b8902a2231e3" kindref="member">amrex_parmparse_add_int</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a370bca8ac17e25198c845b9882d80e70" kindref="member">add</ref>(name,v);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a2e54abaf0efc6afa15b00e805cdda701" kindref="member">amrex_parmparse_add_real</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>Real<sp/>v)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a370bca8ac17e25198c845b9882d80e70" kindref="member">add</ref>(name,v);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1aed6edbec3197c33eb366b072e8a0fda3" kindref="member">amrex_parmparse_add_bool</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a370bca8ac17e25198c845b9882d80e70" kindref="member">add</ref>(name,static_cast&lt;bool&gt;(v));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1afa8246483ab8c777d88fb8603d3f4a96" kindref="member">amrex_parmparse_add_string</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>v)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a370bca8ac17e25198c845b9882d80e70" kindref="member">add</ref>(name,<sp/>std::string{v});</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a6eb0be7c4660c79070721ddc32aa11e4" kindref="member">amrex_parmparse_add_intarr</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a101c28eac3841044445cf177eec905fa" kindref="member">addarr</ref>(name,<sp/>std::vector&lt;int&gt;(v,<sp/>v+len));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1ab81148f285ec4bdd2586cf66077ff34e" kindref="member">amrex_parmparse_add_realarr</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real<sp/>v[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a101c28eac3841044445cf177eec905fa" kindref="member">addarr</ref>(name,<sp/>std::vector&lt;Real&gt;(v,<sp/>v+len));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__parmparse__fi_8cpp_1a8f3018431606cb83862edff8c75be86d" kindref="member">amrex_parmparse_add_stringarr</ref><sp/>(<ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>*<sp/>pp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vs;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vs.reserve(len);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vs.push_back(p);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>vs[i].size()+1;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="classamrex_1_1ParmParse_1a101c28eac3841044445cf177eec905fa" kindref="member">addarr</ref>(name,<sp/>vs);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parmparse_fi.cpp"/>
  </compounddef>
</doxygen>
