<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MultiMask" kind="class" language="C++" prot="public">
    <compoundname>amrex::MultiMask</compoundname>
    <includes refid="AMReX__MultiMask_8H" local="no">AMReX_MultiMask.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1MultiMask_1a543302181bedff3235f600544f96197f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MultiMaskIter</definition>
        <argsstring></argsstring>
        <name>MultiMaskIter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiMaskIter" kindref="compound">MultiMaskIter</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="58" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MultiMask_1a30aad956b0f19c6b897f697915ebf80e" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &gt;</type>
        <definition>FabArray&lt;Mask&gt; amrex::MultiMask::m_fa</definition>
        <argsstring></argsstring>
        <name>m_fa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="62" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a1965badea589074d3865b6b7c258baa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiMask::MultiMask</definition>
        <argsstring>()</argsstring>
        <name>MultiMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="20" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a82389d75715d6277535cb793627c135e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiMask::MultiMask</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, int ncomp)</argsstring>
        <name>MultiMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="21" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.cpp" bodystart="7" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1aa6cb4358410dd413ca35d1ecdcc3fb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiMask::MultiMask</definition>
        <argsstring>(const BoxArray &amp;regba, const DistributionMapping &amp;dm, const Geometry &amp;geom, Orientation face, int in_rad, int out_rad, int extent_rad, int ncomp, bool initval)</argsstring>
        <name>MultiMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>regba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>in_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>out_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>extent_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="22" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.cpp" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a600deffa74aedae8cd4a0dc4d40bb31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiMask::~MultiMask</definition>
        <argsstring>()=default</argsstring>
        <name>~MultiMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="25" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1aa1a1571e1a1ec3db4787a6a05e38403c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiMask::MultiMask</definition>
        <argsstring>(MultiMask &amp;&amp;rhs) noexcept=default</argsstring>
        <name>MultiMask</name>
        <param>
          <type><ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="27" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a17295aabe1cef5654de77c7133bea544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiMask::MultiMask</definition>
        <argsstring>(const MultiMask &amp;rhs)=delete</argsstring>
        <name>MultiMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="29" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a9b33ae3b53911061ae8e1130568b85af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;</type>
        <definition>MultiMask&amp; amrex::MultiMask::operator=</definition>
        <argsstring>(const MultiMask &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="30" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a243a3677b563ffcb634fef14aea3e2d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;</type>
        <definition>MultiMask&amp; amrex::MultiMask::operator=</definition>
        <argsstring>(MultiMask &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="31" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1af6ad58f6413f1a7c247f26e74dd7aca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiMask::define</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, int ncomp)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="33" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a04dd68813ccdcb5e822955b2ec14e077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiMask::define</definition>
        <argsstring>(const BoxArray &amp;regba, const DistributionMapping &amp;dm, const Geometry &amp;geom, Orientation face, int in_rad, int out_rad, int extent_rad, int ncomp, bool initval)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>regba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>in_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>out_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>extent_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="34" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.cpp" bodystart="25" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1ada480977cbd644cd226e035c089f2594" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::MultiMask::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="37" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1af88debd7ac3c502ae1348d86fbecd5f4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>const Mask&amp; amrex::MultiMask::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="38" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a07ecfe5beabbefdf561883084bc00f55" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const  &gt;</type>
        <definition>Array4&lt;int const&gt; amrex::MultiMask::array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="40" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1ae990efb7be524a9f1e21c8084eb9ac4f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Array4&lt;int &gt; amrex::MultiMask::array</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="41" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a317cc5bf1f6a571f3e25202c363d10e4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const  &gt;</type>
        <definition>Array4&lt;int const&gt; amrex::MultiMask::const_array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="42" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1aa91f613b92e8f2b87ac444d0390b11e4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const  &gt;</type>
        <definition>MultiArray4&lt;int const&gt; amrex::MultiMask::arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="46" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a870791e7820e99cca147d99a44781622" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>MultiArray4&lt;int &gt; amrex::MultiMask::arrays</definition>
        <argsstring>() noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="47" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1abdb76ca06cc3de8e3378357d115aa723" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const  &gt;</type>
        <definition>MultiArray4&lt;int const&gt; amrex::MultiMask::const_arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="48" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a36d695b32af9b38493af2d60083ff6ba" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MultiMask::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="50" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a8a918fcc2ec7aad2de9961ba43eb9398" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::MultiMask::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="52" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a9a56afa54c82c81ec0db1992cf1a8d7b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::MultiMask::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="54" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="54" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MultiMask_1a9d21fed308318e770161ce5f76b4b60f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiMask::Copy</definition>
        <argsstring>(MultiMask &amp;dst, const MultiMask &amp;src)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="56" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.cpp" bodystart="74" bodyend="92"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="60">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="33" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="50">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="17">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>std::vector&lt; amrex::Mask * &gt;</label>
        <childnode refid="59" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>K</label>
      </node>
      <node id="18">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="9">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="9" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; amrex::Mask &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; amrex::Mask &gt; &gt;</label>
      </node>
      <node id="57">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="48">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="49" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="4">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="50" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; amrex::Mask &gt; &gt;</label>
      </node>
      <node id="37">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="38" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="22">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="9" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="54">
        <label>std::unique_ptr&lt; amrex::PCData&lt; amrex::Mask &gt; &gt;</label>
      </node>
      <node id="12">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="44" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>std::unique_ptr&lt; amrex::FBData&lt; amrex::Mask &gt; &gt;</label>
      </node>
      <node id="51">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
      </node>
      <node id="27">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="9" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="28">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="29" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="13">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="29">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="30" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="35">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="36" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="21" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="45">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="10">
        <label>amrex::BoxIndexer</label>
        <link refid="structamrex_1_1BoxIndexer"/>
      </node>
      <node id="59">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="60" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MultiMask</label>
        <link refid="classamrex_1_1MultiMask"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_fa</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="22" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="33">
        <label>std::string</label>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_MultiMask.H" bodystart="18" bodyend="63"/>
    <listofallmembers>
      <member refid="classamrex_1_1MultiMask_1a07ecfe5beabbefdf561883084bc00f55" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>array</name></member>
      <member refid="classamrex_1_1MultiMask_1ae990efb7be524a9f1e21c8084eb9ac4f" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>array</name></member>
      <member refid="classamrex_1_1MultiMask_1aa91f613b92e8f2b87ac444d0390b11e4" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>arrays</name></member>
      <member refid="classamrex_1_1MultiMask_1a870791e7820e99cca147d99a44781622" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>arrays</name></member>
      <member refid="classamrex_1_1MultiMask_1a8a918fcc2ec7aad2de9961ba43eb9398" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1MultiMask_1a317cc5bf1f6a571f3e25202c363d10e4" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>const_array</name></member>
      <member refid="classamrex_1_1MultiMask_1abdb76ca06cc3de8e3378357d115aa723" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>const_arrays</name></member>
      <member refid="classamrex_1_1MultiMask_1a9d21fed308318e770161ce5f76b4b60f" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>Copy</name></member>
      <member refid="classamrex_1_1MultiMask_1af6ad58f6413f1a7c247f26e74dd7aca3" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>define</name></member>
      <member refid="classamrex_1_1MultiMask_1a04dd68813ccdcb5e822955b2ec14e077" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>define</name></member>
      <member refid="classamrex_1_1MultiMask_1a9a56afa54c82c81ec0db1992cf1a8d7b" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1MultiMask_1a30aad956b0f19c6b897f697915ebf80e" prot="private" virt="non-virtual"><scope>amrex::MultiMask</scope><name>m_fa</name></member>
      <member refid="classamrex_1_1MultiMask_1a1965badea589074d3865b6b7c258baa1" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>MultiMask</name></member>
      <member refid="classamrex_1_1MultiMask_1a82389d75715d6277535cb793627c135e" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>MultiMask</name></member>
      <member refid="classamrex_1_1MultiMask_1aa6cb4358410dd413ca35d1ecdcc3fb0f" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>MultiMask</name></member>
      <member refid="classamrex_1_1MultiMask_1aa1a1571e1a1ec3db4787a6a05e38403c" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>MultiMask</name></member>
      <member refid="classamrex_1_1MultiMask_1a17295aabe1cef5654de77c7133bea544" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>MultiMask</name></member>
      <member refid="classamrex_1_1MultiMask_1a543302181bedff3235f600544f96197f" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>MultiMaskIter</name></member>
      <member refid="classamrex_1_1MultiMask_1a36d695b32af9b38493af2d60083ff6ba" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>nComp</name></member>
      <member refid="classamrex_1_1MultiMask_1a9b33ae3b53911061ae8e1130568b85af" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MultiMask_1a243a3677b563ffcb634fef14aea3e2d5" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MultiMask_1ada480977cbd644cd226e035c089f2594" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1MultiMask_1af88debd7ac3c502ae1348d86fbecd5f4" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1MultiMask_1a600deffa74aedae8cd4a0dc4d40bb31e" prot="public" virt="non-virtual"><scope>amrex::MultiMask</scope><name>~MultiMask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
