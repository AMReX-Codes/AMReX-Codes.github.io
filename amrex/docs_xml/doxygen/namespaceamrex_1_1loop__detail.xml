<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1loop__detail" kind="namespace" language="C++">
    <compoundname>amrex::loop_detail</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1af52fdeb3368a6e51b1547446480a490f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 1 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 1 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="17" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1ac48e6fab4200845ae1464ab52ec831f9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 2 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 2 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="25" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a8ead72da1a9a49fd81005a19578c26c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; dim &gt; iv, Args...args) noexcept -&gt; decltype(f(iv, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="33" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a3042d031dccc1977dbc3c3f6574099ae" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv))</argsstring>
        <name>call_f_intvect</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="51" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a9975e6fa70fb91cb56b62b1c34436662" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_ncomp</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, int n) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, 0))</argsstring>
        <name>call_f_intvect_ncomp</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="61" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a89e93745180a5a85ef667be801ee6a9c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_inner_cpu</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 1 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner_cpu</name>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 1 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="71" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1acc9fdee6f642f94d35694e57ac4046d5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_inner_cpu</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 2 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner_cpu</name>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 2 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="79" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a154e136915988b195cf06eece0749933" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_inner_cpu</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; dim &gt; iv, Args...args) noexcept -&gt; decltype(f(iv, args...))</argsstring>
        <name>call_f_intvect_inner_cpu</name>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a9c95f90383eea891f7ae725de969de76" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_cpu</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv) noexcept -&gt; decltype(call_f_intvect_inner_cpu(std::make_index_sequence&lt; dim &gt;(), f, iv))</argsstring>
        <name>call_f_intvect_cpu</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="105" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1ae922667b0d850b2bb5603749f8864438" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::loop_detail::call_f_intvect_ncomp_cpu</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, int n) noexcept -&gt; decltype(call_f_intvect_inner_cpu(std::make_index_sequence&lt; dim &gt;(), f, iv, 0))</argsstring>
        <name>call_f_intvect_ncomp_cpu</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="115" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a4c206a759ce68aefc599947e7f494168" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::loop_detail::Loop_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>Loop_impND</name>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="178" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="178" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a3392de1e44c6c7d03a7402ddc5207984" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::loop_detail::Loop_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, int n) noexcept</argsstring>
        <name>Loop_impND</name>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="219" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="219" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1aa6ce039c09354f520de021d761c40800" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::loop_detail::LoopConcurrent_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>LoopConcurrent_impND</name>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="262" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="262" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a68c03a8e616e19d37fbbfef2e2798706" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::loop_detail::LoopConcurrent_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, int n) noexcept</argsstring>
        <name>LoopConcurrent_impND</name>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="306" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="306" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1af7f8efd7c7639823222394e405d335f2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::loop_detail::LoopOnCpu_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>LoopOnCpu_impND</name>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="405" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="405" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1af4f26da56a7147fc25072e711b19688c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::loop_detail::LoopOnCpu_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, int n) noexcept</argsstring>
        <name>LoopOnCpu_impND</name>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="445" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="445" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a452bb548b2231de2fe30b1f49cc415bc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::loop_detail::LoopConcurrentOnCpu_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>LoopConcurrentOnCpu_impND</name>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="487" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="487" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a361a894845df6bb8adc38a2483044878" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::loop_detail::LoopConcurrentOnCpu_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, int n) noexcept</argsstring>
        <name>LoopConcurrentOnCpu_impND</name>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="530" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="530" bodyend="555"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="11" column="1"/>
  </compounddef>
</doxygen>
