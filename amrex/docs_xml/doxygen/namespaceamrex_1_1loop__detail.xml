<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1loop__detail" kind="namespace" language="C++">
    <compoundname>amrex::loop_detail</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1af36c9de5c2eaca79d18f42b90e444b74" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ auto</type>
        <definition>__host__ __device__ auto amrex::loop_detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 1 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 1 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="17" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1ad1bb46f5e494b30987d1daa3698b3401" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ auto</type>
        <definition>__host__ __device__ auto amrex::loop_detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 2 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 2 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="25" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a541bcaab7bd173be09eaf22e3fa16cf9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ auto</type>
        <definition>__host__ __device__ auto amrex::loop_detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; dim &gt; iv, Args...args) noexcept -&gt; decltype(f(iv, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="33" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1af5b00d5519327971de7ced2e7569cd4a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ auto</type>
        <definition>__host__ __device__ auto amrex::loop_detail::call_f_intvect</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv))</argsstring>
        <name>call_f_intvect</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="51" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a3803d7175baf23abc82032de278a553b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ auto</type>
        <definition>__host__ __device__ auto amrex::loop_detail::call_f_intvect_ncomp</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, int n) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, 0))</argsstring>
        <name>call_f_intvect_ncomp</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_ncomp</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="61" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a1bcc2e546f83382ad966e8df5f04408f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::loop_detail::call_f_intvect_inner_cpu</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 1 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner_cpu</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_inner_cpu</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 1 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="71" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a3acd30948c51586edaa38544e5ada1aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::loop_detail::call_f_intvect_inner_cpu</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 2 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner_cpu</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_inner_cpu</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 2 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="79" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1abe11386db81479caf99dc718d487cd55" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::loop_detail::call_f_intvect_inner_cpu</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; dim &gt; iv, Args...args) noexcept -&gt; decltype(f(iv, args...))</argsstring>
        <name>call_f_intvect_inner_cpu</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_inner_cpu</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1abd8c8c585b47a29df1ddd80827229fa0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::loop_detail::call_f_intvect_cpu</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv) noexcept -&gt; decltype(call_f_intvect_inner_cpu(std::make_index_sequence&lt; dim &gt;(), f, iv))</argsstring>
        <name>call_f_intvect_cpu</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_cpu</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="105" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a3386dce0ed68bb36bd1d622f8bb78c4f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::loop_detail::call_f_intvect_ncomp_cpu</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, int n) noexcept -&gt; decltype(call_f_intvect_inner_cpu(std::make_index_sequence&lt; dim &gt;(), f, iv, 0))</argsstring>
        <name>call_f_intvect_ncomp_cpu</name>
        <qualifiedname>amrex::loop_detail::call_f_intvect_ncomp_cpu</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="115" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a20a0bc32ab9c486ddf4c9edc04617f7c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::loop_detail::Loop_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>Loop_impND</name>
        <qualifiedname>amrex::loop_detail::Loop_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="178" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="178" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a22f4c0980ab54b550ee05b770d06b5d2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::loop_detail::Loop_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, int n) noexcept</argsstring>
        <name>Loop_impND</name>
        <qualifiedname>amrex::loop_detail::Loop_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="219" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="219" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a74a17c3985bd91410b368f03adc22c4b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::loop_detail::LoopConcurrent_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>LoopConcurrent_impND</name>
        <qualifiedname>amrex::loop_detail::LoopConcurrent_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="262" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="262" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1ad6f3be1aa227f22f1679eb1b0feaa53f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::loop_detail::LoopConcurrent_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, int n) noexcept</argsstring>
        <name>LoopConcurrent_impND</name>
        <qualifiedname>amrex::loop_detail::LoopConcurrent_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="306" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="306" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a54226bc19c5149c68dc2815b61e60448" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::loop_detail::LoopOnCpu_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>LoopOnCpu_impND</name>
        <qualifiedname>amrex::loop_detail::LoopOnCpu_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="405" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="405" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a2eee4bcfb1f8bca977bc3aabd975ccd8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::loop_detail::LoopOnCpu_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, int n) noexcept</argsstring>
        <name>LoopOnCpu_impND</name>
        <qualifiedname>amrex::loop_detail::LoopOnCpu_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="445" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="445" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a3ac784882f9747b757baa4dc2d8dff79" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::loop_detail::LoopConcurrentOnCpu_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>LoopConcurrentOnCpu_impND</name>
        <qualifiedname>amrex::loop_detail::LoopConcurrentOnCpu_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="487" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="487" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1loop__detail_1a274c695b6facb3d90458126fca75ca55" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::loop_detail::LoopConcurrentOnCpu_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, int n) noexcept</argsstring>
        <name>LoopConcurrentOnCpu_impND</name>
        <qualifiedname>amrex::loop_detail::LoopConcurrentOnCpu_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="530" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="530" bodyend="555"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="11" column="1"/>
  </compounddef>
</doxygen>
