<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1iMultiFab" kind="class" language="C++" prot="public">
    <compoundname>amrex::iMultiFab</compoundname>
    <basecompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; IArrayBox &gt;</basecompoundref>
    <includes refid="AMReX__iMultiFab_8H" local="no">AMReX_iMultiFab.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a5556632537bbfc0c8d88666c424a7a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>()</argsstring>
        <name>iMultiFab</name>
        <briefdescription>
<para>Constructs an empty <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. Data can be defined at a later time using the define member functions inherited from <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aeefd313bef0b68e0b94442b78afb22a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(const BoxArray &amp;bs, const DistributionMapping &amp;dm, int ncomp, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IArrayBox &gt; &amp;factory=DefaultFabFactory&lt; IArrayBox &gt;())</argsstring>
        <name>iMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> with a valid region defined by bxs and a region of definition defined by the grow factor ngrow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="160" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aac15b662883bbb087b1e7013d7869000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(const BoxArray &amp;bs, const DistributionMapping &amp;dm, int ncomp, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IArrayBox &gt; &amp;factory=DefaultFabFactory&lt; IArrayBox &gt;())</argsstring>
        <name>iMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="170" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a815bfdbfd6938b044ed23ac96d55a7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(const iMultiFab &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>iMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Make an alias <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. maketype must be <ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a1477998364b5f02d6ce68e3da29be1ba" kindref="member">amrex::make_alias</ref>. scomp is the starting component of the alias and ncomp is the number of components in the new aliasing <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maketype</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a0e2f3634debf8979c75292292af94e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::iMultiFab::~iMultiFab</definition>
        <argsstring>() override=default</argsstring>
        <name>~iMultiFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a78a07654498a88087435754603d8306d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(iMultiFab &amp;&amp;rhs) noexcept=default</argsstring>
        <name>iMultiFab</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aa17249a55ceb7467d2d2ddaded5b8e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
        <definition>iMultiFab&amp; amrex::iMultiFab::operator=</definition>
        <argsstring>(iMultiFab &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af7c2414a99e5017f1130e2e2c8e9d70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(const iMultiFab &amp;rhs)=delete</argsstring>
        <name>iMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ab8876b46ff60815091bd3905f98b365a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
        <definition>iMultiFab&amp; amrex::iMultiFab::operator=</definition>
        <argsstring>(const iMultiFab &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a328cd9d6dcd636daaa0599c168b7767b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::operator=</definition>
        <argsstring>(int r)</argsstring>
        <name>operator=</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af9eed6fbdb1caaa94e693f08080e4bef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::iMultiFab::min</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const </argsstring>
        <name>min</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the minimum value contained in component comp of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The parameter nghost determines the number of boundary cells to search for the minimum. The default is to search only the valid regions of the IArrayBoxes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="101" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="216" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a8d280bb418b66e9c001ae8855ee96c8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::iMultiFab::min</definition>
        <argsstring>(const Box &amp;b, int comp, int nghost=0, bool local=false) const </argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Identical to the previous <ref refid="classamrex_1_1iMultiFab_1af9eed6fbdb1caaa94e693f08080e4bef" kindref="member">min()</ref> function, but confines its search to intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="235" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a5a350674adae210ea074cd651866f1d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::iMultiFab::max</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const </argsstring>
        <name>max</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the maximum value contained in component comp of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The parameter nghost determines the number of boundary cells to search for the maximum. The default is to search only the valid regions of the IArrayBoxes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="264" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a64d57602511edacf5db63286be2d3989" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::iMultiFab::max</definition>
        <argsstring>(const Box &amp;b, int comp, int nghost=0, bool local=false) const </argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Identical to the previous <ref refid="classamrex_1_1iMultiFab_1a5a350674adae210ea074cd651866f1d1" kindref="member">max()</ref> function, but confines its search to intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="142" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="283" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a709be81177532aee72d56fc6f4591efd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::iMultiFab::sum</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const </argsstring>
        <name>sum</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the sum in component comp. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="312" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ab0fd430ccad60b7771778c64a7d928b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(int val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the specified subregion of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="464" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a8f26ae5a879d6286c8a639f84aa74563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(int val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1iMultiFab_1ab0fd430ccad60b7771778c64a7d928b5" kindref="member">plus()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="185" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="477" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af56a10b8407c86226901dc0b5ba070c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(int val, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a3c88d451792c4740296d8f4928da38db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(int val, const Box &amp;region, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>, that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="214" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af4227a4c2ca3581ae44d3749849f3f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::mult</definition>
        <argsstring>(int val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the specified subregion of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val). The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="506" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af5406410d32043523bbf1731020585f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::mult</definition>
        <argsstring>(int val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1iMultiFab_1af4227a4c2ca3581ae44d3749849f3f86" kindref="member">mult()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="249" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="519" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ad0f45679a0370bdb7dd411af0ace3f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::mult</definition>
        <argsstring>(int val, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val). The value of nghost specifies the number of cells in the boundary region that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="264" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a20f88cb636e58141aff41e1ce56a7932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::mult</definition>
        <argsstring>(int val, const Box &amp;region, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val), that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="278" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aeac56ffb9329f6269e866cff504adc9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::negate</definition>
        <argsstring>(int comp, int num_comp, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the specified subregion of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="293" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="533" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a3774fde1c4d962bde2f98da96e9e0d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::negate</definition>
        <argsstring>(const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1iMultiFab_1aeac56ffb9329f6269e866cff504adc9e" kindref="member">negate()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="544" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a4ba968b0fae543587863290a60b49716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::negate</definition>
        <argsstring>(int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the valid region of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a22c3343ab661a9ad5e7003b03ca66e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::negate</definition>
        <argsstring>(const Box &amp;region, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the valid region of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="330" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aee5951039053d8158b09a514a71c799d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::iMultiFab::minIndex</definition>
        <argsstring>(int comp, int nghost=0) const </argsstring>
        <name>minIndex</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="333" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="430" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a61346cec8ccf2060fa2f5f637720a396" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::iMultiFab::maxIndex</definition>
        <argsstring>(int comp, int nghost=0) const </argsstring>
        <name>maxIndex</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="336" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="438" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af9746c8ee7ac16060bf338ecdbdcaa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(const iMultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function adds the values of the cells in mf to the corresponding cells of this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The addition is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> will be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strt_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="353" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="491" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a7cf1d225d4d822d1a7abb2b0f2a0c531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::minus</definition>
        <argsstring>(const iMultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function subtracts the values of the cells in mf from the corresponding cells of this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The subtraction is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> will be modified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strt_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="372" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="446" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ad9722d52a2bd88a4c6f5bbe7f71dd747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::divide</definition>
        <argsstring>(const iMultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function divides the values of the cells in mf from the corresponding cells of this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The division is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> will be modified. Note, nothing is done to protect against divide by zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strt_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="392" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="455" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a281e5d5ab94b2da37746b48219a29f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IArrayBox &gt; &amp;factory=DefaultFabFactory&lt; IArrayBox &gt;()) override</argsstring>
        <name>define</name>
        <reimplements refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01">define</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="487" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="194" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a5ac868702f5d6d3c8ced0bd5c1b64c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IArrayBox &gt; &amp;factory=DefaultFabFactory&lt; IArrayBox &gt;()) override</argsstring>
        <name>define</name>
        <reimplements refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626">define</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Define this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> identically to that performed by the constructor having an analogous function signature. This is only valid if this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> was defined using the default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="499" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="205" bodyend="213"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a96632d65de11e9c8a5b941a615803fb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Add</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Add src to dst including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="408" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="25" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1afb9206f65daae6fa0d08e59a51b7ea8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Copy</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to dst including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="426" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="40" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a66a3302f803afd696dff628cf4c61e3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Subtract</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Subtract src from dst including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="444" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="55" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ae4eab34e67e569399b7a53cbe5d9d188" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Multiply</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Multiply dst by src including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="462" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="70" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a9aa5acb6b1a4d4701d4d35cc2a21f2c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Divide</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Divide dst by src including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="480" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="85" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a04e68d07c0aae11be5946e24023b17d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="511" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="143" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a30306fc1aaa921993a9667b639ec26c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="512" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="153" bodyend="156"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3356">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="3357" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3357">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3358" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3358">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3381">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="3359">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="3360" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3362">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="3363" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="3366">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="3365">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3365" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="3382">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3383" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3376">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="3367">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3368" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3363">
        <label>string</label>
      </node>
      <node id="3384">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="3365" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="3378">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="3377">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3378" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3379">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="3383">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="3368">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="3360">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3361" relation="public-inheritance">
        </childnode>
        <childnode refid="3365" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="3367" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="3375" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="3377" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="3379" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="3380" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="3382" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="3384" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="3373">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="3365" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="3374" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="3371">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="3372" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="3380">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3381" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3374">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="3372">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="3367" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="3375">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3364">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="3369">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="3370" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="3371" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="3370">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="3361">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="3362" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="3364" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="3365" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="3366" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="3367" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="3369" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="3373" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_iMultiFab.H" bodystart="28" bodyend="513"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1iMultiFab_1a96632d65de11e9c8a5b941a615803fb0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Add</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ADD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>addThisBD</name></member>
      <member refid="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc3c1d759fbd867cf7d9c806e56c30c7" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>box</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4bb7e999eee8c04f07573269b54e39d0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>boxarray</name></member>
      <member refid="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1abcd5df36dacaa8b31e6fcaaed30be3" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>buildTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1f6dc68b468c213274abf8e9219b532a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>bytesOfMapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>CFinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>CFinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b95df9ab5980407e45865e8876791be" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>clearThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>comm_tile_size</name></member>
      <member refid="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1iMultiFab_1afb9206f65daae6fa0d08e59a51b7ea8a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Copy</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>COPY</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1bb6a09ada00b5b7a900d8fecbf92e3c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArray_1a0b91952d964518b99146f011e68e672e" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1abf03244eb777726665c52dd8ae1dba67" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a54771a4280585982df8b5e9448cb2e27" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a4c6ab796ee21881664e1deb85186e9a2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>CPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae1a0d2f95995d26b5afe7c866f760bd6" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>CPCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>CpOp</name></member>
      <member refid="classamrex_1_1iMultiFab_1a281e5d5ab94b2da37746b48219a29f9b" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1iMultiFab_1a5ac868702f5d6d3c8ced0bd5c1b64c5d" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::iMultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::iMultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArrayBase_1abd59469241abaab18e1c2db8b7ceb4ed" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>distributionMap</name></member>
      <member refid="classamrex_1_1iMultiFab_1a9aa5acb6b1a4d4701d4d35cc2a21f2c6" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Divide</name></member>
      <member refid="classamrex_1_1iMultiFab_1ad9722d52a2bd88a4c6f5bbe7f71dd747" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>empty</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc0d46f9c8551ec9c1c6d6658103db15" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adce0fffa78b25dbbfa1f82701e579425" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a1409b3b24b8fe0b2fc51ee7627781adb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a2216055f245e5a44d5eaee59ac715013" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a1de730376dd381a0e0aaf26cee0565b4" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_cross</name></member>
      <member refid="classamrex_1_1FabArray_1a895064ef39dcc1b70cab62ef59243c15" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_epo</name></member>
      <member refid="classamrex_1_1FabArray_1aae76a45a4f6107d123d1f12123017515" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_ncomp</name></member>
      <member refid="classamrex_1_1FabArray_1aa14d5a982abbba95b4879b453d6e884b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_nghost</name></member>
      <member refid="classamrex_1_1FabArray_1afa2c5f52dddbe274a661b57fa60abf49" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_period</name></member>
      <member refid="classamrex_1_1FabArray_1a03fbd0e37ccb140399d5111ad8a9173a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1a256a4c5d1f5d93ed4f69baba008fd293" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_from</name></member>
      <member refid="classamrex_1_1FabArray_1a9ded15081c72b00f3649cb6890b03a31" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1a8fd0580be481f200e59e850c297047ff" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_size</name></member>
      <member refid="classamrex_1_1FabArray_1a2c94d11906514b3f8290a85682eb02b8" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_stat</name></member>
      <member refid="classamrex_1_1FabArray_1addcd803413e8691d103bd137cabf5406" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_scomp</name></member>
      <member refid="classamrex_1_1FabArray_1a6d78698d8d519bd122eb9c3d405d535b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_send_data</name></member>
      <member refid="classamrex_1_1FabArray_1a7a8376a51b48f1310d3d350ac70fe345" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_send_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1ac557f1eed392826db1eec4119103134a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_tag</name></member>
      <member refid="classamrex_1_1FabArray_1a74208704b8f6fd0320efbab5b6d84c33" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_the_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1acdbdf6b190956f4aea653b4a8668daf3" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_the_send_data</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aba788e1a081a9e668ba53d504e75a352" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FBCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1iMultiFab_1a30306fc1aaa921993a9667b639ec26c5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d3dbb0a351f570080f23f75febd836d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>flushCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a937cce5d85fb91c1bddad5f9f3c0adc4" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>flushCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3212be804b64d0f051f907c75fbad3d6" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>flushCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a53cf0c60964630e381fd523a72fbf267" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>flushFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afafdcf4e581478be608bb916274857d5" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>flushFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae7aac9d7bfa41ac76f80543a6a8c1898" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>flushFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa5c5f9aa77f5d7c4c73fafea2dc0116e" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>flushTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac5c3b09365bcaf3c92ec8d296da74ccc" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>flushTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FPinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3272dd508dcab2f679993ef1308a4278" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FPinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa0cb5039380dc0545d40ac5ac6589943" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>getBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a887fcf01f365f0cd92d32fceeba8ee3a" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>getCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5b4a0572662ad2d1a9cc30f3c6d8fd73" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>getFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab8548585b1a018f9d0a85cd43a719fe8" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>getTileArray</name></member>
      <member refid="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1iMultiFab_1a5556632537bbfc0c8d88666c424a7a3f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1aeefd313bef0b68e0b94442b78afb22a4" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1aac15b662883bbb087b1e7013d7869000" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1a815bfdbfd6938b044ed23ac96d55a7c0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1a78a07654498a88087435754603d8306d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1af7c2414a99e5017f1130e2e2c8e9d70f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7a4ed8b70e3aa4c3ddd3a24fb1c0f3a0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>IndexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>indexArray</name></member>
      <member refid="classamrex_1_1iMultiFab_1a04e68d07c0aae11be5946e24023b17d3" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6512ea611a6c04b5710334d9d9bfbb4e" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>isOwner</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a682fdf86619f6028fea2805d9693ae22" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ixType</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aabf6dbff99d8524f9c9d082302afdd5e" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>local_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa848db21ec5426fab2c86d441cd0a314" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>localindex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b7b09c9194e173ed0b7df6ec34847ad" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_BD_count</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_bdkey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7bc1878e44728621bf3f21e2ad7d87b5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_CFinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7300ef91cdc58de4230d68dee3691006" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_CPC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2678095b2d8ac82dac74b035a15d30f9" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_FA_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3b56b89f624446bcdfbbf6800de73675" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_FBC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5766cde9fd9e095f4d8f9f1731eb9047" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_FPinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa70ee9b229ec1e56083fd9519a92a000" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_mem_usage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4674b38da90801075df354a3491a8d17" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_region_tag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7ac2d31ebea84512f6379331df5c8d75" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_TAC_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_tags</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaa3d9b6c8292268b0472cc7c9895f10e" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_TheCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ee44b09d17bdb0425ab128b7ebc3cc5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_TheCrseFineCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d064b2059eb4cdd082f41be30e0d496" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_TheFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a85557ba47b4be7646013a3a7ae5ff1ae" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_TheFillPatchCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a19a98e6afcf41af75c85278285c1e66b" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_TheTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1iMultiFab_1a5a350674adae210ea074cd651866f1d1" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>max</name></member>
      <member refid="classamrex_1_1iMultiFab_1a64d57602511edacf5db63286be2d3989" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>max</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>MaxComp</name></member>
      <member refid="classamrex_1_1iMultiFab_1a61346cec8ccf2060fa2f5f637720a396" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a31677ce1cdddcbc405f41bb1a4351d35" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mfghostiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mfiter_tile_size</name></member>
      <member refid="classamrex_1_1iMultiFab_1af9eed6fbdb1caaa94e693f08080e4bef" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>min</name></member>
      <member refid="classamrex_1_1iMultiFab_1a8d280bb418b66e9c001ae8855ee96c8c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>min</name></member>
      <member refid="classamrex_1_1iMultiFab_1aee5951039053d8158b09a514a71c799d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1iMultiFab_1a7cf1d225d4d822d1a7abb2b0f2a0c531" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1iMultiFab_1af4227a4c2ca3581ae44d3749849f3f86" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1iMultiFab_1af5406410d32043523bbf1731020585f1" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1iMultiFab_1ad0f45679a0370bdb7dd411af0ace3f53" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1iMultiFab_1a20f88cb636e58141aff41e1ce56a7932" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1iMultiFab_1ae4eab34e67e569399b7a53cbe5d9d188" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Multiply</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>n_comp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>n_grow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>nComp</name></member>
      <member refid="classamrex_1_1iMultiFab_1aeac56ffb9329f6269e866cff504adc9e" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1iMultiFab_1a3774fde1c4d962bde2f98da96e9e0d55" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1iMultiFab_1a4ba968b0fae543587863290a60b49716" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1iMultiFab_1a22c3343ab661a9ad5e7003b03ca66e1f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92cef599b0ae34401a5463ec6fddc606" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1FabArray_1aa487ad1a422a80a53b13055e1781b1df" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ok</name></member>
      <member refid="classamrex_1_1iMultiFab_1aa17249a55ceb7467d2d2ddaded5b8e24" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1iMultiFab_1ab8876b46ff60815091bd3905f98b365a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1iMultiFab_1a328cd9d6dcd636daaa0599c168b7767b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8e414f069d04091245f3e9e94a3aa237" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>OwnerShip</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ownership</name></member>
      <member refid="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1iMultiFab_1ab0fd430ccad60b7771778c64a7d928b5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1iMultiFab_1a8f26ae5a879d6286c8a639f84aa74563" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1iMultiFab_1af56a10b8407c86226901dc0b5ba070c7" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1iMultiFab_1a3c88d451792c4740296d8f4928da38db" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1iMultiFab_1af9746c8ee7ac16060bf338ecdbdcaa5a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2de51872d78b63b8c99c30eac65f3ee3" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>popRegionTag</name></member>
      <member refid="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a56e425df3c8bb2e6aea3510d19646ceb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>printMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a18cdf2cc3d52d7d4d7dbf8c24ce614ee" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8278b7adc57c727c9718330665bdeef7" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a81ec42351b1a6d214b67e0285322f802" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>queryMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3e30aecf380fdf1926564da7155a5bc5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>queryMemUsageHWM</name></member>
      <member refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1ab9442a964296f689a711f4b2594d333c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1ab81e0f54e2bf418568003fd4dc10b1c0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a56f866d5ace5debf481ebb2770c1fdb2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1ad120e19b398c8fdcd683fc66a2828b5a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>shmem</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713a78056e395c21e855dcc1ed56525c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>size</name></member>
      <member refid="classamrex_1_1iMultiFab_1a66a3302f803afd696dff628cf4c61e3b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Subtract</name></member>
      <member refid="classamrex_1_1iMultiFab_1a709be81177532aee72d56fc6f4591efd" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>TACache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>TAMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaf2887a9352fecedc071410a48baea1c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>TheCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4150aeaf73494b1649babafad05d1d21" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>TheFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>updateBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1addf663082b0bdfcedda41fc8bbca4d5f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>updateMemUsage</name></member>
      <member refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae87329fe7a046f188ea78e63047152b6" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>WaitForAsyncSends</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>~FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d0b50241fbebae6e3d53e301cf2b23a" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>~FabArrayBase</name></member>
      <member refid="classamrex_1_1iMultiFab_1a0e2f3634debf8979c75292292af94e67" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>~iMultiFab</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
