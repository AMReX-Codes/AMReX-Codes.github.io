<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1iMultiFab" kind="class" language="C++" prot="public">
    <compoundname>amrex::iMultiFab</compoundname>
    <basecompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; IArrayBox &gt;</basecompoundref>
    <includes refid="AMReX__iMultiFab_8H" local="no">AMReX_iMultiFab.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a5556632537bbfc0c8d88666c424a7a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>()</argsstring>
        <name>iMultiFab</name>
        <briefdescription>
<para>Constructs an empty <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. Data can be defined at a later time using the define member functions inherited from <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="40" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aeefd313bef0b68e0b94442b78afb22a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(const BoxArray &amp;bs, const DistributionMapping &amp;dm, int ncomp, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IArrayBox &gt; &amp;factory=DefaultFabFactory&lt; IArrayBox &gt;())</argsstring>
        <name>iMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> with a valid region defined by bxs and a region of definition defined by the grow factor ngrow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="45" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="153" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aac15b662883bbb087b1e7013d7869000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(const BoxArray &amp;bs, const DistributionMapping &amp;dm, int ncomp, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IArrayBox &gt; &amp;factory=DefaultFabFactory&lt; IArrayBox &gt;())</argsstring>
        <name>iMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="57" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="163" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a815bfdbfd6938b044ed23ac96d55a7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(const iMultiFab &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>iMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Make an alias <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. maketype must be <ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a1477998364b5f02d6ce68e3da29be1ba" kindref="member">amrex::make_alias</ref>. scomp is the starting component of the alias and ncomp is the number of components in the new aliasing <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maketype</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="80" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a77c0301219eda95adb837e20401cef7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::iMultiFab::~iMultiFab</definition>
        <argsstring>() override</argsstring>
        <name>~iMultiFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="82" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a78a07654498a88087435754603d8306d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(iMultiFab &amp;&amp;rhs) noexcept=default</argsstring>
        <name>iMultiFab</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="84" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aa17249a55ceb7467d2d2ddaded5b8e24" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
        <definition>iMultiFab&amp; amrex::iMultiFab::operator=</definition>
        <argsstring>(iMultiFab &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="85" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af7c2414a99e5017f1130e2e2c8e9d70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::iMultiFab::iMultiFab</definition>
        <argsstring>(const iMultiFab &amp;rhs)=delete</argsstring>
        <name>iMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="87" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ab8876b46ff60815091bd3905f98b365a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
        <definition>iMultiFab&amp; amrex::iMultiFab::operator=</definition>
        <argsstring>(const iMultiFab &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="88" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a328cd9d6dcd636daaa0599c168b7767b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::operator=</definition>
        <argsstring>(int r)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a3668c019d451591659bdde40d4933b92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::iMultiFab::min</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the minimum value contained in component comp of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The parameter nghost determines the number of boundary cells to search for the minimum. The default is to search only the valid regions of the IArrayBoxes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="102" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="213" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a6100044730dadc00e44465ec1fbad781" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::iMultiFab::min</definition>
        <argsstring>(const Box &amp;b, int comp, int nghost=0, bool local=false) const</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Identical to the previous <ref refid="classamrex_1_1iMultiFab_1a3668c019d451591659bdde40d4933b92" kindref="member">min()</ref> function, but confines its search to intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="115" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="239" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a25af5cc2e9cd71a6079c8a8c74bd96bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::iMultiFab::max</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the maximum value contained in component comp of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The parameter nghost determines the number of boundary cells to search for the maximum. The default is to search only the valid regions of the IArrayBoxes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="130" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="266" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a3006a8ab3cbc152e70b8b1e6ba77f3e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::iMultiFab::max</definition>
        <argsstring>(const Box &amp;b, int comp, int nghost=0, bool local=false) const</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Identical to the previous <ref refid="classamrex_1_1iMultiFab_1a25af5cc2e9cd71a6079c8a8c74bd96bc" kindref="member">max()</ref> function, but confines its search to intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="143" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="294" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a2a2a37f4066af411d73b297946a62a34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::iMultiFab::sum</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the sum in component comp. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="155" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="321" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ab0fd430ccad60b7771778c64a7d928b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(int val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the specified subregion of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="170" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="441" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a8f26ae5a879d6286c8a639f84aa74563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(int val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1iMultiFab_1ab0fd430ccad60b7771778c64a7d928b5" kindref="member">plus()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="186" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="454" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af56a10b8407c86226901dc0b5ba070c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(int val, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="201" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a3c88d451792c4740296d8f4928da38db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(int val, const Box &amp;region, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>, that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="215" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af4227a4c2ca3581ae44d3749849f3f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::mult</definition>
        <argsstring>(int val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the specified subregion of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val). The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="232" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="483" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af5406410d32043523bbf1731020585f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::mult</definition>
        <argsstring>(int val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1iMultiFab_1af4227a4c2ca3581ae44d3749849f3f86" kindref="member">mult()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="250" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="496" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ad0f45679a0370bdb7dd411af0ace3f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::mult</definition>
        <argsstring>(int val, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val). The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="265" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a20f88cb636e58141aff41e1ce56a7932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::mult</definition>
        <argsstring>(int val, const Box &amp;region, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val), that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="279" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1aeac56ffb9329f6269e866cff504adc9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::negate</definition>
        <argsstring>(int comp, int num_comp, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the specified subregion of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="294" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="510" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a3774fde1c4d962bde2f98da96e9e0d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::negate</definition>
        <argsstring>(const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1iMultiFab_1aeac56ffb9329f6269e866cff504adc9e" kindref="member">negate()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="308" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="521" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a4ba968b0fae543587863290a60b49716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::negate</definition>
        <argsstring>(int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the valid region of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="320" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a22c3343ab661a9ad5e7003b03ca66e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::negate</definition>
        <argsstring>(const Box &amp;region, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the valid region of the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="331" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a6bd72fe6018116558b2863f32622755a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::iMultiFab::minIndex</definition>
        <argsstring>(int comp, int nghost=0) const</argsstring>
        <name>minIndex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="334" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a16f57e0d929a79571e20a91253efe2d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::iMultiFab::maxIndex</definition>
        <argsstring>(int comp, int nghost=0) const</argsstring>
        <name>maxIndex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="337" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="415" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1af9746c8ee7ac16060bf338ecdbdcaa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::plus</definition>
        <argsstring>(const iMultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function adds the values of the cells in mf to the corresponding cells of this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The addition is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> will be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strt_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="354" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="468" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a7cf1d225d4d822d1a7abb2b0f2a0c531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::minus</definition>
        <argsstring>(const iMultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function subtracts the values of the cells in mf from the corresponding cells of this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The subtraction is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> will be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strt_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="373" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="423" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ad9722d52a2bd88a4c6f5bbe7f71dd747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::divide</definition>
        <argsstring>(const iMultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function divides the values of the cells in mf from the corresponding cells of this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. The division is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> will be modified. Note, nothing is done to protect against divide by zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strt_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="393" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="432" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a281e5d5ab94b2da37746b48219a29f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IArrayBox &gt; &amp;factory=DefaultFabFactory&lt; IArrayBox &gt;()) override</argsstring>
        <name>define</name>
        <reimplements refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01">define</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="488" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a5ac868702f5d6d3c8ced0bd5c1b64c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IArrayBox &gt; &amp;factory=DefaultFabFactory&lt; IArrayBox &gt;()) override</argsstring>
        <name>define</name>
        <reimplements refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626">define</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Define this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> identically to that performed by the constructor having an analogous function signature. This is only valid if this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> was defined using the default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="500" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="202" bodyend="210"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a96632d65de11e9c8a5b941a615803fb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Add</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Add src to dst including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="409" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="25" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1afb9206f65daae6fa0d08e59a51b7ea8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Copy</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to dst including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="427" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="40" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a66a3302f803afd696dff628cf4c61e3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Subtract</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Subtract src from dst including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="445" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="55" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1ae4eab34e67e569399b7a53cbe5d9d188" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Multiply</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Multiply dst by src including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="463" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="70" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a9aa5acb6b1a4d4701d4d35cc2a21f2c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Divide</definition>
        <argsstring>(iMultiFab &amp;dst, const iMultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Divide dst by src including nghost ghost cells. The two iMultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="481" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="85" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a04e68d07c0aae11be5946e24023b17d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="512" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="136" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1iMultiFab_1a30306fc1aaa921993a9667b639ec26c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iMultiFab::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="513" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="146" bodyend="149"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="17">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="5">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="5" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="7" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="7">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="8" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="5" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="19">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="10">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3" relation="usage">
          <edgelabel>pc_recv_size</edgelabel>
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
          <edgelabel>pc_dnghost</edgelabel>
          <edgelabel>pc_snghost</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>pc_recv_from</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
          <edgelabel>pc_recv_data</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>pc_src</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>pc_recv_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
          <edgelabel>pc_send_reqs</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>fb_period</edgelabel>
          <edgelabel>pc_period</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" bodystart="29" bodyend="514"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1iMultiFab_1a96632d65de11e9c8a5b941a615803fb0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Add</name></member>
      <member refid="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>AllocFabs</name></member>
      <member refid="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>arena</name></member>
      <member refid="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1iMultiFab_1afb9206f65daae6fa0d08e59a51b7ea8a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Copy</name></member>
      <member refid="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1aa19dd0482e00be1e43cd9c37d60aa0b2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a307d4ba571507f21248861f1755fcb7c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a81b037f6ed7b60e5dc95d11512468187" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1iMultiFab_1a281e5d5ab94b2da37746b48219a29f9b" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1iMultiFab_1a5ac868702f5d6d3c8ced0bd5c1b64c5d" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>defined</name></member>
      <member refid="classamrex_1_1iMultiFab_1a9aa5acb6b1a4d4701d4d35cc2a21f2c6" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Divide</name></member>
      <member refid="classamrex_1_1iMultiFab_1ad9722d52a2bd88a4c6f5bbe7f71dd747" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a1de730376dd381a0e0aaf26cee0565b4" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_cross</name></member>
      <member refid="classamrex_1_1FabArray_1a895064ef39dcc1b70cab62ef59243c15" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_epo</name></member>
      <member refid="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FB_local_copy_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1aae76a45a4f6107d123d1f12123017515" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_ncomp</name></member>
      <member refid="classamrex_1_1FabArray_1aa14d5a982abbba95b4879b453d6e884b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_nghost</name></member>
      <member refid="classamrex_1_1FabArray_1afa2c5f52dddbe274a661b57fa60abf49" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_period</name></member>
      <member refid="classamrex_1_1FabArray_1a03fbd0e37ccb140399d5111ad8a9173a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1a256a4c5d1f5d93ed4f69baba008fd293" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_from</name></member>
      <member refid="classamrex_1_1FabArray_1a9ded15081c72b00f3649cb6890b03a31" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1a54045911503ef590eee3c7a0badc648b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_size</name></member>
      <member refid="classamrex_1_1FabArray_1a2c94d11906514b3f8290a85682eb02b8" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_recv_stat</name></member>
      <member refid="classamrex_1_1FabArray_1addcd803413e8691d103bd137cabf5406" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_scomp</name></member>
      <member refid="classamrex_1_1FabArray_1a6d78698d8d519bd122eb9c3d405d535b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_send_data</name></member>
      <member refid="classamrex_1_1FabArray_1a7a8376a51b48f1310d3d350ac70fe345" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_send_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1ac557f1eed392826db1eec4119103134a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_tag</name></member>
      <member refid="classamrex_1_1FabArray_1a74208704b8f6fd0320efbab5b6d84c33" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_the_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1acdbdf6b190956f4aea653b4a8668daf3" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>fb_the_send_data</name></member>
      <member refid="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a0e0073142d1598838048317216fa6d12" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a1ed9770416d4f7f30e3ff2e194d028f0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1iMultiFab_1a30306fc1aaa921993a9667b639ec26c5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1iMultiFab_1a5556632537bbfc0c8d88666c424a7a3f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1aeefd313bef0b68e0b94442b78afb22a4" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1aac15b662883bbb087b1e7013d7869000" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1a815bfdbfd6938b044ed23ac96d55a7c0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1a78a07654498a88087435754603d8306d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1af7c2414a99e5017f1130e2e2c8e9d70f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>iMultiFab</name></member>
      <member refid="classamrex_1_1iMultiFab_1a04e68d07c0aae11be5946e24023b17d3" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>isAllRegular</name></member>
      <member refid="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Iterator</name></member>
      <member refid="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_dallocator</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>m_tags</name></member>
      <member refid="classamrex_1_1iMultiFab_1a25af5cc2e9cd71a6079c8a8c74bd96bc" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>max</name></member>
      <member refid="classamrex_1_1iMultiFab_1a3006a8ab3cbc152e70b8b1e6ba77f3e8" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>max</name></member>
      <member refid="classamrex_1_1iMultiFab_1a16f57e0d929a79571e20a91253efe2d7" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1iMultiFab_1a3668c019d451591659bdde40d4933b92" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>min</name></member>
      <member refid="classamrex_1_1iMultiFab_1a6100044730dadc00e44465ec1fbad781" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>min</name></member>
      <member refid="classamrex_1_1iMultiFab_1a6bd72fe6018116558b2863f32622755a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1iMultiFab_1a7cf1d225d4d822d1a7abb2b0f2a0c531" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1iMultiFab_1af4227a4c2ca3581ae44d3749849f3f86" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1iMultiFab_1af5406410d32043523bbf1731020585f1" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1iMultiFab_1ad0f45679a0370bdb7dd411af0ace3f53" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1iMultiFab_1a20f88cb636e58141aff41e1ce56a7932" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1iMultiFab_1ae4eab34e67e569399b7a53cbe5d9d188" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Multiply</name></member>
      <member refid="classamrex_1_1iMultiFab_1aeac56ffb9329f6269e866cff504adc9e" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1iMultiFab_1a3774fde1c4d962bde2f98da96e9e0d55" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1iMultiFab_1a4ba968b0fae543587863290a60b49716" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1iMultiFab_1a22c3343ab661a9ad5e7003b03ca66e1f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ok</name></member>
      <member refid="classamrex_1_1iMultiFab_1aa17249a55ceb7467d2d2ddaded5b8e24" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1iMultiFab_1ab8876b46ff60815091bd3905f98b365a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1iMultiFab_1a328cd9d6dcd636daaa0599c168b7767b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1abde39eb49207b481b280b1386e828abb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a066e3ab046b92e144075c8f9df4aaf04" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a27a082106b94896a38832117858407b9" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a78457b34f328569ed1bc6065baff53c0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5a19b5ac3391b3b4009ec7c3ccafd8ad" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_actual_n_rcvs</name></member>
      <member refid="classamrex_1_1FabArray_1aff254d6dd8fd15b836d0b7caf690dc85" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_cpc</name></member>
      <member refid="classamrex_1_1FabArray_1a9080d099b2aa4f82b99aaecfa3de8de1" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_DC</name></member>
      <member refid="classamrex_1_1FabArray_1ab03c4402374ae12a7025a0e7ddefc8c9" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_dnghost</name></member>
      <member refid="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>PC_local_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a74ea3fc9de57d5c32ee47ca7e2b7fa0a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_NC</name></member>
      <member refid="classamrex_1_1FabArray_1acd459156e0298169038d8e9e25a4fc5c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_op</name></member>
      <member refid="classamrex_1_1FabArray_1a1063f67147a7d1a0fa08d648e2222134" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_period</name></member>
      <member refid="classamrex_1_1FabArray_1a227fee04d898cb38566728503cb44a70" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1a4a6c3426a40d9585978ccd6497d1cf8a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_recv_from</name></member>
      <member refid="classamrex_1_1FabArray_1a60edfeaa3cda4c59fc9a6d969595a028" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_recv_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1a265d8bd1b1bdb80d7c1c253b1bd5f5c0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_recv_size</name></member>
      <member refid="classamrex_1_1FabArray_1abab20cc977f9ec81d07c9dd9e4978400" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_SC</name></member>
      <member refid="classamrex_1_1FabArray_1a7792a53b1d33b3ec9183c54e676d1042" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_send_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1a79d847266bdb806633b8f76ee86349c0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_simple</name></member>
      <member refid="classamrex_1_1FabArray_1aa59d4f4c67f53c9633283c0cbd027bf5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_snghost</name></member>
      <member refid="classamrex_1_1FabArray_1a3d9f86cc0b8132e6b6b7baaf78f2e871" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_src</name></member>
      <member refid="classamrex_1_1FabArray_1a5bf4c33806175e260ac3e17f2a8821ad" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_tag</name></member>
      <member refid="classamrex_1_1FabArray_1a3bfc3399875a6f1059ee5b6d4ed0304b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_the_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1acc7c99b21bfc901f19c7a04405f206de" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>pc_the_send_data</name></member>
      <member refid="classamrex_1_1iMultiFab_1ab0fd430ccad60b7771778c64a7d928b5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1iMultiFab_1a8f26ae5a879d6286c8a639f84aa74563" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1iMultiFab_1af56a10b8407c86226901dc0b5ba070c7" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1iMultiFab_1a3c88d451792c4740296d8f4928da38db" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1iMultiFab_1af9746c8ee7ac16060bf338ecdbdcaa5a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; IArrayBox &gt;::"><scope>amrex::iMultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>RecvLayoutMask</name></member>
      <member refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1ab9442a964296f689a711f4b2594d333c" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1ab81e0f54e2bf418568003fd4dc10b1c0" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a56f866d5ace5debf481ebb2770c1fdb2" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1ad120e19b398c8fdcd683fc66a2828b5a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aaad9347944887bc14f15277d45585d84" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>shmem</name></member>
      <member refid="classamrex_1_1iMultiFab_1a66a3302f803afd696dff628cf4c61e3b" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>Subtract</name></member>
      <member refid="classamrex_1_1iMultiFab_1a2a2a37f4066af411d73b297946a62a34" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>tags</name></member>
      <member refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" virt="non-virtual"><scope>amrex::iMultiFab</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>~FabArray</name></member>
      <member refid="classamrex_1_1iMultiFab_1a77c0301219eda95adb837e20401cef7a" prot="public" virt="virtual"><scope>amrex::iMultiFab</scope><name>~iMultiFab</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
