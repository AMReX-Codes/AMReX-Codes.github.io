<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceamrex__io__module" kind="namespace" language="Fortran">
    <compoundname>amrex_io_module</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex__io__module_1a60b6d1a7ebbeef734c0ad2b2d1f67e31" prot="private" static="no" mutable="no">
        <type>integer, parameter, private</type>
        <definition>integer, parameter, private amrex_io_module::io_stdin</definition>
        <argsstring></argsstring>
        <name>io_stdin</name>
        <initializer>= 5</initializer>
        <briefdescription>
<para>Default input and output units: </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="7" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="7" bodyend="7"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex__io__module_1a3b8b5b3a05b268a9c3ef5e43f60ca582" prot="private" static="no" mutable="no">
        <type>integer, parameter, private</type>
        <definition>integer, parameter, private amrex_io_module::io_stdout</definition>
        <argsstring></argsstring>
        <name>io_stdout</name>
        <initializer>= 6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="8" bodyend="8"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex__io__module_1af6ee31bd3ea05a3cf6c8b71f63364298" prot="private" static="no" mutable="no">
        <type>integer, parameter, private</type>
        <definition>integer, parameter, private amrex_io_module::io_num_precon</definition>
        <argsstring></argsstring>
        <name>io_num_precon</name>
        <initializer>= 3</initializer>
        <briefdescription>
<para>Number and value of pre-connected units. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="12" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex__io__module_1aed71ac494e0dbdc248d4ceb0013d0de6" prot="private" static="no" mutable="no">
        <type>integer, dimension(<ref refid="namespaceamrex__io__module_1af6ee31bd3ea05a3cf6c8b71f63364298" kindref="member">io_num_precon</ref>), parameter, private</type>
        <definition>integer, dimension(io_num_precon), parameter, private amrex_io_module::io_precon_units</definition>
        <argsstring></argsstring>
        <name>io_precon_units</name>
        <initializer>= (/ 0, 5, 6 /)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex__io__module_1a3a0e0d4d2a87976db19e24b101aad226" prot="private" static="no" mutable="no">
        <type>integer, parameter, private</type>
        <definition>integer, parameter, private amrex_io_module::io_max_unit</definition>
        <argsstring></argsstring>
        <name>io_max_unit</name>
        <initializer>= 1000</initializer>
        <briefdescription>
<para>Largest allowed unit number (or a large number, if none) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="17" bodyend="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex__io__module_1a6fcead01fd17200da7dcfbfcb381b90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>integer function</type>
        <definition>integer function amrex_io_module::unit_new</definition>
        <argsstring>()</argsstring>
        <name>unit_new</name>
        <briefdescription>
<para>Several routines are written so that they can be conveniently called in routines that have optional arguments. For example, `` subroutine print_box(box, unit) optional :: unit write(unit=unit_stdout(unit), fmt *) box `` This routine will print on the stdout if UNIT is not passed to print_box, but will print to UNIT if UNIT is passed. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a unit number of a unit that exists and is not connected </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="36" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex__io__module_1a656089521bc62d04b85ee2b856936426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pure integer function</type>
        <definition>pure integer function amrex_io_module::unit_stdin</definition>
        <argsstring>(unit)</argsstring>
        <name>unit_stdin</name>
        <param>
          <type>unit</type>
          <defname>unit</defname>
        </param>
        <briefdescription>
<para>Returns the stdin unit number if no argument is passed, or else unit if it is passed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex__io__module_1ab13339615f0e6ce5f15ec24348980ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pure integer function</type>
        <definition>pure integer function amrex_io_module::unit_stdout</definition>
        <argsstring>(unit)</argsstring>
        <name>unit_stdout</name>
        <param>
          <type>unit</type>
          <defname>unit</defname>
        </param>
        <briefdescription>
<para>Returns the stdout unit number if no argument is passed, or else unit if it is passed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex__io__module_1aac1da49324f1aed83f2bd024ec43aa5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pure character(len=3) function</type>
        <definition>pure character(len=3) function amrex_io_module::unit_advance</definition>
        <argsstring>(advance)</argsstring>
        <name>unit_advance</name>
        <param>
          <type>advance</type>
          <defname>advance</defname>
        </param>
        <briefdescription>
<para>Returns the string &apos;YES&apos; if no argument is passed other wise returns the argument advance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex__io__module_1abefa6fe1b18a0790254d5d8215bf590c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>subroutine</type>
        <definition>subroutine amrex_io_module::unit_skip</definition>
        <argsstring>(unit, skip)</argsstring>
        <name>unit_skip</name>
        <param>
          <type>unit</type>
          <defname>unit</defname>
        </param>
        <param>
          <type>skip</type>
          <defname>skip</defname>
        </param>
        <briefdescription>
<para>Puts skip spaces of output, without advancing to the next record onto UNIT. If no skip argument is given, then no advance is done. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex__io__module_1abdeb5f15abfd64d74185c4e3dce5f2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pure integer function</type>
        <definition>pure integer function amrex_io_module::unit_get_skip</definition>
        <argsstring>(skip)</argsstring>
        <name>unit_get_skip</name>
        <param>
          <type>skip</type>
          <defname>skip</defname>
        </param>
        <briefdescription>
<para>A convenience function that returns 0 if SKIP is not present, otherwise it returns SKIP. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" bodystart="100" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_io_mod.F90" line="1" column="1"/>
  </compounddef>
</doxygen>
