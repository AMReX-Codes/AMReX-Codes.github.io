<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1IntDescriptor" kind="class" language="C++" prot="public">
    <compoundname>amrex::IntDescriptor</compoundname>
    <includes refid="AMReX__FabConv_8H" local="no">AMReX_FabConv.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839" prot="public" static="no">
        <name>Ordering</name>
        <enumvalue id="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839afc3cb7bc0cd89dcb5af02cce5baa23cd" prot="public">
          <name>NormalOrder</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839a4df03ba7689cd2d0b2bceb929c949b61" prot="public">
          <name>ReverseOrder</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enumeration describing the two orderings that we currently support: NormalOrder and ReverseOrder. Other orderings may be added as <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> is ported to run on machines with non-standard orderings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" bodystart="40" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntDescriptor_1a2367ec86e010c5342a4a3a76fc192213" prot="private" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::IntDescriptor::numbytes</definition>
        <argsstring></argsstring>
        <name>numbytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="62" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntDescriptor_1a26af90d55c81141a711427bcfdf5cc58" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839" kindref="member">Ordering</ref></type>
        <definition>Ordering amrex::IntDescriptor::ord</definition>
        <argsstring></argsstring>
        <name>ord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IntDescriptor_1a7ce7cebad55cb796e0c4e02933c63ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::IntDescriptor::IntDescriptor</definition>
        <argsstring>()</argsstring>
        <name>IntDescriptor</name>
        <briefdescription>
<para>The default constructor. Does not build a proper <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref>. This should only be used when you need to build a generic <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> in order to be able to read in a specific one from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntDescriptor_1a8e6ce8b7a8c715aca1af416b132d0ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::IntDescriptor::IntDescriptor</definition>
        <argsstring>(Long nb, Ordering ordering=NormalOrder)</argsstring>
        <name>IntDescriptor</name>
        <param>
          <type>Long</type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839" kindref="member">Ordering</ref></type>
          <declname>ordering</declname>
          <defval><ref refid="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839afc3cb7bc0cd89dcb5af02cce5baa23cd" kindref="member">NormalOrder</ref></defval>
        </param>
        <briefdescription>
<para>Construct a specific <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="22" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntDescriptor_1af4fd11c6c5ff73c8937000fd60729ad4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839" kindref="member">Ordering</ref></type>
        <definition>IntDescriptor::Ordering amrex::IntDescriptor::order</definition>
        <argsstring>() const</argsstring>
        <name>order</name>
        <briefdescription>
<para>Returns the ordering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntDescriptor_1aef80f57bdb73ad655c6f24d6ee58ef75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::IntDescriptor::numBytes</definition>
        <argsstring>() const</argsstring>
        <name>numBytes</name>
        <briefdescription>
<para>Returns the number of bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntDescriptor_1a537343bdd3bd917f5343bb16ed28875e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::IntDescriptor::operator==</definition>
        <argsstring>(const IntDescriptor &amp;id) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntDescriptor_1a8978d7b1e2a354efd66c3014c145a018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::IntDescriptor::operator!=</definition>
        <argsstring>(const IntDescriptor &amp;id) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>The inequality operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1IntDescriptor_1ae68dd8dc7268d4b438f79b8f499bc0d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntDescriptor &amp;id)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read in an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> from an istream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="69" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class is meant to hold all information needed to completely describe the &quot;int&quot; or &quot;Long&quot; type on a machine. To describe an integer both the number of bytes and their ordering, relative to canonical ordering 1 .. sizeof(Long), needs to be specified. This allows us to write out integers in the native format on a machine, and then by also saving the <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref>, we can read them back in on another machine and have enough information to construct the exact same values. </para>    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" bodystart="30" bodyend="64"/>
    <listofallmembers>
      <member refid="classamrex_1_1IntDescriptor_1a7ce7cebad55cb796e0c4e02933c63ca9" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>IntDescriptor</name></member>
      <member refid="classamrex_1_1IntDescriptor_1a8e6ce8b7a8c715aca1af416b132d0ebe" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>IntDescriptor</name></member>
      <member refid="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839afc3cb7bc0cd89dcb5af02cce5baa23cd" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>NormalOrder</name></member>
      <member refid="classamrex_1_1IntDescriptor_1a2367ec86e010c5342a4a3a76fc192213" prot="private" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>numbytes</name></member>
      <member refid="classamrex_1_1IntDescriptor_1aef80f57bdb73ad655c6f24d6ee58ef75" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>numBytes</name></member>
      <member refid="classamrex_1_1IntDescriptor_1a8978d7b1e2a354efd66c3014c145a018" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntDescriptor_1a537343bdd3bd917f5343bb16ed28875e" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntDescriptor_1ae68dd8dc7268d4b438f79b8f499bc0d6" prot="private" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1IntDescriptor_1a26af90d55c81141a711427bcfdf5cc58" prot="private" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>ord</name></member>
      <member refid="classamrex_1_1IntDescriptor_1af4fd11c6c5ff73c8937000fd60729ad4" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>order</name></member>
      <member refid="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>Ordering</name></member>
      <member refid="classamrex_1_1IntDescriptor_1a330214b8c0c3e224aecd2d2d95c0a839a4df03ba7689cd2d0b2bceb929c949b61" prot="public" virt="non-virtual"><scope>amrex::IntDescriptor</scope><name>ReverseOrder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
