<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1MFInfo" kind="struct" language="C++" prot="public">
    <compoundname>amrex::MFInfo</compoundname>
    <includes refid="AMReX__FabArray_8H" local="no">AMReX_FabArray.H</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1MFInfo_1a61ae5fd154086ea2849fe236e1dce794" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MFInfo::alloc</definition>
        <argsstring></argsstring>
        <name>alloc</name>
        <qualifiedname>amrex::MFInfo::alloc</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="68" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1MFInfo_1a9c2c1c22be713eb697b304968e90eff5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MFInfo::alloc_single_chunk</definition>
        <argsstring></argsstring>
        <name>alloc_single_chunk</name>
        <qualifiedname>amrex::MFInfo::alloc_single_chunk</qualifiedname>
        <initializer>= <ref refid="classamrex_1_1FabArrayBase_1a26c57d9e401fcc56f720c50f5bfdeb06" kindref="member">FabArrayBase::getAllocSingleChunk</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="69" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1MFInfo_1a343c7c4fcab4a05e69b24156ea271ed2" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::MFInfo::arena</definition>
        <argsstring></argsstring>
        <name>arena</name>
        <qualifiedname>amrex::MFInfo::arena</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="70" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1MFInfo_1ad0f86517b8114fbc3cfd3c5ef532a592" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::MFInfo::tags</definition>
        <argsstring></argsstring>
        <name>tags</name>
        <qualifiedname>amrex::MFInfo::tags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="71" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="71" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1MFInfo_1a7c496b5b0efd9545bc02b494d84c312a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
        <definition>MFInfo &amp; amrex::MFInfo::SetAlloc</definition>
        <argsstring>(bool a) noexcept</argsstring>
        <name>SetAlloc</name>
        <qualifiedname>amrex::MFInfo::SetAlloc</qualifiedname>
        <param>
          <type>bool</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="73" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1MFInfo_1ac2d0f920a5f1f6111d64bd61aa176a88" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
        <definition>MFInfo &amp; amrex::MFInfo::SetAllocSingleChunk</definition>
        <argsstring>(bool a) noexcept</argsstring>
        <name>SetAllocSingleChunk</name>
        <qualifiedname>amrex::MFInfo::SetAllocSingleChunk</qualifiedname>
        <param>
          <type>bool</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="75" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1MFInfo_1a383bf26d19a999b840e85c0fdcc19321" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
        <definition>MFInfo &amp; amrex::MFInfo::SetArena</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>SetArena</name>
        <qualifiedname>amrex::MFInfo::SetArena</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="77" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1MFInfo_1a56f33c46b46ff89df5316018185536a5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
        <definition>MFInfo &amp; amrex::MFInfo::SetTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>SetTag</name>
        <qualifiedname>amrex::MFInfo::SetTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="79" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1MFInfo_1ad45e95bcdb7bd65f899993de520747ac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
        <definition>MFInfo &amp; amrex::MFInfo::SetTag</definition>
        <argsstring>(const char *t) noexcept</argsstring>
        <name>SetTag</name>
        <qualifiedname>amrex::MFInfo::SetTag</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="81" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1MFInfo_1a32901c16da0924cb1403bc5ad693f17a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
        <definition>MFInfo &amp; amrex::MFInfo::SetTag</definition>
        <argsstring>(const std::string &amp;t) noexcept</argsstring>
        <name>SetTag</name>
        <qualifiedname>amrex::MFInfo::SetTag</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="86" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1MFInfo_1a120468defaf4afaaf710c9ad81acb5f2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
        <definition>MFInfo &amp; amrex::MFInfo::SetTag</definition>
        <argsstring>(T &amp;&amp;t, Ts &amp;&amp;... ts) noexcept</argsstring>
        <name>SetTag</name>
        <qualifiedname>amrex::MFInfo::SetTag</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="92" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="92" bodyend="95"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> memory allocation information. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="13">
        <label>T</label>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="3" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1">
        <label>amrex::MFInfo</label>
        <link refid="structamrex_1_1MFInfo"/>
        <childnode refid="2" relation="usage">
          <edgelabel>arena</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>tags</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="6">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::mutex</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="66" bodyend="96"/>
    <listofallmembers>
      <member refid="structamrex_1_1MFInfo_1a61ae5fd154086ea2849fe236e1dce794" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>alloc</name></member>
      <member refid="structamrex_1_1MFInfo_1a9c2c1c22be713eb697b304968e90eff5" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>alloc_single_chunk</name></member>
      <member refid="structamrex_1_1MFInfo_1a343c7c4fcab4a05e69b24156ea271ed2" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>arena</name></member>
      <member refid="structamrex_1_1MFInfo_1a7c496b5b0efd9545bc02b494d84c312a" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>SetAlloc</name></member>
      <member refid="structamrex_1_1MFInfo_1ac2d0f920a5f1f6111d64bd61aa176a88" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>SetAllocSingleChunk</name></member>
      <member refid="structamrex_1_1MFInfo_1a383bf26d19a999b840e85c0fdcc19321" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>SetArena</name></member>
      <member refid="structamrex_1_1MFInfo_1a56f33c46b46ff89df5316018185536a5" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>SetTag</name></member>
      <member refid="structamrex_1_1MFInfo_1ad45e95bcdb7bd65f899993de520747ac" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>SetTag</name></member>
      <member refid="structamrex_1_1MFInfo_1a32901c16da0924cb1403bc5ad693f17a" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>SetTag</name></member>
      <member refid="structamrex_1_1MFInfo_1a120468defaf4afaaf710c9ad81acb5f2" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>SetTag</name></member>
      <member refid="structamrex_1_1MFInfo_1ad0f86517b8114fbc3cfd3c5ef532a592" prot="public" virt="non-virtual"><scope>amrex::MFInfo</scope><name>tags</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
