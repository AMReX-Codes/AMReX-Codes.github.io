<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1ErrorList" kind="class" language="C++" prot="public">
    <compoundname>amrex::ErrorList</compoundname>
    <includes refid="AMReX__ErrorList_8H" local="no">AMReX_ErrorList.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1ErrorList_1a4c7fb1c88f200101a80a1e254e7d446e" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;ErrorRec&gt; &gt; amrex::ErrorList::vec</definition>
        <argsstring></argsstring>
        <name>vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="370" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="370" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ErrorList_1ae90f96fd0ed842150682d7c8226675a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ErrorList::ErrorList</definition>
        <argsstring>() noexcept</argsstring>
        <name>ErrorList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="338" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1a147954f74bf8c13090b0f243209c3c5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ErrorList::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>The number of ErrorRecs in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="343" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1a24cc461edabec719824a554000b4506b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ErrorList::add</definition>
        <argsstring>(const std::string &amp;name, int nextra, ErrorRec::ErrorType typ, const ErrorRec::ErrorFunc &amp;func)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nextra</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ErrorRec_1adeca3cab9dffebf73c48525e5f94872d" kindref="member">ErrorRec::ErrorType</ref></type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ErrorRec_1_1ErrorFunc" kindref="compound">ErrorRec::ErrorFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Append a new <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> to the list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nextra</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="353" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="178" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1add545e8b6a20030181680780d8c6dfc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ErrorList::add</definition>
        <argsstring>(const std::string &amp;name, int nextra, ErrorRec::ErrorType typ, const ErrorRec::ErrorFunc2 &amp;func)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nextra</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ErrorRec_1adeca3cab9dffebf73c48525e5f94872d" kindref="member">ErrorRec::ErrorType</ref></type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ErrorRec_1_1ErrorFunc2" kindref="compound">ErrorRec::ErrorFunc2</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="358" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="192" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1abdfed9e915c0fec995a85a86a8c8627e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> &amp;</type>
        <definition>const ErrorRec &amp; amrex::ErrorList::operator[]</definition>
        <argsstring>(int k) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>The kth <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="364" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="206" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1ab6e092af66fad6472ea4b6b7b273be26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ErrorList::clear</definition>
        <argsstring>(bool rs0=false)</argsstring>
        <name>clear</name>
        <param>
          <type>bool</type>
          <declname>rs0</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="366" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="366" bodyend="366"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A List of ErrorRecs. </para>    </briefdescription>
    <detaileddescription>
<para>Container class for ErrorRecs. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="1385">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::ErrorRec &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1386" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1384">
        <label>amrex::ErrorList</label>
        <link refid="classamrex_1_1ErrorList"/>
        <childnode refid="1385" relation="usage">
          <edgelabel>vec</edgelabel>
        </childnode>
      </node>
      <node id="1386">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::ErrorRec &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::ErrorRec &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="336" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="335" bodyend="371"/>
    <listofallmembers>
      <member refid="classamrex_1_1ErrorList_1a24cc461edabec719824a554000b4506b" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>add</name></member>
      <member refid="classamrex_1_1ErrorList_1add545e8b6a20030181680780d8c6dfc5" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>add</name></member>
      <member refid="classamrex_1_1ErrorList_1ab6e092af66fad6472ea4b6b7b273be26" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>clear</name></member>
      <member refid="classamrex_1_1ErrorList_1ae90f96fd0ed842150682d7c8226675a0" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>ErrorList</name></member>
      <member refid="classamrex_1_1ErrorList_1abdfed9e915c0fec995a85a86a8c8627e" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1ErrorList_1a147954f74bf8c13090b0f243209c3c5f" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>size</name></member>
      <member refid="classamrex_1_1ErrorList_1a4c7fb1c88f200101a80a1e254e7d446e" prot="private" virt="non-virtual"><scope>amrex::ErrorList</scope><name>vec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
