<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1ErrorList" kind="class" language="C++" prot="public">
    <compoundname>amrex::ErrorList</compoundname>
    <includes refid="AMReX__ErrorList_8H" local="no">AMReX_ErrorList.H</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1ErrorList_1a4c7fb1c88f200101a80a1e254e7d446e" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;ErrorRec&gt; &gt; amrex::ErrorList::vec</definition>
        <argsstring></argsstring>
        <name>vec</name>
        <qualifiedname>amrex::ErrorList::vec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="385" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="385" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ErrorList_1aa0fc2d7a254ee23a1275a5f70148e283" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ErrorList::ErrorList</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>ErrorList</name>
        <qualifiedname>amrex::ErrorList::ErrorList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="353" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1a147954f74bf8c13090b0f243209c3c5f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ErrorList::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::ErrorList::size</qualifiedname>
        <briefdescription>
<para>The number of ErrorRecs in the list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="358" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1a24cc461edabec719824a554000b4506b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ErrorList::add</definition>
        <argsstring>(const std::string &amp;name, int nextra, ErrorRec::ErrorType typ, const ErrorRec::ErrorFunc &amp;func)</argsstring>
        <name>add</name>
        <qualifiedname>amrex::ErrorList::add</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nextra</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ErrorRec_1adeca3cab9dffebf73c48525e5f94872d" kindref="member">ErrorRec::ErrorType</ref></type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ErrorRec_1_1ErrorFunc" kindref="compound">ErrorRec::ErrorFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Append a new <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> to the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nextra</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="368" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="162" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1add545e8b6a20030181680780d8c6dfc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ErrorList::add</definition>
        <argsstring>(const std::string &amp;name, int nextra, ErrorRec::ErrorType typ, const ErrorRec::ErrorFunc2 &amp;func)</argsstring>
        <name>add</name>
        <qualifiedname>amrex::ErrorList::add</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nextra</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ErrorRec_1adeca3cab9dffebf73c48525e5f94872d" kindref="member">ErrorRec::ErrorType</ref></type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ErrorRec_1_1ErrorFunc2" kindref="compound">ErrorRec::ErrorFunc2</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="373" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="176" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1abdfed9e915c0fec995a85a86a8c8627e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> &amp;</type>
        <definition>const ErrorRec &amp; amrex::ErrorList::operator[]</definition>
        <argsstring>(int k) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::ErrorList::operator[]</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>The kth <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="379" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="190" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ErrorList_1ab6e092af66fad6472ea4b6b7b273be26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ErrorList::clear</definition>
        <argsstring>(bool rs0=false)</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::ErrorList::clear</qualifiedname>
        <param>
          <type>bool</type>
          <declname>rs0</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="381" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="381" bodyend="381"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A List of ErrorRecs. </para>
    </briefdescription>
    <detaileddescription>
<para>Container class for ErrorRecs. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>T</label>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::ErrorRec &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ErrorList</label>
        <link refid="classamrex_1_1ErrorList"/>
        <childnode refid="2" relation="usage">
          <edgelabel>vec</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="350" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="351" bodyend="386"/>
    <listofallmembers>
      <member refid="classamrex_1_1ErrorList_1a24cc461edabec719824a554000b4506b" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>add</name></member>
      <member refid="classamrex_1_1ErrorList_1add545e8b6a20030181680780d8c6dfc5" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>add</name></member>
      <member refid="classamrex_1_1ErrorList_1ab6e092af66fad6472ea4b6b7b273be26" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>clear</name></member>
      <member refid="classamrex_1_1ErrorList_1aa0fc2d7a254ee23a1275a5f70148e283" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>ErrorList</name></member>
      <member refid="classamrex_1_1ErrorList_1abdfed9e915c0fec995a85a86a8c8627e" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1ErrorList_1a147954f74bf8c13090b0f243209c3c5f" prot="public" virt="non-virtual"><scope>amrex::ErrorList</scope><name>size</name></member>
      <member refid="classamrex_1_1ErrorList_1a4c7fb1c88f200101a80a1e254e7d446e" prot="private" virt="non-virtual"><scope>amrex::ErrorList</scope><name>vec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
