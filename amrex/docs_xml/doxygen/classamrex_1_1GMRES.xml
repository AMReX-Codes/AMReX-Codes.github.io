<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1GMRES" kind="class" language="C++" prot="public">
    <compoundname>amrex::GMRES</compoundname>
    <includes refid="AMReX__GMRES_8H" local="no">AMReX_GMRES.H</includes>
    <templateparamlist>
      <param>
        <type>typename V</type>
      </param>
      <param>
        <type>typename M</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" prot="public" static="no">
        <type>typename M::RT</type>
        <definition>using amrex::GMRES&lt; V, M &gt;::RT =  typename M::RT</definition>
        <argsstring></argsstring>
        <name>RT</name>
        <qualifiedname>amrex::GMRES::RT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="83" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="83" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a42dcd0b4b94f5567bef14a46032b5646" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::GMRES&lt; V, M &gt;::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <qualifiedname>amrex::GMRES::m_verbose</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="133" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a5c0f9c75918ca3d28071244df41bd1aa" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::GMRES&lt; V, M &gt;::m_maxiter</definition>
        <argsstring></argsstring>
        <name>m_maxiter</name>
        <qualifiedname>amrex::GMRES::m_maxiter</qualifiedname>
        <initializer>= 2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="134" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a87d7d08dbb34c4033f140161cf136a10" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::GMRES&lt; V, M &gt;::m_its</definition>
        <argsstring></argsstring>
        <name>m_its</name>
        <qualifiedname>amrex::GMRES::m_its</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="135" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a17f683d2c35ae90c2503051415156de6" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::GMRES&lt; V, M &gt;::m_status</definition>
        <argsstring></argsstring>
        <name>m_status</name>
        <qualifiedname>amrex::GMRES::m_status</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="136" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a8c2b6b33ceb2cb2a1342efd3f2b1c13b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::GMRES&lt; V, M &gt;::m_restrtlen</definition>
        <argsstring></argsstring>
        <name>m_restrtlen</name>
        <qualifiedname>amrex::GMRES::m_restrtlen</qualifiedname>
        <initializer>= 30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="137" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1afbcc70d7e05d287e623de403243074f4" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref></type>
        <definition>RT amrex::GMRES&lt; V, M &gt;::m_res</definition>
        <argsstring></argsstring>
        <name>m_res</name>
        <qualifiedname>amrex::GMRES::m_res</qualifiedname>
        <initializer>= std::numeric_limits&lt;<ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref>&gt;<ref refid="namespaceamrex_1a9d99cb1523b9f336dad742f6a15bdf59" kindref="member">::max</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="138" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a4c8e3a4f12808510fd105e94547d264a" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref></type>
        <definition>RT amrex::GMRES&lt; V, M &gt;::m_rtol</definition>
        <argsstring></argsstring>
        <name>m_rtol</name>
        <qualifiedname>amrex::GMRES::m_rtol</qualifiedname>
        <initializer>= <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="139" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a5af8aa359ba7c32316907ca724566ad4" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref></type>
        <definition>RT amrex::GMRES&lt; V, M &gt;::m_atol</definition>
        <argsstring></argsstring>
        <name>m_atol</name>
        <qualifiedname>amrex::GMRES::m_atol</qualifiedname>
        <initializer>= <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="140" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a5691847f4acd9554a668ec0d1b606d32" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &gt;</type>
        <definition>Vector&lt;RT&gt; amrex::GMRES&lt; V, M &gt;::m_hh_1d</definition>
        <argsstring></argsstring>
        <name>m_hh_1d</name>
        <qualifiedname>amrex::GMRES::m_hh_1d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="141" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1aa48b0f34d3d9e95e9646240cfe751115" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &gt;</type>
        <definition>Vector&lt;RT&gt; amrex::GMRES&lt; V, M &gt;::m_hes_1d</definition>
        <argsstring></argsstring>
        <name>m_hes_1d</name>
        <qualifiedname>amrex::GMRES::m_hes_1d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="142" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a7124534ac02956f0fe4e178290ae8cbc" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Table2D" kindref="compound">Table2D</ref>&lt; <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &gt;</type>
        <definition>Table2D&lt;RT&gt; amrex::GMRES&lt; V, M &gt;::m_hh</definition>
        <argsstring></argsstring>
        <name>m_hh</name>
        <qualifiedname>amrex::GMRES::m_hh</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="143" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a5f998b6c28d80dce9036b3adaaeb86ae" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Table2D" kindref="compound">Table2D</ref>&lt; <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &gt;</type>
        <definition>Table2D&lt;RT&gt; amrex::GMRES&lt; V, M &gt;::m_hes</definition>
        <argsstring></argsstring>
        <name>m_hes</name>
        <qualifiedname>amrex::GMRES::m_hes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="144" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1acf65961daf27f9f063bd05dba6d12f23" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &gt;</type>
        <definition>Vector&lt;RT&gt; amrex::GMRES&lt; V, M &gt;::m_grs</definition>
        <argsstring></argsstring>
        <name>m_grs</name>
        <qualifiedname>amrex::GMRES::m_grs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="145" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a782f8901e06cd6cc7760bdf704da630c" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &gt;</type>
        <definition>Vector&lt;RT&gt; amrex::GMRES&lt; V, M &gt;::m_cc</definition>
        <argsstring></argsstring>
        <name>m_cc</name>
        <qualifiedname>amrex::GMRES::m_cc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="146" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1adcbc4760d56f58aa04be597a5ebbd9d1" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &gt;</type>
        <definition>Vector&lt;RT&gt; amrex::GMRES&lt; V, M &gt;::m_ss</definition>
        <argsstring></argsstring>
        <name>m_ss</name>
        <qualifiedname>amrex::GMRES::m_ss</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="147" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1ae44ad588bee2fec32a7c78b3a69bbf75" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; V &gt;</type>
        <definition>std::unique_ptr&lt;V&gt; amrex::GMRES&lt; V, M &gt;::m_v_tmp_rhs</definition>
        <argsstring></argsstring>
        <name>m_v_tmp_rhs</name>
        <qualifiedname>amrex::GMRES::m_v_tmp_rhs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="148" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a988226ac5aa4cd83eaf416e25f4d9761" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; V &gt;</type>
        <definition>std::unique_ptr&lt;V&gt; amrex::GMRES&lt; V, M &gt;::m_v_tmp_lhs</definition>
        <argsstring></argsstring>
        <name>m_v_tmp_lhs</name>
        <qualifiedname>amrex::GMRES::m_v_tmp_lhs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="149" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1acc982424d2fc24072ef5e6fe88748499" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; V &gt;</type>
        <definition>Vector&lt;V&gt; amrex::GMRES&lt; V, M &gt;::m_vv</definition>
        <argsstring></argsstring>
        <name>m_vv</name>
        <qualifiedname>amrex::GMRES::m_vv</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="150" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1GMRES_1a832960ff2f855681068318f52bc7a590" prot="private" static="no" mutable="no">
        <type>M *</type>
        <definition>M* amrex::GMRES&lt; V, M &gt;::m_linop</definition>
        <argsstring></argsstring>
        <name>m_linop</name>
        <qualifiedname>amrex::GMRES::m_linop</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="151" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="151" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1GMRES_1ac933889cd9ca442d8724b3109686396d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::GMRES&lt; V, M &gt;::GMRES</definition>
        <argsstring>()</argsstring>
        <name>GMRES</name>
        <qualifiedname>amrex::GMRES::GMRES</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="85" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a48cf641a8756cba134fa0772aae1844f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::define</definition>
        <argsstring>(M &amp;linop)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::GMRES::define</qualifiedname>
        <param>
          <type>M &amp;</type>
          <declname>linop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines with a reference to M. It&apos;s the user&apos;s responsibility to keep the M object alive for <ref refid="classamrex_1_1GMRES" kindref="compound">GMRES</ref> to be functional. This function must be called before <ref refid="classamrex_1_1GMRES_1a0eea5870312b5aead3f187cee44cda18" kindref="member">solve()</ref> can be called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a0eea5870312b5aead3f187cee44cda18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::solve</definition>
        <argsstring>(V &amp;a_sol, V const &amp;a_rhs, RT a_tol_rel, RT a_tol_abs, int a_its=-1)</argsstring>
        <name>solve</name>
        <qualifiedname>amrex::GMRES::solve</qualifiedname>
        <param>
          <type>V &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type>V const &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref></type>
          <declname>a_tol_rel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref></type>
          <declname>a_tol_abs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_its</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Solve the linear system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>unknowns, i.e., x in A x = b. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS, i.e., b in A x = b. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_tol_rel</parametername>
</parameternamelist>
<parameterdescription>
<para>relative tolerance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_tol_abs</parametername>
</parameternamelist>
<parameterdescription>
<para>absolute tolerance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_its</parametername>
</parameternamelist>
<parameterdescription>
<para>optional argument specifying the maximum number of iterations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="212" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a7366bf0061b5d2feb8bff0f8e10c5dfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::setVerbose</definition>
        <argsstring>(int v)</argsstring>
        <name>setVerbose</name>
        <qualifiedname>amrex::GMRES::setVerbose</qualifiedname>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets verbosity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="104" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1aafa45161777f122515985aab18d51328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::setRestartLength</definition>
        <argsstring>(int rl)</argsstring>
        <name>setRestartLength</name>
        <qualifiedname>amrex::GMRES::setRestartLength</qualifiedname>
        <param>
          <type>int</type>
          <declname>rl</declname>
        </param>
        <briefdescription>
<para>Sets restart length. The default is 30. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="107" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="177" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a8dc2651f6ba5a851cd4f1fd3e00d670e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::setMaxIters</definition>
        <argsstring>(int niters)</argsstring>
        <name>setMaxIters</name>
        <qualifiedname>amrex::GMRES::setMaxIters</qualifiedname>
        <param>
          <type>int</type>
          <declname>niters</declname>
        </param>
        <briefdescription>
<para>Sets the max number of iterations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="110" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a0e06adae47932cbfeb075dad9a3504b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::GMRES&lt; V, M &gt;::getNumIters</definition>
        <argsstring>() const</argsstring>
        <name>getNumIters</name>
        <qualifiedname>amrex::GMRES::getNumIters</qualifiedname>
        <briefdescription>
<para>Gets the number of iterations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="113" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1ae3b04d357f2d34f4c13eae2f87a85e36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::GMRES&lt; V, M &gt;::getStatus</definition>
        <argsstring>() const</argsstring>
        <name>getStatus</name>
        <qualifiedname>amrex::GMRES::getStatus</qualifiedname>
        <briefdescription>
<para>Gets the solver status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="116" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1ac75b9399941beef86512010face51879" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref></type>
        <definition>RT amrex::GMRES&lt; V, M &gt;::getResidualNorm</definition>
        <argsstring>() const</argsstring>
        <name>getResidualNorm</name>
        <qualifiedname>amrex::GMRES::getResidualNorm</qualifiedname>
        <briefdescription>
<para>Gets the 2-norm of the residual. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="119" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="119" bodyend="119"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1GMRES_1adf4b0977eb2a4846421a9077abe1c011" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::GMRES::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="122" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="194" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a26804b3a01736c253a94c8442158dec6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::allocate_scratch</definition>
        <argsstring>()</argsstring>
        <name>allocate_scratch</name>
        <qualifiedname>amrex::GMRES::allocate_scratch</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="123" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="161" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a5e168f959ebe755d10d8833a760169f9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::cycle</definition>
        <argsstring>(V &amp;a_xx, int &amp;a_status, int &amp;a_itcount, RT &amp;a_rnorm0)</argsstring>
        <name>cycle</name>
        <qualifiedname>amrex::GMRES::cycle</qualifiedname>
        <param>
          <type>V &amp;</type>
          <declname>a_xx</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>a_status</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>a_itcount</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &amp;</type>
          <declname>a_rnorm0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="124" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="265" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a1b9c033fd9010175090a197bd20e5f51" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::build_solution</definition>
        <argsstring>(V &amp;a_xx, int it)</argsstring>
        <name>build_solution</name>
        <qualifiedname>amrex::GMRES::build_solution</qualifiedname>
        <param>
          <type>V &amp;</type>
          <declname>a_xx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="125" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="392" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a7438834301bb6081a12d9eb5c201d45f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::compute_residual</definition>
        <argsstring>(V &amp;a_rr, V const &amp;a_xx, V const &amp;a_bb)</argsstring>
        <name>compute_residual</name>
        <qualifiedname>amrex::GMRES::compute_residual</qualifiedname>
        <param>
          <type>V &amp;</type>
          <declname>a_rr</declname>
        </param>
        <param>
          <type>V const &amp;</type>
          <declname>a_xx</declname>
        </param>
        <param>
          <type>V const &amp;</type>
          <declname>a_bb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="126" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="423" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1a4fb6774d3ce31780e21f424a06fd1af3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::GMRES&lt; V, M &gt;::converged</definition>
        <argsstring>(RT r0, RT r) const</argsstring>
        <name>converged</name>
        <qualifiedname>amrex::GMRES::converged</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref></type>
          <declname>r0</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="128" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1ab88f28e06562b245392ecd693cdb39b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::gram_schmidt_orthogonalization</definition>
        <argsstring>(int it)</argsstring>
        <name>gram_schmidt_orthogonalization</name>
        <qualifiedname>amrex::GMRES::gram_schmidt_orthogonalization</qualifiedname>
        <param>
          <type>int</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="130" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="335" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GMRES_1ab5c227d648d01f4870f5083500d29d32" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GMRES&lt; V, M &gt;::update_hessenberg</definition>
        <argsstring>(int it, bool happyend, RT &amp;res)</argsstring>
        <name>update_hessenberg</name>
        <qualifiedname>amrex::GMRES::update_hessenberg</qualifiedname>
        <param>
          <type>int</type>
          <declname>it</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>happyend</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" kindref="member">RT</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="131" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="365" bodyend="389"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classamrex_1_1GMRES" kindref="compound">GMRES</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This class implements the <ref refid="classamrex_1_1GMRES" kindref="compound">GMRES</ref> algorithm. The template parameter V is for a linear algebra vector class. For example, it could be <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref>. The other template parameter M is for a linear operator class with a number of required member functions. Note that conceptually M contains a matrix. However, it does not mean it needs to have a member variable storing the matrix, because <ref refid="classamrex_1_1GMRES" kindref="compound">GMRES</ref> only needs the matrix vector product, not the matrix itself.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>linear algebra vector. It must be default constructible, move constructible, and move assignable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>linear operator. A list of required member functions for M is shown below. Here RT (<computeroutput>typename M::RT</computeroutput>) is either double or float. Examples of implementation for V being a single-component <computeroutput><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></computeroutput> are also given below.<itemizedlist>
<listitem><para><computeroutput>void apply(V&amp; Ax, V const&amp; x)</computeroutput><linebreak/>
 Ax = A(x), where A is the linear operator performing matrix vector product. Here x is made with the makeVecLHS function. Therefore, it may have ghost cells and it&apos;s safe to cast it with const_cast&lt;V&amp;&gt;(x) and do ghost cell exchange, if necessary.</para>
</listitem><listitem><para><computeroutput>void assign(V&amp; lhs, V const&amp; rhs)</computeroutput><linebreak/>
 lhs = rhs. For example, <computeroutput>MultiFab::Copy(lhs,rhs,0,0,1,0)</computeroutput>.</para>
</listitem><listitem><para><computeroutput>RT dotProduct(V const&amp; v1, V const&amp; v2)</computeroutput><linebreak/>
 returns v1 * v2. For example, <computeroutput>MultiFab::Dot(v1,0,v2,0,1,0)</computeroutput>.</para>
</listitem><listitem><para><computeroutput>void increment(V&amp; lhs, V const&amp; rhs, RT a)</computeroutput><linebreak/>
 lhs += a * rhs. For example, <computeroutput>MultiFab::Saxpy(lhs,a,rhs,0,0,1,0)</computeroutput>.</para>
</listitem><listitem><para><computeroutput>void linComb(V&amp; lhs, RT a, V const&amp; rhs_a, RT b, V const&amp; rhs_b)</computeroutput><linebreak/>
 lhs = a * rhs_a + b * rhs_b. For example, <computeroutput>MultiFab::LinComb(lhs,a,rhs_a,0,b,rhs_b,0,0,1,0)</computeroutput>.</para>
</listitem><listitem><para><computeroutput>V makeVecRHS()</computeroutput><linebreak/>
 returns a V object that is suitable as RHS in M x = b. The reason we distinguish between LHS and RHS is M might need the distinction for efficiency. For example, if V is <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, we might need the x in the LHS of M x = b to have ghost cells for efficiency, whereas no ghost cells are needed for the RHS (i.e., b). An example of the implementation might be <computeroutput>return MultiFab(grids,dmap,1,0)</computeroutput>.</para>
</listitem><listitem><para><computeroutput>V makeVecLHS()</computeroutput><linebreak/>
 returns a V object that is suitable as LHS in M x = b. See the description for makeVecRHS for more details. An example of the implementation might be <computeroutput>return MultiFab(grids,dmap,1,1)</computeroutput>.</para>
</listitem><listitem><para><computeroutput>RT norm2(V const&amp; v)</computeroutput><linebreak/>
 returns the 2-norm of v. For example, <computeroutput>return v.norm2()</computeroutput>.</para>
</listitem><listitem><para><computeroutput>void precond(V&amp; lhs, V const&amp; rhs)</computeroutput><linebreak/>
 applies right-preconditioning, i.e., solve P(lhs) = rhs, where P is an approximation to A If there is no preconditioner, P = I and thus this function should do lhs = rhs.</para>
</listitem><listitem><para><computeroutput>void scale(V&amp; v, RT fac)</computeroutput><linebreak/>
 scales v by fac. For example, <computeroutput>v.mult(fac)</computeroutput>.</para>
</listitem><listitem><para><computeroutput>void setToZero(V&amp; v)</computeroutput><linebreak/>
 v = 0. For example, <computeroutput>v.setVal(0)</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="6">
        <label>amrex::GpuArray&lt; int, 2 &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
      <node id="4">
        <label>T</label>
      </node>
      <node id="5">
        <label>amrex::Table2D&lt; RT &gt;</label>
        <link refid="structamrex_1_1Table2D"/>
        <childnode refid="6" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; RT &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; V &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::GMRES&lt; V, M &gt;</label>
        <link refid="classamrex_1_1GMRES"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_cc</edgelabel>
          <edgelabel>m_grs</edgelabel>
          <edgelabel>m_hes_1d</edgelabel>
          <edgelabel>m_hh_1d</edgelabel>
          <edgelabel>m_ss</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_hes</edgelabel>
          <edgelabel>m_hh</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_v_tmp_lhs</edgelabel>
          <edgelabel>m_v_tmp_rhs</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_vv</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::unique_ptr&lt; V &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/AMReX_GMRES.H" bodystart="80" bodyend="152"/>
    <listofallmembers>
      <member refid="classamrex_1_1GMRES_1a26804b3a01736c253a94c8442158dec6" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>allocate_scratch</name></member>
      <member refid="classamrex_1_1GMRES_1a1b9c033fd9010175090a197bd20e5f51" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>build_solution</name></member>
      <member refid="classamrex_1_1GMRES_1adf4b0977eb2a4846421a9077abe1c011" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>clear</name></member>
      <member refid="classamrex_1_1GMRES_1a7438834301bb6081a12d9eb5c201d45f" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>compute_residual</name></member>
      <member refid="classamrex_1_1GMRES_1a4fb6774d3ce31780e21f424a06fd1af3" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>converged</name></member>
      <member refid="classamrex_1_1GMRES_1a5e168f959ebe755d10d8833a760169f9" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>cycle</name></member>
      <member refid="classamrex_1_1GMRES_1a48cf641a8756cba134fa0772aae1844f" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>define</name></member>
      <member refid="classamrex_1_1GMRES_1a0e06adae47932cbfeb075dad9a3504b5" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>getNumIters</name></member>
      <member refid="classamrex_1_1GMRES_1ac75b9399941beef86512010face51879" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>getResidualNorm</name></member>
      <member refid="classamrex_1_1GMRES_1ae3b04d357f2d34f4c13eae2f87a85e36" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>getStatus</name></member>
      <member refid="classamrex_1_1GMRES_1ac933889cd9ca442d8724b3109686396d" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>GMRES</name></member>
      <member refid="classamrex_1_1GMRES_1ab88f28e06562b245392ecd693cdb39b4" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>gram_schmidt_orthogonalization</name></member>
      <member refid="classamrex_1_1GMRES_1a5af8aa359ba7c32316907ca724566ad4" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_atol</name></member>
      <member refid="classamrex_1_1GMRES_1a782f8901e06cd6cc7760bdf704da630c" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_cc</name></member>
      <member refid="classamrex_1_1GMRES_1acf65961daf27f9f063bd05dba6d12f23" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_grs</name></member>
      <member refid="classamrex_1_1GMRES_1a5f998b6c28d80dce9036b3adaaeb86ae" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_hes</name></member>
      <member refid="classamrex_1_1GMRES_1aa48b0f34d3d9e95e9646240cfe751115" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_hes_1d</name></member>
      <member refid="classamrex_1_1GMRES_1a7124534ac02956f0fe4e178290ae8cbc" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_hh</name></member>
      <member refid="classamrex_1_1GMRES_1a5691847f4acd9554a668ec0d1b606d32" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_hh_1d</name></member>
      <member refid="classamrex_1_1GMRES_1a87d7d08dbb34c4033f140161cf136a10" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_its</name></member>
      <member refid="classamrex_1_1GMRES_1a832960ff2f855681068318f52bc7a590" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_linop</name></member>
      <member refid="classamrex_1_1GMRES_1a5c0f9c75918ca3d28071244df41bd1aa" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_maxiter</name></member>
      <member refid="classamrex_1_1GMRES_1afbcc70d7e05d287e623de403243074f4" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_res</name></member>
      <member refid="classamrex_1_1GMRES_1a8c2b6b33ceb2cb2a1342efd3f2b1c13b" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_restrtlen</name></member>
      <member refid="classamrex_1_1GMRES_1a4c8e3a4f12808510fd105e94547d264a" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_rtol</name></member>
      <member refid="classamrex_1_1GMRES_1adcbc4760d56f58aa04be597a5ebbd9d1" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_ss</name></member>
      <member refid="classamrex_1_1GMRES_1a17f683d2c35ae90c2503051415156de6" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_status</name></member>
      <member refid="classamrex_1_1GMRES_1a988226ac5aa4cd83eaf416e25f4d9761" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_v_tmp_lhs</name></member>
      <member refid="classamrex_1_1GMRES_1ae44ad588bee2fec32a7c78b3a69bbf75" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_v_tmp_rhs</name></member>
      <member refid="classamrex_1_1GMRES_1a42dcd0b4b94f5567bef14a46032b5646" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1GMRES_1acc982424d2fc24072ef5e6fe88748499" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>m_vv</name></member>
      <member refid="classamrex_1_1GMRES_1afe8b44f171784e28dd29632a08ce0bd4" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>RT</name></member>
      <member refid="classamrex_1_1GMRES_1a8dc2651f6ba5a851cd4f1fd3e00d670e" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>setMaxIters</name></member>
      <member refid="classamrex_1_1GMRES_1aafa45161777f122515985aab18d51328" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>setRestartLength</name></member>
      <member refid="classamrex_1_1GMRES_1a7366bf0061b5d2feb8bff0f8e10c5dfa" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1GMRES_1a0eea5870312b5aead3f187cee44cda18" prot="public" virt="non-virtual"><scope>amrex::GMRES</scope><name>solve</name></member>
      <member refid="classamrex_1_1GMRES_1ab5c227d648d01f4870f5083500d29d32" prot="private" virt="non-virtual"><scope>amrex::GMRES</scope><name>update_hessenberg</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
