<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1TableData" kind="class" language="C++" prot="public">
    <compoundname>amrex::TableData</compoundname>
    <basecompoundref refid="structamrex_1_1DataAllocator" prot="public" virt="non-virtual">amrex::DataAllocator</basecompoundref>
    <includes refid="AMReX__TableData_8H" local="no">AMReX_TableData.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
      <param>
        <type>typename ORDER</type>
        <defval><ref refid="structamrex_1_1Order_1_1F" kindref="compound">Order::F</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1TableData_1ad82ea827b5b1999cc86a3b075c7a3659" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::TableData&lt; T, N, ORDER &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="409" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1TableData_1a222e815d3c06ca047ebae80835044dc4" prot="public" static="no">
        <type>std::conditional_t&lt; N==1, <ref refid="structamrex_1_1Table1D" kindref="compound">Table1D</ref>&lt; T &gt;, std::conditional_t&lt; N==2, <ref refid="structamrex_1_1Table2D" kindref="compound">Table2D</ref>&lt; T, ORDER &gt;, std::conditional_t&lt; N==3, <ref refid="structamrex_1_1Table3D" kindref="compound">Table3D</ref>&lt; T, ORDER &gt;, <ref refid="structamrex_1_1Table4D" kindref="compound">Table4D</ref>&lt; T, ORDER &gt; &gt; &gt; &gt;</type>
        <definition>using amrex::TableData&lt; T, N, ORDER &gt;::table_type =  std::conditional_t&lt;N==1, Table1D&lt;T&gt;, std::conditional_t&lt;N==2, Table2D&lt;T, ORDER&gt;, std::conditional_t&lt;N==3, Table3D&lt;T, ORDER&gt;, Table4D&lt;T, ORDER&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>table_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="410" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1TableData_1a929878dbf8cc2587f3cd18ba3e5c1e85" prot="public" static="no">
        <type>std::conditional_t&lt; N==1, <ref refid="structamrex_1_1Table1D" kindref="compound">Table1D</ref>&lt; T const  &gt;, std::conditional_t&lt; N==2, <ref refid="structamrex_1_1Table2D" kindref="compound">Table2D</ref>&lt; T const, ORDER &gt;, std::conditional_t&lt; N==3, <ref refid="structamrex_1_1Table3D" kindref="compound">Table3D</ref>&lt; T const, ORDER &gt;, <ref refid="structamrex_1_1Table4D" kindref="compound">Table4D</ref>&lt; T const, ORDER &gt; &gt; &gt; &gt;</type>
        <definition>using amrex::TableData&lt; T, N, ORDER &gt;::const_table_type =  std::conditional_t&lt;N==1, Table1D&lt;T const&gt;, std::conditional_t&lt;N==2, Table2D&lt;T const, ORDER&gt;, std::conditional_t&lt;N==3, Table3D&lt;T const, ORDER&gt;, Table4D&lt;T const, ORDER&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>const_table_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="414" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="417" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1TableData_1a629989dacadbcb7af5a95b3c5e4aa23a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>class O</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class TableData</definition>
        <argsstring></argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="408" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="408" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1TableData_1afdf4938ce386a4308e372944a4b5a394" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::TableData&lt; T, N, ORDER &gt;::m_dptr</definition>
        <argsstring></argsstring>
        <name>m_dptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="455" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1TableData_1ad4346ff5843f027fe798ba9dfa0ebe51" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt;</type>
        <definition>Array&lt;int,N&gt; amrex::TableData&lt; T, N, ORDER &gt;::m_lo</definition>
        <argsstring></argsstring>
        <name>m_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="456" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1TableData_1a418711dcd50105d05161524f9137bb5d" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt;</type>
        <definition>Array&lt;int,N&gt; amrex::TableData&lt; T, N, ORDER &gt;::m_hi</definition>
        <argsstring></argsstring>
        <name>m_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="457" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1TableData_1afe2cef7f8d8260130dc5640520f4062b" prot="private" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::TableData&lt; T, N, ORDER &gt;::m_truesize</definition>
        <argsstring></argsstring>
        <name>m_truesize</name>
        <initializer>= 0L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="458" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1TableData_1a343632bf7caa49187def50cae53bf757" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::TableData&lt; T, N, ORDER &gt;::m_ptr_owner</definition>
        <argsstring></argsstring>
        <name>m_ptr_owner</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="459" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="459" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1TableData_1a4239d08dc7ad7096ca5def06693b4558" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N, ORDER &gt;::TableData</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>TableData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="419" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a4b1a33a23e97f246f878a2001d79b69d" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N, ORDER &gt;::TableData</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="421" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a873c19168dc86fefbe7fc9d3f6b776cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N, ORDER &gt;::TableData</definition>
        <argsstring>(Array&lt; int, N &gt; const &amp;lo, Array&lt; int, N &gt; const &amp;hi, Arena *ar=nullptr)</argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="423" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="463" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1ab00d213d295a26cdf223d242d4fb3765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N, ORDER &gt;::TableData</definition>
        <argsstring>(TableData&lt; T, N, ORDER &gt; const &amp;)=delete</argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N, ORDER &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="425" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1acfa4c240bedc25768cb4a29f31a01e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N, ORDER &gt; &amp;</type>
        <definition>TableData&lt;T,N,ORDER&gt;&amp; amrex::TableData&lt; T, N, ORDER &gt;::operator=</definition>
        <argsstring>(TableData&lt; T, N, ORDER &gt; const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N, ORDER &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="426" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a58b2c8fc72d26a028d5c2102d3fef3bc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N, ORDER &gt;::TableData</definition>
        <argsstring>(TableData&lt; T, N, ORDER &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N, ORDER &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="428" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="471" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1ada3e19980c8c8664eca2bab1ddd46d71" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N, ORDER &gt; &amp;</type>
        <definition>TableData&lt; T, N, ORDER &gt; &amp; amrex::TableData&lt; T, N, ORDER &gt;::operator=</definition>
        <argsstring>(TableData&lt; T, N, ORDER &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N, ORDER &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="429" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="485" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1af6ca594ff322e1da97e1b6c1096dc183" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N, ORDER &gt;::~TableData</definition>
        <argsstring>() noexcept</argsstring>
        <name>~TableData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="431" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="502" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a78d40ceae2fb38ee7ca043a081231556" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::TableData&lt; T, N, ORDER &gt;::dim</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="433" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="433" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a4fef621654e63850b94f6a969d14ed04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TableData&lt; T, N, ORDER &gt;::resize</definition>
        <argsstring>(Array&lt; int, N &gt; const &amp;lo, Array&lt; int, N &gt; const &amp;hi, Arena *ar=nullptr)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="435" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="516" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a95cfb01202068efe699062fad7263bb6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TableData&lt; T, N, ORDER &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="437" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="540" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1af44163f840ea676ad8d51f6dd9d65998" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const  &amp;</type>
        <definition>Array&lt;int,N&gt; const&amp; amrex::TableData&lt; T, N, ORDER &gt;::lo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="439" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="439" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1af4093a6730c7f7f4c45dae665b1ee35a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const  &amp;</type>
        <definition>Array&lt;int,N&gt; const&amp; amrex::TableData&lt; T, N, ORDER &gt;::hi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="441" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="441" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1afc56cd7ec5f96ca6966a277ea67e5641" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TableData&lt; T, N, ORDER &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="443" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="551" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a782cfc237fbff9c3baa8793a6ee988cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TableData&lt; T, N, ORDER &gt;::copy</definition>
        <argsstring>(TableData&lt; T, N, ORDER &gt; const &amp;rhs) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N, ORDER &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="445" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="618" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1afeffb10e16b9f5ef9e1f806bb5940796" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData_1a222e815d3c06ca047ebae80835044dc4" kindref="member">table_type</ref></type>
        <definition>TableData&lt; T, N, ORDER &gt;::table_type amrex::TableData&lt; T, N, ORDER &gt;::table</definition>
        <argsstring>() noexcept</argsstring>
        <name>table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="447" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a83a37d5f24b2a4cffeb5f658ca0bda78" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData_1a929878dbf8cc2587f3cd18ba3e5c1e85" kindref="member">const_table_type</ref></type>
        <definition>TableData&lt; T, N, ORDER &gt;::const_table_type amrex::TableData&lt; T, N, ORDER &gt;::table</definition>
        <argsstring>() const noexcept</argsstring>
        <name>table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="448" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="604" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a47894641211c75ff39ae19d25f894848" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData_1a929878dbf8cc2587f3cd18ba3e5c1e85" kindref="member">const_table_type</ref></type>
        <definition>TableData&lt; T, N, ORDER &gt;::const_table_type amrex::TableData&lt; T, N, ORDER &gt;::const_table</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="449" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="611" bodyend="614"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1TableData_1a980519b19e7ba7540cafbb896cc92484" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TableData&lt; T, N, ORDER &gt;::define</definition>
        <argsstring>()</argsstring>
        <name>define</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="453" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="564" bodyend="574"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multi-dimensional array class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is somewhat similar to FArrayBox/BaseFab. The main difference is the dimension of the array in this class can be 1, 2, 3, or 4, whereas the dimension of FArrayBox/BaseFab is the spatial dimension (AMREX_SPACEDIM) plus a component dimension. Another difference is that this class supports both column-major order (i.e., Fortran order) and row-major order (i.e., C order), whereas FArrayBox/BaseFab is always column-major. Below is an example of using it to store a 3D table of data that is initialized on CPU and is read-only by all GPU threads on the device.</para>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;int,3&gt;<sp/>tlo{0,0,0};<sp/>//<sp/>lower<sp/>bounds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;int,3&gt;<sp/>thi{100,100,100};<sp/>//<sp/>upper<sp/>bounds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TableData&lt;Real,3&gt;<sp/>table_data(tlo,<sp/>thi);</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>AMREX_USE_GPU</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TableData&lt;Real,3&gt;<sp/>h_table_data(tlo,<sp/>thi,<sp/>The_Pinned_Arena());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>const&amp;<sp/>h_table<sp/>=<sp/>h_table_data.table();</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>const&amp;<sp/>h_table<sp/>=<sp/>table_data.table();</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>data<sp/>on<sp/>the<sp/>host</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>k<sp/>=<sp/>tlo[0];<sp/>k<sp/>&lt;=<sp/>thi[0];<sp/>++k)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>tlo[1];<sp/>j<sp/>&lt;=<sp/>thi[1];<sp/>++j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>tlo[2];<sp/>i<sp/>&lt;=<sp/>thi[2];<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_table(i,j,k)<sp/>=<sp/>i<sp/>+<sp/>1.e3*j<sp/>+<sp/>1.e6*k;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>AMREX_USE_GPU</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Copy<sp/>data<sp/>to<sp/>GPU<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>table_data.copy(h_table_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gpu::streamSynchronize();<sp/><sp/>//<sp/>not<sp/>needed<sp/>if<sp/>the<sp/>kernel<sp/>using<sp/>it<sp/>is<sp/>on<sp/>the<sp/>same<sp/>stream</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>const&amp;<sp/>table<sp/>=<sp/>table_data.const_table();<sp/>//<sp/>const<sp/>makes<sp/>it<sp/>read<sp/>only</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>can<sp/>now<sp/>use<sp/>table<sp/>in<sp/>device<sp/>lambda.</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
      </node>
      <node id="1">
        <label>amrex::TableData&lt; T, N, ORDER &gt;</label>
        <link refid="classamrex_1_1TableData"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="2">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::TableData&lt; T, N, ORDER &gt;</label>
        <link refid="classamrex_1_1TableData"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="4" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="403" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="405" bodyend="460"/>
    <listofallmembers>
      <member refid="structamrex_1_1DataAllocator_1adcabda73bbd0120b08dbb2cda22a6427" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>alloc</name></member>
      <member refid="structamrex_1_1DataAllocator_1a477a75a5d73137b29f1a6ddf31af40f7" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>arena</name></member>
      <member refid="classamrex_1_1TableData_1afc56cd7ec5f96ca6966a277ea67e5641" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>clear</name></member>
      <member refid="classamrex_1_1TableData_1a47894641211c75ff39ae19d25f894848" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>const_table</name></member>
      <member refid="classamrex_1_1TableData_1a929878dbf8cc2587f3cd18ba3e5c1e85" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>const_table_type</name></member>
      <member refid="classamrex_1_1TableData_1a782cfc237fbff9c3baa8793a6ee988cd" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>copy</name></member>
      <member refid="structamrex_1_1DataAllocator_1a37c4b92bbff76372bd67c006198e400f" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>DataAllocator</name></member>
      <member refid="structamrex_1_1DataAllocator_1ad2f91458d09a1484857061ff235e73bd" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>DataAllocator</name></member>
      <member refid="classamrex_1_1TableData_1a980519b19e7ba7540cafbb896cc92484" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>define</name></member>
      <member refid="classamrex_1_1TableData_1a78d40ceae2fb38ee7ca043a081231556" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>dim</name></member>
      <member refid="structamrex_1_1DataAllocator_1a5fa328945c30133a9b9c7f93ccf6e78f" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>free</name></member>
      <member refid="classamrex_1_1TableData_1af4093a6730c7f7f4c45dae665b1ee35a" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>hi</name></member>
      <member refid="classamrex_1_1TableData_1af44163f840ea676ad8d51f6dd9d65998" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>lo</name></member>
      <member refid="structamrex_1_1DataAllocator_1a901b7f1e68950afc823ebc10c093cb94" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1TableData_1afdf4938ce386a4308e372944a4b5a394" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_dptr</name></member>
      <member refid="classamrex_1_1TableData_1a418711dcd50105d05161524f9137bb5d" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_hi</name></member>
      <member refid="classamrex_1_1TableData_1ad4346ff5843f027fe798ba9dfa0ebe51" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_lo</name></member>
      <member refid="classamrex_1_1TableData_1a343632bf7caa49187def50cae53bf757" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_ptr_owner</name></member>
      <member refid="classamrex_1_1TableData_1afe2cef7f8d8260130dc5640520f4062b" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_truesize</name></member>
      <member refid="classamrex_1_1TableData_1acfa4c240bedc25768cb4a29f31a01e53" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1TableData_1ada3e19980c8c8664eca2bab1ddd46d71" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1TableData_1a4fef621654e63850b94f6a969d14ed04" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>resize</name></member>
      <member refid="classamrex_1_1TableData_1a95cfb01202068efe699062fad7263bb6" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>size</name></member>
      <member refid="classamrex_1_1TableData_1afeffb10e16b9f5ef9e1f806bb5940796" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>table</name></member>
      <member refid="classamrex_1_1TableData_1a83a37d5f24b2a4cffeb5f658ca0bda78" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>table</name></member>
      <member refid="classamrex_1_1TableData_1a222e815d3c06ca047ebae80835044dc4" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>table_type</name></member>
      <member refid="classamrex_1_1TableData_1a629989dacadbcb7af5a95b3c5e4aa23a" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1a4239d08dc7ad7096ca5def06693b4558" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1a4b1a33a23e97f246f878a2001d79b69d" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1a873c19168dc86fefbe7fc9d3f6b776cc" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1ab00d213d295a26cdf223d242d4fb3765" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1a58b2c8fc72d26a028d5c2102d3fef3bc" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1ad82ea827b5b1999cc86a3b075c7a3659" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>value_type</name></member>
      <member refid="classamrex_1_1TableData_1af6ca594ff322e1da97e1b6c1096dc183" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>~TableData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
