<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1TableData" kind="class" language="C++" prot="public">
    <compoundname>amrex::TableData</compoundname>
    <basecompoundref refid="structamrex_1_1DataAllocator" prot="public" virt="non-virtual">amrex::DataAllocator</basecompoundref>
    <includes refid="AMReX__TableData_8H" local="no">AMReX_TableData.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1TableData_1a5ebd70b2069846ffbcc74b777d9c5d4c" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::TableData&lt; T, N &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="326" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1TableData_1a0c98d956da5bf5aed3a6c0202bb718fb" prot="public" static="no">
        <type>std::conditional_t&lt; N==1, <ref refid="structamrex_1_1Table1D" kindref="compound">Table1D</ref>&lt; T &gt;, std::conditional_t&lt; N==2, <ref refid="structamrex_1_1Table2D" kindref="compound">Table2D</ref>&lt; T &gt;, std::conditional_t&lt; N==3, <ref refid="structamrex_1_1Table3D" kindref="compound">Table3D</ref>&lt; T &gt;, <ref refid="structamrex_1_1Table4D" kindref="compound">Table4D</ref>&lt; T &gt; &gt; &gt; &gt;</type>
        <definition>using amrex::TableData&lt; T, N &gt;::table_type =  std::conditional_t&lt;N==1, Table1D&lt;T&gt;, std::conditional_t&lt;N==2, Table2D&lt;T&gt;, std::conditional_t&lt;N==3, Table3D&lt;T&gt;, Table4D&lt;T&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>table_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="327" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1TableData_1a46ad5c94806f0cb790ff61b307030756" prot="public" static="no">
        <type>std::conditional_t&lt; N==1, <ref refid="structamrex_1_1Table1D" kindref="compound">Table1D</ref>&lt; T const  &gt;, std::conditional_t&lt; N==2, <ref refid="structamrex_1_1Table2D" kindref="compound">Table2D</ref>&lt; T const  &gt;, std::conditional_t&lt; N==3, <ref refid="structamrex_1_1Table3D" kindref="compound">Table3D</ref>&lt; T const  &gt;, <ref refid="structamrex_1_1Table4D" kindref="compound">Table4D</ref>&lt; T const  &gt; &gt; &gt; &gt;</type>
        <definition>using amrex::TableData&lt; T, N &gt;::const_table_type =  std::conditional_t&lt;N==1, Table1D&lt;T const&gt;, std::conditional_t&lt;N==2, Table2D&lt;T const&gt;, std::conditional_t&lt;N==3, Table3D&lt;T const&gt;, Table4D&lt;T const&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>const_table_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="331" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="334" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1TableData_1ab86aed6fee723c8367af1d8cdfcbeff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class TableData</definition>
        <argsstring></argsstring>
        <name>TableData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="325" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="325" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1TableData_1aac51c62933a167b192304be7acbc7090" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::TableData&lt; T, N &gt;::m_dptr</definition>
        <argsstring></argsstring>
        <name>m_dptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="372" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1TableData_1ac260d9b8c8ee7402a39b5842d57ae98d" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt;</type>
        <definition>Array&lt;int,N&gt; amrex::TableData&lt; T, N &gt;::m_lo</definition>
        <argsstring></argsstring>
        <name>m_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="373" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1TableData_1a8beea110b965c7929beb7e37bcfff364" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt;</type>
        <definition>Array&lt;int,N&gt; amrex::TableData&lt; T, N &gt;::m_hi</definition>
        <argsstring></argsstring>
        <name>m_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="374" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1TableData_1a0d4fc24858aa57accb6ba65b2f673700" prot="private" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::TableData&lt; T, N &gt;::m_truesize</definition>
        <argsstring></argsstring>
        <name>m_truesize</name>
        <initializer>= 0L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="375" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1TableData_1ab5597f20d8438b42ae63b65f92a642a3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::TableData&lt; T, N &gt;::m_ptr_owner</definition>
        <argsstring></argsstring>
        <name>m_ptr_owner</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="376" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="376" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1TableData_1a0ee4762c8cef5b4a1bdfac3c3e074e82" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N &gt;::TableData</definition>
        <argsstring>() noexcept</argsstring>
        <name>TableData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="336" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="380" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1ad9f120fdecb5405e8b77f84a56208736" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N &gt;::TableData</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="338" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a334b25515f2d94060db7525f5d2ebc67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N &gt;::TableData</definition>
        <argsstring>(Array&lt; int, N &gt; const &amp;lo, Array&lt; int, N &gt; const &amp;hi, Arena *ar=nullptr)</argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="340" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="383" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a3ca071e6e6c9931dfc2a43dc11e3b8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N &gt;::TableData</definition>
        <argsstring>(TableData&lt; T, N &gt; const &amp;)=delete</argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="342" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a6dd80c7db3b7de8f8db054ce65720437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N &gt; &amp;</type>
        <definition>TableData&lt;T,N&gt;&amp; amrex::TableData&lt; T, N &gt;::operator=</definition>
        <argsstring>(TableData&lt; T, N &gt; const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="343" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1aa1c4ce5eb300e007b8b43ccc88cdc03b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N &gt;::TableData</definition>
        <argsstring>(TableData&lt; T, N &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>TableData</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="345" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="391" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a6600ce06864ec8d79aa54236940adfee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N &gt; &amp;</type>
        <definition>TableData&lt; T, N &gt; &amp; amrex::TableData&lt; T, N &gt;::operator=</definition>
        <argsstring>(TableData&lt; T, N &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="346" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="405" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a6f49fd724bfcf6b45238e510ab344254" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::TableData&lt; T, N &gt;::~TableData</definition>
        <argsstring>() noexcept</argsstring>
        <name>~TableData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="348" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="419" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1aaefd3fa7d99d2cb2298ae67184d54cda" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::TableData&lt; T, N &gt;::dim</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="350" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="350" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a6d6c23586763d93a219d9168daaa504d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TableData&lt; T, N &gt;::resize</definition>
        <argsstring>(Array&lt; int, N &gt; const &amp;lo, Array&lt; int, N &gt; const &amp;hi, Arena *ar=nullptr)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="352" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="428" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a737564a45f2a84290280e75c0f004af9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TableData&lt; T, N &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="354" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="452" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a19b5b1193f33c4a9584080c3584f3e12" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const  &amp;</type>
        <definition>Array&lt;int,N&gt; const&amp; amrex::TableData&lt; T, N &gt;::lo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="356" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a09381d7bbb817add24738ac154b15238" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, N &gt; const  &amp;</type>
        <definition>Array&lt;int,N&gt; const&amp; amrex::TableData&lt; T, N &gt;::hi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="358" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a14990a7b5b46e7e5dab1e99900e7fdae" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TableData&lt; T, N &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="360" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="463" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1afb1b643b640638baf1151246dd44114b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TableData&lt; T, N &gt;::copy</definition>
        <argsstring>(TableData&lt; T, N &gt; const &amp;rhs) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="classamrex_1_1TableData" kindref="compound">TableData</ref>&lt; T, N &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="362" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="530" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a34c97d7bcd6215bfb9f74b706cd9ea02" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData_1a0c98d956da5bf5aed3a6c0202bb718fb" kindref="member">table_type</ref></type>
        <definition>TableData&lt; T, N &gt;::const_table_type amrex::TableData&lt; T, N &gt;::table</definition>
        <argsstring>() noexcept</argsstring>
        <name>table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="364" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1a3eee3ed5521a225cd6c82498011de879" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData_1a46ad5c94806f0cb790ff61b307030756" kindref="member">const_table_type</ref></type>
        <definition>const_table_type amrex::TableData&lt; T, N &gt;::table</definition>
        <argsstring>() const noexcept</argsstring>
        <name>table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="365" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TableData_1ad8fa98358a7d0e71821d2f76ad257da6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1TableData_1a46ad5c94806f0cb790ff61b307030756" kindref="member">const_table_type</ref></type>
        <definition>TableData&lt; T, N &gt;::const_table_type amrex::TableData&lt; T, N &gt;::const_table</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="366" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="523" bodyend="526"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1TableData_1a6f96c13153efcb837dcf560e646cf949" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TableData&lt; T, N &gt;::define</definition>
        <argsstring>()</argsstring>
        <name>define</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="370" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="476" bodyend="486"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multi-dimensional array class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is somewhat similar to FArrayBox/BaseFab. The main difference is the dimension of the array in this class can be 1, 2, 3, or 4, whereas the dimension of FArrayBox/BaseFab is the spatial dimension (AMREX_SPACEDIM) plus a component dimension. Below is an example of using it to store a 3D table of data that is initialized on CPU and is read-only by all GPU threads on the device.</para>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;int,3&gt;<sp/>tlo{0,0,0};<sp/>//<sp/>lower<sp/>bounds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;int,3&gt;<sp/>thi{100,100,100};<sp/>//<sp/>upper<sp/>bounds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TableData&lt;Real,3&gt;<sp/>table_data(tlo,<sp/>thi);</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>AMREX_USE_GPU</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TableData&lt;Real,3&gt;<sp/>h_table_data(tlo,<sp/>thi,<sp/>The_Pinned_Arena());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>const&amp;<sp/>h_table<sp/>=<sp/>h_table_data.table();</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>const&amp;<sp/>h_table<sp/>=<sp/>table_data.table();</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>data<sp/>on<sp/>the<sp/>host</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>k<sp/>=<sp/>tlo[0];<sp/>k<sp/>&lt;=<sp/>thi[0];<sp/>++k)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>tlo[1];<sp/>j<sp/>&lt;=<sp/>thi[1];<sp/>++j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>tlo[2];<sp/>i<sp/>&lt;=<sp/>thi[2];<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_table(i,j,k)<sp/>=<sp/>i<sp/>+<sp/>1.e3*j<sp/>+<sp/>1.e6*k;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>AMREX_USE_GPU</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Copy<sp/>data<sp/>to<sp/>GPU<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>table_data.copy(h_table_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gpu::streamSynchronize();<sp/><sp/>//<sp/>not<sp/>needed<sp/>if<sp/>the<sp/>kernel<sp/>using<sp/>it<sp/>is<sp/>on<sp/>the<sp/>same<sp/>stream</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>const&amp;<sp/>table<sp/>=<sp/>table_data.const_table();<sp/>//<sp/>const<sp/>makes<sp/>it<sp/>read<sp/>only</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>can<sp/>now<sp/>use<sp/>table<sp/>in<sp/>device<sp/>lambda.</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
      </node>
      <node id="1">
        <label>amrex::TableData&lt; T, N &gt;</label>
        <link refid="classamrex_1_1TableData"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="2">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="4" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::TableData&lt; T, N &gt;</label>
        <link refid="classamrex_1_1TableData"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="322" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="320" bodyend="377"/>
    <listofallmembers>
      <member refid="structamrex_1_1DataAllocator_1adcabda73bbd0120b08dbb2cda22a6427" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>alloc</name></member>
      <member refid="structamrex_1_1DataAllocator_1a477a75a5d73137b29f1a6ddf31af40f7" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>arena</name></member>
      <member refid="classamrex_1_1TableData_1a14990a7b5b46e7e5dab1e99900e7fdae" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>clear</name></member>
      <member refid="classamrex_1_1TableData_1ad8fa98358a7d0e71821d2f76ad257da6" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>const_table</name></member>
      <member refid="classamrex_1_1TableData_1a46ad5c94806f0cb790ff61b307030756" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>const_table_type</name></member>
      <member refid="classamrex_1_1TableData_1afb1b643b640638baf1151246dd44114b" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>copy</name></member>
      <member refid="structamrex_1_1DataAllocator_1a21273a9c68a6101940451a9f6abf7f6e" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>DataAllocator</name></member>
      <member refid="structamrex_1_1DataAllocator_1ad2f91458d09a1484857061ff235e73bd" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>DataAllocator</name></member>
      <member refid="classamrex_1_1TableData_1a6f96c13153efcb837dcf560e646cf949" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>define</name></member>
      <member refid="classamrex_1_1TableData_1aaefd3fa7d99d2cb2298ae67184d54cda" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>dim</name></member>
      <member refid="structamrex_1_1DataAllocator_1a5fa328945c30133a9b9c7f93ccf6e78f" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>free</name></member>
      <member refid="classamrex_1_1TableData_1a09381d7bbb817add24738ac154b15238" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>hi</name></member>
      <member refid="classamrex_1_1TableData_1a19b5b1193f33c4a9584080c3584f3e12" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>lo</name></member>
      <member refid="structamrex_1_1DataAllocator_1a901b7f1e68950afc823ebc10c093cb94" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1TableData_1aac51c62933a167b192304be7acbc7090" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_dptr</name></member>
      <member refid="classamrex_1_1TableData_1a8beea110b965c7929beb7e37bcfff364" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_hi</name></member>
      <member refid="classamrex_1_1TableData_1ac260d9b8c8ee7402a39b5842d57ae98d" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_lo</name></member>
      <member refid="classamrex_1_1TableData_1ab5597f20d8438b42ae63b65f92a642a3" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_ptr_owner</name></member>
      <member refid="classamrex_1_1TableData_1a0d4fc24858aa57accb6ba65b2f673700" prot="private" virt="non-virtual"><scope>amrex::TableData</scope><name>m_truesize</name></member>
      <member refid="classamrex_1_1TableData_1a6dd80c7db3b7de8f8db054ce65720437" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1TableData_1a6600ce06864ec8d79aa54236940adfee" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1TableData_1a6d6c23586763d93a219d9168daaa504d" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>resize</name></member>
      <member refid="classamrex_1_1TableData_1a737564a45f2a84290280e75c0f004af9" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>size</name></member>
      <member refid="classamrex_1_1TableData_1a34c97d7bcd6215bfb9f74b706cd9ea02" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>table</name></member>
      <member refid="classamrex_1_1TableData_1a3eee3ed5521a225cd6c82498011de879" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>table</name></member>
      <member refid="classamrex_1_1TableData_1a0c98d956da5bf5aed3a6c0202bb718fb" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>table_type</name></member>
      <member refid="classamrex_1_1TableData_1ab86aed6fee723c8367af1d8cdfcbeff7" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1a0ee4762c8cef5b4a1bdfac3c3e074e82" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1ad9f120fdecb5405e8b77f84a56208736" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1a334b25515f2d94060db7525f5d2ebc67" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1a3ca071e6e6c9931dfc2a43dc11e3b8b5" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1aa1c4ce5eb300e007b8b43ccc88cdc03b" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>TableData</name></member>
      <member refid="classamrex_1_1TableData_1a5ebd70b2069846ffbcc74b777d9c5d4c" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>value_type</name></member>
      <member refid="classamrex_1_1TableData_1a6f49fd724bfcf6b45238e510ab344254" prot="public" virt="non-virtual"><scope>amrex::TableData</scope><name>~TableData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
