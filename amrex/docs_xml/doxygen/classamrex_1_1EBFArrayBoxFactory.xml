<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1EBFArrayBoxFactory" kind="class" language="C++" prot="public">
    <compoundname>amrex::EBFArrayBoxFactory</compoundname>
    <basecompoundref refid="classamrex_1_1FabFactory" prot="public" virt="non-virtual">amrex::FabFactory&lt; FArrayBox &gt;</basecompoundref>
    <includes refid="AMReX__EBFabFactory_8H" local="no">AMReX_EBFabFactory.H</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1a0121434aeeb0ad87903dd1401803c1ba" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
        <definition>EBSupport amrex::EBFArrayBoxFactory::m_support</definition>
        <argsstring></argsstring>
        <name>m_support</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::m_support</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="98" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1a0dece5de11da52cba439675d6f632976" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::EBFArrayBoxFactory::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::m_geom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="99" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1a0495e6651f6bc2531a88c903354da409" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classamrex_1_1EBDataCollection" kindref="compound">EBDataCollection</ref> &gt;</type>
        <definition>std::shared_ptr&lt;EBDataCollection&gt; amrex::EBFArrayBoxFactory::m_ebdc</definition>
        <argsstring></argsstring>
        <name>m_ebdc</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::m_ebdc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="100" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1a9077580d8ff605511c26c67b023364e8" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> const  *</type>
        <definition>EB2::Level const* amrex::EBFArrayBoxFactory::m_parent</definition>
        <argsstring></argsstring>
        <name>m_parent</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::m_parent</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="101" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1ac2f3df308dba2c5d7d8a6443c56db3da" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; &gt;</type>
        <definition>Gpu::DeviceVector&lt;Array4&lt;Real const&gt; &gt; amrex::EBFArrayBoxFactory::m_eb_data</definition>
        <argsstring></argsstring>
        <name>m_eb_data</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::m_eb_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="102" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="102" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ae76b4a906830e7b5094edc438e6cc9b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</definition>
        <argsstring>(const EB2::Level &amp;a_level, const Geometry &amp;a_geom, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>EBFArrayBoxFactory</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> &amp;</type>
          <declname>a_level</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="27" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="14" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1acc29524f4cabd3655de95618b8744ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::~EBFArrayBoxFactory</definition>
        <argsstring>() override=default</argsstring>
        <name>~EBFArrayBoxFactory</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::~EBFArrayBoxFactory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="30" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aff3ee653b5be6f3b58ec1c34ae2f461f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;)=default</argsstring>
        <name>EBFArrayBoxFactory</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="32" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aad2e2bde5474a8a144c900d5bfaa5e8c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</definition>
        <argsstring>(EBFArrayBoxFactory &amp;&amp;) noexcept=default</argsstring>
        <name>EBFArrayBoxFactory</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="33" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aa671c88f9bbc88f7824352ef14fedc45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</definition>
        <argsstring>()=delete</argsstring>
        <name>EBFArrayBoxFactory</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ac2ef27dcc169567d633f60798e406c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
        <definition>EBFArrayBoxFactory &amp; amrex::EBFArrayBoxFactory::operator=</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="36" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ab702397ee1802e68d2b0c0cf64f53b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
        <definition>EBFArrayBoxFactory &amp; amrex::EBFArrayBoxFactory::operator=</definition>
        <argsstring>(EBFArrayBoxFactory &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="37" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a03f9f76ddc6c878c10de4647b22dd32c" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>AMREX_NODISCARD FArrayBox * amrex::EBFArrayBoxFactory::create</definition>
        <argsstring>(const Box &amp;box, int ncomps, const FabInfo &amp;info, int box_index) const final</argsstring>
        <name>create</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::create</qualifiedname>
        <reimplements refid="classamrex_1_1FabFactory_1a2c0a8555865ea4df2c8406c482708815">create</reimplements>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomps</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabInfo" kindref="compound">FabInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>box_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="40" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="97" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ac4523829ea9f97416f054d93c1af91c1" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>AMREX_NODISCARD FArrayBox * amrex::EBFArrayBoxFactory::create_alias</definition>
        <argsstring>(FArrayBox const &amp;rhs, int scomp, int ncomp) const final</argsstring>
        <name>create_alias</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::create_alias</qualifiedname>
        <reimplements refid="classamrex_1_1FabFactory_1a73b5cea306c2cd8b84ac7ce764e9f277">create_alias</reimplements>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="43" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="113" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a25f6eca7dc8d4f2269fec54f5d20f079" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::EBFArrayBoxFactory::destroy</definition>
        <argsstring>(FArrayBox *fab) const final</argsstring>
        <name>destroy</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::destroy</qualifiedname>
        <reimplements refid="classamrex_1_1FabFactory_1a62e57972e3054a6f7ed1cdb9c0426c09">destroy</reimplements>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="45" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="127" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ae6ff743a979e5d8ff926038fc17026f3" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> *</type>
        <definition>AMREX_NODISCARD EBFArrayBoxFactory * amrex::EBFArrayBoxFactory::clone</definition>
        <argsstring>() const final</argsstring>
        <name>clone</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::clone</qualifiedname>
        <reimplements refid="classamrex_1_1FabFactory_1a1752947b87cf335574ed39beb17e6669">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="48" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a5d49b8df6ef16695bc6c0c46e272f461" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &gt; &amp;</type>
        <definition>const FabArray&lt; EBCellFlagFab &gt; &amp; amrex::EBFArrayBoxFactory::getMultiEBCellFlagFab</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getMultiEBCellFlagFab</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getMultiEBCellFlagFab</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="50" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="50" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ad7b1cbbdf5de2d5d0c570360098e08fa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::EBFArrayBoxFactory::getLevelSet</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getLevelSet</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getLevelSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="53" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ae7d06a20888f36c0792ab1963d9d625f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::EBFArrayBoxFactory::getVolFrac</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getVolFrac</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getVolFrac</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="55" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aa41c723ef24703072627f1188c2bb130" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>const MultiCutFab &amp; amrex::EBFArrayBoxFactory::getCentroid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getCentroid</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getCentroid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="57" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aa816066c22550e7f834e66f7ed21c65f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>const MultiCutFab &amp; amrex::EBFArrayBoxFactory::getBndryCent</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBndryCent</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getBndryCent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="59" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a5052a82584fca6e919c7e7ed8508890e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>const MultiCutFab &amp; amrex::EBFArrayBoxFactory::getBndryNormal</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBndryNormal</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getBndryNormal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="61" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a1a8777406f01f99fcc588927f6195a5d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>const MultiCutFab &amp; amrex::EBFArrayBoxFactory::getBndryArea</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBndryArea</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getBndryArea</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="63" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a7ec7dccc01ddd18cac3c1812228d70c2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> *, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt; const MultiCutFab *, AMREX_SPACEDIM &gt; amrex::EBFArrayBoxFactory::getAreaFrac</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getAreaFrac</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getAreaFrac</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="65" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a272a70c65e3349eb67fc6611ae5caad1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> *, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt; const MultiCutFab *, AMREX_SPACEDIM &gt; amrex::EBFArrayBoxFactory::getFaceCent</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getFaceCent</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getFaceCent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="70" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a1b8b5e3e067e9c82def1f9eb268100c0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> *, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt; const MultiCutFab *, AMREX_SPACEDIM &gt; amrex::EBFArrayBoxFactory::getEdgeCent</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getEdgeCent</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getEdgeCent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="74" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a5e556ff4f588a983a2992c01629e961f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::EBFArrayBoxFactory::isAllRegular</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAllRegular</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::isAllRegular</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="78" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a4ca100e0d11c4ee65ccb0fb42733025b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> const *</type>
        <definition>EB2::Level const  * amrex::EBFArrayBoxFactory::getEBLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getEBLevel</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getEBLevel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="80" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a472fdfab42254b79cfc0680c1d55627c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> const *</type>
        <definition>EB2::IndexSpace const  * amrex::EBFArrayBoxFactory::getEBIndexSpace</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getEBIndexSpace</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getEBIndexSpace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="81" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a7d3828f723daae924387dbd3c9eb1073" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EBFArrayBoxFactory::maxCoarseningLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>maxCoarseningLevel</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::maxCoarseningLevel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="82" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="160" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a7f0f20e75035bba303139745b047a7be" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping &amp; amrex::EBFArrayBoxFactory::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::DistributionMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="84" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a670346a2500ca06de456913bcc43d4d2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::EBFArrayBoxFactory::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::boxArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="85" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1af37289c31956723f27b34047a4e08770" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; amrex::EBFArrayBoxFactory::Geom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Geom</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::Geom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="86" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ac605571d4b1f88b7a1993dca18017f53" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::EBFArrayBoxFactory::hasEBInfo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasEBInfo</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::hasEBInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="88" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a79c98ba6c468c68db61ae1d35e492d8d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const *</type>
        <definition>iMultiFab const  * amrex::EBFArrayBoxFactory::getCutCellMask</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getCutCellMask</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getCutCellMask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns nullptr unless this level is built by <ref refid="namespaceamrex_1_1EB2_1a0847e43de0f68d0a78bb75f9a6fefcd9" kindref="member">EB2::addRegularCoarseLevels</ref>. One should use getMultiEBCellFlagFab for normal levels. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="92" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a73baf6d203d9a2f7ebc09adcb0073cf3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1EBData" kindref="compound">EBData</ref></type>
        <definition>EBData amrex::EBFArrayBoxFactory::getEBData</definition>
        <argsstring>(MFIter const &amp;mfi) const noexcept</argsstring>
        <name>getEBData</name>
        <qualifiedname>amrex::EBFArrayBoxFactory::getEBData</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> const &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="94" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="189" bodyend="199"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="1">
        <label>amrex::EBFArrayBoxFactory</label>
        <link refid="classamrex_1_1EBFArrayBoxFactory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="165">
        <label>amrex::Array4&lt; Real const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="5" relation="usage">
          <edgelabel>p</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="80" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="80" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="89">
        <label>amrex::Array4CopyTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4CopyTag"/>
        <childnode refid="79" relation="usage">
          <edgelabel>dfab</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>sfab</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>dbox</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::BaseFab&lt; EBCellFlag &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="61" relation="public-inheritance">
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="123">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="61" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="147">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="61" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="93">
        <label>amrex::CommRecvBufTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1CommRecvBufTag"/>
        <childnode refid="79" relation="usage">
          <edgelabel>dfab</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>bx</edgelabel>
        </childnode>
      </node>
      <node id="97">
        <label>amrex::CommSendBufTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1CommSendBufTag"/>
        <childnode refid="82" relation="usage">
          <edgelabel>sfab</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>bx</edgelabel>
        </childnode>
      </node>
      <node id="126">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="100" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="112" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="151">
        <label>amrex::FBData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="100" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="112" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="137">
        <label>amrex::FBData&lt; amrex::CutFab &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="100" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="112" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="99">
        <label>amrex::FBData&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="100" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="112" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="119">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="121" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_fb_local_copy_handler</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>m_recv_copy_handler</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_send_copy_handler</edgelabel>
        </childnode>
        <childnode refid="125" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="127" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="129" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="142">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
        <childnode refid="143" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="145" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_fb_local_copy_handler</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>m_recv_copy_handler</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_send_copy_handler</edgelabel>
        </childnode>
        <childnode refid="150" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="152" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="154" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="131">
        <label>amrex::FabArray&lt; amrex::CutFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
        <childnode refid="132" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="134" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_fb_local_copy_handler</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>m_recv_copy_handler</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_send_copy_handler</edgelabel>
        </childnode>
        <childnode refid="136" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="138" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="140" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_fb_local_copy_handler</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>m_recv_copy_handler</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_send_copy_handler</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="114" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="117" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="144">
        <label>amrex::FabFactory&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="133">
        <label>amrex::FabFactory&lt; amrex::CutFab &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="60">
        <label>amrex::FabFactory&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="7">
        <label>amrex::GpuArray&lt; ParticleReal, AMREX_SPACEDIM &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
      <node id="30">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="18">
        <label>K</label>
      </node>
      <node id="157">
        <label>amrex::LayoutData&lt; GFab &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
        <childnode refid="158" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="79" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="82" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="128">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="116" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="119" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="153">
        <label>amrex::PCData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="116" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="142" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="139">
        <label>amrex::PCData&lt; amrex::CutFab &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="116" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="131" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="115">
        <label>amrex::PCData&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="116" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="163">
        <label>amrex::PODVector&lt; amrex::Array4&lt; Real const &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="164" relation="public-inheritance">
        </childnode>
        <childnode refid="165" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>T</label>
      </node>
      <node id="88">
        <label>amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="89" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="93" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="96">
        <label>amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="97" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="158">
        <label>amrex::Vector&lt; GFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="159" relation="public-inheritance">
        </childnode>
      </node>
      <node id="110">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="112">
        <label>amrex::Vector&lt; amrex::mpidatatypes::MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="113" relation="public-inheritance">
        </childnode>
      </node>
      <node id="106">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="107" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="108">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="109" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="161">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="162" relation="public-inheritance">
        </childnode>
      </node>
      <node id="62">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="63" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="65" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="38">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="36" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="33" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="30" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="30" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="26">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="27" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="28" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="26" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="38" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="56" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>amrex::BoxND&lt; dim &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="31">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="4">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="5" relation="usage">
          <edgelabel>dx</edgelabel>
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
      <node id="135">
        <label>amrex::CutFab</label>
        <link refid="classamrex_1_1CutFab"/>
        <childnode refid="122" relation="public-inheritance">
        </childnode>
      </node>
      <node id="61">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="62" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="45">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="46" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="11" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="47" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="160">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
        <childnode refid="161" relation="usage">
          <edgelabel>m_instance</edgelabel>
        </childnode>
      </node>
      <node id="155">
        <label>amrex::EB2::Level</label>
        <link refid="classamrex_1_1EB2_1_1Level"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_shift</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_covered_grids</edgelabel>
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="156" relation="usage">
          <edgelabel>m_mgf</edgelabel>
        </childnode>
        <childnode refid="118" relation="usage">
          <edgelabel>m_bndryarea</edgelabel>
          <edgelabel>m_bndrycent</edgelabel>
          <edgelabel>m_bndrynorm</edgelabel>
          <edgelabel>m_centroid</edgelabel>
          <edgelabel>m_levelset</edgelabel>
          <edgelabel>m_volfrac</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_cellflag</edgelabel>
        </childnode>
        <childnode refid="141" relation="usage">
          <edgelabel>m_cutcellmask</edgelabel>
        </childnode>
        <childnode refid="160" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
      </node>
      <node id="156">
        <label>amrex::EB2::MultiGFab</label>
        <link refid="classamrex_1_1EB2_1_1MultiGFab"/>
        <childnode refid="157" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>amrex::EBCellFlag</label>
        <link refid="classamrex_1_1EBCellFlag"/>
      </node>
      <node id="72">
        <label>amrex::EBCellFlagFab</label>
        <link refid="classamrex_1_1EBCellFlagFab"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>m_typemap</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>amrex::EBCellFlagFab::NumCells</label>
        <link refid="structamrex_1_1EBCellFlagFab_1_1NumCells"/>
      </node>
      <node id="10">
        <label>amrex::EBDataCollection</label>
        <link refid="classamrex_1_1EBDataCollection"/>
        <childnode refid="11" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_cellflags</edgelabel>
        </childnode>
        <childnode refid="118" relation="usage">
          <edgelabel>m_levelset</edgelabel>
          <edgelabel>m_volfrac</edgelabel>
        </childnode>
        <childnode refid="130" relation="usage">
          <edgelabel>m_bndryarea</edgelabel>
          <edgelabel>m_bndrycent</edgelabel>
          <edgelabel>m_bndrynorm</edgelabel>
          <edgelabel>m_centroid</edgelabel>
        </childnode>
        <childnode refid="141" relation="usage">
          <edgelabel>m_cutcellmask</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::EBFArrayBoxFactory</label>
        <link refid="classamrex_1_1EBFArrayBoxFactory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ebdc</edgelabel>
        </childnode>
        <childnode refid="155" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="163" relation="usage">
          <edgelabel>m_eb_data</edgelabel>
        </childnode>
      </node>
      <node id="124">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="122">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="123" relation="public-inheritance">
        </childnode>
        <childnode refid="124" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="85">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="15">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="16" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="50" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="116">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_dstng</edgelabel>
          <edgelabel>m_offset</edgelabel>
          <edgelabel>m_srcng</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_dstba</edgelabel>
          <edgelabel>m_srcba</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="20" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="102" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
        <childnode refid="104" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
      </node>
      <node id="100">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="54">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="26" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="3">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>roundoff_hi</edgelabel>
          <edgelabel>roundoff_lo</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="146">
        <label>amrex::IArrayBox</label>
        <link refid="classamrex_1_1IArrayBox"/>
        <childnode refid="147" relation="public-inheritance">
        </childnode>
        <childnode refid="148" relation="usage">
          <edgelabel>ifabio</edgelabel>
        </childnode>
      </node>
      <node id="149">
        <label>amrex::IFABio</label>
        <link refid="classamrex_1_1IFABio"/>
      </node>
      <node id="16">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="56">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="67">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="130">
        <label>amrex::MultiCutFab</label>
        <link refid="classamrex_1_1MultiCutFab"/>
        <childnode refid="131" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_cellflags</edgelabel>
        </childnode>
      </node>
      <node id="118">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="105">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="33" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>Real</label>
      </node>
      <node id="6">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="5" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::detail::SingleChunkArena</label>
        <link refid="classamrex_1_1detail_1_1SingleChunkArena"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
      </node>
      <node id="141">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>std::map&lt; RecvSendCopyHandlerKey, std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="91" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>std::map&lt; RecvSendCopyHandlerKey, std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="95" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>std::map&lt; amrex::BoxND, amrex::EBCellFlagFab::NumCells &gt;</label>
        <childnode refid="76" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="49" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>std::map&lt; std::uint64_t, std::unique_ptr&lt; amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="87" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="49" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="38" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="44" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="47" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::shared_ptr&lt; amrex::EBDataCollection &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="164">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="52">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>std::mutex</label>
      </node>
      <node id="20">
        <label>std::string</label>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="103">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="159">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="111">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="113">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="107">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="109">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="84">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="162">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="103" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="104">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="52" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="125">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="126" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="150">
        <label>std::unique_ptr&lt; amrex::FBData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="151" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="136">
        <label>std::unique_ptr&lt; amrex::FBData&lt; amrex::CutFab &gt; &gt;</label>
        <childnode refid="137" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>std::unique_ptr&lt; amrex::FBData&lt; amrex::EBCellFlagFab &gt; &gt;</label>
        <childnode refid="99" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="129">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="119" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="154">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="142" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="140">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; amrex::CutFab &gt; &gt;</label>
        <childnode refid="131" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="117">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; amrex::EBCellFlagFab &gt; &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="120">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="2" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="143">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="144" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="132">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; amrex::CutFab &gt; &gt;</label>
        <childnode refid="133" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; amrex::EBCellFlagFab &gt; &gt;</label>
        <childnode refid="60" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="148">
        <label>std::unique_ptr&lt; amrex::IFABio &gt;</label>
        <childnode refid="149" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="127">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="128" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="152">
        <label>std::unique_ptr&lt; amrex::PCData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="153" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="138">
        <label>std::unique_ptr&lt; amrex::PCData&lt; amrex::CutFab &gt; &gt;</label>
        <childnode refid="139" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="114">
        <label>std::unique_ptr&lt; amrex::PCData&lt; amrex::EBCellFlagFab &gt; &gt;</label>
        <childnode refid="115" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="88" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="92" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="96" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
        <childnode refid="70" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="121">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="122" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="145">
        <label>std::vector&lt; IArrayBox * &gt;</label>
        <childnode refid="146" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="134">
        <label>std::vector&lt; amrex::CutFab * &gt;</label>
        <childnode refid="135" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>std::vector&lt; amrex::EBCellFlagFab * &gt;</label>
        <childnode refid="72" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="42">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="24">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="24" bodyend="103"/>
    <listofallmembers>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a670346a2500ca06de456913bcc43d4d2" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ae6ff743a979e5d8ff926038fc17026f3" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>clone</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a03f9f76ddc6c878c10de4647b22dd32c" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>create</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ac4523829ea9f97416f054d93c1af91c1" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>create_alias</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a25f6eca7dc8d4f2269fec54f5d20f079" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>destroy</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a7f0f20e75035bba303139745b047a7be" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ae76b4a906830e7b5094edc438e6cc9b9" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aff3ee653b5be6f3b58ec1c34ae2f461f" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aad2e2bde5474a8a144c900d5bfaa5e8c" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aa671c88f9bbc88f7824352ef14fedc45" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1ab88cda55dded29e88d2aeaf84f2d5e83" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1a438a3209840b7fc84705b81ce82cc944" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1acff7aece531c1605a9261be791916493" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1af37289c31956723f27b34047a4e08770" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>Geom</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a7ec7dccc01ddd18cac3c1812228d70c2" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getAreaFrac</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a1a8777406f01f99fcc588927f6195a5d" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getBndryArea</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aa816066c22550e7f834e66f7ed21c65f" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getBndryCent</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a5052a82584fca6e919c7e7ed8508890e" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getBndryNormal</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aa41c723ef24703072627f1188c2bb130" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getCentroid</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a79c98ba6c468c68db61ae1d35e492d8d" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getCutCellMask</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a73baf6d203d9a2f7ebc09adcb0073cf3" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getEBData</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a472fdfab42254b79cfc0680c1d55627c" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getEBIndexSpace</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a4ca100e0d11c4ee65ccb0fb42733025b" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getEBLevel</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a1b8b5e3e067e9c82def1f9eb268100c0" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getEdgeCent</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a272a70c65e3349eb67fc6611ae5caad1" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getFaceCent</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ad7b1cbbdf5de2d5d0c570360098e08fa" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getLevelSet</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a5d49b8df6ef16695bc6c0c46e272f461" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getMultiEBCellFlagFab</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ae7d06a20888f36c0792ab1963d9d625f" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getVolFrac</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ac605571d4b1f88b7a1993dca18017f53" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>hasEBInfo</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a5e556ff4f588a983a2992c01629e961f" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>isAllRegular</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ac2f3df308dba2c5d7d8a6443c56db3da" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_eb_data</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a0495e6651f6bc2531a88c903354da409" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_ebdc</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a0dece5de11da52cba439675d6f632976" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a9077580d8ff605511c26c67b023364e8" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a0121434aeeb0ad87903dd1401803c1ba" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_support</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a7d3828f723daae924387dbd3c9eb1073" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>maxCoarseningLevel</name></member>
      <member refid="classamrex_1_1FabFactory_1a60945306ed69d287f22245f05ed65858" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ac2ef27dcc169567d633f60798e406c66" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ab702397ee1802e68d2b0c0cf64f53b60" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabFactory_1a2b025be131ac74738e3b617aafa33346" prot="public" virt="non-virtual" ambiguityscope="FabFactory&lt; FArrayBox &gt;::"><scope>amrex::EBFArrayBoxFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabFactory_1ad44f5c64f3ed88fd9a089cb3134d8bc5" prot="public" virt="non-virtual" ambiguityscope="FabFactory&lt; FArrayBox &gt;::"><scope>amrex::EBFArrayBoxFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1acc29524f4cabd3655de95618b8744ef7" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>~EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1a0d7f240eb5eb5b366024b09539d7ce87" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>~FabFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
