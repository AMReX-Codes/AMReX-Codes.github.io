<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1EBFArrayBoxFactory" kind="class" language="C++" prot="public">
    <compoundname>amrex::EBFArrayBoxFactory</compoundname>
    <basecompoundref refid="classamrex_1_1FabFactory" prot="public" virt="non-virtual">amrex::FabFactory&lt; FArrayBox &gt;</basecompoundref>
    <includes refid="AMReX__EBFabFactory_8H" local="no">AMReX_EBFabFactory.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1a0121434aeeb0ad87903dd1401803c1ba" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
        <definition>EBSupport amrex::EBFArrayBoxFactory::m_support</definition>
        <argsstring></argsstring>
        <name>m_support</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1a0dece5de11da52cba439675d6f632976" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::EBFArrayBoxFactory::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1a0495e6651f6bc2531a88c903354da409" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classamrex_1_1EBDataCollection" kindref="compound">EBDataCollection</ref> &gt;</type>
        <definition>std::shared_ptr&lt;EBDataCollection&gt; amrex::EBFArrayBoxFactory::m_ebdc</definition>
        <argsstring></argsstring>
        <name>m_ebdc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBFArrayBoxFactory_1a9077580d8ff605511c26c67b023364e8" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> const  *</type>
        <definition>EB2::Level const* amrex::EBFArrayBoxFactory::m_parent</definition>
        <argsstring></argsstring>
        <name>m_parent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="82" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ae76b4a906830e7b5094edc438e6cc9b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</definition>
        <argsstring>(const EB2::Level &amp;a_level, const Geometry &amp;a_geom, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>EBFArrayBoxFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> &amp;</type>
          <declname>a_level</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="14" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ad501654118cdfebf0f2b0d68fb5a6cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::EBFArrayBoxFactory::~EBFArrayBoxFactory</definition>
        <argsstring>()=default</argsstring>
        <name>~EBFArrayBoxFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aff3ee653b5be6f3b58ec1c34ae2f461f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;)=default</argsstring>
        <name>EBFArrayBoxFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aad2e2bde5474a8a144c900d5bfaa5e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</definition>
        <argsstring>(EBFArrayBoxFactory &amp;&amp;) noexcept=default</argsstring>
        <name>EBFArrayBoxFactory</name>
        <param>
          <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aa671c88f9bbc88f7824352ef14fedc45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFArrayBoxFactory::EBFArrayBoxFactory</definition>
        <argsstring>()=delete</argsstring>
        <name>EBFArrayBoxFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ad9569bd1f5ab3e6e1667c1b023463cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
        <definition>EBFArrayBoxFactory&amp; amrex::EBFArrayBoxFactory::operator=</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a3116ec053a7957bb79f63b84867401da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
        <definition>EBFArrayBoxFactory&amp; amrex::EBFArrayBoxFactory::operator=</definition>
        <argsstring>(EBFArrayBoxFactory &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1af4895e37eae210a93ca7d2b0493a250e" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox * amrex::EBFArrayBoxFactory::create</definition>
        <argsstring>(const Box &amp;box, int ncomps, const FabInfo &amp;info, int box_index) const final</argsstring>
        <name>create</name>
        <reimplements refid="classamrex_1_1FabFactory_1aa4b55a312064a0753e8dc73e8ea28d7f">create</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomps</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabInfo" kindref="compound">FabInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>box_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="26" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a99374626e050249afcdc541cf12aa53a" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox * amrex::EBFArrayBoxFactory::create_alias</definition>
        <argsstring>(FArrayBox const &amp;rhs, int scomp, int ncomp) const final</argsstring>
        <name>create_alias</name>
        <reimplements refid="classamrex_1_1FabFactory_1ad8975cc6131f042429ec321e6740b5f7">create_alias</reimplements>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="41" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a25f6eca7dc8d4f2269fec54f5d20f079" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::EBFArrayBoxFactory::destroy</definition>
        <argsstring>(FArrayBox *fab) const final</argsstring>
        <name>destroy</name>
        <reimplements refid="classamrex_1_1FabFactory_1a62e57972e3054a6f7ed1cdb9c0426c09">destroy</reimplements>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="55" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a2d942d0e7c5fa2e3dc6c4ef56d52f53d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> *</type>
        <definition>EBFArrayBoxFactory * amrex::EBFArrayBoxFactory::clone</definition>
        <argsstring>() const final</argsstring>
        <name>clone</name>
        <reimplements refid="classamrex_1_1FabFactory_1a16e2317a8e500a4a1bc7ad6c64fcc892">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a9d7547c89b9cee01aec4519d7729aa11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &gt; &amp;</type>
        <definition>const FabArray&lt;EBCellFlagFab&gt;&amp; amrex::EBFArrayBoxFactory::getMultiEBCellFlagFab</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getMultiEBCellFlagFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="45" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ab54137d22701f507d34d3732e3f712fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab&amp; amrex::EBFArrayBoxFactory::getVolFrac</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getVolFrac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a79839e57245a8a258476cb2c01126e58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>const MultiCutFab&amp; amrex::EBFArrayBoxFactory::getCentroid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getCentroid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a2f8879982903951bbf21cb66f8cf9ae0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>const MultiCutFab&amp; amrex::EBFArrayBoxFactory::getBndryCent</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBndryCent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1aab15dca606815013dc094f5a3b0588bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>const MultiCutFab&amp; amrex::EBFArrayBoxFactory::getBndryNormal</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBndryNormal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1ac2b28ee4bd2e645e9c75c9a5d6be496e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>const MultiCutFab&amp; amrex::EBFArrayBoxFactory::getBndryArea</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBndryArea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a74e0bbe82132ef0fecbe0dffda94cf83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> *, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;const MultiCutFab*,AMREX_SPACEDIM&gt; amrex::EBFArrayBoxFactory::getAreaFrac</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getAreaFrac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a08787037eac1cfa94bc3c220dbcff764" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> *, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;const MultiCutFab*,AMREX_SPACEDIM&gt; amrex::EBFArrayBoxFactory::getFaceCent</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getFaceCent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a5e556ff4f588a983a2992c01629e961f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::EBFArrayBoxFactory::isAllRegular</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAllRegular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a706b6b91efaa582b01395c767d7e791c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> const  *</type>
        <definition>EB2::Level const* amrex::EBFArrayBoxFactory::getEBLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getEBLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a472fdfab42254b79cfc0680c1d55627c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> const  *</type>
        <definition>EB2::IndexSpace const  * amrex::EBFArrayBoxFactory::getEBIndexSpace</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getEBIndexSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a7d3828f723daae924387dbd3c9eb1073" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EBFArrayBoxFactory::maxCoarseningLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>maxCoarseningLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="87" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a7f0f20e75035bba303139745b047a7be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping &amp; amrex::EBFArrayBoxFactory::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a670346a2500ca06de456913bcc43d4d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray &amp; amrex::EBFArrayBoxFactory::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFArrayBoxFactory_1a699118eee56fc9250d4ae940fff8cf18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::EBFArrayBoxFactory::Geom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="75" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1108">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="1107">
        <label>amrex::EBFArrayBoxFactory</label>
        <link refid="classamrex_1_1EBFArrayBoxFactory"/>
        <childnode refid="1108" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1145">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1126">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1127" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1128">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1140">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1119">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
        <childnode refid="1120" relation="usage">
          <edgelabel>m_instance</edgelabel>
        </childnode>
      </node>
      <node id="1116">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1116" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1110">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="1113">
        <label>Real</label>
      </node>
      <node id="1146">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1147" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1138">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="1139" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="1152">
        <label>std::vector&lt; GFab, std::allocator&lt; GFab &gt; &gt;</label>
      </node>
      <node id="1137">
        <label>std::vector&lt; char *, std::allocator&lt; char *&gt; &gt;</label>
      </node>
      <node id="1142">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="1139">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="1140" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="1129">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1127">
        <label>string</label>
      </node>
      <node id="1148">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="1116" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="1109">
        <label>amrex::EBFArrayBoxFactory</label>
        <link refid="classamrex_1_1EBFArrayBoxFactory"/>
        <childnode refid="1110" relation="public-inheritance">
        </childnode>
        <childnode refid="1111" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="1118" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
      </node>
      <node id="1121">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt; &gt;</label>
      </node>
      <node id="1151">
        <label>amrex::Vector&lt; GFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1152" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1149">
        <label>amrex::EB2::MultiGFab</label>
        <link refid="classamrex_1_1EB2_1_1MultiGFab"/>
        <childnode refid="1150" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1143">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="1153">
        <label>amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1125" relation="public-inheritance">
        </childnode>
        <childnode refid="1134" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="1136" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="1116" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="1138" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="1129" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="1141" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="1143" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="1144" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="1146" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="1148" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="1136">
        <label>amrex::Vector&lt; char *&gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1147">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="1130">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1114">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="1113" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="1120">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1115">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="1116" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="1117" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="1150">
        <label>amrex::LayoutData&lt; GFab &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1125" relation="public-inheritance">
        </childnode>
        <childnode refid="1151" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="1132">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1133" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1144">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1145" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1112">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="1113" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="1117">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="1133">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1129" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1141">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1122">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1131">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1132" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1123">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="1124" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1111">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="1112" relation="public-inheritance">
        </childnode>
        <childnode refid="1114" relation="usage">
          <edgelabel>roundoff_domain</edgelabel>
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="1115" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="1124">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1125" relation="public-inheritance">
        </childnode>
        <childnode refid="1134" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="1136" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="1116" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="1138" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="1129" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="1141" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="1143" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="1144" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="1146" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="1148" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="1134">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1135" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1118">
        <label>amrex::EB2::Level</label>
        <link refid="classamrex_1_1EB2_1_1Level"/>
        <childnode refid="1111" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="1119" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="1122" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="1116" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="1123" relation="usage">
          <edgelabel>m_bndryarea</edgelabel>
          <edgelabel>m_levelset</edgelabel>
          <edgelabel>m_bndrycent</edgelabel>
          <edgelabel>m_centroid</edgelabel>
          <edgelabel>m_bndrynorm</edgelabel>
          <edgelabel>m_volfrac</edgelabel>
        </childnode>
        <childnode refid="1149" relation="usage">
          <edgelabel>m_mgf</edgelabel>
        </childnode>
        <childnode refid="1153" relation="usage">
          <edgelabel>m_cellflag</edgelabel>
        </childnode>
      </node>
      <node id="1125">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1126" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1122" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1116" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1128" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1129" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1131" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
      <node id="1135">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" bodystart="20" bodyend="83"/>
    <listofallmembers>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a670346a2500ca06de456913bcc43d4d2" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a2d942d0e7c5fa2e3dc6c4ef56d52f53d" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>clone</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1af4895e37eae210a93ca7d2b0493a250e" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>create</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a99374626e050249afcdc541cf12aa53a" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>create_alias</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a25f6eca7dc8d4f2269fec54f5d20f079" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>destroy</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a7f0f20e75035bba303139745b047a7be" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ae76b4a906830e7b5094edc438e6cc9b9" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aff3ee653b5be6f3b58ec1c34ae2f461f" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aad2e2bde5474a8a144c900d5bfaa5e8c" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aa671c88f9bbc88f7824352ef14fedc45" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a699118eee56fc9250d4ae940fff8cf18" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>Geom</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a74e0bbe82132ef0fecbe0dffda94cf83" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getAreaFrac</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ac2b28ee4bd2e645e9c75c9a5d6be496e" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getBndryArea</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a2f8879982903951bbf21cb66f8cf9ae0" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getBndryCent</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1aab15dca606815013dc094f5a3b0588bc" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getBndryNormal</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a79839e57245a8a258476cb2c01126e58" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getCentroid</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a472fdfab42254b79cfc0680c1d55627c" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getEBIndexSpace</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a706b6b91efaa582b01395c767d7e791c" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getEBLevel</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a08787037eac1cfa94bc3c220dbcff764" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getFaceCent</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a9d7547c89b9cee01aec4519d7729aa11" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getMultiEBCellFlagFab</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ab54137d22701f507d34d3732e3f712fc" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>getVolFrac</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a5e556ff4f588a983a2992c01629e961f" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>isAllRegular</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a0495e6651f6bc2531a88c903354da409" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_ebdc</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a0dece5de11da52cba439675d6f632976" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a9077580d8ff605511c26c67b023364e8" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a0121434aeeb0ad87903dd1401803c1ba" prot="private" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>m_support</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a7d3828f723daae924387dbd3c9eb1073" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>maxCoarseningLevel</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ad9569bd1f5ab3e6e1667c1b023463cf8" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1a3116ec053a7957bb79f63b84867401da" prot="public" virt="non-virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EBFArrayBoxFactory_1ad501654118cdfebf0f2b0d68fb5a6cc1" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>~EBFArrayBoxFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1af726b92f11c995d2a3225f3fa8a0754b" prot="public" virt="virtual"><scope>amrex::EBFArrayBoxFactory</scope><name>~FabFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
