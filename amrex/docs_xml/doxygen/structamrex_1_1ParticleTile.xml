<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1ParticleTile" kind="struct" language="C++" prot="public">
    <compoundname>amrex::ParticleTile</compoundname>
    <includes refid="AMReX__ParticleTile_8H" local="no">AMReX_ParticleTile.H</includes>
    <templateparamlist>
      <param>
        <type>typename T_ParticleType</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NArrayReal</declname>
        <defname>NArrayReal</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NArrayInt</declname>
        <defname>NArrayInt</defname>
      </param>
      <param>
        <type>template&lt; class &gt; class</type>
        <declname>Allocator</declname>
        <defname>Allocator</defname>
        <defval><ref refid="namespaceamrex_1a179fafc569924202b166896b608cd5c2" kindref="member">DefaultAllocator</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1ab2be35f77e9e2ed231e5406b9f011dc3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Allocator&lt; T &gt;</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::AllocatorType =  Allocator&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>AllocatorType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="648" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1a806d428c54ec86cc7e61edf954105f6f" prot="public" static="no">
        <type>T_ParticleType</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::ParticleType =  T_ParticleType</definition>
        <argsstring></argsstring>
        <name>ParticleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="650" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1a043db0d4cd2205027b4308f459496b79" prot="public" static="no">
        <type>typename ParticleType::RealType</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::RealType =  typename ParticleType::RealType</definition>
        <argsstring></argsstring>
        <name>RealType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="653" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1acdece46bb48b940977bf9efe198779c4" prot="public" static="no">
        <type><ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; <ref refid="structamrex_1_1ParticleTile_1af37f9208b1b9908daad6789415d20f81" kindref="member">NStructReal</ref>+NArrayReal, <ref refid="structamrex_1_1ParticleTile_1a2e52440bc21e01affff077fff37edb44" kindref="member">NStructInt</ref>+NArrayInt &gt;</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::SuperParticleType =  Particle&lt;NStructReal + NArrayReal, NStructInt + NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>SuperParticleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="658" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1a1a005c5af9405588898aadeb4fd23a60" prot="public" static="no">
        <type>typename std::conditional&lt; ParticleType::is_soa_particle, <ref refid="structamrex_1_1ThisParticleTileHasNoAoS" kindref="compound">ThisParticleTileHasNoAoS</ref>, <ref refid="classamrex_1_1ArrayOfStructs" kindref="compound">ArrayOfStructs</ref>&lt; <ref refid="structamrex_1_1ParticleTile_1a806d428c54ec86cc7e61edf954105f6f" kindref="member">ParticleType</ref>, Allocator &gt; &gt;::type</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::AoS =  typename std::conditional&lt; ParticleType::is_soa_particle, ThisParticleTileHasNoAoS, ArrayOfStructs&lt;ParticleType, Allocator&gt; &gt;::type</definition>
        <argsstring></argsstring>
        <name>AoS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="660" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1aa1c3e53b94d58cccb5d29cf33dea056b" prot="public" static="no">
        <type><ref refid="structamrex_1_1StructOfArrays" kindref="compound">StructOfArrays</ref>&lt; NArrayReal, NArrayInt, Allocator &gt;</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::SoA =  StructOfArrays&lt;NArrayReal, NArrayInt, Allocator&gt;</definition>
        <argsstring></argsstring>
        <name>SoA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="666" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1adf1dfc735a7f9d3508e434da7e87b632" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1StructOfArrays_1ab3198bb12bd084d439c9b75f4f76c0ca" kindref="member">SoA::RealVector</ref></type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::RealVector =  typename SoA::RealVector</definition>
        <argsstring></argsstring>
        <name>RealVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="667" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1ab198bf3467e469c8c1bfa13f1c53799a" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1StructOfArrays_1a402275e8f3db925ba4fb6e60e391b333" kindref="member">SoA::IntVector</ref></type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::IntVector =  typename SoA::IntVector</definition>
        <argsstring></argsstring>
        <name>IntVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="668" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1a00d52f45cf7e8a4b3c30cfb48e7bca78" prot="public" static="no">
        <type>typename ParticleType::StorageParticleType</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::StorageParticleType =  typename ParticleType::StorageParticleType</definition>
        <argsstring></argsstring>
        <name>StorageParticleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="669" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1a0aeb55b6a15d10428c88a314412914c5" prot="public" static="no">
        <type><ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; <ref refid="structamrex_1_1ParticleTile_1a00d52f45cf7e8a4b3c30cfb48e7bca78" kindref="member">StorageParticleType</ref>, NArrayReal, NArrayInt &gt;</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::ParticleTileDataType =  ParticleTileData&lt;StorageParticleType, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleTileDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="671" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1ParticleTile_1a45e1a00c0cf61da02993d8b31b4cb431" prot="public" static="no">
        <type><ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; <ref refid="structamrex_1_1ParticleTile_1a00d52f45cf7e8a4b3c30cfb48e7bca78" kindref="member">StorageParticleType</ref>, NArrayReal, NArrayInt &gt;</type>
        <definition>using amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::ConstParticleTileDataType =  ConstParticleTileData&lt;StorageParticleType, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ConstParticleTileDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="672" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="672" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1a7d38648767509798f1fab24a293b49eb" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::NAR</definition>
        <argsstring></argsstring>
        <name>NAR</name>
        <initializer>= NArrayReal</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="651" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1a27974d2d46e3698a69b1997e905072e8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::NAI</definition>
        <argsstring></argsstring>
        <name>NAI</name>
        <initializer>= NArrayInt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="652" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1af37f9208b1b9908daad6789415d20f81" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::NStructReal</definition>
        <argsstring></argsstring>
        <name>NStructReal</name>
        <initializer>= ParticleType::NReal</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="655" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1a2e52440bc21e01affff077fff37edb44" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::NStructInt</definition>
        <argsstring></argsstring>
        <name>NStructInt</name>
        <initializer>= ParticleType::NInt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="656" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="656" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1a434377380cf9f4dd45362080837b6ec4" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParticleTile_1a1a005c5af9405588898aadeb4fd23a60" kindref="member">AoS</ref></type>
        <definition>AoS amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::m_aos_tile</definition>
        <argsstring></argsstring>
        <name>m_aos_tile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1187" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1acfdbf84efe0aae5266a28545a2e45480" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParticleTile_1aa1c3e53b94d58cccb5d29cf33dea056b" kindref="member">SoA</ref></type>
        <definition>SoA amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::m_soa_tile</definition>
        <argsstring></argsstring>
        <name>m_soa_tile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1188" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1ad4a6e09ba4f2ef496ba35c3dac4c19b4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::m_defined</definition>
        <argsstring></argsstring>
        <name>m_defined</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1190" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1a6e6255a32ada9fcf2655a94d474ece11" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">amrex::PODVector</ref>&lt; ParticleReal *, Allocator&lt; ParticleReal * &gt; &gt;</type>
        <definition>amrex::PODVector&lt;ParticleReal*, Allocator&lt;ParticleReal*&gt; &gt; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::m_runtime_r_ptrs</definition>
        <argsstring></argsstring>
        <name>m_runtime_r_ptrs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1192" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1ae172244722fde937a7ba5a8a60a5ff99" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">amrex::PODVector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *, Allocator&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> * &gt; &gt;</type>
        <definition>amrex::PODVector&lt;int*, Allocator&lt;int*&gt; &gt; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::m_runtime_i_ptrs</definition>
        <argsstring></argsstring>
        <name>m_runtime_i_ptrs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1193" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1aa1f069375a3a442593c218fc4911de6d" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">amrex::PODVector</ref>&lt; const ParticleReal *, Allocator&lt; const ParticleReal * &gt; &gt;</type>
        <definition>amrex::PODVector&lt;const ParticleReal*, Allocator&lt;const ParticleReal*&gt; &gt; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::m_runtime_r_cptrs</definition>
        <argsstring></argsstring>
        <name>m_runtime_r_cptrs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1195" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleTile_1a168b67cee9983016eb4a811d740523e2" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">amrex::PODVector</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *, Allocator&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> * &gt; &gt;</type>
        <definition>amrex::PODVector&lt;const int*, Allocator&lt;const int*&gt; &gt; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::m_runtime_i_cptrs</definition>
        <argsstring></argsstring>
        <name>m_runtime_i_cptrs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1196" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a070fcef33e908cba36039a6fdf1d1c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::ParticleTile</definition>
        <argsstring>()=default</argsstring>
        <name>ParticleTile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="674" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1abc7127e222d300082ca177f987d847a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::define</definition>
        <argsstring>(int a_num_runtime_real, int a_num_runtime_int)</argsstring>
        <name>define</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_num_runtime_real</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_num_runtime_int</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="676" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="676" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1af0f0e616393a552d2bde49f930babbae" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::id</definition>
        <argsstring>(int index) &amp;</argsstring>
        <name>id</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="687" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="687" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a36f9ab05aec0c6ff6c10e60af0dc01d2" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::id</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>id</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="696" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="696" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1acd6829f21f92c9aba7864a790b9200df" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::cpu</definition>
        <argsstring>(int index) &amp;</argsstring>
        <name>cpu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="705" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="705" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1abddb89433aca18a1eb4c513c44a9c621" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::cpu</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>cpu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="714" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="714" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1aa4be6533a7b9987c6f0c73ffe3c4cbbb" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structamrex_1_1ParticleTile_1a043db0d4cd2205027b4308f459496b79" kindref="member">RealType</ref> &amp;</type>
        <definition>RealType&amp; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::pos</definition>
        <argsstring>(int index, int position_index) &amp;</argsstring>
        <name>pos</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>position_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="723" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="723" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1acca412a3b97db15ba5e39f02b97d079c" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structamrex_1_1ParticleTile_1a043db0d4cd2205027b4308f459496b79" kindref="member">RealType</ref></type>
        <definition>RealType amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::pos</definition>
        <argsstring>(int index, int position_index) const &amp;</argsstring>
        <name>pos</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>position_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="737" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="737" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a15a5c73d1aaced5789c24576eabe384d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1ParticleTile_1a1a005c5af9405588898aadeb4fd23a60" kindref="member">AoS</ref> &amp;</type>
        <definition>AoS&amp; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::GetArrayOfStructs</definition>
        <argsstring>()</argsstring>
        <name>GetArrayOfStructs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="746" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="746" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a01fa9d2a9c7ad522f53a96ba6aa770a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1ParticleTile_1a1a005c5af9405588898aadeb4fd23a60" kindref="member">AoS</ref> &amp;</type>
        <definition>const AoS&amp; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::GetArrayOfStructs</definition>
        <argsstring>() const</argsstring>
        <name>GetArrayOfStructs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="747" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="747" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a9bc22bda551e1d2089c81b93c2b0d794" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1ParticleTile_1aa1c3e53b94d58cccb5d29cf33dea056b" kindref="member">SoA</ref> &amp;</type>
        <definition>SoA&amp; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::GetStructOfArrays</definition>
        <argsstring>()</argsstring>
        <name>GetStructOfArrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="749" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="749" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a865f181bef3a750aaae3437c4e91dd33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1ParticleTile_1aa1c3e53b94d58cccb5d29cf33dea056b" kindref="member">SoA</ref> &amp;</type>
        <definition>const SoA&amp; amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::GetStructOfArrays</definition>
        <argsstring>() const</argsstring>
        <name>GetStructOfArrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="750" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="750" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1abe6aa2080bb4a68eaded92e7e3e6efd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="752" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="752" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a4cb40d2d0fafeeb40b606421015705fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the total number of particles (real and neighbor) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="758" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="758" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a80fc21d171f28db059190e234fa36642" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::numParticles</definition>
        <argsstring>() const</argsstring>
        <name>numParticles</name>
        <briefdescription>
<para>Returns the number of real particles (excluding neighbors) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="771" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="771" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1ae905e32844864462ec7a0ddf7a666ee4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::numRealParticles</definition>
        <argsstring>() const</argsstring>
        <name>numRealParticles</name>
        <briefdescription>
<para>Returns the number of real particles (excluding neighbors) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="784" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="784" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a67d9df04de8fa70ac8b9c43325febff3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::numNeighborParticles</definition>
        <argsstring>() const</argsstring>
        <name>numNeighborParticles</name>
        <briefdescription>
<para>Returns the number of neighbor particles (excluding reals) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="797" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="797" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a3b487649b8128cc37a6f35f913229d00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::numTotalParticles</definition>
        <argsstring>() const</argsstring>
        <name>numTotalParticles</name>
        <briefdescription>
<para>Returns the total number of particles, real and neighbor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="810" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="810" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a3418dd871a28056a9d8aa3ba12a016f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::setNumNeighbors</definition>
        <argsstring>(int num_neighbors)</argsstring>
        <name>setNumNeighbors</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_neighbors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="819" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="819" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a0af47b01f2f8e3b42701af71a08ed2be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::getNumNeighbors</definition>
        <argsstring>() const</argsstring>
        <name>getNumNeighbors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="827" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="827" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1aad932266bb874a93f00fc2920ff69548" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::resize</definition>
        <argsstring>(std::size_t count)</argsstring>
        <name>resize</name>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="837" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="837" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a1c3596011f3532785e35f93767dac146" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="structamrex_1_1ParticleTile_1a806d428c54ec86cc7e61edf954105f6f" kindref="member">ParticleType</ref></defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!T::is_soa_particle, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back</definition>
        <argsstring>(const ParticleType &amp;p)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTile_1a806d428c54ec86cc7e61edf954105f6f" kindref="member">ParticleType</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add one particle to this tile. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="849" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="849" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a58ff9d1415aa8e4eee3fd76955d36429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NR</declname>
            <defname>NR</defname>
            <defval>NArrayReal</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NI</declname>
            <defname>NI</defname>
            <defval>NArrayInt</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; NR !=0||NI !=0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back</definition>
        <argsstring>(const SuperParticleType &amp;sp)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTile_1acdece46bb48b940977bf9efe198779c4" kindref="member">SuperParticleType</ref> &amp;</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add one particle to this tile. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="856" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="856" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1af54fdaaae348f3ef6c4f9ec72ed5d7aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_real</definition>
        <argsstring>(int comp, ParticleReal v)</argsstring>
        <name>push_back_real</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>ParticleReal</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a Real value to the struct-of-arrays at index comp. This sets the data for one particle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="891" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="891" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a920fbf546aa0d61637897696c29bf54c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_real</definition>
        <argsstring>(const std::array&lt; ParticleReal, NArrayReal &gt; &amp;v)</argsstring>
        <name>push_back_real</name>
        <param>
          <type>const std::array&lt; ParticleReal, NArrayReal &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add Real values to the struct-of-arrays, for all comps at once. This sets the data for one particle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="899" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="899" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a2ac59039f3803da57f27367c22c71c12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_real</definition>
        <argsstring>(int comp, const ParticleReal *beg, const ParticleReal *end)</argsstring>
        <name>push_back_real</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const ParticleReal *</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>const ParticleReal *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a range of Real values to the struct-of-arrays for the given comp. This sets the data for several particles at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="909" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1ab23ddb423d3fb51829919af42de5a48f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_real</definition>
        <argsstring>(int comp, amrex::Vector&lt; amrex::ParticleReal &gt;::const_iterator beg, amrex::Vector&lt; amrex::ParticleReal &gt;::const_iterator end)</argsstring>
        <name>push_back_real</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; amrex::ParticleReal &gt;::const_iterator</type>
          <declname>beg</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; amrex::ParticleReal &gt;::const_iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a range of Real values to the struct-of-arrays for the given comp. This sets the data for several particles at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="918" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="918" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a0273a779aabd06b96f98466ee8553d14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_real</definition>
        <argsstring>(int comp, amrex::Vector&lt; amrex::ParticleReal &gt; const &amp;vec)</argsstring>
        <name>push_back_real</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; amrex::ParticleReal &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a range of Real values to the struct-of-arrays for the given comp. This sets the data for several particles at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="926" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="926" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1ad62dabd419e0030589fc00e5e1880f5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_real</definition>
        <argsstring>(int comp, std::size_t npar, ParticleReal v)</argsstring>
        <name>push_back_real</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>npar</declname>
        </param>
        <param>
          <type>ParticleReal</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add npar copies of the Real value v to the struct-of-arrays for the given comp. This sets the data for several particles at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="934" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="934" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1ac46b6f7938c08ba5c71b24c97d8f72a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_int</definition>
        <argsstring>(int comp, int v)</argsstring>
        <name>push_back_int</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an int value to the struct-of-arrays at index comp. This sets the data for one particle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="943" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="943" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1ab1acd5ea97873b2886a1d5b1cca48aab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_int</definition>
        <argsstring>(const std::array&lt; int, NArrayInt &gt; &amp;v)</argsstring>
        <name>push_back_int</name>
        <param>
          <type>const std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, NArrayInt &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add int values to the struct-of-arrays, for all comps at once. This sets the data for one particle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="951" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="951" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1adeb45488fb08fe702e74efadfe55d8d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_int</definition>
        <argsstring>(int comp, const int *beg, const int *end)</argsstring>
        <name>push_back_int</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a range of int values to the struct-of-arrays for the given comp. This sets the data for several particles at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="961" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="961" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a8ed93fa556cb0e6d76ab31855179c490" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_int</definition>
        <argsstring>(int comp, amrex::Vector&lt; int &gt;::const_iterator beg, amrex::Vector&lt; int &gt;::const_iterator end)</argsstring>
        <name>push_back_int</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::const_iterator</type>
          <declname>beg</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::const_iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a range of int values to the struct-of-arrays for the given comp. This sets the data for several particles at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="970" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="970" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a83112560fe0053d36f1d4e2377d82a23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_int</definition>
        <argsstring>(int comp, amrex::Vector&lt; int &gt; const &amp;vec)</argsstring>
        <name>push_back_int</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a range of int values to the struct-of-arrays for the given comp. This sets the data for several particles at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="978" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="978" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1ad303886262e966726980ee5bf9202cfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::push_back_int</definition>
        <argsstring>(int comp, std::size_t npar, int v)</argsstring>
        <name>push_back_int</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>npar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add npar copies of the int value v to the struct-of-arrays for the given comp. This sets the data for several particles at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="986" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="986" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a01a4c2d3cd20e84801f49f31c8305349" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::NumRealComps</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NumRealComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="991" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="991" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a036135b388b4a68fc8fdac9e6c5572f5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::NumIntComps</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NumIntComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="993" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="993" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a94b4d2e5f90cdfc640740a2dc1b8be4e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::NumRuntimeRealComps</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NumRuntimeRealComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="995" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="995" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1abbd0ed100a7511e702da44782d06f360" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::NumRuntimeIntComps</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NumRuntimeIntComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="997" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="997" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a7ff65a82757f35dd00d2ce7435be5a71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::shrink_to_fit</definition>
        <argsstring>()</argsstring>
        <name>shrink_to_fit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="999" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="999" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a3a9ab299dccc5bc6e57018fddb101099" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1017" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1017" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1ad48c6a1915a792354e2a6060e91d8f01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::swap</definition>
        <argsstring>(ParticleTile&lt; ParticleType, NArrayReal, NArrayInt, Allocator &gt; &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref>&lt; <ref refid="structamrex_1_1ParticleTile_1a806d428c54ec86cc7e61edf954105f6f" kindref="member">ParticleType</ref>, NArrayReal, NArrayInt, Allocator &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1037" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1037" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a4f939dec8914785b6fbc7b02f5d0b202" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1ParticleTile_1a0aeb55b6a15d10428c88a314412914c5" kindref="member">ParticleTileDataType</ref></type>
        <definition>ParticleTileDataType amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::getParticleTileData</definition>
        <argsstring>()</argsstring>
        <name>getParticleTileData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1055" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1055" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleTile_1a7e6f09a853acf5ffd1d4d365ebd60d35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1ParticleTile_1a45e1a00c0cf61da02993d8b31b4cb431" kindref="member">ConstParticleTileDataType</ref></type>
        <definition>ConstParticleTileDataType amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;::getConstParticleTileData</definition>
        <argsstring>() const</argsstring>
        <name>getConstParticleTileData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="1120" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="1120" bodyend="1183"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5">
        <label>amrex::PODVector&lt; const ParticleReal *, DefaultAllocator&lt; const ParticleReal * &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ParticleTile&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;</label>
        <link refid="structamrex_1_1ParticleTile"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_runtime_r_ptrs</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_runtime_r_cptrs</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_runtime_i_cptrs</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_runtime_i_ptrs</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_soa_tile</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>DefaultAllocator&lt; int * &gt;</label>
        <link refid="classamrex_1_1ArenaAllocator"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::ArenaAllocatorBase&lt; T, ArenaWrapper &gt;</label>
        <link refid="structamrex_1_1ArenaAllocatorBase"/>
      </node>
      <node id="9">
        <label>amrex::PODVector&lt; int *, DefaultAllocator&lt; int * &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::PODVector&lt; ParticleReal *, DefaultAllocator&lt; ParticleReal * &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::PODVector&lt; const int *, DefaultAllocator&lt; const int * &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>DefaultAllocator&lt; ParticleReal * &gt;</label>
        <link refid="classamrex_1_1ArenaAllocator"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>DefaultAllocator&lt; const int * &gt;</label>
        <link refid="classamrex_1_1ArenaAllocator"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>DefaultAllocator&lt; const ParticleReal * &gt;</label>
        <link refid="classamrex_1_1ArenaAllocator"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::StructOfArrays&lt; NArrayReal, NArrayInt, DefaultAllocator &gt;</label>
        <link refid="structamrex_1_1StructOfArrays"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" line="645" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTile.H" bodystart="646" bodyend="1197"/>
    <listofallmembers>
      <member refid="structamrex_1_1ParticleTile_1ab2be35f77e9e2ed231e5406b9f011dc3" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>AllocatorType</name></member>
      <member refid="structamrex_1_1ParticleTile_1a1a005c5af9405588898aadeb4fd23a60" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>AoS</name></member>
      <member refid="structamrex_1_1ParticleTile_1a3a9ab299dccc5bc6e57018fddb101099" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>capacity</name></member>
      <member refid="structamrex_1_1ParticleTile_1a45e1a00c0cf61da02993d8b31b4cb431" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>ConstParticleTileDataType</name></member>
      <member refid="structamrex_1_1ParticleTile_1acd6829f21f92c9aba7864a790b9200df" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>cpu</name></member>
      <member refid="structamrex_1_1ParticleTile_1abddb89433aca18a1eb4c513c44a9c621" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>cpu</name></member>
      <member refid="structamrex_1_1ParticleTile_1abc7127e222d300082ca177f987d847a5" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>define</name></member>
      <member refid="structamrex_1_1ParticleTile_1abe6aa2080bb4a68eaded92e7e3e6efd6" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>empty</name></member>
      <member refid="structamrex_1_1ParticleTile_1a15a5c73d1aaced5789c24576eabe384d" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>GetArrayOfStructs</name></member>
      <member refid="structamrex_1_1ParticleTile_1a01fa9d2a9c7ad522f53a96ba6aa770a8" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>GetArrayOfStructs</name></member>
      <member refid="structamrex_1_1ParticleTile_1a7e6f09a853acf5ffd1d4d365ebd60d35" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>getConstParticleTileData</name></member>
      <member refid="structamrex_1_1ParticleTile_1a0af47b01f2f8e3b42701af71a08ed2be" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>getNumNeighbors</name></member>
      <member refid="structamrex_1_1ParticleTile_1a4f939dec8914785b6fbc7b02f5d0b202" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>getParticleTileData</name></member>
      <member refid="structamrex_1_1ParticleTile_1a9bc22bda551e1d2089c81b93c2b0d794" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>GetStructOfArrays</name></member>
      <member refid="structamrex_1_1ParticleTile_1a865f181bef3a750aaae3437c4e91dd33" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>GetStructOfArrays</name></member>
      <member refid="structamrex_1_1ParticleTile_1af0f0e616393a552d2bde49f930babbae" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>id</name></member>
      <member refid="structamrex_1_1ParticleTile_1a36f9ab05aec0c6ff6c10e60af0dc01d2" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>id</name></member>
      <member refid="structamrex_1_1ParticleTile_1ab198bf3467e469c8c1bfa13f1c53799a" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>IntVector</name></member>
      <member refid="structamrex_1_1ParticleTile_1a434377380cf9f4dd45362080837b6ec4" prot="private" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>m_aos_tile</name></member>
      <member refid="structamrex_1_1ParticleTile_1ad4a6e09ba4f2ef496ba35c3dac4c19b4" prot="private" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>m_defined</name></member>
      <member refid="structamrex_1_1ParticleTile_1a168b67cee9983016eb4a811d740523e2" prot="private" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>m_runtime_i_cptrs</name></member>
      <member refid="structamrex_1_1ParticleTile_1ae172244722fde937a7ba5a8a60a5ff99" prot="private" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>m_runtime_i_ptrs</name></member>
      <member refid="structamrex_1_1ParticleTile_1aa1f069375a3a442593c218fc4911de6d" prot="private" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>m_runtime_r_cptrs</name></member>
      <member refid="structamrex_1_1ParticleTile_1a6e6255a32ada9fcf2655a94d474ece11" prot="private" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>m_runtime_r_ptrs</name></member>
      <member refid="structamrex_1_1ParticleTile_1acfdbf84efe0aae5266a28545a2e45480" prot="private" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>m_soa_tile</name></member>
      <member refid="structamrex_1_1ParticleTile_1a27974d2d46e3698a69b1997e905072e8" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>NAI</name></member>
      <member refid="structamrex_1_1ParticleTile_1a7d38648767509798f1fab24a293b49eb" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>NAR</name></member>
      <member refid="structamrex_1_1ParticleTile_1a2e52440bc21e01affff077fff37edb44" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>NStructInt</name></member>
      <member refid="structamrex_1_1ParticleTile_1af37f9208b1b9908daad6789415d20f81" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>NStructReal</name></member>
      <member refid="structamrex_1_1ParticleTile_1a036135b388b4a68fc8fdac9e6c5572f5" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>NumIntComps</name></member>
      <member refid="structamrex_1_1ParticleTile_1a67d9df04de8fa70ac8b9c43325febff3" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>numNeighborParticles</name></member>
      <member refid="structamrex_1_1ParticleTile_1a80fc21d171f28db059190e234fa36642" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>numParticles</name></member>
      <member refid="structamrex_1_1ParticleTile_1a01a4c2d3cd20e84801f49f31c8305349" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>NumRealComps</name></member>
      <member refid="structamrex_1_1ParticleTile_1ae905e32844864462ec7a0ddf7a666ee4" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>numRealParticles</name></member>
      <member refid="structamrex_1_1ParticleTile_1abbd0ed100a7511e702da44782d06f360" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>NumRuntimeIntComps</name></member>
      <member refid="structamrex_1_1ParticleTile_1a94b4d2e5f90cdfc640740a2dc1b8be4e" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>NumRuntimeRealComps</name></member>
      <member refid="structamrex_1_1ParticleTile_1a3b487649b8128cc37a6f35f913229d00" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>numTotalParticles</name></member>
      <member refid="structamrex_1_1ParticleTile_1a070fcef33e908cba36039a6fdf1d1c53" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>ParticleTile</name></member>
      <member refid="structamrex_1_1ParticleTile_1a0aeb55b6a15d10428c88a314412914c5" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>ParticleTileDataType</name></member>
      <member refid="structamrex_1_1ParticleTile_1a806d428c54ec86cc7e61edf954105f6f" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>ParticleType</name></member>
      <member refid="structamrex_1_1ParticleTile_1aa4be6533a7b9987c6f0c73ffe3c4cbbb" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>pos</name></member>
      <member refid="structamrex_1_1ParticleTile_1acca412a3b97db15ba5e39f02b97d079c" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>pos</name></member>
      <member refid="structamrex_1_1ParticleTile_1a1c3596011f3532785e35f93767dac146" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back</name></member>
      <member refid="structamrex_1_1ParticleTile_1a58ff9d1415aa8e4eee3fd76955d36429" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back</name></member>
      <member refid="structamrex_1_1ParticleTile_1ac46b6f7938c08ba5c71b24c97d8f72a5" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_int</name></member>
      <member refid="structamrex_1_1ParticleTile_1ab1acd5ea97873b2886a1d5b1cca48aab" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_int</name></member>
      <member refid="structamrex_1_1ParticleTile_1adeb45488fb08fe702e74efadfe55d8d7" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_int</name></member>
      <member refid="structamrex_1_1ParticleTile_1a8ed93fa556cb0e6d76ab31855179c490" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_int</name></member>
      <member refid="structamrex_1_1ParticleTile_1a83112560fe0053d36f1d4e2377d82a23" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_int</name></member>
      <member refid="structamrex_1_1ParticleTile_1ad303886262e966726980ee5bf9202cfb" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_int</name></member>
      <member refid="structamrex_1_1ParticleTile_1af54fdaaae348f3ef6c4f9ec72ed5d7aa" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_real</name></member>
      <member refid="structamrex_1_1ParticleTile_1a920fbf546aa0d61637897696c29bf54c" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_real</name></member>
      <member refid="structamrex_1_1ParticleTile_1a2ac59039f3803da57f27367c22c71c12" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_real</name></member>
      <member refid="structamrex_1_1ParticleTile_1ab23ddb423d3fb51829919af42de5a48f" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_real</name></member>
      <member refid="structamrex_1_1ParticleTile_1a0273a779aabd06b96f98466ee8553d14" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_real</name></member>
      <member refid="structamrex_1_1ParticleTile_1ad62dabd419e0030589fc00e5e1880f5a" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>push_back_real</name></member>
      <member refid="structamrex_1_1ParticleTile_1a043db0d4cd2205027b4308f459496b79" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>RealType</name></member>
      <member refid="structamrex_1_1ParticleTile_1adf1dfc735a7f9d3508e434da7e87b632" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>RealVector</name></member>
      <member refid="structamrex_1_1ParticleTile_1aad932266bb874a93f00fc2920ff69548" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>resize</name></member>
      <member refid="structamrex_1_1ParticleTile_1a3418dd871a28056a9d8aa3ba12a016f6" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>setNumNeighbors</name></member>
      <member refid="structamrex_1_1ParticleTile_1a7ff65a82757f35dd00d2ce7435be5a71" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>shrink_to_fit</name></member>
      <member refid="structamrex_1_1ParticleTile_1a4cb40d2d0fafeeb40b606421015705fa" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>size</name></member>
      <member refid="structamrex_1_1ParticleTile_1aa1c3e53b94d58cccb5d29cf33dea056b" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>SoA</name></member>
      <member refid="structamrex_1_1ParticleTile_1a00d52f45cf7e8a4b3c30cfb48e7bca78" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>StorageParticleType</name></member>
      <member refid="structamrex_1_1ParticleTile_1acdece46bb48b940977bf9efe198779c4" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>SuperParticleType</name></member>
      <member refid="structamrex_1_1ParticleTile_1ad48c6a1915a792354e2a6060e91d8f01" prot="public" virt="non-virtual"><scope>amrex::ParticleTile</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
