<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1IntegratorBase" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::IntegratorBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1FEIntegrator" prot="public" virt="non-virtual">amrex::FEIntegrator&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1RKIntegrator" prot="public" virt="non-virtual">amrex::RKIntegrator&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1SundialsIntegrator" prot="public" virt="non-virtual">amrex::SundialsIntegrator&lt; T &gt;</derivedcompoundref>
    <includes refid="AMReX__IntegratorBase_8H" local="no">AMReX_IntegratorBase.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1ab5166c9130778bcf08f08230d72b05f3" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;rhs, T &amp;state, const amrex::Real time)&gt;</type>
        <definition>std::function&lt;void(T&amp; rhs, T&amp; state, const amrex::Real time)&gt; amrex::IntegratorBase&lt; T &gt;::Rhs</definition>
        <argsstring></argsstring>
        <name>Rhs</name>
        <briefdescription>
<para>Rhs is the right-hand-side function the integrator will use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="168" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a983bd9fe800746c882ce2184ef5baf48" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;rhs, T &amp;state, const amrex::Real time)&gt;</type>
        <definition>std::function&lt;void(T&amp; rhs, T&amp; state, const amrex::Real time)&gt; amrex::IntegratorBase&lt; T &gt;::RhsIm</definition>
        <argsstring></argsstring>
        <name>RhsIm</name>
        <briefdescription>
<para>RhsIm is the implicit right-hand-side function an ImEx integrator will use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="174" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a580d4499f9876896b94cd3db82664bc0" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;rhs, T &amp;state, const amrex::Real time)&gt;</type>
        <definition>std::function&lt;void(T&amp; rhs, T&amp; state, const amrex::Real time)&gt; amrex::IntegratorBase&lt; T &gt;::RhsEx</definition>
        <argsstring></argsstring>
        <name>RhsEx</name>
        <briefdescription>
<para>RhsEx is the explicit right-hand-side function an ImEx integrator will use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="180" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1ae700a0f7a7f2bf4456e466be7a2828ed" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;rhs, T &amp;state, const amrex::Real time)&gt;</type>
        <definition>std::function&lt;void(T&amp; rhs, T&amp; state, const amrex::Real time)&gt; amrex::IntegratorBase&lt; T &gt;::RhsFast</definition>
        <argsstring></argsstring>
        <name>RhsFast</name>
        <briefdescription>
<para>RhsFast is the fast timescale right-hand-side function a multirate integrator will use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="186" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1ad51e1ada5e5a2f2956bea509831a43e3" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
        <definition>std::function&lt;void (T&amp;, amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::post_stage_action</definition>
        <argsstring></argsstring>
        <name>post_stage_action</name>
        <briefdescription>
<para>The post_stage_action function is called by the integrator on the computed stage just after it is computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="192" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a5e6edee80e051ee491f30b7e2668cea1" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
        <definition>std::function&lt;void (T&amp;, amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::post_step_action</definition>
        <argsstring></argsstring>
        <name>post_step_action</name>
        <briefdescription>
<para>The post_step_action function is called by the integrator on the computed state just after it is computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="198" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a3898e71d3b76c181fe8826e3c1c8e23e" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
        <definition>std::function&lt;void (T&amp;, amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::post_fast_stage_action</definition>
        <argsstring></argsstring>
        <name>post_fast_stage_action</name>
        <briefdescription>
<para>The post_stage_action function is called by the integrator on the computed stage just after it is computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="204" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a8a54ccfa6d203a9d2f8efe66130ae468" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
        <definition>std::function&lt;void (T&amp;, amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::post_fast_step_action</definition>
        <argsstring></argsstring>
        <name>post_fast_step_action</name>
        <briefdescription>
<para>The post_step_action function is called by the integrator on the computed state just after it is computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="210" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1ac912e7cd93ce1edbebd7af47bd90f7c2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::IntegratorBase&lt; T &gt;::use_adaptive_time_step</definition>
        <argsstring></argsstring>
        <name>use_adaptive_time_step</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Flag to enable/disable adaptive time stepping in single rate methods or at the slow time scale in multirate methods (bool) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="216" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1ad9211fc29fd1cd9a03025959738c90d4" prot="protected" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::time_step</definition>
        <argsstring></argsstring>
        <name>time_step</name>
        <briefdescription>
<para>Current integrator time step size (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="221" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1aea34558a8595abbdc1f9a5f3635fb4c2" prot="protected" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::previous_time_step</definition>
        <argsstring></argsstring>
        <name>previous_time_step</name>
        <briefdescription>
<para>Step size of the last completed step (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="226" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a19edbb14c5dbad6c2550d6fb59ab3860" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::IntegratorBase&lt; T &gt;::use_adaptive_fast_time_step</definition>
        <argsstring></argsstring>
        <name>use_adaptive_fast_time_step</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Flag to enable/disable adaptive time stepping at the fast time scale in multirate methods (bool) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="232" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a4fe63921d4507e1af5f2df9fdbe66047" prot="protected" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::fast_time_step</definition>
        <argsstring></argsstring>
        <name>fast_time_step</name>
        <briefdescription>
<para>Current integrator fast time scale time step size with multirate methods (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="238" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1ab68545bb3877ccbb5beef755501e6e51" prot="protected" static="no" mutable="no">
        <type>amrex::Long</type>
        <definition>amrex::Long amrex::IntegratorBase&lt; T &gt;::num_steps</definition>
        <argsstring></argsstring>
        <name>num_steps</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of integrator time steps (Long) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="243" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a9686cea17de48c6ffb49d0288146fc03" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::IntegratorBase&lt; T &gt;::max_steps</definition>
        <argsstring></argsstring>
        <name>max_steps</name>
        <initializer>= 500</initializer>
        <briefdescription>
<para>Max number of internal steps before an error is returned (Long) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="248" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a260c250d0a39818e4d4f9ef808b82239" prot="protected" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::rel_tol</definition>
        <argsstring></argsstring>
        <name>rel_tol</name>
        <initializer>= 1.0e-4</initializer>
        <briefdescription>
<para>Relative tolerance for adaptive time stepping (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="253" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1afad6554d52e651fc45b533d34a96c135" prot="protected" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::abs_tol</definition>
        <argsstring></argsstring>
        <name>abs_tol</name>
        <initializer>= 1.0e-9</initializer>
        <briefdescription>
<para>Absolute tolerance for adaptive time stepping (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="258" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a1be9f819915ff16d7883d0ebd8009e66" prot="protected" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::fast_rel_tol</definition>
        <argsstring></argsstring>
        <name>fast_rel_tol</name>
        <initializer>= 1.0e-4</initializer>
        <briefdescription>
<para>Relative tolerance for adaptive time stepping at the fast time scale (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="264" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a4ec1caa1e60f0282b7a8e76dffe856ee" prot="protected" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::fast_abs_tol</definition>
        <argsstring></argsstring>
        <name>fast_abs_tol</name>
        <initializer>= 1.0e-9</initializer>
        <briefdescription>
<para>Absolute tolerance for adaptive time stepping at the fast time scale (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="270" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="270" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a0161e86a01e6b8a3ae9a9d3f91e5ad29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::IntegratorBase&lt; T &gt;::IntegratorBase</definition>
        <argsstring>()=default</argsstring>
        <name>IntegratorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="274" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ad6e1d1e6bb0cd9f1ac3dec311f811151" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntegratorBase&lt; T &gt;::IntegratorBase</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>IntegratorBase</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="276" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ab552abbdc6f529d492e5912b8af6f3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::IntegratorBase&lt; T &gt;::~IntegratorBase</definition>
        <argsstring>()=default</argsstring>
        <name>~IntegratorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="278" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a0e94856b2945a45e1f0dae7cd9bbb8fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_rhs</definition>
        <argsstring>(std::function&lt; void(T &amp;, T &amp;, const amrex::Real)&gt; F)</argsstring>
        <name>set_rhs</name>
        <param>
          <type>std::function&lt; void(T &amp;, T &amp;, const amrex::Real)&gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="280" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a9c9409a416dc1c392f0a06e958ca10a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_imex_rhs</definition>
        <argsstring>(std::function&lt; void(T &amp;, T &amp;, const amrex::Real)&gt; Fi, std::function&lt; void(T &amp;, T &amp;, const amrex::Real)&gt; Fe)</argsstring>
        <name>set_imex_rhs</name>
        <param>
          <type>std::function&lt; void(T &amp;, T &amp;, const amrex::Real)&gt;</type>
          <declname>Fi</declname>
        </param>
        <param>
          <type>std::function&lt; void(T &amp;, T &amp;, const amrex::Real)&gt;</type>
          <declname>Fe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="285" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="285" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ac97ece6993962b73c93abd34b7d49e2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_fast_rhs</definition>
        <argsstring>(std::function&lt; void(T &amp;, T &amp;, const amrex::Real)&gt; F)</argsstring>
        <name>set_fast_rhs</name>
        <param>
          <type>std::function&lt; void(T &amp;, T &amp;, const amrex::Real)&gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="292" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a694555275ea4407fe6132ebb1a2f09c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_post_stage_action</definition>
        <argsstring>(std::function&lt; void(T &amp;, amrex::Real)&gt; A)</argsstring>
        <name>set_post_stage_action</name>
        <param>
          <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="297" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a0d4804fed689d7335e3b404e4a67c37d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_post_step_action</definition>
        <argsstring>(std::function&lt; void(T &amp;, amrex::Real)&gt; A)</argsstring>
        <name>set_post_step_action</name>
        <param>
          <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="302" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a378df79907ae53d5eef652341833ab77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_post_fast_stage_action</definition>
        <argsstring>(std::function&lt; void(T &amp;, amrex::Real)&gt; A)</argsstring>
        <name>set_post_fast_stage_action</name>
        <param>
          <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="307" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a9a2a23791bed8871f255633f141f0444" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_post_fast_step_action</definition>
        <argsstring>(std::function&lt; void(T &amp;, amrex::Real)&gt; A)</argsstring>
        <name>set_post_fast_step_action</name>
        <param>
          <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="312" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a4e271bb0dfa0e7bee049e3b8dfcbfec4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::get_time_step</definition>
        <argsstring>()</argsstring>
        <name>get_time_step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="317" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1aa2dfdf9011fe5398e3aef23edc39d76a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_time_step</definition>
        <argsstring>(amrex::Real dt)</argsstring>
        <name>set_time_step</name>
        <param>
          <type>amrex::Real</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="322" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="322" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a100f797cb82abd1ec8563c591ebe823a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_adaptive_step</definition>
        <argsstring>()</argsstring>
        <name>set_adaptive_step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="328" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ad59a858ee7ee2d3267dff6c2f085a4dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_fast_time_step</definition>
        <argsstring>(amrex::Real dt)</argsstring>
        <name>set_fast_time_step</name>
        <param>
          <type>amrex::Real</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="333" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="333" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a49c90c36c565d4499bd64662416f4d0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_adaptive_fast_step</definition>
        <argsstring>()</argsstring>
        <name>set_adaptive_fast_step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="339" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a9fe529e314e46e719aec6150281858a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_max_steps</definition>
        <argsstring>(int steps)</argsstring>
        <name>set_max_steps</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="344" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1aa6a9eaa0e52db6d40074bfc02b9cacd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_tolerances</definition>
        <argsstring>(amrex::Real rtol, amrex::Real atol)</argsstring>
        <name>set_tolerances</name>
        <param>
          <type>amrex::Real</type>
          <declname>rtol</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>atol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="349" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="349" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a338b71036c6b6ddcc8e887518376152f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_fast_tolerances</definition>
        <argsstring>(amrex::Real rtol, amrex::Real atol)</argsstring>
        <name>set_fast_tolerances</name>
        <param>
          <type>amrex::Real</type>
          <declname>rtol</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>atol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="355" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="355" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a4d714675069097ce07c843145e45d465" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>amrex::Real</type>
        <definition>virtual amrex::Real amrex::IntegratorBase&lt; T &gt;::advance</definition>
        <argsstring>(T &amp;S_old, T &amp;S_new, amrex::Real time, amrex::Real dt)=0</argsstring>
        <name>advance</name>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1a8fd0bd1a546d76eaf337dabca422ead4">advance</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1ada5e46fb855c0ec424f31edd25bc953a">advance</reimplementedby>
        <reimplementedby refid="classamrex_1_1SundialsIntegrator_1a5db76fd7e2cd637504a4addd0d3f4a88">advance</reimplementedby>
        <param>
          <type>T &amp;</type>
          <declname>S_old</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>S_new</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Take a single time step from (time, S_old) to (time + dt, S_new) with the given step size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="365" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a97d9851462a6592d58c42ced9cb266a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::evolve</definition>
        <argsstring>(T &amp;S_out, const amrex::Real time_out)=0</argsstring>
        <name>evolve</name>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1a31411280257ee4d2942a140cbead4635">evolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1af0eddcd4e42f2e70d706c84108c812e7">evolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1SundialsIntegrator_1a688191347e4eef3fa6bc2714a8d51a0e">evolve</reimplementedby>
        <param>
          <type>T &amp;</type>
          <declname>S_out</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>time_out</declname>
        </param>
        <briefdescription>
<para>Evolve the current (internal) integrator state to time_out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="371" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a3dc1f86935271c9b053b9d6a60911739" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::time_interpolate</definition>
        <argsstring>(const T &amp;S_new, const T &amp;S_old, amrex::Real timestep_fraction, T &amp;data)=0</argsstring>
        <name>time_interpolate</name>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1ac0b9633fedee03bd638f87514a952720">time_interpolate</reimplementedby>
        <reimplementedby refid="classamrex_1_1SundialsIntegrator_1a064376184442b5fa00c9f3b407e9fe5d">time_interpolate</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1a2372340230301693e973e404c12618fa">time_interpolate</reimplementedby>
        <param>
          <type>const T &amp;</type>
          <declname>S_new</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>S_old</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>timestep_fraction</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="373" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a9a0b2271de694f1ea0903339931578ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::map_data</definition>
        <argsstring>(std::function&lt; void(T &amp;)&gt; Map)=0</argsstring>
        <name>map_data</name>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1acd01b4dfae6f5cbd84d2ed940355fd0c">map_data</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1acc1277598adc82e186fef0b44c86e603">map_data</reimplementedby>
        <reimplementedby refid="classamrex_1_1SundialsIntegrator_1af0bac245837e93c1fc9a6a157c4a30a7">map_data</reimplementedby>
        <param>
          <type>std::function&lt; void(T &amp;)&gt;</type>
          <declname>Map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="376" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>amrex::RKIntegrator&lt; T &gt;</label>
        <link refid="classamrex_1_1RKIntegrator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FEIntegrator&lt; T &gt;</label>
        <link refid="classamrex_1_1FEIntegrator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::IntegratorBase&lt; T &gt;</label>
        <link refid="classamrex_1_1IntegratorBase"/>
      </node>
      <node id="4">
        <label>amrex::SundialsIntegrator&lt; T &gt;</label>
        <link refid="classamrex_1_1SundialsIntegrator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Real</label>
      </node>
      <node id="1">
        <label>amrex::IntegratorBase&lt; T &gt;</label>
        <link refid="classamrex_1_1IntegratorBase"/>
        <childnode refid="2" relation="usage">
          <edgelabel>abs_tol</edgelabel>
          <edgelabel>fast_abs_tol</edgelabel>
          <edgelabel>fast_rel_tol</edgelabel>
          <edgelabel>fast_time_step</edgelabel>
          <edgelabel>previous_time_step</edgelabel>
          <edgelabel>rel_tol</edgelabel>
          <edgelabel>time_step</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="163" bodyend="377"/>
    <listofallmembers>
      <member refid="classamrex_1_1IntegratorBase_1afad6554d52e651fc45b533d34a96c135" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>abs_tol</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a4d714675069097ce07c843145e45d465" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>advance</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a97d9851462a6592d58c42ced9cb266a9" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>evolve</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a4ec1caa1e60f0282b7a8e76dffe856ee" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>fast_abs_tol</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a1be9f819915ff16d7883d0ebd8009e66" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>fast_rel_tol</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a4fe63921d4507e1af5f2df9fdbe66047" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>fast_time_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a4e271bb0dfa0e7bee049e3b8dfcbfec4" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>get_time_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a0161e86a01e6b8a3ae9a9d3f91e5ad29" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>IntegratorBase</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ad6e1d1e6bb0cd9f1ac3dec311f811151" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>IntegratorBase</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a9a0b2271de694f1ea0903339931578ec" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>map_data</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a9686cea17de48c6ffb49d0288146fc03" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>max_steps</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ab68545bb3877ccbb5beef755501e6e51" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>num_steps</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a3898e71d3b76c181fe8826e3c1c8e23e" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>post_fast_stage_action</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a8a54ccfa6d203a9d2f8efe66130ae468" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>post_fast_step_action</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ad51e1ada5e5a2f2956bea509831a43e3" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>post_stage_action</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a5e6edee80e051ee491f30b7e2668cea1" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>post_step_action</name></member>
      <member refid="classamrex_1_1IntegratorBase_1aea34558a8595abbdc1f9a5f3635fb4c2" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>previous_time_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a260c250d0a39818e4d4f9ef808b82239" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>rel_tol</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ab5166c9130778bcf08f08230d72b05f3" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>Rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a580d4499f9876896b94cd3db82664bc0" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>RhsEx</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ae700a0f7a7f2bf4456e466be7a2828ed" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>RhsFast</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a983bd9fe800746c882ce2184ef5baf48" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>RhsIm</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a49c90c36c565d4499bd64662416f4d0d" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_adaptive_fast_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a100f797cb82abd1ec8563c591ebe823a" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_adaptive_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ac97ece6993962b73c93abd34b7d49e2d" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_fast_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ad59a858ee7ee2d3267dff6c2f085a4dd" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_fast_time_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a338b71036c6b6ddcc8e887518376152f" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_fast_tolerances</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a9c9409a416dc1c392f0a06e958ca10a4" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_imex_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a9fe529e314e46e719aec6150281858a3" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_max_steps</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a378df79907ae53d5eef652341833ab77" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_post_fast_stage_action</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a9a2a23791bed8871f255633f141f0444" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_post_fast_step_action</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a694555275ea4407fe6132ebb1a2f09c3" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_post_stage_action</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a0d4804fed689d7335e3b404e4a67c37d" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_post_step_action</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a0e94856b2945a45e1f0dae7cd9bbb8fe" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1aa2dfdf9011fe5398e3aef23edc39d76a" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_time_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1aa6a9eaa0e52db6d40074bfc02b9cacd0" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_tolerances</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a3dc1f86935271c9b053b9d6a60911739" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>time_interpolate</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ad9211fc29fd1cd9a03025959738c90d4" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>time_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a19edbb14c5dbad6c2550d6fb59ab3860" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>use_adaptive_fast_time_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ac912e7cd93ce1edbebd7af47bd90f7c2" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>use_adaptive_time_step</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ab552abbdc6f529d492e5912b8af6f3a3" prot="public" virt="virtual"><scope>amrex::IntegratorBase</scope><name>~IntegratorBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
