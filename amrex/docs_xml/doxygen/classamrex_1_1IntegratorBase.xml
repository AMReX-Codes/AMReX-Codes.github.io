<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1IntegratorBase" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::IntegratorBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1FEIntegrator" prot="public" virt="non-virtual">amrex::FEIntegrator&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1RKIntegrator" prot="public" virt="non-virtual">amrex::RKIntegrator&lt; T &gt;</derivedcompoundref>
    <includes refid="AMReX__IntegratorBase_8H" local="no">AMReX_IntegratorBase.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a26bec4822130d973d323ec22ce38e71a" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, const T &amp;, const amrex::Real)&gt;</type>
        <definition>std::function&lt;void(T&amp;, const T&amp;, const amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::Fun</definition>
        <argsstring></argsstring>
        <name>Fun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="153" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a093f10915c880670f78fcc8cbc763dd6" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
        <definition>std::function&lt;void (T&amp;, amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::post_update</definition>
        <argsstring></argsstring>
        <name>post_update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="156" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1ae09b7963b36e9cba661e6e64c3d67159" prot="public" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::timestep</definition>
        <argsstring></argsstring>
        <name>timestep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="159" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="159" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a8960e06411e4dac4bd0a99f5be3b489e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntegratorBase&lt; T &gt;::IntegratorBase</definition>
        <argsstring>()</argsstring>
        <name>IntegratorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="161" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a33e59ff0c3058f32e4c28ab13369f211" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntegratorBase&lt; T &gt;::IntegratorBase</definition>
        <argsstring>(const T &amp;S_data)</argsstring>
        <name>IntegratorBase</name>
        <param>
          <type>const T &amp;</type>
          <declname>S_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="163" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a9bcad149736f2fc82ca342a2e0f24fc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual amrex::IntegratorBase&lt; T &gt;::~IntegratorBase</definition>
        <argsstring>()</argsstring>
        <name>~IntegratorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="165" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a776b334c903b6275ea792b4e7cca5a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::initialize</definition>
        <argsstring>(const T &amp;S_data)=0</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1a185dfa35b64b538760bd196b223aad9c">initialize</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1a55e3beb00795cc4ebc77e684b42d0ba9">initialize</reimplementedby>
        <param>
          <type>const T &amp;</type>
          <declname>S_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="167" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ad6bd9eb8cc13ac9e2a120c9018f529aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_rhs</definition>
        <argsstring>(std::function&lt; void(T &amp;, const T &amp;, const amrex::Real)&gt; F)</argsstring>
        <name>set_rhs</name>
        <param>
          <type>std::function&lt; void(T &amp;, const T &amp;, const amrex::Real)&gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="169" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ab844bc357c2ad282e111b0f3e965864e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_post_update</definition>
        <argsstring>(std::function&lt; void(T &amp;, amrex::Real)&gt; F)</argsstring>
        <name>set_post_update</name>
        <param>
          <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="174" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ae03ee5e425bef0111005514d81fdf5e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::rhs</definition>
        <argsstring>(T &amp;S_rhs, const T &amp;S_data, const amrex::Real time)</argsstring>
        <name>rhs</name>
        <param>
          <type>T &amp;</type>
          <declname>S_rhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>S_data</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="179" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a0b820091c0cdc69c24149eb97b5cb0b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>amrex::Real</type>
        <definition>virtual amrex::Real amrex::IntegratorBase&lt; T &gt;::advance</definition>
        <argsstring>(T &amp;S_old, T &amp;S_new, amrex::Real time, const amrex::Real dt)=0</argsstring>
        <name>advance</name>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1a4436c482a1a3799b22d31c40a4402fda">advance</reimplementedby>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1ad1581d620d904810eefb8eb73e8c709e">advance</reimplementedby>
        <param>
          <type>T &amp;</type>
          <declname>S_old</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>S_new</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="184" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a3dc1f86935271c9b053b9d6a60911739" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::time_interpolate</definition>
        <argsstring>(const T &amp;S_new, const T &amp;S_old, amrex::Real timestep_fraction, T &amp;data)=0</argsstring>
        <name>time_interpolate</name>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1a79729cb55601777970b8501201352843">time_interpolate</reimplementedby>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1ae1409e17f157036492cd1cb0340b3c8b">time_interpolate</reimplementedby>
        <param>
          <type>const T &amp;</type>
          <declname>S_new</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>S_old</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>timestep_fraction</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="186" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a9a0b2271de694f1ea0903339931578ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::map_data</definition>
        <argsstring>(std::function&lt; void(T &amp;)&gt; Map)=0</argsstring>
        <name>map_data</name>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1a0f5f592b2e8b70e6338632ca8d1265ba">map_data</reimplementedby>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1acd01b4dfae6f5cbd84d2ed940355fd0c">map_data</reimplementedby>
        <param>
          <type>std::function&lt; void(T &amp;)&gt;</type>
          <declname>Map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="188" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>amrex::RKIntegrator&lt; T &gt;</label>
        <link refid="classamrex_1_1RKIntegrator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FEIntegrator&lt; T &gt;</label>
        <link refid="classamrex_1_1FEIntegrator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::IntegratorBase&lt; T &gt;</label>
        <link refid="classamrex_1_1IntegratorBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Real</label>
      </node>
      <node id="1">
        <label>amrex::IntegratorBase&lt; T &gt;</label>
        <link refid="classamrex_1_1IntegratorBase"/>
        <childnode refid="2" relation="usage">
          <edgelabel>timestep</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="151" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="150" bodyend="189"/>
    <listofallmembers>
      <member refid="classamrex_1_1IntegratorBase_1a0b820091c0cdc69c24149eb97b5cb0b7" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>advance</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a26bec4822130d973d323ec22ce38e71a" prot="private" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>Fun</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a776b334c903b6275ea792b4e7cca5a88" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>initialize</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a8960e06411e4dac4bd0a99f5be3b489e" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>IntegratorBase</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a33e59ff0c3058f32e4c28ab13369f211" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>IntegratorBase</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a9a0b2271de694f1ea0903339931578ec" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>map_data</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a093f10915c880670f78fcc8cbc763dd6" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>post_update</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ae03ee5e425bef0111005514d81fdf5e4" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ab844bc357c2ad282e111b0f3e965864e" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_post_update</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ad6bd9eb8cc13ac9e2a120c9018f529aa" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a3dc1f86935271c9b053b9d6a60911739" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>time_interpolate</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ae09b7963b36e9cba661e6e64c3d67159" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>timestep</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a9bcad149736f2fc82ca342a2e0f24fc6" prot="public" virt="virtual"><scope>amrex::IntegratorBase</scope><name>~IntegratorBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
