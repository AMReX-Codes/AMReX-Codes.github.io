<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1IntegratorBase" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::IntegratorBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1FEIntegrator" prot="public" virt="non-virtual">amrex::FEIntegrator&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1RKIntegrator" prot="public" virt="non-virtual">amrex::RKIntegrator&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1SundialsIntegrator" prot="public" virt="non-virtual">amrex::SundialsIntegrator&lt; T &gt;</derivedcompoundref>
    <includes refid="AMReX__IntegratorBase_8H" local="no">AMReX_IntegratorBase.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a26bec4822130d973d323ec22ce38e71a" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, const T &amp;, const amrex::Real)&gt;</type>
        <definition>std::function&lt;void(T&amp;, const T&amp;, const amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::Fun</definition>
        <argsstring></argsstring>
        <name>Fun</name>
        <briefdescription>
<para>Fun is the right-hand-side function the integrator will use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="168" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a1455552255598f4b2a1cf54b60ae3317" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, T &amp;, const T &amp;, const amrex::Real)&gt;</type>
        <definition>std::function&lt;void(T&amp;, T&amp;, const T&amp;, const amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::FastFun</definition>
        <argsstring></argsstring>
        <name>FastFun</name>
        <briefdescription>
<para>FastFun is the fast timescale right-hand-side function for a multirate integration problem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="173" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1ae09b7963b36e9cba661e6e64c3d67159" prot="protected" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::IntegratorBase&lt; T &gt;::timestep</definition>
        <argsstring></argsstring>
        <name>timestep</name>
        <briefdescription>
<para>Integrator timestep size (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="179" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1af8b9b0ced6670ce184422a8223b57b63" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::IntegratorBase&lt; T &gt;::slow_fast_timestep_ratio</definition>
        <argsstring></argsstring>
        <name>slow_fast_timestep_ratio</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>For multirate problems, the ratio of slow timestep size / fast timestep size (int) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="184" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a020d8e83bf55dd069e374403d4ff1f7a" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::IntegratorBase&lt; T &gt;::fast_timestep</definition>
        <argsstring></argsstring>
        <name>fast_timestep</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>For multirate problems, the fast timestep size (Real) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="189" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntegratorBase_1a093f10915c880670f78fcc8cbc763dd6" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
        <definition>std::function&lt;void (T&amp;, amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::post_update</definition>
        <argsstring></argsstring>
        <name>post_update</name>
        <briefdescription>
<para>The post_update function is called by the integrator on state data before using it to evaluate a right-hand side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="194" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a0161e86a01e6b8a3ae9a9d3f91e5ad29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::IntegratorBase&lt; T &gt;::IntegratorBase</definition>
        <argsstring>()=default</argsstring>
        <name>IntegratorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="197" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ad6e1d1e6bb0cd9f1ac3dec311f811151" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntegratorBase&lt; T &gt;::IntegratorBase</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>IntegratorBase</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="199" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ab552abbdc6f529d492e5912b8af6f3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::IntegratorBase&lt; T &gt;::~IntegratorBase</definition>
        <argsstring>()=default</argsstring>
        <name>~IntegratorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="201" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a776b334c903b6275ea792b4e7cca5a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::initialize</definition>
        <argsstring>(const T &amp;S_data)=0</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classamrex_1_1SundialsIntegrator_1ac233945925ba43c510b51d0da796b6dd">initialize</reimplementedby>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1afde8c9a7877ee333a8b61e68499f61d7">initialize</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1a070decd98b9fe765121a44a15f5a1da0">initialize</reimplementedby>
        <param>
          <type>const T &amp;</type>
          <declname>S_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="203" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ad6bd9eb8cc13ac9e2a120c9018f529aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_rhs</definition>
        <argsstring>(std::function&lt; void(T &amp;, const T &amp;, const amrex::Real)&gt; F)</argsstring>
        <name>set_rhs</name>
        <param>
          <type>std::function&lt; void(T &amp;, const T &amp;, const amrex::Real)&gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="205" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a8a1755cd66c91ef2d57cefb32ce90b1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_fast_rhs</definition>
        <argsstring>(std::function&lt; void(T &amp;, T &amp;, const T &amp;, const amrex::Real)&gt; F)</argsstring>
        <name>set_fast_rhs</name>
        <param>
          <type>std::function&lt; void(T &amp;, T &amp;, const T &amp;, const amrex::Real)&gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="210" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a2c28fc76c5cdf2fceab4b2c06b07074c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_slow_fast_timestep_ratio</definition>
        <argsstring>(const int timestep_ratio=1)</argsstring>
        <name>set_slow_fast_timestep_ratio</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>timestep_ratio</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="215" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ac5003ee30c98dff34007cf2738599392" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_fast_timestep</definition>
        <argsstring>(const Real fast_dt=1.0)</argsstring>
        <name>set_fast_timestep</name>
        <param>
          <type>const Real</type>
          <declname>fast_dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="220" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ab844bc357c2ad282e111b0f3e965864e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::set_post_update</definition>
        <argsstring>(std::function&lt; void(T &amp;, amrex::Real)&gt; F)</argsstring>
        <name>set_post_update</name>
        <param>
          <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="225" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1af961f09393e62d6a09749da90d0b9016" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::function&lt; void(T &amp;, amrex::Real)&gt;</type>
        <definition>std::function&lt;void (T&amp;, amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::get_post_update</definition>
        <argsstring>()</argsstring>
        <name>get_post_update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="230" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a273aca91ddf7ee9e5de270e7f6c02a21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::function&lt; void(T &amp;, const T &amp;, const amrex::Real)&gt;</type>
        <definition>std::function&lt;void(T&amp;, const T&amp;, const amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::get_rhs</definition>
        <argsstring>()</argsstring>
        <name>get_rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="235" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1af028b7c14d3958dcb6563442aa2ab5ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::function&lt; void(T &amp;, T &amp;, const T &amp;, const amrex::Real)&gt;</type>
        <definition>std::function&lt;void(T&amp;, T&amp;, const T&amp;, const amrex::Real)&gt; amrex::IntegratorBase&lt; T &gt;::get_fast_rhs</definition>
        <argsstring>()</argsstring>
        <name>get_fast_rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="240" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1aedf790cb6391c0861069d8c358f65ddf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::IntegratorBase&lt; T &gt;::get_slow_fast_timestep_ratio</definition>
        <argsstring>()</argsstring>
        <name>get_slow_fast_timestep_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="245" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a1b6d214905b360f23d3a162eb4aa8f99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::IntegratorBase&lt; T &gt;::get_fast_timestep</definition>
        <argsstring>()</argsstring>
        <name>get_fast_timestep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="250" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1ae03ee5e425bef0111005514d81fdf5e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::rhs</definition>
        <argsstring>(T &amp;S_rhs, const T &amp;S_data, const amrex::Real time)</argsstring>
        <name>rhs</name>
        <param>
          <type>T &amp;</type>
          <declname>S_rhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>S_data</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="255" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a350b00b806650cf615625b20a5814925" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IntegratorBase&lt; T &gt;::fast_rhs</definition>
        <argsstring>(T &amp;S_rhs, T &amp;S_extra, const T &amp;S_data, const amrex::Real time)</argsstring>
        <name>fast_rhs</name>
        <param>
          <type>T &amp;</type>
          <declname>S_rhs</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>S_extra</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>S_data</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="260" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a4d714675069097ce07c843145e45d465" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>amrex::Real</type>
        <definition>virtual amrex::Real amrex::IntegratorBase&lt; T &gt;::advance</definition>
        <argsstring>(T &amp;S_old, T &amp;S_new, amrex::Real time, amrex::Real dt)=0</argsstring>
        <name>advance</name>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1a9029a1e7d1a854f5d3a1ecb88ce927e7">advance</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1af44928e3c5ce841acae5e2fe9305a75e">advance</reimplementedby>
        <reimplementedby refid="classamrex_1_1SundialsIntegrator_1a05cb5f15aa7235f6f803b2ad3fc0a825">advance</reimplementedby>
        <param>
          <type>T &amp;</type>
          <declname>S_old</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>S_new</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="265" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a3dc1f86935271c9b053b9d6a60911739" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::time_interpolate</definition>
        <argsstring>(const T &amp;S_new, const T &amp;S_old, amrex::Real timestep_fraction, T &amp;data)=0</argsstring>
        <name>time_interpolate</name>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1ac0b9633fedee03bd638f87514a952720">time_interpolate</reimplementedby>
        <reimplementedby refid="classamrex_1_1SundialsIntegrator_1a064376184442b5fa00c9f3b407e9fe5d">time_interpolate</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1a2372340230301693e973e404c12618fa">time_interpolate</reimplementedby>
        <param>
          <type>const T &amp;</type>
          <declname>S_new</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>S_old</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>timestep_fraction</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="267" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntegratorBase_1a9a0b2271de694f1ea0903339931578ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::IntegratorBase&lt; T &gt;::map_data</definition>
        <argsstring>(std::function&lt; void(T &amp;)&gt; Map)=0</argsstring>
        <name>map_data</name>
        <reimplementedby refid="classamrex_1_1FEIntegrator_1acd01b4dfae6f5cbd84d2ed940355fd0c">map_data</reimplementedby>
        <reimplementedby refid="classamrex_1_1RKIntegrator_1acc1277598adc82e186fef0b44c86e603">map_data</reimplementedby>
        <reimplementedby refid="classamrex_1_1SundialsIntegrator_1af0bac245837e93c1fc9a6a157c4a30a7">map_data</reimplementedby>
        <param>
          <type>std::function&lt; void(T &amp;)&gt;</type>
          <declname>Map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="269" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>amrex::RKIntegrator&lt; T &gt;</label>
        <link refid="classamrex_1_1RKIntegrator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FEIntegrator&lt; T &gt;</label>
        <link refid="classamrex_1_1FEIntegrator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::IntegratorBase&lt; T &gt;</label>
        <link refid="classamrex_1_1IntegratorBase"/>
      </node>
      <node id="4">
        <label>amrex::SundialsIntegrator&lt; T &gt;</label>
        <link refid="classamrex_1_1SundialsIntegrator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Real</label>
      </node>
      <node id="1">
        <label>amrex::IntegratorBase&lt; T &gt;</label>
        <link refid="classamrex_1_1IntegratorBase"/>
        <childnode refid="2" relation="usage">
          <edgelabel>fast_timestep</edgelabel>
          <edgelabel>timestep</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="163" bodyend="270"/>
    <listofallmembers>
      <member refid="classamrex_1_1IntegratorBase_1a4d714675069097ce07c843145e45d465" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>advance</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a350b00b806650cf615625b20a5814925" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>fast_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a020d8e83bf55dd069e374403d4ff1f7a" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>fast_timestep</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a1455552255598f4b2a1cf54b60ae3317" prot="private" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>FastFun</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a26bec4822130d973d323ec22ce38e71a" prot="private" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>Fun</name></member>
      <member refid="classamrex_1_1IntegratorBase_1af028b7c14d3958dcb6563442aa2ab5ad" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>get_fast_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a1b6d214905b360f23d3a162eb4aa8f99" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>get_fast_timestep</name></member>
      <member refid="classamrex_1_1IntegratorBase_1af961f09393e62d6a09749da90d0b9016" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>get_post_update</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a273aca91ddf7ee9e5de270e7f6c02a21" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>get_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1aedf790cb6391c0861069d8c358f65ddf" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>get_slow_fast_timestep_ratio</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a776b334c903b6275ea792b4e7cca5a88" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>initialize</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a0161e86a01e6b8a3ae9a9d3f91e5ad29" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>IntegratorBase</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ad6e1d1e6bb0cd9f1ac3dec311f811151" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>IntegratorBase</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a9a0b2271de694f1ea0903339931578ec" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>map_data</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a093f10915c880670f78fcc8cbc763dd6" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>post_update</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ae03ee5e425bef0111005514d81fdf5e4" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a8a1755cd66c91ef2d57cefb32ce90b1f" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_fast_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ac5003ee30c98dff34007cf2738599392" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_fast_timestep</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ab844bc357c2ad282e111b0f3e965864e" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_post_update</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ad6bd9eb8cc13ac9e2a120c9018f529aa" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_rhs</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a2c28fc76c5cdf2fceab4b2c06b07074c" prot="public" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>set_slow_fast_timestep_ratio</name></member>
      <member refid="classamrex_1_1IntegratorBase_1af8b9b0ced6670ce184422a8223b57b63" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>slow_fast_timestep_ratio</name></member>
      <member refid="classamrex_1_1IntegratorBase_1a3dc1f86935271c9b053b9d6a60911739" prot="public" virt="pure-virtual"><scope>amrex::IntegratorBase</scope><name>time_interpolate</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ae09b7963b36e9cba661e6e64c3d67159" prot="protected" virt="non-virtual"><scope>amrex::IntegratorBase</scope><name>timestep</name></member>
      <member refid="classamrex_1_1IntegratorBase_1ab552abbdc6f529d492e5912b8af6f3a3" prot="public" virt="virtual"><scope>amrex::IntegratorBase</scope><name>~IntegratorBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
