<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1Table2D" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Table2D</compoundname>
    <includes refid="AMReX__TableData_8H" local="no">AMReX_TableData.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Table2D_1ac3751b8cb916e275afb6c3173ada2c0d" prot="public" static="no" mutable="no">
        <type>T *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
        <definition>T* AMREX_RESTRICT amrex::Table2D&lt; T, ORDER &gt;::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="78" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Table2D_1acd2464cad98d33e77dbf181904ef9749" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Table2D&lt; T, ORDER &gt;::stride1</definition>
        <argsstring></argsstring>
        <name>stride1</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="79" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Table2D_1ac1b696dc13b05c84b613ae77eeb4c24c" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 2 &gt;</type>
        <definition>GpuArray&lt;int,2&gt; amrex::Table2D&lt; T, ORDER &gt;::begin</definition>
        <argsstring></argsstring>
        <name>begin</name>
        <initializer>{{1,1}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="80" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Table2D_1a90068786b718833feac893cc831dd061" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 2 &gt;</type>
        <definition>GpuArray&lt;int,2&gt; amrex::Table2D&lt; T, ORDER &gt;::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <initializer>{{0,0}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="81" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Table2D_1a39417841a68ab3c8b3fc853fbf0d29f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::Table2D&lt; T, ORDER &gt;::Table2D</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Table2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="83" column="15"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Table2D_1a4d48381dac2b2a36b13d671c385a1f43" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_const_v&lt; U &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Table2D&lt; T, ORDER &gt;::Table2D</definition>
        <argsstring>(Table2D&lt; std::remove_const_t&lt; T &gt;, ORDER &gt; const &amp;rhs) noexcept</argsstring>
        <name>Table2D</name>
        <param>
          <type><ref refid="structamrex_1_1Table2D" kindref="compound">Table2D</ref>&lt; std::remove_const_t&lt; T &gt;, ORDER &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="87" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Table2D_1a18448ad6d53b9305e848122b2d8e263e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Table2D&lt; T, ORDER &gt;::Table2D</definition>
        <argsstring>(T *a_p, GpuArray&lt; int, 2 &gt; const &amp;a_begin, GpuArray&lt; int, 2 &gt; const &amp;a_end) noexcept</argsstring>
        <name>Table2D</name>
        <param>
          <type>T *</type>
          <declname>a_p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 2 &gt; const &amp;</type>
          <declname>a_begin</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 2 &gt; const &amp;</type>
          <declname>a_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="95" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Table2D_1a8d5a1a77704c1c9a214e79b293afdad9" prot="public" static="no" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Table2D&lt; T, ORDER &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="105" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Table2D_1a26fb98495d0fa2ebd0c6aabb32159065" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Table2D&lt; T, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="109" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="109" bodyend="118"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structamrex_1_1Table2D_1a2a93394c3acf4245fe4a27b808adac99" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static constexpr int amrex::Table2D&lt; T, ORDER &gt;::len0</definition>
        <argsstring>(GpuArray&lt; int, 2 &gt; const &amp;a_begin, GpuArray&lt; int, 2 &gt; const &amp;a_end) noexcept</argsstring>
        <name>len0</name>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 2 &gt; const &amp;</type>
          <declname>a_begin</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 2 &gt; const &amp;</type>
          <declname>a_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="144" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="144" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>amrex::Table2D&lt; T, ORDER &gt;</label>
        <link refid="structamrex_1_1Table2D"/>
        <childnode refid="2" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::GpuArray&lt; int, 2 &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="77" bodyend="153"/>
    <listofallmembers>
      <member refid="structamrex_1_1Table2D_1ac1b696dc13b05c84b613ae77eeb4c24c" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Table2D_1a90068786b718833feac893cc831dd061" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>end</name></member>
      <member refid="structamrex_1_1Table2D_1a2a93394c3acf4245fe4a27b808adac99" prot="private" virt="non-virtual"><scope>amrex::Table2D</scope><name>len0</name></member>
      <member refid="structamrex_1_1Table2D_1a8d5a1a77704c1c9a214e79b293afdad9" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>operator bool</name></member>
      <member refid="structamrex_1_1Table2D_1a26fb98495d0fa2ebd0c6aabb32159065" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Table2D_1ac3751b8cb916e275afb6c3173ada2c0d" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>p</name></member>
      <member refid="structamrex_1_1Table2D_1acd2464cad98d33e77dbf181904ef9749" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>stride1</name></member>
      <member refid="structamrex_1_1Table2D_1a39417841a68ab3c8b3fc853fbf0d29f0" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>Table2D</name></member>
      <member refid="structamrex_1_1Table2D_1a4d48381dac2b2a36b13d671c385a1f43" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>Table2D</name></member>
      <member refid="structamrex_1_1Table2D_1a18448ad6d53b9305e848122b2d8e263e" prot="public" virt="non-virtual"><scope>amrex::Table2D</scope><name>Table2D</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
