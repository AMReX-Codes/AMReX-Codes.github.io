<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLABecLaplacianT" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLABecLaplacianT</compoundname>
    <basecompoundref refid="classamrex_1_1MLCellABecLapT" prot="public" virt="non-virtual">amrex::MLCellABecLapT&lt; MF &gt;</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1MLTensorOp" prot="public" virt="non-virtual">amrex::MLTensorOp</derivedcompoundref>
    <includes refid="AMReX__MLABecLaplacian_8H" local="no">AMReX_MLABecLaplacian.H</includes>
    <templateparamlist>
      <param>
        <type>typename MF</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" prot="public" static="no">
        <type>typename MF::fab_type</type>
        <definition>using amrex::MLABecLaplacianT&lt; MF &gt;::FAB =  typename MF::fab_type</definition>
        <argsstring></argsstring>
        <name>FAB</name>
        <qualifiedname>amrex::MLABecLaplacianT::FAB</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="18" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" prot="public" static="no">
        <type>typename MF::value_type</type>
        <definition>using amrex::MLABecLaplacianT&lt; MF &gt;::RT =  typename MF::value_type</definition>
        <argsstring></argsstring>
        <name>RT</name>
        <qualifiedname>amrex::MLABecLaplacianT::RT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="19" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLABecLaplacianT_1a2ad4b24859222a5dc0a6e68b4f63f2d4" prot="public" static="no">
        <type>LinOpBCType</type>
        <definition>using amrex::MLABecLaplacianT&lt; MF &gt;::BCType =  LinOpBCType</definition>
        <argsstring></argsstring>
        <name>BCType</name>
        <qualifiedname>amrex::MLABecLaplacianT::BCType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="21" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLABecLaplacianT_1aed1bdc13923f234ac4e4c6425210db69" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt;::Location</type>
        <definition>using amrex::MLABecLaplacianT&lt; MF &gt;::Location =  typename MLLinOpT&lt;MF&gt;::Location</definition>
        <argsstring></argsstring>
        <name>Location</name>
        <qualifiedname>amrex::MLABecLaplacianT::Location</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="22" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="22" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1a6238682285be8b4464de6531f73d5cd8" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" kindref="member">RT</ref></type>
        <definition>RT amrex::MLABecLaplacianT&lt; MF &gt;::m_a_scalar</definition>
        <argsstring></argsstring>
        <name>m_a_scalar</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_a_scalar</qualifiedname>
        <initializer>= std::numeric_limits&lt;<ref refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" kindref="member">RT</ref>&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="193" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1a539516410949fb84f32bdf408fdd2e18" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" kindref="member">RT</ref></type>
        <definition>RT amrex::MLABecLaplacianT&lt; MF &gt;::m_b_scalar</definition>
        <argsstring></argsstring>
        <name>m_b_scalar</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_b_scalar</qualifiedname>
        <initializer>= std::numeric_limits&lt;<ref refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" kindref="member">RT</ref>&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="194" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1acd74fe42cd460e0e8cc50fae5550233e" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MF&gt; &gt; amrex::MLABecLaplacianT&lt; MF &gt;::m_a_coeffs</definition>
        <argsstring></argsstring>
        <name>m_a_coeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_a_coeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="195" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1affcd897d0397c49df2bb9cdef4a51050" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MF,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLABecLaplacianT&lt; MF &gt;::m_b_coeffs</definition>
        <argsstring></argsstring>
        <name>m_b_coeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_b_coeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="196" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1a9ef257d12dd2d94c4a70ff5fb5d8f534" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacianT&lt; MF &gt;::m_scalars_set</definition>
        <argsstring></argsstring>
        <name>m_scalars_set</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_scalars_set</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="198" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1ac6489a20e89c720a91f81ae8d29496f2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacianT&lt; MF &gt;::m_acoef_set</definition>
        <argsstring></argsstring>
        <name>m_acoef_set</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_acoef_set</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="199" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="199" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1ab3dca372fae6a1446f43a056d410f165" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacianT&lt; MF &gt;::m_needs_update</definition>
        <argsstring></argsstring>
        <name>m_needs_update</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_needs_update</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="203" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1aa0125d9d8e480d38f2b3798bff1f0616" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLABecLaplacianT&lt; MF &gt;::m_is_singular</definition>
        <argsstring></argsstring>
        <name>m_is_singular</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_is_singular</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="205" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="205" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacianT_1a1d9a5429f6674a76b4137e4631578413" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLABecLaplacianT&lt; MF &gt;::m_ncomp</definition>
        <argsstring></argsstring>
        <name>m_ncomp</name>
        <qualifiedname>amrex::MLABecLaplacianT::m_ncomp</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="211" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="211" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1aea3792c445ead80060a95cd955c2a449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacianT&lt; MF &gt;::MLABecLaplacianT</definition>
        <argsstring>()=default</argsstring>
        <name>MLABecLaplacianT</name>
        <qualifiedname>amrex::MLABecLaplacianT::MLABecLaplacianT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1ab4e68066e0f668c0272d29a86023221d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacianT&lt; MF &gt;::MLABecLaplacianT</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={}, int a_ncomp=1)</argsstring>
        <name>MLABecLaplacianT</name>
        <qualifiedname>amrex::MLABecLaplacianT::MLABecLaplacianT</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="25" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="219" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a71e9f511fa3a065551e46bad82c9b748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacianT&lt; MF &gt;::MLABecLaplacianT</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const * &gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={}, int a_ncomp=1)</argsstring>
        <name>MLABecLaplacianT</name>
        <qualifiedname>amrex::MLABecLaplacianT::MLABecLaplacianT</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const * &gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="32" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="230" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a5b243295797b07b0b3cbfe99bd1e72d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacianT&lt; MF &gt;::~MLABecLaplacianT</definition>
        <argsstring>() override</argsstring>
        <name>~MLABecLaplacianT</name>
        <qualifiedname>amrex::MLABecLaplacianT::~MLABecLaplacianT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="40" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1afc885b7be043f3de2fa34de950743987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacianT&lt; MF &gt;::MLABecLaplacianT</definition>
        <argsstring>(const MLABecLaplacianT&lt; MF &gt; &amp;)=delete</argsstring>
        <name>MLABecLaplacianT</name>
        <qualifiedname>amrex::MLABecLaplacianT::MLABecLaplacianT</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MLABecLaplacianT" kindref="compound">MLABecLaplacianT</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="42" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1acb5023f996e6910bb5bbd4dff90c2f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacianT&lt; MF &gt;::MLABecLaplacianT</definition>
        <argsstring>(MLABecLaplacianT&lt; MF &gt; &amp;&amp;)=delete</argsstring>
        <name>MLABecLaplacianT</name>
        <qualifiedname>amrex::MLABecLaplacianT::MLABecLaplacianT</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacianT" kindref="compound">MLABecLaplacianT</ref>&lt; MF &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="43" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a4d61b86ca5c971cabc14c1d91cccf69a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLABecLaplacianT" kindref="compound">MLABecLaplacianT</ref>&lt; MF &gt; &amp;</type>
        <definition>MLABecLaplacianT&lt; MF &gt; &amp; amrex::MLABecLaplacianT&lt; MF &gt;::operator=</definition>
        <argsstring>(const MLABecLaplacianT&lt; MF &gt; &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::MLABecLaplacianT::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MLABecLaplacianT" kindref="compound">MLABecLaplacianT</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="44" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a2b925737367ec572983b253c0c3857a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLABecLaplacianT" kindref="compound">MLABecLaplacianT</ref>&lt; MF &gt; &amp;</type>
        <definition>MLABecLaplacianT&lt; MF &gt; &amp; amrex::MLABecLaplacianT&lt; MF &gt;::operator=</definition>
        <argsstring>(MLABecLaplacianT&lt; MF &gt; &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::MLABecLaplacianT::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacianT" kindref="compound">MLABecLaplacianT</ref>&lt; MF &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="45" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a5ef449849f31f17897b4742cd730c646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={}, int a_ncomp=1)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::MLABecLaplacianT::define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="47" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="245" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a295b5ec5f403268462a04e18f2fae62f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const * &gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={}, int a_ncomp=1)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::MLABecLaplacianT::define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const * &gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="54" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="260" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1af60aa5f93df4defa5142afa10ede59ef" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_convertible_v&lt; T1, typename MF::value_type &gt; &amp;&amp;std::is_convertible_v&lt; T2, typename MF::value_type &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::setScalars</definition>
        <argsstring>(T1 a, T2 b) noexcept</argsstring>
        <name>setScalars</name>
        <qualifiedname>amrex::MLABecLaplacianT::setScalars</qualifiedname>
        <param>
          <type>T1</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set scalar constants A and B in the equation: (A \alpha - B \nabla \cdot \beta \nabla ) \phi = f for the Multi-Level AB Laplacian Solver. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="71" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="306" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a0f32ca25f6afb98cc7acbd3141465831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AMF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; AMF &gt;::value &amp;&amp;std::is_convertible_v&lt; typename AMF::value_type, typename MF::value_type &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::setACoeffs</definition>
        <argsstring>(int amrlev, const AMF &amp;alpha)</argsstring>
        <name>setACoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::setACoeffs</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const AMF &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets alpha as a scalar field to values from a single component multifab.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the multifab for the solver, with <computeroutput>amrlev</computeroutput> = 0 always being the lowest level in the AMR hierarchy represented in the solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Multifab of alpha values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="325" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a50f7b86e67777f1fe45ccb4f91c9296d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_convertible_v&lt; T, typename MF::value_type &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::setACoeffs</definition>
        <argsstring>(int amrlev, T alpha)</argsstring>
        <name>setACoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::setACoeffs</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets alpha as a single scalar constant value across the multifab.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the multifab for the solver, with <computeroutput>amrlev</computeroutput> = 0 always being the lowest level in the AMR hierarchy represented in the solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Single scalar value to populate across multifab. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="338" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1aa709ea8caddead35734c2c6aaba607d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AMF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; AMF &gt;::value &amp;&amp;std::is_convertible_v&lt; typename AMF::value_type, typename MF::value_type &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; AMF const *, AMREX_SPACEDIM &gt; &amp;beta)</argsstring>
        <name>setBCoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::setBCoeffs</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; AMF const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets beta as a scalar field to be the values defined in the supplied multifabs (one for each space dimension).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the multifab for the solver, with <computeroutput>amrlev</computeroutput> = 0 always being the lowest level in the AMR hierarchy represented in the solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of Multifabs of beta values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="117" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="352" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a06fa308776f2f5601335602731480841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_convertible_v&lt; T, typename MF::value_type &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::setBCoeffs</definition>
        <argsstring>(int amrlev, T beta)</argsstring>
        <name>setBCoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::setBCoeffs</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets beta as a single scalar constant value across the multifabs (one for each dimension).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the multifab for the solver, with <computeroutput>amrlev</computeroutput> = 0 always being the lowest level in the AMR hierarchy represented in the solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">beta</parametername>
</parameternamelist>
<parameterdescription>
<para>Single scalar value to populate across multifabs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="131" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="377" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a469db0370bad5402adefe34c6a56abde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_convertible_v&lt; T, typename MF::value_type &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::setBCoeffs</definition>
        <argsstring>(int amrlev, Vector&lt; T &gt; const &amp;beta)</argsstring>
        <name>setBCoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::setBCoeffs</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; const &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set each beta component to a single scalar constant value corresponding to the respective component of the supplied vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the multifab for the solver, with <computeroutput>amrlev</computeroutput> = 0 always being the lowest level in the AMR hierarchy represented in the solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">beta</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of scalar constant values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="145" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="389" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a1b83dc2b560d4872a20e2a3dcbd9983a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLABecLaplacianT&lt; MF &gt;::getNComp</definition>
        <argsstring>() const override</argsstring>
        <name>getNComp</name>
        <qualifiedname>amrex::MLABecLaplacianT::getNComp</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1a4f45234f33332dbaf9406e4daa01b475">getNComp</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1ae95246a8ce25a240837faf8c84f6c523">getNComp</reimplementedby>
        <briefdescription>
<para>Return number of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="147" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1af42c52eb173946c7ff2628ef20e2a89a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacianT&lt; MF &gt;::needsUpdate</definition>
        <argsstring>() const override</argsstring>
        <name>needsUpdate</name>
        <qualifiedname>amrex::MLABecLaplacianT::needsUpdate</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1a1aeab1e2fe2f589ecdc3b9751208a22a">needsUpdate</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a8fb6d1048cec22ab43f69b7d91ccce1d">needsUpdate</reimplementedby>
        <briefdescription>
<para>Does it need update if it&apos;s reused? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="149" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1af3a21bba5cafce9e1c1c75194f37ca93" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>amrex::MLABecLaplacianT::update</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1a81443deada65588ba7a71e191def4aa0">update</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a099b8059c7848bf601ca1cc33426ce24">update</reimplementedby>
        <briefdescription>
<para>Update for reuse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="152" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="402" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a5c7e2382421d34818b66ccaba2e9ba95" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <qualifiedname>amrex::MLABecLaplacianT::prepareForSolve</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1af8740f5bcf25e80b3e074a99be681c47">prepareForSolve</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a9e8e4689f0e0f349f5a29708c224360c">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="154" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="423" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a25f78b91eada0f84dfce92d458f9082a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacianT&lt; MF &gt;::isSingular</definition>
        <argsstring>(int amrlev) const override</argsstring>
        <name>isSingular</name>
        <qualifiedname>amrex::MLABecLaplacianT::isSingular</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1ae4208159e7121c341be4c40f148563ad">isSingular</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a994dcb4070bfd07513129c584419e148">isSingular</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
<para>Is it singular on given AMR level? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="155" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1add466d8a308f474217d0b7bbf5528a12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacianT&lt; MF &gt;::isBottomSingular</definition>
        <argsstring>() const override</argsstring>
        <name>isBottomSingular</name>
        <qualifiedname>amrex::MLABecLaplacianT::isBottomSingular</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1a8a5fce59ba5bb0e9eb9d65e8615050ea">isBottomSingular</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a30d559613d6da25a22923fbc03163f82">isBottomSingular</reimplementedby>
        <briefdescription>
<para>Is the bottom of MG singular? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="156" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a8781967da72aea442a9f7837407004fe" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;out, const MF &amp;in) const final</argsstring>
        <name>Fapply</name>
        <qualifiedname>amrex::MLABecLaplacianT::Fapply</qualifiedname>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1a3841e981caa197033fcd74eee93f0daf">Fapply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="157" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="799" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1ad219bae0ff8321a675900f6850dd551a" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;sol, const MF &amp;rhs, int redblack) const final</argsstring>
        <name>Fsmooth</name>
        <qualifiedname>amrex::MLABecLaplacianT::Fsmooth</qualifiedname>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1a07fa09c5665782a39755f32fccdb7ec6">Fsmooth</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="158" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="882" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1af4097c02d7d7338535af34df84af7e61" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::FFlux</definition>
        <argsstring>(int amrlev, const MFIter &amp;mfi, const Array&lt; FAB *, AMREX_SPACEDIM &gt; &amp;flux, const FAB &amp;sol, Location, int face_only=0) const final</argsstring>
        <name>FFlux</name>
        <qualifiedname>amrex::MLABecLaplacianT::FFlux</qualifiedname>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1af69b48f91ccf0266c5d219c0c24ea3c2">FFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacianT_1aed1bdc13923f234ac4e4c6425210db69" kindref="member">Location</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="159" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="1156" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1aa8139012779454a901a8d4697174bd1e" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::normalize</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;mf) const final</argsstring>
        <name>normalize</name>
        <qualifiedname>amrex::MLABecLaplacianT::normalize</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1aaa66bfea39287ead35be91ec940d0bb1">normalize</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
<para>Divide mf by the diagonal component of the operator. Used by bicgstab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="164" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="1245" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1aaa7bd08886e8e132fbd9b3982bcadaa6" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" kindref="member">RT</ref></type>
        <definition>RT amrex::MLABecLaplacianT&lt; MF &gt;::getAScalar</definition>
        <argsstring>() const final</argsstring>
        <name>getAScalar</name>
        <qualifiedname>amrex::MLABecLaplacianT::getAScalar</qualifiedname>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1ae138125310f7e77c24bfc57fc2435a96">getAScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="166" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a1482d8037c4d35848bf7225432c1a885" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" kindref="member">RT</ref></type>
        <definition>RT amrex::MLABecLaplacianT&lt; MF &gt;::getBScalar</definition>
        <argsstring>() const final</argsstring>
        <name>getBScalar</name>
        <qualifiedname>amrex::MLABecLaplacianT::getBScalar</qualifiedname>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1a877572517fc472cd65fc3597abc59dea">getBScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="167" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1aefe3e362f69b11655ea0e221c38cd8ee" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>MF const *</type>
        <definition>MF const  * amrex::MLABecLaplacianT&lt; MF &gt;::getACoeffs</definition>
        <argsstring>(int amrlev, int mglev) const final</argsstring>
        <name>getACoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::getACoeffs</qualifiedname>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1a2ab31929290bca814b582747eed3dc60">getACoeffs</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="168" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="168" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a2b8d29074184890bdafe86b7e8eb01b7" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF const *, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt; MF const  *, AMREX_SPACEDIM &gt; amrex::MLABecLaplacianT&lt; MF &gt;::getBCoeffs</definition>
        <argsstring>(int amrlev, int mglev) const final</argsstring>
        <name>getBCoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::getBCoeffs</qualifiedname>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1a5c7aa91b0eb129a6f5d96c65dd05c5a1">getBCoeffs</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="170" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="170" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1ac03f98cb7e5a9397213306e9884a65b4" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &gt;</type>
        <definition>std::unique_ptr&lt; MLLinOpT&lt; MF &gt; &gt; amrex::MLABecLaplacianT&lt; MF &gt;::makeNLinOp</definition>
        <argsstring>(int) const final</argsstring>
        <name>makeNLinOp</name>
        <qualifiedname>amrex::MLABecLaplacianT::makeNLinOp</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1adea199dcf10fe80676dac612c77b4585">makeNLinOp</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="173" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="1323" bodyend="1421"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1abb6062df17c9eec35484fa60924fa5a9" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacianT&lt; MF &gt;::supportNSolve</definition>
        <argsstring>() const final</argsstring>
        <name>supportNSolve</name>
        <qualifiedname>amrex::MLABecLaplacianT::supportNSolve</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1aa9b2cbde953686aaf94f7f6442a0ea5c">supportNSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="175" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="1307" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1adfd3a48893737214b12ed5e95b17f1e3" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::copyNSolveSolution</definition>
        <argsstring>(MF &amp;dst, MF const &amp;src) const final</argsstring>
        <name>copyNSolveSolution</name>
        <qualifiedname>amrex::MLABecLaplacianT::copyNSolveSolution</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1a4b8c0b3d1fd866b3b9a787bdcb056e77">copyNSolveSolution</reimplements>
        <param>
          <type>MF &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="177" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="1425" bodyend="1469"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a778c59784e90a048fb24ab03d554929a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::averageDownCoeffsSameAmrLevel</definition>
        <argsstring>(int amrlev, Vector&lt; MF &gt; &amp;a, Vector&lt; Array&lt; MF, AMREX_SPACEDIM &gt; &gt; &amp;b)</argsstring>
        <name>averageDownCoeffsSameAmrLevel</name>
        <qualifiedname>amrex::MLABecLaplacianT::averageDownCoeffsSameAmrLevel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="179" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="630" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1aa88b116b953af82b50e0019a4dba6448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::averageDownCoeffs</definition>
        <argsstring>()</argsstring>
        <name>averageDownCoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::averageDownCoeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="181" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="612" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a8b48f0d915aee57dd60412b4962d64eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::averageDownCoeffsToCoarseAmrLevel</definition>
        <argsstring>(int flev)</argsstring>
        <name>averageDownCoeffsToCoarseAmrLevel</name>
        <qualifiedname>amrex::MLABecLaplacianT::averageDownCoeffsToCoarseAmrLevel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>flev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="182" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="717" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1adf470c2b5166676692960bdae13495d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::applyMetricTermsCoeffs</definition>
        <argsstring>()</argsstring>
        <name>applyMetricTermsCoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::applyMetricTermsCoeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="184" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="444" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a2bf9b621e5517b046e8ab5bef786666f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::applyRobinBCTermsCoeffs</definition>
        <argsstring>()</argsstring>
        <name>applyRobinBCTermsCoeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::applyRobinBCTermsCoeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="186" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="603" bodyend="608"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a152a02f12bbe76529b604167332e7ebe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::FFlux</definition>
        <argsstring>(Box const &amp;box, Real const *dxinv, RT bscalar, Array&lt; FAB const *, AMREX_SPACEDIM &gt; const &amp;bcoef, Array&lt; FAB *, AMREX_SPACEDIM &gt; const &amp;flux, FAB const &amp;sol, int face_only, int ncomp)</argsstring>
        <name>FFlux</name>
        <qualifiedname>amrex::MLABecLaplacianT::FFlux</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>Real const *</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" kindref="member">RT</ref></type>
          <declname>bscalar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> const *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" kindref="member">FAB</ref> const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="188" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="1175" bodyend="1241"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a4fda1e7c51f0f57be99c0d9a8d94f9f9" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacianT&lt; MF &gt;::supportRobinBC</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>supportRobinBC</name>
        <qualifiedname>amrex::MLABecLaplacianT::supportRobinBC</qualifiedname>
        <reimplements refid="classamrex_1_1MLLinOpT_1aaa1fde319e32db3c05ca0f7fd944c111">supportRobinBC</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="207" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="207" bodyend="207"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a73c64bfadff728bad13d0f0dcf406ca4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::define_ab_coeffs</definition>
        <argsstring>()</argsstring>
        <name>define_ab_coeffs</name>
        <qualifiedname>amrex::MLABecLaplacianT::define_ab_coeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="213" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="276" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacianT_1a33149b38d0c384a6ea3e324962847ef8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacianT&lt; MF &gt;::update_singular_flags</definition>
        <argsstring>()</argsstring>
        <name>update_singular_flags</name>
        <qualifiedname>amrex::MLABecLaplacianT::update_singular_flags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="215" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="738" bodyend="795"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MLABecLaplacianT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLABecLaplacianT"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLCellABecLapT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
      </node>
      <node id="5">
        <label>amrex::MLTensorOp&lt; MultiFab &gt;</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="24">
        <label>amrex::RealVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1RealVectND"/>
        <childnode refid="25" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>T</label>
      </node>
      <node id="5">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::IntVectND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; MF, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="47">
        <label>amrex::Vector&lt; amrex::Vector&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
      <node id="43">
        <label>amrex::Vector&lt; amrex::Vector&lt; RT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOpT::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>amrex::Vector&lt; amrex::YAFluxRegisterT&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>amrex::Vector&lt; std::unique_ptr&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndryT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="1">
        <label>amrex::MLABecLaplacianT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLABecLaplacianT"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_a_coeffs</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLCellABecLapT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_lpinfo_arg</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_bndry_cor</edgelabel>
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_sol_zero</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_crse_cor_br</edgelabel>
          <edgelabel>m_crse_sol_br</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_volinv</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>amrex::MLLinOpT&lt; MF &gt;::CommContainer</label>
        <link refid="structamrex_1_1MLLinOpT_1_1CommContainer"/>
      </node>
      <node id="4">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_coarse_data_crse_ratio</edgelabel>
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>levelbc_raii</edgelabel>
          <edgelabel>robin_a_raii</edgelabel>
          <edgelabel>robin_b_raii</edgelabel>
          <edgelabel>robin_f_raii</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>Real</label>
      </node>
      <node id="25">
        <label>amrex::RealVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1RealVectND"/>
        <childnode refid="25" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::unique_ptr&lt; amrex::MLLinOpT::CommContainer &gt;</label>
        <childnode refid="23" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="15" bodyend="216"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCellABecLapT_1a2be65b6a2c0a68b5a8954d4be9ace8d7" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>addInhomogNeumannFlux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6f91fe74021d0128d1fcb8f49ee88bf5" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8755fe1a7a09db77e7d810dd9dfdb107" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a251a2f1de9fea9f0d0230e04b19c078e" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ae96c2381214550fc17f99eeac401eeee" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a87bccd5330e4295f7108cf56c0a1cd20" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1adf470c2b5166676692960bdae13495d1" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>applyMetricTermsCoeffs</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a78233be19743ed1432077186937f51cc" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a2bf9b621e5517b046e8ab5bef786666f" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>applyRobinBCTermsCoeffs</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a118fb8de26be373907091016e1207645" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa88b116b953af82b50e0019a4dba6448" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a778c59784e90a048fb24ab03d554929a" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a8b48f0d915aee57dd60412b4962d64eb" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a116deee661b635f1872ac7eded5f28a7" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a33f2c8cbf69e58cbe60e9be048181f5d" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>avgDownResMG</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6ce4d3fd41e76507b017ff826a52c62e" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a2ad4b24859222a5dc0a6e68b4f63f2d4" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8e5ccd586a36ca73071a893fd369a5b8" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>beginPrecondBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a49ce93875b124aaf77be7299ad685c80" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae7f32e1b953ea4ef5643501e91560d32" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2ed74b3dc4e3c46d2cd589cbb8301e94" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af28f1c33141158bd515093c3741d7124" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>computeVolInv</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1adfd3a48893737214b12ed5e95b17f1e3" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a51480d2022ad9346d6eb11f3cbfd631a" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a5ef449849f31f17897b4742cd730c646" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a295b5ec5f403268462a04e18f2fae62f" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1aa597fe7d39f7a3049fefccff91ddb693" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLABecLaplacianT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1acdef494a31a555b648c2eae8cdd8cbb9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLABecLaplacianT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLABecLaplacianT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a73c64bfadff728bad13d0f0dcf406ca4" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>define_ab_coeffs</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95432ea80c81e30e58ffda678f2d926d" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a3b583520578b832e04ea2baf3ea48917" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a37110a6d5cf422efd25f1a966dcd3af5" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>dotProductPrecond</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a3edbe84b38cdfad3b9de1710151ba787" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>endPrecondBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>FAB</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a23933063b2982e47f97dcc3f0adbaec6" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a8781967da72aea442a9f7837407004fe" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1af4097c02d7d7338535af34df84af7e61" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a152a02f12bbe76529b604167332e7ebe" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac44f404584644c6cb3f7548de48206d0" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9b6ac2fe55b5951ef0aee9cfdf3e56c0" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLABecLaplacianT</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1ad219bae0ff8321a675900f6850dd551a" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9ba919a4ce697c39607efb32a8f08d82" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aefe3e362f69b11655ea0e221c38cd8ee" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aaa7bd08886e8e132fbd9b3982bcadaa6" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a2b8d29074184890bdafe86b7e8eb01b7" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a1482d8037c4d35848bf7225432c1a885" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a47c09599ba7bee546dfb637ac8962fa0" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ad86670e0d6ce7f6cdc72e456fad67faf" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a1b83dc2b560d4872a20e2a3dcbd9983a" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a8f0f9865915b5d7c47bbff26bc46d442" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getNGrowVectRestriction</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a8df6b1b3a7ba8c42e73ab9db25ba67b6" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>getOversetMask</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a08e68e2870cd7367dd09d2ef777261b3" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>hasBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7b0475fe83f250e9f2b7baed5323ef93" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>info</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac40a7cc1f424156f36d3d8b2f0254ae7" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7a7909cddc98ec2abe949ee2f043e817" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae4108ba43d2b66494dd56578879a29a9" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1add466d8a308f474217d0b7bbf5528a12" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a69fbf6add2bd954f6fb9a17f89adebf8" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a25f78b91eada0f84dfce92d458f9082a" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1aae0589f189ee2d39dadca3a308e3df9b" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>levelbc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab3de85fc7f1fa6ed5c182e15a4641164" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aed1bdc13923f234ac4e4c6425210db69" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1acd74fe42cd460e0e8cc50fae5550233e" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_a_coeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a6238682285be8b4464de6531f73d5cd8" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_a_scalar</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1ac6489a20e89c720a91f81ae8d29496f2" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_acoef_set</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1affcd897d0397c49df2bb9cdef4a51050" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_b_coeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a539516410949fb84f32bdf408fdd2e18" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_b_scalar</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8ea2fb547b5b9b37d88880948073e00c" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac667791f6b37a42e55ef25267bc78fa9" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2b8a625f55f16b9c5b620a82021f17f4" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1adea2b3f1ae225b362412d89a851bb679" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_bndry_sol_zero</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6d6305f5cb6d0df287f766719bb9566d" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_coarse_data_for_bc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae152107703463ca7e27c2e3dccf7538d" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_coarse_fine_bc_type</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a892cce2e429f77cee7360f2859ceda4d" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1adf51879b81fbd24f9ccb7b9f0142d63b" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a22cdf5d6b191ab3c883b7167e9f94ebe" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ada8bf2b1964f2023282e23ac54a948f4" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab5b6c73fee0004ac732f74350cc72bab" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_interpbndry_halfwidth</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa0125d9d8e480d38f2b3798bff1f0616" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a2a4ce226902dbe904fa45173845d4cac" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_lpinfo_arg</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a9c470f145301b98fe0938ac6241284eb" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a1d9a5429f6674a76b4137e4631578413" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1ab3dca372fae6a1446f43a056d410f165" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_needs_update</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af29ed070015666e58d890685cb491900" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_norm_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1aa1bc328cdef65e6dfab478914c2913d7" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_overset_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a82891a6e0ee05aa37590fe877158ec65" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_precond_mode</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95a0dd3f6700b3da5b020a66ef726dff" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_robin_bcval</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a9ef257d12dd2d94c4a70ff5fb5d8f534" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_scalars_set</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab50c53ea7ff9c53bf37ac816e0663406" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1add77293caacd09584aa8b5f0fd7f923a" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_use_gauss_seidel</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad73d9eed28e8d9d32cf54327e21c5225" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>m_volinv</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a847a98884f2bef463cfc9530e80ff0e8" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a1574dd8857314d9658c28c26adc6ce12" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1ac03f98cb7e5a9397213306e9884a65b4" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac42612ebc576bd674db633fd6d0363db" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MFType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2c3fc7b84d860915b7aa6bb06417800f" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aea3792c445ead80060a95cd955c2a449" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1ab4e68066e0f668c0272d29a86023221d" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a71e9f511fa3a065551e46bad82c9b748" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1afc885b7be043f3de2fa34de950743987" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1acb5023f996e6910bb5bbd4dff90c2f05" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a37eddbe9290f0102dc09e24e022f038d" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a241cb451732d5ad6ab42c46ad4e1f597" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a5f871352ed5f3af819701d945c2de871" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab6bc4d82971ae75fc206df8d00d15ef6" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a54558ff60dc7b62ac803e8dd8a5c1816" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab75b6f4249c1408041b529732b179d32" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1af42c52eb173946c7ff2628ef20e2a89a" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a89d419a110a2142ed59ddc316d053966" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>norm2Precond</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa8139012779454a901a8d4697174bd1e" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6207e307cf8edda53498feebe2abb2e3" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a4d61b86ca5c971cabc14c1d91cccf69a" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a2b925737367ec572983b253c0c3857a4" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a4be03b38c81339364e5a1ba316251059" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLABecLaplacianT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a7084e8e62a6dbe3844004f96e8b5a89c" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLABecLaplacianT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2dfe796c7ae08b2c5015e16473f3da14" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOpT::"><scope>amrex::MLABecLaplacianT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a1d0db3104c897fd77e16b9682f974047" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOpT::"><scope>amrex::MLABecLaplacianT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ccb3bf677188e12ee5c3447a7440982" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLABecLaplacianT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1f0362cc64cc8e85e445ce06edd81fd2" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLABecLaplacianT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae4e5e8a7a396d2e9297e617bc575315a" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1acfbbd0bc16c6143b970276cb3db30a03" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>prepareForFluxes</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a5c7e2382421d34818b66ccaba2e9ba95" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac651a809487c0cf7559d13a333b3f5b8" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>preparePrecond</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a65abf3895113354dbd34041b96dfb3ba" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a35158f8a8bd840468c4dedb08d6726ff" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a43fcad8e24531044114e9572beb28323" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab4713a678d7c2ac9e1a9c5b027f965c5" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>robin_a_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>robin_b_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>robin_f_raii</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>RT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaef4ad9c7d2eb912a054b9583208c75e" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a0f32ca25f6afb98cc7acbd3141465831" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a50f7b86e67777f1fe45ccb4f91c9296d" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa709ea8caddead35734c2c6aaba607d6" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a06fa308776f2f5601335602731480841" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a469db0370bad5402adefe34c6a56abde" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a776db3c3a85a3f2d3938446d7ce6b19c" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab12336bb4e985ab158e63397b4960171" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a455030051a17d954b7aeb6323b0a4fba" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3210982bb202d42999661f1c3920bf1e" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a76c83a76bea9715006d1c962471346aa" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>setDirichletNodesToZero</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a910678e8eb5a82aaa5550910cb4ac3fb" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setGaussSeidel</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab115b6bae61d5d8ee058b5690ae761c9" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setInterpBndryHalfWidth</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaf162a4471fc9b3a7121d9579fea518" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLABecLaplacianT</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1af60aa5f93df4defa5142afa10ede59ef" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a5f620b5243fc5f53ba97983460bf0805" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad6684ea6b055170aad353ee9a4dcc316" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ac7b687cd9603d112b33b92f2047f663f" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1abb6062df17c9eec35484fa60924fa5a9" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a4fda1e7c51f0f57be99c0d9a8d94f9f9" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8681147e6aa6a83cba4451adda7b719c" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1af3a21bba5cafce9e1c1c75194f37ca93" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>update</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a33149b38d0c384a6ea3e324962847ef8" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>update_singular_flags</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6bb9614b2635f9935e7cb8816074a2ef" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a28d4c00dc8448c2c8f10dc519a42ae0f" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7c044db51cc603481135fb0d75e43e90" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a5b243295797b07b0b3cbfe99bd1e72d7" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>~MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ad4713655e99b1cd1f480c36376be40f7" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>~MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1aaa89b0307d84d1687ece7880403c5689" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacianT</scope><name>~MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" virt="virtual"><scope>amrex::MLABecLaplacianT</scope><name>~MLLinOpT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
