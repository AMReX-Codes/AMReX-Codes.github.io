<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1BoxList" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxList</compoundname>
    <derivedcompoundref refid="classamrex_1_1BoxDomain" prot="protected" virt="non-virtual">amrex::BoxDomain</derivedcompoundref>
    <includes refid="AMReX__BoxList_8H" local="no">AMReX_BoxList.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1BoxList_1ab64ed06fbfbfc6342465290e3d86c107" prot="public" static="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt;::<ref refid="classamrex_1_1BoxList_1ab64ed06fbfbfc6342465290e3d86c107" kindref="member">iterator</ref></type>
        <definition>typedef Vector&lt;Box&gt;::iterator amrex::BoxList::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1BoxList_1a9ac637c8d0a5920984658586a6b56a18" prot="public" static="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt;::<ref refid="classamrex_1_1BoxList_1a9ac637c8d0a5920984658586a6b56a18" kindref="member">const_iterator</ref></type>
        <definition>typedef Vector&lt;Box&gt;::const_iterator amrex::BoxList::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1BoxList_1ad02d5a19433d5484dee5fb260bbc9f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class BoxDomain</definition>
        <argsstring></argsstring>
        <name>BoxDomain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxList_1adeadcf55bf1de6d0a14007817795bfbf" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt;</type>
        <definition>Vector&lt;Box&gt; amrex::BoxList::m_lbox</definition>
        <argsstring></argsstring>
        <name>m_lbox</name>
        <briefdescription>
<para>The list of Boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="225" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxList_1a70df1b0aadeb1c7f0360299f0e2b2fc4" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::BoxList::btype</definition>
        <argsstring></argsstring>
        <name>btype</name>
        <briefdescription>
<para>The <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> of Boxes in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="227" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxList_1a31584546393b5ff7f420e6bffd8486bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>()</argsstring>
        <name>BoxList</name>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> with <ref refid="classamrex_1_1IndexType_1a9f800856dcfdcc8175c7797403f213da" kindref="member">IndexType::TheCellType()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a128274e71f12eceb9980758522776803" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>BoxList</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Make a boxList consisting of a single <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a1a8247d3b12b7bd82410a977d43302f0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(IndexType btyp)</argsstring>
        <name>BoxList</name>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>btyp</declname>
        </param>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> with <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> btyp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1aa5e1e0f1149682e0c8cd5a88451811ba" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(const BoxArray &amp;ba)</argsstring>
        <name>BoxList</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> from a BoxArray. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a3c9b3b9af19b73c1c7efafda6238dbe9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(Vector&lt; Box &gt; &amp;&amp;bxs)</argsstring>
        <name>BoxList</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;&amp;</type>
          <declname>bxs</declname>
        </param>
        <briefdescription>
<para>Construct a boxlist from a rvalue Vector&lt;Box&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a30479ce1f63ba9843fe6d5253b6c3fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(const Box &amp;bx, const IntVect &amp;tilesize)</argsstring>
        <name>BoxList</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <briefdescription>
<para>Make a boxList consisting of non-overlapping tile box from a single <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a54773484ed81f097deb889555b7ca24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(const Box &amp;bx, int nboxes)</argsstring>
        <name>BoxList</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nboxes</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> consisting of nboxes Boxes from a single <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1afe00f77bc420a45f32d484d982e02072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(const Box &amp;bx, int nboxes, Direction dir)</argsstring>
        <name>BoxList</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nboxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> consisting of nboxes Boxes chopped in dir-direction from a single <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a57ceea7a76c84d3befd6ec06c059bbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(const BoxList &amp;rhs)=default</argsstring>
        <name>BoxList</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a6603dcbdc28135b48e5bfa98b942da73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxList::BoxList</definition>
        <argsstring>(BoxList &amp;&amp;rhs)=default</argsstring>
        <name>BoxList</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a6f77727eff8f7f6a9a08a21bec0bf152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::operator=</definition>
        <argsstring>(const BoxList &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a0747196b0023c8dc440c9325092d53fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::operator=</definition>
        <argsstring>(BoxList &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a7b999e76e5422aa024da160623cc81f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::reserve</definition>
        <argsstring>(std::size_t n)</argsstring>
        <name>reserve</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1aaf9cf5350e31edefe87e9e8b2f2278ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::push_back</definition>
        <argsstring>(const Box &amp;bn)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
<para>Append a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1ab3d2612cde7e408f02101b15dd7781f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>Box&amp; amrex::BoxList::front</definition>
        <argsstring>() noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a65eb4af53f5dc07b129bd14d11d728ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>const Box&amp; amrex::BoxList::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1af1451e74b2d7de70b58b9979e21aeb49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::join</definition>
        <argsstring>(const BoxList &amp;blist)</argsstring>
        <name>join</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>blist</declname>
        </param>
        <briefdescription>
<para>Join the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to ourselves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1ae86c1cb2471cb633d0abf4657d080a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::join</definition>
        <argsstring>(const Vector&lt; Box &gt; &amp;barr)</argsstring>
        <name>join</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>barr</declname>
        </param>
        <briefdescription>
<para>Join the Array of Boxes to ourselves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a5401acc7f967b93eb6e755966491aa58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::catenate</definition>
        <argsstring>(BoxList &amp;blist)</argsstring>
        <name>catenate</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>blist</declname>
        </param>
        <briefdescription>
<para>Catenate the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to ourselves. Removes entries from blist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a1b546c6d1a623b0335f40983e1d46b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Remove all Boxes from this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1ac4030d4780cc8ca926857c82819c1c42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BoxList::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>The number of Boxes in this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a6064b561ef6b7f4001b73a063b22bd57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::BoxList::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="111" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1abc4b6bd9e48f341f77e5b0381b5308e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList_1ab64ed06fbfbfc6342465290e3d86c107" kindref="member">iterator</ref></type>
        <definition>iterator amrex::BoxList::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a8e3958e44ca086a0b4a511f62cddc031" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList_1a9ac637c8d0a5920984658586a6b56a18" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::BoxList::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="114" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a3f031aa03b4e913c8fa413cf76d1807d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList_1ab64ed06fbfbfc6342465290e3d86c107" kindref="member">iterator</ref></type>
        <definition>iterator amrex::BoxList::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a35fb0445d4f861be4ed66bf9861e9f14" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList_1a9ac637c8d0a5920984658586a6b56a18" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::BoxList::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="117" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a10fe281d57e922ce1f6393493e24be17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ok</name>
        <briefdescription>
<para>True if this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> is valid; i.e. all the Boxes are valid and they all have the same <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref>. Also returns true if the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a111f72bd85cc49ade7c956cdf35d330b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::operator==</definition>
        <argsstring>(const BoxList &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Is this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> equal to rhs? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a4610d792f42c68d9c5481dcf83d09397" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::operator!=</definition>
        <argsstring>(const BoxList &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Is this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> notequal to rhs? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a54c5936a5ec0332d158270277e862f85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::isEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Is this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> empty? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="129" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a6dac99633eca2bfbb8c2f287f423f9a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::isNotEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isNotEmpty</name>
        <briefdescription>
<para>Is this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> not empty? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="131" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a18846dc6645e047916b3833a7ec1a777" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::isDisjoint</definition>
        <argsstring>() const</argsstring>
        <name>isDisjoint</name>
        <briefdescription>
<para>True if the set of intersecting Boxes is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a128dd0ae9ea6a6c9bed4a5af6a77518f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::contains</definition>
        <argsstring>(const BoxList &amp;bl) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>True if all Boxes in bl are contained in this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a21d91d95c6b068d48292a4fdc2f53486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::intersect</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modify this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to contain only its intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a9f5fb740643bc7f4b10baa5487cc1760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::intersect</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Modify this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to contain only its intersection with <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> bl. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a3f0ab28b3e669f5a7828da71fdbd3645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::removeEmpty</definition>
        <argsstring>()</argsstring>
        <name>removeEmpty</name>
        <briefdescription>
<para>Remove empty Boxes from this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a77c9e97948684cd611eb9591ef6d23c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxList &amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a990b3fc904c7fcd51a1fd9e4420eb0dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::complementIn</definition>
        <argsstring>(const Box &amp;b, BoxList &amp;&amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a1da3baa5ff605620901791904d448d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxArray &amp;ba)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1ad6d8b6fc8801afb2539d5611efc7abb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::parallelComplementIn</definition>
        <argsstring>(const Box &amp;b, const BoxList &amp;bl)</argsstring>
        <name>parallelComplementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a538e2e8665da85486105a7daa26bfd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::parallelComplementIn</definition>
        <argsstring>(const Box &amp;b, BoxList &amp;&amp;bl)</argsstring>
        <name>parallelComplementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a7c626403ed2f4b4bbddaed58edda99b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::parallelComplementIn</definition>
        <argsstring>(const Box &amp;b, const BoxArray &amp;ba)</argsstring>
        <name>parallelComplementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a905d974544cd60c9b72314cb6135e17b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::refine</definition>
        <argsstring>(int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Refine each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> by the ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a551c2ca8aa05f54c73c3b57d40ca2217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::refine</definition>
        <argsstring>(const IntVect &amp;ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Refine each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> by the ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a3b14d38ee9c592394f4465c5e48e8e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::coarsen</definition>
        <argsstring>(int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> by the ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1aa3ac01949cda5f1c125767c7111d3aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::coarsen</definition>
        <argsstring>(const IntVect &amp;ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> by the ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a3b3222b65efa7cdc1944106dbb07d6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::accrete</definition>
        <argsstring>(int sz)</argsstring>
        <name>accrete</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> by size sz. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1ae852e0ee71d6645fb6cbb1765547d65a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::accrete</definition>
        <argsstring>(const IntVect &amp;sz)</argsstring>
        <name>accrete</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a724c4380dbcdc0d514cf18d029a49f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::shift</definition>
        <argsstring>(int dir, int nzones)</argsstring>
        <name>shift</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Applies <ref refid="classamrex_1_1Box_1abe35c4589dedd7df76bbcd5937d3b2e1" kindref="member">Box::shift(int,int)</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1abf9737ea9ecdf7a57adbe55f6215219f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::shiftHalf</definition>
        <argsstring>(int dir, int num_halfs)</argsstring>
        <name>shiftHalf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_halfs</declname>
        </param>
        <briefdescription>
<para>Applies <ref refid="classamrex_1_1Box_1a123c1ab97d29fcab0f1f70feed878aa4" kindref="member">Box::shiftHalf(int,int)</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a094d0a9c81730b5f3cade719d4b0b30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::shiftHalf</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>shiftHalf</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Applies Box::shiftHalf(IntVect) to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a827d337283d6b99be9feff0887409674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BoxList::simplify</definition>
        <argsstring>(bool best=false)</argsstring>
        <name>simplify</name>
        <param>
          <type>bool</type>
          <declname>best</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Merge adjacent Boxes in this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. Return the number of Boxes merged. If &quot;best&quot; is specified we do a single bruteforce pass over the list checking each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> against all Boxes after it in the list to see if they can be merged. If &quot;best&quot; is not specified we limit how fair afield we look for possible matches. The &quot;best&quot; algorithm is O(N-squared) while the other algorithm is O(N). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1ab9071e12fb35012248c8978ed5e9b5a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BoxList::ordered_simplify</definition>
        <argsstring>()</argsstring>
        <name>ordered_simplify</name>
        <briefdescription>
<para>Assuming the boxes are nicely ordered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a954f12195603d5493ca2251e0147c4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::maxSize</definition>
        <argsstring>(int chunk)</argsstring>
        <name>maxSize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
<para>Forces each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to have sides of length &lt;= chunk. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1ac6afa90929ca95e8048721a2f2b407e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::maxSize</definition>
        <argsstring>(const IntVect &amp;chunk)</argsstring>
        <name>maxSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
<para>Forces each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to have dimth side of length &lt;= chunk[dim]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1acb7f8b8c07867e9a40ac51922ce07e31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BoxList::minimalBox</definition>
        <argsstring>() const</argsstring>
        <name>minimalBox</name>
        <briefdescription>
<para>Returns smallest <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that contains all Boxes in this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a25986c43e3bd0e8b7043955680879e16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::BoxList::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> of Boxes in this <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="188" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a5500e705c89c6c7f8d69a15fec86ac67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::set</definition>
        <argsstring>(IndexType ixtyp) noexcept</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>ixtyp</declname>
        </param>
        <briefdescription>
<para>Set the type of the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. It&apos;s an error if the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> isn&apos;t empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="190" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a1407ab0108776da8d7fe9a05381f5041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::surroundingNodes</definition>
        <argsstring>() noexcept</argsstring>
        <name>surroundingNodes</name>
        <briefdescription>
<para>Applies surroundingNodes(Box) to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in BoxArray. See the documentation of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1acececbf6a71ec11bf660a2843192d6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::surroundingNodes</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Applies surroundingNodes(Box,int) to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. See the documentation of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a9ed198bd9ceb2268f1219c2e0375bdbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::enclosedCells</definition>
        <argsstring>() noexcept</argsstring>
        <name>enclosedCells</name>
        <briefdescription>
<para>Applies <ref refid="classamrex_1_1Box_1ae17168bdeb2aab35fdffc69ac0e21bce" kindref="member">Box::enclosedCells()</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a678c17d31bc353ead03cffed5c4e1574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::enclosedCells</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>enclosedCells</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Applies <ref refid="classamrex_1_1Box_1a3a2fa1570beab3cd64d2d7c8f7902458" kindref="member">Box::enclosedCells(int)</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a533a896b5397ca253658e34bdb05e538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList&amp; amrex::BoxList::convert</definition>
        <argsstring>(IndexType typ) noexcept</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Applies <ref refid="classamrex_1_1Box_1a5499f2bb3ff92ef3951332fa6b390b73" kindref="member">Box::convert(IndexType)</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a39ed8708f5d1a7c4aaa7a8a792dc13d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
        <definition>Vector&lt;Box&gt;&amp; amrex::BoxList::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns a reference to the Vector&lt;Box&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="209" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1ab3f9eee26f225648bbc267b866f01fde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
        <definition>const Vector&lt;Box&gt;&amp; amrex::BoxList::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns a constant reference to the Vector&lt;Box&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="211" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a2d15815fbdd75a908fc1b5363a73b189" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::swap</definition>
        <argsstring>(BoxList &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxList_1a62a9e0ec396f6f764973eb0feb6b43ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::Bcast</definition>
        <argsstring>()</argsstring>
        <name>Bcast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="218" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1BoxList_1aaf1b93b74700437fde78c1cecfba7283" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BoxList::simplify_doit</definition>
        <argsstring>(int depth)</argsstring>
        <name>simplify_doit</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>depth</declname>
        </param>
        <briefdescription>
<para>Core simplify routine. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="222" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class for managing a List of Boxes that share a common <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref>. This class implements operations for sets of Boxes. This is a concrete class, not a polymorphic one. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="707">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
      </node>
      <node id="708">
        <label>amrex::BoxDomain</label>
        <link refid="classamrex_1_1BoxDomain"/>
        <childnode refid="707" relation="protected-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="709">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="710" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="712" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="711">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
      </node>
      <node id="712">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="710">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="711" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="52" bodyend="229"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxList_1a3b3222b65efa7cdc1944106dbb07d6ae" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>accrete</name></member>
      <member refid="classamrex_1_1BoxList_1ae852e0ee71d6645fb6cbb1765547d65a" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>accrete</name></member>
      <member refid="classamrex_1_1BoxList_1a62a9e0ec396f6f764973eb0feb6b43ff" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>Bcast</name></member>
      <member refid="classamrex_1_1BoxList_1abc4b6bd9e48f341f77e5b0381b5308e0" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>begin</name></member>
      <member refid="classamrex_1_1BoxList_1a8e3958e44ca086a0b4a511f62cddc031" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>begin</name></member>
      <member refid="classamrex_1_1BoxList_1ad02d5a19433d5484dee5fb260bbc9f06" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxList_1a31584546393b5ff7f420e6bffd8486bd" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a128274e71f12eceb9980758522776803" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a1a8247d3b12b7bd82410a977d43302f0" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1aa5e1e0f1149682e0c8cd5a88451811ba" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a3c9b3b9af19b73c1c7efafda6238dbe9" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a30479ce1f63ba9843fe6d5253b6c3fb9" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a54773484ed81f097deb889555b7ca24b" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1afe00f77bc420a45f32d484d982e02072" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a57ceea7a76c84d3befd6ec06c059bbe7" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a6603dcbdc28135b48e5bfa98b942da73" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a70df1b0aadeb1c7f0360299f0e2b2fc4" prot="private" virt="non-virtual"><scope>amrex::BoxList</scope><name>btype</name></member>
      <member refid="classamrex_1_1BoxList_1a6064b561ef6b7f4001b73a063b22bd57" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>capacity</name></member>
      <member refid="classamrex_1_1BoxList_1a5401acc7f967b93eb6e755966491aa58" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>catenate</name></member>
      <member refid="classamrex_1_1BoxList_1a1b546c6d1a623b0335f40983e1d46b8a" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>clear</name></member>
      <member refid="classamrex_1_1BoxList_1a3b14d38ee9c592394f4465c5e48e8e38" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxList_1aa3ac01949cda5f1c125767c7111d3aa3" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxList_1a77c9e97948684cd611eb9591ef6d23c4" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a990b3fc904c7fcd51a1fd9e4420eb0dc" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a1da3baa5ff605620901791904d448d87" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a9ac637c8d0a5920984658586a6b56a18" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>const_iterator</name></member>
      <member refid="classamrex_1_1BoxList_1a128dd0ae9ea6a6c9bed4a5af6a77518f" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxList_1a533a896b5397ca253658e34bdb05e538" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxList_1a39ed8708f5d1a7c4aaa7a8a792dc13d8" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>data</name></member>
      <member refid="classamrex_1_1BoxList_1ab3f9eee26f225648bbc267b866f01fde" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>data</name></member>
      <member refid="classamrex_1_1BoxList_1a9ed198bd9ceb2268f1219c2e0375bdbb" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxList_1a678c17d31bc353ead03cffed5c4e1574" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxList_1a3f031aa03b4e913c8fa413cf76d1807d" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>end</name></member>
      <member refid="classamrex_1_1BoxList_1a35fb0445d4f861be4ed66bf9861e9f14" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>end</name></member>
      <member refid="classamrex_1_1BoxList_1ab3d2612cde7e408f02101b15dd7781f1" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>front</name></member>
      <member refid="classamrex_1_1BoxList_1a65eb4af53f5dc07b129bd14d11d728ba" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>front</name></member>
      <member refid="classamrex_1_1BoxList_1a21d91d95c6b068d48292a4fdc2f53486" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>intersect</name></member>
      <member refid="classamrex_1_1BoxList_1a9f5fb740643bc7f4b10baa5487cc1760" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>intersect</name></member>
      <member refid="classamrex_1_1BoxList_1a18846dc6645e047916b3833a7ec1a777" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>isDisjoint</name></member>
      <member refid="classamrex_1_1BoxList_1a54c5936a5ec0332d158270277e862f85" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>isEmpty</name></member>
      <member refid="classamrex_1_1BoxList_1a6dac99633eca2bfbb8c2f287f423f9a4" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>isNotEmpty</name></member>
      <member refid="classamrex_1_1BoxList_1ab64ed06fbfbfc6342465290e3d86c107" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>iterator</name></member>
      <member refid="classamrex_1_1BoxList_1a25986c43e3bd0e8b7043955680879e16" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>ixType</name></member>
      <member refid="classamrex_1_1BoxList_1af1451e74b2d7de70b58b9979e21aeb49" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>join</name></member>
      <member refid="classamrex_1_1BoxList_1ae86c1cb2471cb633d0abf4657d080a73" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>join</name></member>
      <member refid="classamrex_1_1BoxList_1adeadcf55bf1de6d0a14007817795bfbf" prot="private" virt="non-virtual"><scope>amrex::BoxList</scope><name>m_lbox</name></member>
      <member refid="classamrex_1_1BoxList_1a954f12195603d5493ca2251e0147c4e5" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxList_1ac6afa90929ca95e8048721a2f2b407e7" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxList_1acb7f8b8c07867e9a40ac51922ce07e31" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxList_1a10fe281d57e922ce1f6393493e24be17" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxList_1a4610d792f42c68d9c5481dcf83d09397" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxList_1a6f77727eff8f7f6a9a08a21bec0bf152" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxList_1a0747196b0023c8dc440c9325092d53fe" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxList_1a111f72bd85cc49ade7c956cdf35d330b" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxList_1ab9071e12fb35012248c8978ed5e9b5a1" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>ordered_simplify</name></member>
      <member refid="classamrex_1_1BoxList_1ad6d8b6fc8801afb2539d5611efc7abb3" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a538e2e8665da85486105a7daa26bfd0a" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a7c626403ed2f4b4bbddaed58edda99b7" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1aaf9cf5350e31edefe87e9e8b2f2278ef" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>push_back</name></member>
      <member refid="classamrex_1_1BoxList_1a905d974544cd60c9b72314cb6135e17b" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxList_1a551c2ca8aa05f54c73c3b57d40ca2217" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxList_1a3f0ab28b3e669f5a7828da71fdbd3645" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>removeEmpty</name></member>
      <member refid="classamrex_1_1BoxList_1a7b999e76e5422aa024da160623cc81f8" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>reserve</name></member>
      <member refid="classamrex_1_1BoxList_1a5500e705c89c6c7f8d69a15fec86ac67" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>set</name></member>
      <member refid="classamrex_1_1BoxList_1a724c4380dbcdc0d514cf18d029a49f92" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxList_1abf9737ea9ecdf7a57adbe55f6215219f" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BoxList_1a094d0a9c81730b5f3cade719d4b0b30d" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BoxList_1a827d337283d6b99be9feff0887409674" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>simplify</name></member>
      <member refid="classamrex_1_1BoxList_1aaf1b93b74700437fde78c1cecfba7283" prot="private" virt="non-virtual"><scope>amrex::BoxList</scope><name>simplify_doit</name></member>
      <member refid="classamrex_1_1BoxList_1ac4030d4780cc8ca926857c82819c1c42" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>size</name></member>
      <member refid="classamrex_1_1BoxList_1a1407ab0108776da8d7fe9a05381f5041" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxList_1acececbf6a71ec11bf660a2843192d6ad" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxList_1a2d15815fbdd75a908fc1b5363a73b189" prot="public" virt="non-virtual"><scope>amrex::BoxList</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
