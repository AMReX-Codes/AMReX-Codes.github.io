<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceamrex_1_1Cuda" kind="namespace" language="C++">
    <compoundname>amrex::Cuda</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1_1Cuda_1aa5712aaa078f919e8e87c103eaf52dfd" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Cuda::DeviceVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>DeviceVector</name>
        <briefdescription>
<para>When <ref refid="namespaceamrex_1_1Cuda" kindref="compound">Cuda</ref> is off, all these containers revert to <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Cuda_1add117efd9a112270c82c86e1c1311aef" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Cuda::HostVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>HostVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Cuda_1a874c975a77836139dea5f75c0497314f" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Cuda::ManagedVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>ManagedVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Cuda_1a897b2b181edf87b86f91b08b8a0c8991" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Cuda::ManagedDeviceVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>ManagedDeviceVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Cuda_1a48ebc4b741b2fcfc39bcb1bb4c97b4e2" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Cuda::PinnedDeviceVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>PinnedDeviceVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Cuda_1a88a8840f4a86a379c21df2da5b4e077d" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Cuda::PolymorphicDeviceVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>PolymorphicDeviceVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Cuda_1ab4c79aa24eaa3c0661f182a819586f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>OutIter</type>
        <definition>OutIter amrex::Cuda::thrust_copy</definition>
        <argsstring>(InIter begin, InIter end, OutIter result)</argsstring>
        <name>thrust_copy</name>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Cuda_1abf9c1cf54ddad8332323d71af52cf8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>OutIter</type>
        <definition>OutIter amrex::Cuda::inclusive_scan</definition>
        <argsstring>(InIter begin, InIter end, OutIter result)</argsstring>
        <name>inclusive_scan</name>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Cuda_1ad6e1b17bd58f41513b45874c3e016e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>OutIter</type>
        <definition>OutIter amrex::Cuda::exclusive_scan</definition>
        <argsstring>(InIter begin, InIter end, OutIter result)</argsstring>
        <name>exclusive_scan</name>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" bodystart="77" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaContainers.H" line="12" column="1"/>
  </compounddef>
</doxygen>
