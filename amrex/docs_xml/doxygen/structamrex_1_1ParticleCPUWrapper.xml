<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1ParticleCPUWrapper" kind="struct" language="C++" prot="public">
    <compoundname>amrex::ParticleCPUWrapper</compoundname>
    <includes refid="AMReX__Particle_8H" local="no">AMReX_Particle.H</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1ParticleCPUWrapper_1a9da7d4371d02e10cd184a772ecfaa82a" prot="public" static="no" mutable="no">
        <type>uint64_t *</type>
        <definition>uint64_t* amrex::ParticleCPUWrapper::m_idata</definition>
        <argsstring></argsstring>
        <name>m_idata</name>
        <qualifiedname>amrex::ParticleCPUWrapper::m_idata</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="185" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="185" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1a2afbf23a1587460b48f40077dccf41cc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleCPUWrapper::~ParticleCPUWrapper</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~ParticleCPUWrapper</name>
        <qualifiedname>amrex::ParticleCPUWrapper::~ParticleCPUWrapper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="187" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1af456e0632ceb42b240d4d2608325fa66" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleCPUWrapper::ParticleCPUWrapper</definition>
        <argsstring>(uint64_t &amp;idata) noexcept</argsstring>
        <name>ParticleCPUWrapper</name>
        <qualifiedname>amrex::ParticleCPUWrapper::ParticleCPUWrapper</qualifiedname>
        <param>
          <type>uint64_t &amp;</type>
          <declname>idata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="190" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1ad13d555c23dc09a19f05fa10518807e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleCPUWrapper::ParticleCPUWrapper</definition>
        <argsstring>(const ParticleCPUWrapper &amp;rhs)=default</argsstring>
        <name>ParticleCPUWrapper</name>
        <qualifiedname>amrex::ParticleCPUWrapper::ParticleCPUWrapper</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="195" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1a0cbf3e03c4cabd9a0fe9f6e2b1b584d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleCPUWrapper::ParticleCPUWrapper</definition>
        <argsstring>(ParticleCPUWrapper &amp;&amp;)=delete</argsstring>
        <name>ParticleCPUWrapper</name>
        <qualifiedname>amrex::ParticleCPUWrapper::ParticleCPUWrapper</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="197" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1a6b59f3f87cc6e99b9ffee0d297a957b0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleCPUWrapper &amp; amrex::ParticleCPUWrapper::operator=</definition>
        <argsstring>(const ParticleCPUWrapper &amp;pcpuw) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleCPUWrapper::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
          <declname>pcpuw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="200" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1a4fc96c15aa0bc7a56dcd61068165378f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleCPUWrapper &amp; amrex::ParticleCPUWrapper::operator=</definition>
        <argsstring>(ParticleCPUWrapper &amp;&amp;pcpuw) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleCPUWrapper::operator=</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;&amp;</type>
          <declname>pcpuw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="206" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1ae35ee838698f89a142c6e9f93a7332c9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleCPUWrapper &amp; amrex::ParticleCPUWrapper::operator=</definition>
        <argsstring>(const int cpu) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleCPUWrapper::operator=</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="212" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1af9ef300a76f9e5e44bb0fbb67b0d715d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleCPUWrapper::operator int</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator int</name>
        <qualifiedname>amrex::ParticleCPUWrapper::operator int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="219" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="219" bodyend="222"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="183" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="184" bodyend="223"/>
    <listofallmembers>
      <member refid="structamrex_1_1ParticleCPUWrapper_1a9da7d4371d02e10cd184a772ecfaa82a" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>m_idata</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1af9ef300a76f9e5e44bb0fbb67b0d715d" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>operator int</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1a6b59f3f87cc6e99b9ffee0d297a957b0" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1a4fc96c15aa0bc7a56dcd61068165378f" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1ae35ee838698f89a142c6e9f93a7332c9" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1af456e0632ceb42b240d4d2608325fa66" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>ParticleCPUWrapper</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1ad13d555c23dc09a19f05fa10518807e6" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>ParticleCPUWrapper</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1a0cbf3e03c4cabd9a0fe9f6e2b1b584d2" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>ParticleCPUWrapper</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1a2afbf23a1587460b48f40077dccf41cc" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>~ParticleCPUWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
