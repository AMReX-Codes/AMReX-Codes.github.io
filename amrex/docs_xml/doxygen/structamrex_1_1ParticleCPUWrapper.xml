<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structamrex_1_1ParticleCPUWrapper" kind="struct" language="C++" prot="public">
    <compoundname>amrex::ParticleCPUWrapper</compoundname>
    <includes refid="AMReX__Particle_8H" local="no">AMReX_Particle.H</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1ParticleCPUWrapper_1a520a3c045d3f58574b07526ab92c5447" prot="public" static="no" mutable="no">
        <type>uint64_t &amp;</type>
        <definition>uint64_t&amp; amrex::ParticleCPUWrapper::m_idata</definition>
        <argsstring></argsstring>
        <name>m_idata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1af9e50d6270a5543e66514c8cf1f53c32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::ParticleCPUWrapper::ParticleCPUWrapper</definition>
        <argsstring>(uint64_t &amp;idata) noexcept</argsstring>
        <name>ParticleCPUWrapper</name>
        <param>
          <type>uint64_t &amp;</type>
          <declname>idata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1a727683eb865339d71ef20530cedf9372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::ParticleCPUWrapper::ParticleCPUWrapper</definition>
        <argsstring>(const ParticleCPUWrapper &amp;rhs)=default</argsstring>
        <name>ParticleCPUWrapper</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1af6657f6d31454f318967fea9de69680a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE ParticleCPUWrapper&amp; amrex::ParticleCPUWrapper::operator=</definition>
        <argsstring>(const ParticleCPUWrapper &amp;pcpuw) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
          <declname>pcpuw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1a7095b6d59f347b9eba53e48da3e6b861" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE ParticleCPUWrapper&amp; amrex::ParticleCPUWrapper::operator=</definition>
        <argsstring>(const int cpu) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="103" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="103" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleCPUWrapper_1adbad723fe9c47434ede4210f5570bbbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::ParticleCPUWrapper::operator int</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="116" bodyend="119"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="85" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="84" bodyend="120"/>
    <listofallmembers>
      <member refid="structamrex_1_1ParticleCPUWrapper_1a520a3c045d3f58574b07526ab92c5447" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>m_idata</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1adbad723fe9c47434ede4210f5570bbbc" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>operator int</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1af6657f6d31454f318967fea9de69680a" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1a7095b6d59f347b9eba53e48da3e6b861" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1af9e50d6270a5543e66514c8cf1f53c32" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>ParticleCPUWrapper</name></member>
      <member refid="structamrex_1_1ParticleCPUWrapper_1a727683eb865339d71ef20530cedf9372" prot="public" virt="non-virtual"><scope>amrex::ParticleCPUWrapper</scope><name>ParticleCPUWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
