<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1IndexTypeND" kind="class" language="C++" prot="public">
    <compoundname>amrex::IndexTypeND</compoundname>
    <basecompoundref refid="structamrex_1_1CellIndexEnum" prot="public" virt="non-virtual">amrex::CellIndexEnum</basecompoundref>
    <includes refid="AMReX__IndexType_8H" local="no">AMReX_IndexType.H</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1IndexTypeND_1a6e80e66cb5f6381e43a226ddee681939" prot="public" static="no">
        <type><ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">CellIndex</ref></type>
        <definition>using amrex::IndexTypeND&lt; dim &gt;::value_type =  CellIndex</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::IndexTypeND::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="177" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="177" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IndexTypeND_1a262096e612e5ca57ea2b3a097ea40ffe" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int amrex::IndexTypeND&lt; dim &gt;::itype</definition>
        <argsstring></argsstring>
        <name>itype</name>
        <qualifiedname>amrex::IndexTypeND::itype</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>An integer holding the CellIndex in bits 0 - dim-1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="235" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="235" bodyend="235"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1ade651e360076595ad8b14009737a7fa9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::IndexTypeND&lt; dim &gt;::IndexTypeND</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>IndexTypeND</name>
        <qualifiedname>amrex::IndexTypeND::IndexTypeND</qualifiedname>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="40" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1aa05abfdf14ffb8ff26a43d6c78c67826" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::IndexTypeND&lt; dim &gt;::IndexTypeND</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;iv) noexcept</argsstring>
        <name>IndexTypeND</name>
        <qualifiedname>amrex::IndexTypeND::IndexTypeND</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> identical to an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="43" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1abbb674e0581d033d51dbf58523fb9774" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;(sizeof...(Args)+1==dim) &amp;&amp;<ref refid="namespaceamrex_1a6c0ad9de6dc5e0ca9324f19210bd62b9" kindref="member">IsConvertible_v</ref>&lt; <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">CellIndex</ref>, Args... &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::IndexTypeND&lt; dim &gt;::IndexTypeND</definition>
        <argsstring>(CellIndex i, Args...js) noexcept</argsstring>
        <name>IndexTypeND</name>
        <qualifiedname>amrex::IndexTypeND::IndexTypeND</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">CellIndex</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>js</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> given an explicit CellIndex for each direction. The inputs for this constructor are N CellIndex, where N is equal to the number of dimensions of the <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="59" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1aaaf7093b88615125bb947b8d2610ff6b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::IndexTypeND&lt; dim &gt;::set</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>set</name>
        <qualifiedname>amrex::IndexTypeND::set</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> to be NODE based in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="69" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1af0406597e3ebda44283adc3f4e9e69ff" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::IndexTypeND&lt; dim &gt;::unset</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>unset</name>
        <qualifiedname>amrex::IndexTypeND::unset</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> to be CELL based in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="72" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a08d58549e0f7297273cf3320c685bde9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::test</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>test</name>
        <qualifiedname>amrex::IndexTypeND::test</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>True if <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> is NODE based in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="75" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a5282873135890b3edfe6ca66a9e1404c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr void</type>
        <definition>__host__ __device__ constexpr void amrex::IndexTypeND&lt; dim &gt;::setall</definition>
        <argsstring>() noexcept</argsstring>
        <name>setall</name>
        <qualifiedname>amrex::IndexTypeND::setall</qualifiedname>
        <briefdescription>
<para>Set NODE based in all directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="78" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1ae98a793686206a755ff12fa775708179" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::IndexTypeND&lt; dim &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::IndexTypeND::clear</qualifiedname>
        <briefdescription>
<para>Set CELL based in all directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="81" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a5000f0ce825fe5691b0eb4f6a2a97953" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::any</definition>
        <argsstring>() const noexcept</argsstring>
        <name>any</name>
        <qualifiedname>amrex::IndexTypeND::any</qualifiedname>
        <briefdescription>
<para>True if this <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> is NODE based in any direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="84" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a6b6d62bcd56a95845e2261499a5edaf2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ok</name>
        <qualifiedname>amrex::IndexTypeND::ok</qualifiedname>
        <briefdescription>
<para>True if <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a2400e858297204ae781152604742ce80" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::IndexTypeND&lt; dim &gt;::flip</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>flip</name>
        <qualifiedname>amrex::IndexTypeND::flip</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Change from CELL to NODE or NODE to CELL in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a0513be1f47d4c2340c47213356e281df" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::operator==</definition>
        <argsstring>(const IndexTypeND &amp;t) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::IndexTypeND::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>True if IndexTypeNDs are identical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1ad6fd08e79893d7182bd51e5ce13e1922" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::operator!=</definition>
        <argsstring>(const IndexTypeND &amp;t) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::IndexTypeND::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>True if IndexTypeNDs are not identical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="96" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1ad9093508124cdb68139deeb1c4ff326d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::operator&lt;</definition>
        <argsstring>(const IndexTypeND &amp;t) const noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>amrex::IndexTypeND::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="98" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a1230fcc247da6ba2f6fc05fa619c4b39" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::cellCentered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cellCentered</name>
        <qualifiedname>amrex::IndexTypeND::cellCentered</qualifiedname>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> is CELL based in all directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a875cbf88aaf3733bc1376b5210258b1b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::cellCentered</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>cellCentered</name>
        <qualifiedname>amrex::IndexTypeND::cellCentered</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> is CELL based in dir-direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="104" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1ac276520f6660091f86aacac95fdd3608" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::nodeCentered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nodeCentered</name>
        <qualifiedname>amrex::IndexTypeND::nodeCentered</qualifiedname>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> is NODE based in all directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="107" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a8adc691480875c2c93d0cac085224d51" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::IndexTypeND&lt; dim &gt;::nodeCentered</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>nodeCentered</name>
        <qualifiedname>amrex::IndexTypeND::nodeCentered</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> is NODE based in dir-direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="110" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a4d512af0bdf56b5126afe50a7c9a96e4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::IndexTypeND&lt; dim &gt;::setType</definition>
        <argsstring>(int dir, CellIndex t) noexcept</argsstring>
        <name>setType</name>
        <qualifiedname>amrex::IndexTypeND::setType</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">CellIndex</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> to CellIndex type t in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="113" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a042a6d6988a3f2ce079d145a086e0515" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">CellIndex</ref></type>
        <definition>__host__ __device__ constexpr CellIndex amrex::IndexTypeND&lt; dim &gt;::ixType</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>ixType</name>
        <qualifiedname>amrex::IndexTypeND::ixType</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the CellIndex in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="116" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1ab75aec6a654b732fdadb303b0406555f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::IndexTypeND&lt; dim &gt;::operator[]</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::IndexTypeND::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return an integer representing the <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="119" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a3c96c4f33ce67de6ba0744e4f675ebe8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">CellIndex</ref></type>
        <definition>__host__ __device__ constexpr CellIndex amrex::IndexTypeND&lt; dim &gt;::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>amrex::IndexTypeND::get</qualifiedname>
        <briefdescription>
<para>Returns the i&apos;th CellIndex of the <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>. Used by structured bindings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="123" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a2f03b624a67f0fc6db41a8f7b8288311" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::IndexTypeND&lt; dim &gt;::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <qualifiedname>amrex::IndexTypeND::ixType</qualifiedname>
        <briefdescription>
<para>Fill an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> of size dim with IndexTypeNDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="126" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a2739aa7f265285cb7101f431f13d9e47" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::IndexTypeND&lt; dim &gt;::toIntVect</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toIntVect</name>
        <qualifiedname>amrex::IndexTypeND::toIntVect</qualifiedname>
        <briefdescription>
<para>Fill an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> of size dim with IndexTypeNDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="135" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a87d405fd8a0bfb65400513770cee8278" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ IndexTypeND&lt; new_dim &gt; amrex::IndexTypeND&lt; dim &gt;::shrink</definition>
        <argsstring>() const noexcept</argsstring>
        <name>shrink</name>
        <qualifiedname>amrex::IndexTypeND::shrink</qualifiedname>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> of size new_dim and assigns the first new_dim values of this <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="185" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="185" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a1ead01bf8b616317de8b718eb73f5645" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ IndexTypeND&lt; new_dim &gt; amrex::IndexTypeND&lt; dim &gt;::expand</definition>
        <argsstring>(CellIndex fill_extra=CellIndex::CELL) const noexcept</argsstring>
        <name>expand</name>
        <qualifiedname>amrex::IndexTypeND::expand</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">CellIndex</ref></type>
          <declname>fill_extra</declname>
          <defval><ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3a1f9d32418f4279a931e3f65f092f9439" kindref="member">CellIndex::CELL</ref></defval>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> of size new_dim and assigns all values of this <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> to it and fill_extra to the remaining elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="198" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="198" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1ac804337b8634eceeee08c1230820265c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ IndexTypeND&lt; new_dim &gt; amrex::IndexTypeND&lt; dim &gt;::resize</definition>
        <argsstring>(CellIndex fill_extra=CellIndex::CELL) const noexcept</argsstring>
        <name>resize</name>
        <qualifiedname>amrex::IndexTypeND::resize</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">CellIndex</ref></type>
          <declname>fill_extra</declname>
          <defval><ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3a1f9d32418f4279a931e3f65f092f9439" kindref="member">CellIndex::CELL</ref></defval>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> of size new_dim by either shrinking or expanding this <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="214" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="214" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a5e64a0733fa97b1884a9a028634a6751" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr unsigned int &amp;</type>
        <definition>__host__ __device__ constexpr unsigned int &amp; amrex::IndexTypeND&lt; dim &gt;::getBits</definition>
        <argsstring>() noexcept</argsstring>
        <name>getBits</name>
        <qualifiedname>amrex::IndexTypeND::getBits</qualifiedname>
        <briefdescription>
<para>Return the bit field representing the underlying data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="224" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a482fe9ea5034985b6f50485803bd21ef" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr const unsigned int &amp;</type>
        <definition>__host__ __device__ constexpr const unsigned int &amp; amrex::IndexTypeND&lt; dim &gt;::getBits</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBits</name>
        <qualifiedname>amrex::IndexTypeND::getBits</qualifiedname>
        <briefdescription>
<para>Return the bit field representing the underlying data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="228" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="228" bodyend="228"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1abf223fe9abd76b2f43575bd0e6858686" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; dim &gt;</type>
        <definition>__host__ static __device__ constexpr IndexTypeND&lt; dim &gt; amrex::IndexTypeND&lt; dim &gt;::TheCellType</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheCellType</name>
        <qualifiedname>amrex::IndexTypeND::TheCellType</qualifiedname>
        <briefdescription>
<para>This static member function returns an <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> object of value <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3a1f9d32418f4279a931e3f65f092f9439" kindref="member">IndexTypeND::CELL</ref>. It is provided as a convenience to our users when defining a Box all of whose faces should be of type <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3a1f9d32418f4279a931e3f65f092f9439" kindref="member">IndexTypeND::CELL</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="149" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1af6e5e568750b9404f7057fe9c3c1781d" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; dim &gt;</type>
        <definition>__host__ static __device__ constexpr IndexTypeND&lt; dim &gt; amrex::IndexTypeND&lt; dim &gt;::TheNodeType</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheNodeType</name>
        <qualifiedname>amrex::IndexTypeND::TheNodeType</qualifiedname>
        <briefdescription>
<para>This static member function returns an <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> object of value <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3ad501679fc1b23174fe28a86d24d2e1e2" kindref="member">IndexTypeND::NODE</ref>. It is provided as a convenience to our users when defining a Box all of whose faces should be of type <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3ad501679fc1b23174fe28a86d24d2e1e2" kindref="member">IndexTypeND::NODE</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="159" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a266ee0ab102b295c27c95cc40e1d3aa4" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr std::size_t</type>
        <definition>__host__ static __device__ constexpr std::size_t amrex::IndexTypeND&lt; dim &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::IndexTypeND::size</qualifiedname>
        <briefdescription>
<para>Return the size of this IndexTypeND. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="167" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1a2a4de688a23c7da001daf388fe39b512" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::IndexTypeND&lt; dim &gt;::isize</definition>
        <argsstring>() noexcept</argsstring>
        <name>isize</name>
        <qualifiedname>amrex::IndexTypeND::isize</qualifiedname>
        <briefdescription>
<para>Return the size of this IndexTypeND. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="173" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="173" bodyend="175"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1IndexTypeND_1ac2481963d2e8fc3e267483ccecc2f513" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::IndexTypeND&lt; dim &gt;::mask</definition>
        <argsstring>(int k) noexcept</argsstring>
        <name>mask</name>
        <qualifiedname>amrex::IndexTypeND::mask</qualifiedname>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Returns 1&lt;&lt;k. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="233" column="35" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="233" bodyend="233"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Cell-Based or Node-Based Indices. </para>
    </briefdescription>
    <detaileddescription>
<para>The class <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref> defines an index as being cell based or node (edge) based in each of the dim directions. This class defines an enumerated type CellIndex to be either CELL or NODE; i.e. each of the dim dimensions must be either CELL or NODE. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="1">
        <label>amrex::IndexTypeND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="1">
        <label>amrex::IndexTypeND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="33" bodyend="236"/>
    <listofallmembers>
      <member refid="classamrex_1_1IndexTypeND_1a5000f0ce825fe5691b0eb4f6a2a97953" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>any</name></member>
      <member refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3a1f9d32418f4279a931e3f65f092f9439" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>CELL</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a1230fcc247da6ba2f6fc05fa619c4b39" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>cellCentered</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a875cbf88aaf3733bc1376b5210258b1b" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>cellCentered</name></member>
      <member refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>CellIndex</name></member>
      <member refid="classamrex_1_1IndexTypeND_1ae98a793686206a755ff12fa775708179" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>clear</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a1ead01bf8b616317de8b718eb73f5645" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>expand</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a2400e858297204ae781152604742ce80" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>flip</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a3c96c4f33ce67de6ba0744e4f675ebe8" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>get</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a5e64a0733fa97b1884a9a028634a6751" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>getBits</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a482fe9ea5034985b6f50485803bd21ef" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>getBits</name></member>
      <member refid="classamrex_1_1IndexTypeND_1ade651e360076595ad8b14009737a7fa9" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>IndexTypeND</name></member>
      <member refid="classamrex_1_1IndexTypeND_1aa05abfdf14ffb8ff26a43d6c78c67826" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>IndexTypeND</name></member>
      <member refid="classamrex_1_1IndexTypeND_1abbb674e0581d033d51dbf58523fb9774" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>IndexTypeND</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a2a4de688a23c7da001daf388fe39b512" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>isize</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a262096e612e5ca57ea2b3a097ea40ffe" prot="private" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>itype</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a042a6d6988a3f2ce079d145a086e0515" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>ixType</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a2f03b624a67f0fc6db41a8f7b8288311" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>ixType</name></member>
      <member refid="classamrex_1_1IndexTypeND_1ac2481963d2e8fc3e267483ccecc2f513" prot="private" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>mask</name></member>
      <member refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3ad501679fc1b23174fe28a86d24d2e1e2" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>NODE</name></member>
      <member refid="classamrex_1_1IndexTypeND_1ac276520f6660091f86aacac95fdd3608" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>nodeCentered</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a8adc691480875c2c93d0cac085224d51" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>nodeCentered</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a6b6d62bcd56a95845e2261499a5edaf2" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>ok</name></member>
      <member refid="classamrex_1_1IndexTypeND_1ad6fd08e79893d7182bd51e5ce13e1922" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IndexTypeND_1ad9093508124cdb68139deeb1c4ff326d" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a0513be1f47d4c2340c47213356e281df" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IndexTypeND_1ab75aec6a654b732fdadb303b0406555f" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IndexTypeND_1ac804337b8634eceeee08c1230820265c" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>resize</name></member>
      <member refid="classamrex_1_1IndexTypeND_1aaaf7093b88615125bb947b8d2610ff6b" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>set</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a5282873135890b3edfe6ca66a9e1404c" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>setall</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a4d512af0bdf56b5126afe50a7c9a96e4" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>setType</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a87d405fd8a0bfb65400513770cee8278" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>shrink</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a266ee0ab102b295c27c95cc40e1d3aa4" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>size</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a08d58549e0f7297273cf3320c685bde9" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>test</name></member>
      <member refid="classamrex_1_1IndexTypeND_1abf223fe9abd76b2f43575bd0e6858686" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>TheCellType</name></member>
      <member refid="classamrex_1_1IndexTypeND_1af6e5e568750b9404f7057fe9c3c1781d" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>TheNodeType</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a2739aa7f265285cb7101f431f13d9e47" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>toIntVect</name></member>
      <member refid="classamrex_1_1IndexTypeND_1af0406597e3ebda44283adc3f4e9e69ff" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>unset</name></member>
      <member refid="classamrex_1_1IndexTypeND_1a6e80e66cb5f6381e43a226ddee681939" prot="public" virt="non-virtual"><scope>amrex::IndexTypeND</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
