<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1ReduceOps" kind="class" language="C++" prot="public">
    <compoundname>amrex::ReduceOps</compoundname>
    <includes refid="AMReX__Reduce_8H" local="no">AMReX_Reduce.H</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Ps</declname>
        <defname>Ps</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1ReduceOps_1a9d7de78d79286ae701b8fd50652c4a49" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>static AMREX_FORCE_INLINE auto amrex::ReduceOps&lt; Ps &gt;::call_f</definition>
        <argsstring>(Box const &amp;box, D &amp;, F const &amp;f) noexcept -&gt; decltype(f(0, 0, 0))</argsstring>
        <name>call_f</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>D &amp;</type>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="710" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="710" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ReduceOps_1ac50bf0fd7c3d53d20aa796aaf94a3da8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>static AMREX_FORCE_INLINE auto amrex::ReduceOps&lt; Ps &gt;::call_f</definition>
        <argsstring>(Box const &amp;box, D &amp;, F const &amp;f) noexcept -&gt; decltype(f(Box()))</argsstring>
        <name>call_f</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>D &amp;</type>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="729" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="729" bodyend="733"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ReduceOps_1a6bed424b9a455d76e42d8061aef71b3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ReduceOps&lt; Ps &gt;::eval</definition>
        <argsstring>(Box const &amp;box, D &amp;reduce_data, F &amp;&amp;f)</argsstring>
        <name>eval</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>D &amp;</type>
          <declname>reduce_data</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="738" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="738" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ReduceOps_1a0b2c2b761a373ac5a95273721a8ae1fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ReduceOps&lt; Ps &gt;::eval</definition>
        <argsstring>(Box const &amp;box, N ncomp, D &amp;reduce_data, F &amp;&amp;f)</argsstring>
        <name>eval</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>N</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>D &amp;</type>
          <declname>reduce_data</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="748" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="748" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ReduceOps_1a65284f038ea29beb80b99c1a5f246f04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ReduceOps&lt; Ps &gt;::eval</definition>
        <argsstring>(N n, D &amp;reduce_data, F &amp;&amp;f)</argsstring>
        <name>eval</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>D &amp;</type>
          <declname>reduce_data</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="768" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="768" bodyend="779"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="176" bodyend="-1"/>
    <listofallmembers>
      <member refid="classamrex_1_1ReduceOps_1a9d7de78d79286ae701b8fd50652c4a49" prot="private" virt="non-virtual"><scope>amrex::ReduceOps</scope><name>call_f</name></member>
      <member refid="classamrex_1_1ReduceOps_1ac50bf0fd7c3d53d20aa796aaf94a3da8" prot="private" virt="non-virtual"><scope>amrex::ReduceOps</scope><name>call_f</name></member>
      <member refid="classamrex_1_1ReduceOps_1a6bed424b9a455d76e42d8061aef71b3e" prot="public" virt="non-virtual"><scope>amrex::ReduceOps</scope><name>eval</name></member>
      <member refid="classamrex_1_1ReduceOps_1a0b2c2b761a373ac5a95273721a8ae1fd" prot="public" virt="non-virtual"><scope>amrex::ReduceOps</scope><name>eval</name></member>
      <member refid="classamrex_1_1ReduceOps_1a65284f038ea29beb80b99c1a5f246f04" prot="public" virt="non-virtual"><scope>amrex::ReduceOps</scope><name>eval</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
