<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__same__v_3_01amrex_1_1MultiFab_00_01T_01_4_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_same_v&lt; amrex::MultiFab, T &gt; &gt; &gt;</compoundname>
    <includes refid="AMReX__IntegratorBase_8H" local="no">AMReX_IntegratorBase.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__same__v_3_01amrex_1_1MultiFab_00_01T_01_4_01_4_01_4_1a3351ed5aa40298f6eabb05de52e6290b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_same_v&lt; amrex::MultiFab, T &gt; &gt; &gt;::CreateLike</definition>
        <argsstring>(amrex::Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;V, const T &amp;Other, bool Grow=false)</argsstring>
        <name>CreateLike</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>Grow</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="136" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__same__v_3_01amrex_1_1MultiFab_00_01T_01_4_01_4_01_4_1aa0111c78830d99c298eb3adae9f7029f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_same_v&lt; amrex::MultiFab, T &gt; &gt; &gt;::Copy</definition>
        <argsstring>(T &amp;Y, const T &amp;Other, const int scomp=0, const int ncomp=-1, bool Grow=true)</argsstring>
        <name>Copy</name>
        <param>
          <type>T &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Other</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>Grow</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="143" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="143" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__same__v_3_01amrex_1_1MultiFab_00_01T_01_4_01_4_01_4_1a8ee342eb7ac3a9d13cc4ec493dce493d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_same_v&lt; amrex::MultiFab, T &gt; &gt; &gt;::Saxpy</definition>
        <argsstring>(T &amp;Y, const amrex::Real a, const T &amp;X, const int scomp=0, const int ncomp=-1, bool Grow=false)</argsstring>
        <name>Saxpy</name>
        <param>
          <type>T &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>Grow</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="151" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="151" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="134" bodyend="159"/>
    <listofallmembers>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__same__v_3_01amrex_1_1MultiFab_00_01T_01_4_01_4_01_4_1aa0111c78830d99c298eb3adae9f7029f" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_same_v&lt; amrex::MultiFab, T &gt; &gt; &gt;</scope><name>Copy</name></member>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__same__v_3_01amrex_1_1MultiFab_00_01T_01_4_01_4_01_4_1a3351ed5aa40298f6eabb05de52e6290b" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_same_v&lt; amrex::MultiFab, T &gt; &gt; &gt;</scope><name>CreateLike</name></member>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__same__v_3_01amrex_1_1MultiFab_00_01T_01_4_01_4_01_4_1a8ee342eb7ac3a9d13cc4ec493dce493d" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_same_v&lt; amrex::MultiFab, T &gt; &gt; &gt;</scope><name>Saxpy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
