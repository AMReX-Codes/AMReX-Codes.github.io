<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1FabArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabArray</compoundname>
    <basecompoundref refid="classamrex_1_1FabArrayBase" prot="public" virt="non-virtual">amrex::FabArrayBase</basecompoundref>
    <includes refid="AMReX__DistributionMapping_8H" local="no">AMReX_DistributionMapping.H</includes>
    <innerclass refid="structamrex_1_1FabArray_1_1FABType" prot="public">amrex::FabArray::FABType</innerclass>
    <innerclass refid="structamrex_1_1FabArray_1_1ShMem" prot="protected">amrex::FabArray::ShMem</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>FAB</declname>
        <defname>FAB</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" static="no">
        <type>typename std::conditional&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB &gt;::value, FAB, <ref refid="structamrex_1_1FabArray_1_1FABType" kindref="compound">FABType</ref> &gt;::type::value_type</type>
        <definition>using amrex::FabArray&lt; FAB &gt;::value_type =  typename std::conditional&lt;IsBaseFab&lt;FAB&gt;::value, FAB, FABType&gt;::type::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="168" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="168" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" static="no">
        <type>std::vector&lt; FAB * &gt;::iterator</type>
        <definition>typedef std::vector&lt;FAB*&gt;::iterator amrex::FabArray&lt; FAB &gt;::Iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="720" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="720" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FabArray_1a2df56bce875115e30eee589571642e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Action</definition>
        <argsstring></argsstring>
        <name>Action</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="151" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArray_1ad8b63023f3ebd152c5cb931b975cc0a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class AmrTask</definition>
        <argsstring></argsstring>
        <name>AmrTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArray_1a60f56cd45cbe9dc96de858a4ecc30f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class MFGraph</definition>
        <argsstring></argsstring>
        <name>MFGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FabFactory&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="655" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::define_function_called</definition>
        <argsstring></argsstring>
        <name>define_function_called</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="657" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; FAB * &gt;</type>
        <definition>std::vector&lt;FAB*&gt; amrex::FabArray&lt; FAB &gt;::m_fabs_v</definition>
        <argsstring></argsstring>
        <name>m_fabs_v</name>
        <briefdescription>
<para>The data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="661" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::FabArray&lt; FAB &gt;::m_tags</definition>
        <argsstring></argsstring>
        <name>m_tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="663" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FabArray_1_1ShMem" kindref="compound">ShMem</ref></type>
        <definition>ShMem amrex::FabArray&lt; FAB &gt;::shmem</definition>
        <argsstring></argsstring>
        <name>shmem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="715" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="715" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a1de730376dd381a0e0aaf26cee0565b4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::fb_cross</definition>
        <argsstring></argsstring>
        <name>fb_cross</name>
        <briefdescription>
<para>Data used in non-blocking FillBoundary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="755" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a895064ef39dcc1b70cab62ef59243c15" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::fb_epo</definition>
        <argsstring></argsstring>
        <name>fb_epo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="755" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1addcd803413e8691d103bd137cabf5406" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_scomp</definition>
        <argsstring></argsstring>
        <name>fb_scomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="756" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1aae76a45a4f6107d123d1f12123017515" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_ncomp</definition>
        <argsstring></argsstring>
        <name>fb_ncomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="756" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1aa14d5a982abbba95b4879b453d6e884b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArray&lt; FAB &gt;::fb_nghost</definition>
        <argsstring></argsstring>
        <name>fb_nghost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="757" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1afa2c5f52dddbe274a661b57fa60abf49" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref></type>
        <definition>Periodicity amrex::FabArray&lt; FAB &gt;::fb_period</definition>
        <argsstring></argsstring>
        <name>fb_period</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="758" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a74208704b8f6fd0320efbab5b6d84c33" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::FabArray&lt; FAB &gt;::fb_the_recv_data</definition>
        <argsstring></argsstring>
        <name>fb_the_recv_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="761" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1acdbdf6b190956f4aea653b4a8668daf3" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::FabArray&lt; FAB &gt;::fb_the_send_data</definition>
        <argsstring></argsstring>
        <name>fb_the_send_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="762" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a256a4c5d1f5d93ed4f69baba008fd293" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_from</definition>
        <argsstring></argsstring>
        <name>fb_recv_from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="763" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a03fbd0e37ccb140399d5111ad8a9173a" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt;</type>
        <definition>Vector&lt;char*&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_data</definition>
        <argsstring></argsstring>
        <name>fb_recv_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="764" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a8fd0580be481f200e59e850c297047ff" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_size</definition>
        <argsstring></argsstring>
        <name>fb_recv_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="765" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9ded15081c72b00f3649cb6890b03a31" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt;</type>
        <definition>Vector&lt;MPI_Request&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_reqs</definition>
        <argsstring></argsstring>
        <name>fb_recv_reqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="766" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a2c94d11906514b3f8290a85682eb02b8" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt;</type>
        <definition>Vector&lt;MPI_Status&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_stat</definition>
        <argsstring></argsstring>
        <name>fb_recv_stat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="767" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a6d78698d8d519bd122eb9c3d405d535b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt;</type>
        <definition>Vector&lt;char*&gt; amrex::FabArray&lt; FAB &gt;::fb_send_data</definition>
        <argsstring></argsstring>
        <name>fb_send_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="772" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7a8376a51b48f1310d3d350ac70fe345" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt;</type>
        <definition>Vector&lt;MPI_Request&gt; amrex::FabArray&lt; FAB &gt;::fb_send_reqs</definition>
        <argsstring></argsstring>
        <name>fb_send_reqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="773" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1ac557f1eed392826db1eec4119103134a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_tag</definition>
        <argsstring></argsstring>
        <name>fb_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="774" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="774" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>()</argsstring>
        <name>FabArray</name>
        <briefdescription>
<para>Constructs an empty FabArray&lt;FAB&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="172" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="964" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Construct a FabArray&lt;FAB&gt; with a valid region defined by bxs and a region of definition defined by the grow factor ngrow and the number of components nvar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="179" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="971" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="191" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="981" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="995" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::~FabArray</definition>
        <argsstring>()</argsstring>
        <name>~FabArray</name>
        <briefdescription>
<para>The destructor <ndash/> deletes all FABs in the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="206" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1055" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>FabArray</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="208" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1016" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt; FAB &gt; &amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1033" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <reimplementedby refid="classamrex_1_1MultiFab_1a0d8c379908b048cb742470011c502084">define</reimplementedby>
        <reimplementedby refid="classamrex_1_1iMultiFab_1a5ac868702f5d6d3c8ced0bd5c1b64c5d">define</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Define this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> identically to that performed by the constructor having an analogous function signature. This is only valid if this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> was defined using the default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="220" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1089" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <reimplementedby refid="classamrex_1_1MultiFab_1a051387c994b547b900dadc07c4141352">define</reimplementedby>
        <reimplementedby refid="classamrex_1_1iMultiFab_1a281e5d5ab94b2da37746b48219a29f9b">define</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="232" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1101" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
        <definition>const FabFactory&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::Factory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="244" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::hasEBFabFactory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasEBFabFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="246" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="246" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa487ad1a422a80a53b13055e1781b1df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::ok</definition>
        <argsstring>() const </argsstring>
        <name>ok</name>
        <briefdescription>
<para>Return true if the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is well-defined. That is, if FABs are allocated for each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and the sizes of the FABs and the number of components are consistent with the definition of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="261" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1063" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="264" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="267" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="270" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="273" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="276" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="279" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="282" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="282" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="285" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::atLocalIdx</definition>
        <argsstring>(int L) noexcept</argsstring>
        <name>atLocalIdx</name>
        <param>
          <type>int</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with local index L. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="288" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::atLocalIdx</definition>
        <argsstring>(int L) const noexcept</argsstring>
        <name>atLocalIdx</name>
        <param>
          <type>int</type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return pointer to FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="808" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1409b3b24b8fe0b2fc51ee7627781adb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FAB const *</type>
        <definition>FAB const * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="293" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="818" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="294" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="828" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2216055f245e5a44d5eaee59ac715013" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FAB const *</type>
        <definition>FAB const * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="837" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::prefetchToHost</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>prefetchToHost</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="298" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="847" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::prefetchToDevice</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>prefetchToDevice</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="301" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="857" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="304" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="867" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="875" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="310" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="883" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="313" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="891" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a56f866d5ace5debf481ebb2770c1fdb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(int K, FAB *elem)</argsstring>
        <name>setFab</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <param>
          <type>FAB *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the Kth FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="316" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1245" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad120e19b398c8fdcd683fc66a2828b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(const MFIter &amp;mfi, FAB *elem, bool assertion=true)</argsstring>
        <name>setFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>FAB *</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assertion</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Explicitly set the FAB associated with mfi in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1271" bodyend="1295"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Releases FAB memory in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; addThisBD is called in define </para>        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="322" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="898" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="326" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1455" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(value_type val)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="330" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1463" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp to val. Also set the value of nghost boundary cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="338" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1471" bodyend="1477"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="344" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1482" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp, as well as nghost boundary cells, to val, provided they also intersect with the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="356" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1509" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="363" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1521" bodyend="1547"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="373" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="928" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="377" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="937" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells, that also intersect the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="386" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="946" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="391" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="956" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int num_comp, int nghost=0)</argsstring>
        <name>abs</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="396" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1552" bodyend="1555"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>abs</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1560" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="402" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1581" bodyend="1595"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="405" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1600" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="408" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1621" bodyend="1635"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="411" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1640" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="414" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1661" bodyend="1675"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="417" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1680" bodyend="1696"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all values in the boundary region to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="421" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1300" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Set ncomp values in the boundary region, starting at start_comp to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="425" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1308" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab9442a964296f689a711f4b2594d333c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, const Geometry &amp;goem)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>goem</declname>
        </param>
        <briefdescription>
<para>Set all values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="431" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1359" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab81e0f54e2bf418568003fd4dc10b1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp, const Geometry &amp;goem)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>goem</declname>
        </param>
        <briefdescription>
<para>Set ncomp values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val, starting at start_comp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="435" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1367" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from fa to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in fa is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the valid regions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="443" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="446" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="446" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="450" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="450" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from src to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in src is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the num_comp components starting at src_comp in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> src, with the destination components in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> starting at dest_comp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="463" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="463" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="469" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="469" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="476" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="476" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Similar to the above function, except that source and destination are grown by src_nghost and dst_nghost, respectively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="485" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="485" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="494" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="494" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="502" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="502" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY, const FabArrayBase::CPC *a_cpc=nullptr)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> *</type>
          <declname>a_cpc</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="521" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="521" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="530" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="530" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::Redistribute</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>Redistribute</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to this. this and src have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, but different <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="541" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="1465" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0b91952d964518b99146f011e68e672e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int nghost=0) const </argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>brief Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest into dest. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="555" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1426" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abf03244eb777726665c52dd8ae1dba67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, const Box &amp;subbox, int nghost=0) const </argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest and the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> subbox into that subregion of dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="563" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1434" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a54771a4280585982df8b5e9448cb2e27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int src_comp, int dest_comp, int num_comp, int nghost=0) const </argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest into dest, starting at component dest_comp in dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="573" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1443" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4c6ab796ee21881664e1deb85186e9a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, const Box &amp;subbox, int src_comp, int dest_comp, int num_comp, int nghost=0) const </argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest and the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> subbox, into dest, starting at component dest_comp in dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::shift</definition>
        <argsstring>(const IntVect &amp;v)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift the boxarray by vector v. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="593" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1700" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>defined</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="595" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="782" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>defined</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="596" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="795" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy on intersection within a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Data is copied from valid regions to intersecting regions of definition. The purpose is to fill in the boundary regions of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. If cross=true, corner cells are not filled. If the length of periodic is provided, periodic boundaries are also filled. Note that <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> itself does not contains any periodicity information. FillBoundary expects that its cell-centered version of its <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is non-overlapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="609" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1719" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="611" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1730" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Same as <ref refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" kindref="member">FillBoundary()</ref>, but only copies ncomp components starting at scomp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="614" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1741" bodyend="1748"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="615" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1752" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="616" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1763" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="618" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1777" bodyend="1780"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="619" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1784" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="620" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1791" bodyend="1794"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="621" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1832" bodyend="1836"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="622" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1840" bodyend="1845"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="624" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FillBoundary_test</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="626" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="1505" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Fill cells outside periodic domains with their corresponding cells inside the domain. Ghost cells are treated the same as valid cells. The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is allowed to be overlapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="632" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1798" bodyend="1805"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="633" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1809" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="634" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1820" bodyend="1828"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::BuildMask</definition>
        <argsstring>(const Box &amp;phys_domain, const Periodicity &amp;period, value_type covered, value_type notcovered, value_type physbnd, value_type interior)</argsstring>
        <name>BuildMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>phys_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>covered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>notcovered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>physbnd</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>interior</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="644" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1850" bodyend="1907"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;F&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only=false)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0e0073142d1598838048317216fa6d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FOO</type>
          </param>
          <param>
            <type>class BAR</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="17" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FOO</type>
          </param>
          <param>
            <type>class BAR</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" line="564" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="564" bodyend="751"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::SharedMemory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>SharedMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="717" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="717" bodyend="717"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::AllocFabs</definition>
        <argsstring>(const FabFactory&lt; FAB &gt; &amp;factory, Arena *ar, const Vector&lt; std::string &gt; &amp;tags)</argsstring>
        <name>AllocFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="722" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1133" bodyend="1241"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1397">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1398" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1398">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1420">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1401">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1402" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1405">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1404">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1404" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1399">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1400" relation="public-inheritance">
        </childnode>
        <childnode refid="1404" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="1406" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="1414" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="1416" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="1418" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="1419" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="1421" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="1423" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="1421">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1422" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1415">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="1406">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1407" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1402">
        <label>string</label>
      </node>
      <node id="1423">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="1404" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="1417">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="1416">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1417" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1418">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="1422">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="1407">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1412">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="1404" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="1413" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="1410">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1411" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1419">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1420" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1413">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="1411">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1406" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1414">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1415" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1403">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1408">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1409" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="1410" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1409">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="1400">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1401" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1403" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1404" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1405" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1406" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1408" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="1412" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.H" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="21" bodyend="-1"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a2df56bce875115e30eee589571642e33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Action</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ADD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>addThisBD</name></member>
      <member refid="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>AllocFabs</name></member>
      <member refid="classamrex_1_1FabArray_1ad8b63023f3ebd152c5cb931b975cc0a9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>AmrTask</name></member>
      <member refid="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc3c1d759fbd867cf7d9c806e56c30c7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>box</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>boxarray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4bb7e999eee8c04f07573269b54e39d0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1abcd5df36dacaa8b31e6fcaaed30be3" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>buildTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1f6dc68b468c213274abf8e9219b532a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>bytesOfMapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CFinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CFinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b95df9ab5980407e45865e8876791be" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>clearThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>comm_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>COPY</name></member>
      <member refid="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1bb6a09ada00b5b7a900d8fecbf92e3c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArray_1a0b91952d964518b99146f011e68e672e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1abf03244eb777726665c52dd8ae1dba67" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a54771a4280585982df8b5e9448cb2e27" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a4c6ab796ee21881664e1deb85186e9a2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>CPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae1a0d2f95995d26b5afe7c866f760bd6" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>CPCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CpOp</name></member>
      <member refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>distributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1abd59469241abaab18e1c2db8b7ceb4ed" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>empty</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc0d46f9c8551ec9c1c6d6658103db15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adce0fffa78b25dbbfa1f82701e579425" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a1409b3b24b8fe0b2fc51ee7627781adb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a2216055f245e5a44d5eaee59ac715013" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a1de730376dd381a0e0aaf26cee0565b4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_cross</name></member>
      <member refid="classamrex_1_1FabArray_1a895064ef39dcc1b70cab62ef59243c15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_epo</name></member>
      <member refid="classamrex_1_1FabArray_1aae76a45a4f6107d123d1f12123017515" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_ncomp</name></member>
      <member refid="classamrex_1_1FabArray_1aa14d5a982abbba95b4879b453d6e884b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_nghost</name></member>
      <member refid="classamrex_1_1FabArray_1afa2c5f52dddbe274a661b57fa60abf49" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_period</name></member>
      <member refid="classamrex_1_1FabArray_1a03fbd0e37ccb140399d5111ad8a9173a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1a256a4c5d1f5d93ed4f69baba008fd293" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_from</name></member>
      <member refid="classamrex_1_1FabArray_1a9ded15081c72b00f3649cb6890b03a31" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1a8fd0580be481f200e59e850c297047ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_size</name></member>
      <member refid="classamrex_1_1FabArray_1a2c94d11906514b3f8290a85682eb02b8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_stat</name></member>
      <member refid="classamrex_1_1FabArray_1addcd803413e8691d103bd137cabf5406" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_scomp</name></member>
      <member refid="classamrex_1_1FabArray_1a6d78698d8d519bd122eb9c3d405d535b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_send_data</name></member>
      <member refid="classamrex_1_1FabArray_1a7a8376a51b48f1310d3d350ac70fe345" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_send_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1ac557f1eed392826db1eec4119103134a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_tag</name></member>
      <member refid="classamrex_1_1FabArray_1a74208704b8f6fd0320efbab5b6d84c33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_the_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1acdbdf6b190956f4aea653b4a8668daf3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_the_send_data</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aba788e1a081a9e668ba53d504e75a352" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a0e0073142d1598838048317216fa6d12" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae281696e28cac4d5387cdb5660d9aa3d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d3dbb0a351f570080f23f75febd836d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a937cce5d85fb91c1bddad5f9f3c0adc4" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3212be804b64d0f051f907c75fbad3d6" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a53cf0c60964630e381fd523a72fbf267" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afafdcf4e581478be608bb916274857d5" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae7aac9d7bfa41ac76f80543a6a8c1898" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa5c5f9aa77f5d7c4c73fafea2dc0116e" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac5c3b09365bcaf3c92ec8d296da74ccc" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FPinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3272dd508dcab2f679993ef1308a4278" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FPinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa0cb5039380dc0545d40ac5ac6589943" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a887fcf01f365f0cd92d32fceeba8ee3a" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>getCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5b4a0572662ad2d1a9cc30f3c6d8fd73" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>getFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab8548585b1a018f9d0a85cd43a719fe8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getTileArray</name></member>
      <member refid="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>indexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7a4ed8b70e3aa4c3ddd3a24fb1c0f3a0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>IndexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4581192d404c43071aaa653b2bbf28e3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6512ea611a6c04b5710334d9d9bfbb4e" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>isOwner</name></member>
      <member refid="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>Iterator</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a682fdf86619f6028fea2805d9693ae22" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ixType</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aabf6dbff99d8524f9c9d082302afdd5e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>local_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa848db21ec5426fab2c86d441cd0a314" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>localindex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b7b09c9194e173ed0b7df6ec34847ad" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_BD_count</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_bdkey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7bc1878e44728621bf3f21e2ad7d87b5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_CFinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7300ef91cdc58de4230d68dee3691006" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_CPC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2678095b2d8ac82dac74b035a15d30f9" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FA_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3b56b89f624446bcdfbbf6800de73675" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FBC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5766cde9fd9e095f4d8f9f1731eb9047" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FPinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa70ee9b229ec1e56083fd9519a92a000" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_mem_usage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4674b38da90801075df354a3491a8d17" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_region_tag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7ac2d31ebea84512f6379331df5c8d75" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TAC_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_tags</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaa3d9b6c8292268b0472cc7c9895f10e" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ee44b09d17bdb0425ab128b7ebc3cc5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheCrseFineCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d064b2059eb4cdd082f41be30e0d496" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a85557ba47b4be7646013a3a7ae5ff1ae" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheFillPatchCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a19a98e6afcf41af75c85278285c1e66b" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>MaxComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a31677ce1cdddcbc405f41bb1a4351d35" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mfghostiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArray_1a60f56cd45cbe9dc96de858a4ecc30f5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>MFGraph</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mfiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>n_comp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>n_grow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92cef599b0ae34401a5463ec6fddc606" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1FabArray_1aa487ad1a422a80a53b13055e1781b1df" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ok</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>ownership</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8e414f069d04091245f3e9e94a3aa237" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>OwnerShip</name></member>
      <member refid="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2de51872d78b63b8c99c30eac65f3ee3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>popRegionTag</name></member>
      <member refid="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a56e425df3c8bb2e6aea3510d19646ceb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>printMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a18cdf2cc3d52d7d4d7dbf8c24ce614ee" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8278b7adc57c727c9718330665bdeef7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a81ec42351b1a6d214b67e0285322f802" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>queryMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3e30aecf380fdf1926564da7155a5bc5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>queryMemUsageHWM</name></member>
      <member refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1ab9442a964296f689a711f4b2594d333c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1ab81e0f54e2bf418568003fd4dc10b1c0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a56f866d5ace5debf481ebb2770c1fdb2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1ad120e19b398c8fdcd683fc66a2828b5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>shmem</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713a78056e395c21e855dcc1ed56525c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>TACache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>TAMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaf2887a9352fecedc071410a48baea1c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>TheCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4150aeaf73494b1649babafad05d1d21" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>TheFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>updateBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1addf663082b0bdfcedda41fc8bbca4d5f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>updateMemUsage</name></member>
      <member refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae87329fe7a046f188ea78e63047152b6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>WaitForAsyncSends</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>~FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d0b50241fbebae6e3d53e301cf2b23a" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>~FabArrayBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
