<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1FabArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabArray</compoundname>
    <includes refid="AMReX__DistributionMapping_8H" local="no">AMReX_DistributionMapping.H</includes>
    <innerclass refid="structamrex_1_1FabArray_1_1FABType" prot="public">amrex::FabArray::FABType</innerclass>
    <innerclass refid="structamrex_1_1FabArray_1_1ShMem" prot="protected">amrex::FabArray::ShMem</innerclass>
    <templateparamlist>
      <param>
        <type>class FAB</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" static="no">
        <type>typename std::conditional&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB &gt;::value, FAB, <ref refid="structamrex_1_1FabArray_1_1FABType" kindref="compound">FABType</ref> &gt;::type::value_type</type>
        <definition>using amrex::FabArray&lt; FAB &gt;::value_type =  typename std::conditional&lt;IsBaseFab&lt;FAB&gt;::value, FAB, FABType&gt;::type::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="163" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" static="no">
        <type>std::vector&lt; FAB * &gt;::iterator</type>
        <definition>typedef std::vector&lt;FAB*&gt;::iterator amrex::FabArray&lt; FAB &gt;::Iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="888" column="48" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="888" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FabFactory&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="822" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1DataAllocator" kindref="compound">DataAllocator</ref></type>
        <definition>DataAllocator amrex::FabArray&lt; FAB &gt;::m_dallocator</definition>
        <argsstring></argsstring>
        <name>m_dallocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="823" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::define_function_called</definition>
        <argsstring></argsstring>
        <name>define_function_called</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="825" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; FAB * &gt;</type>
        <definition>std::vector&lt;FAB*&gt; amrex::FabArray&lt; FAB &gt;::m_fabs_v</definition>
        <argsstring></argsstring>
        <name>m_fabs_v</name>
        <briefdescription>
<para>The data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="829" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::FabArray&lt; FAB &gt;::m_tags</definition>
        <argsstring></argsstring>
        <name>m_tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="831" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FabArray_1_1ShMem" kindref="compound">ShMem</ref></type>
        <definition>ShMem amrex::FabArray&lt; FAB &gt;::shmem</definition>
        <argsstring></argsstring>
        <name>shmem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="883" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="883" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a1de730376dd381a0e0aaf26cee0565b4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::fb_cross</definition>
        <argsstring></argsstring>
        <name>fb_cross</name>
        <briefdescription>
<para>Data used in non-blocking FillBoundary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="941" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a895064ef39dcc1b70cab62ef59243c15" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::fb_epo</definition>
        <argsstring></argsstring>
        <name>fb_epo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="941" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1addcd803413e8691d103bd137cabf5406" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_scomp</definition>
        <argsstring></argsstring>
        <name>fb_scomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="942" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1aae76a45a4f6107d123d1f12123017515" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_ncomp</definition>
        <argsstring></argsstring>
        <name>fb_ncomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="942" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1aa14d5a982abbba95b4879b453d6e884b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArray&lt; FAB &gt;::fb_nghost</definition>
        <argsstring></argsstring>
        <name>fb_nghost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="943" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1afa2c5f52dddbe274a661b57fa60abf49" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref></type>
        <definition>Periodicity amrex::FabArray&lt; FAB &gt;::fb_period</definition>
        <argsstring></argsstring>
        <name>fb_period</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="944" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a74208704b8f6fd0320efbab5b6d84c33" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::FabArray&lt; FAB &gt;::fb_the_recv_data</definition>
        <argsstring></argsstring>
        <name>fb_the_recv_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="947" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1acdbdf6b190956f4aea653b4a8668daf3" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::FabArray&lt; FAB &gt;::fb_the_send_data</definition>
        <argsstring></argsstring>
        <name>fb_the_send_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="948" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="948" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a256a4c5d1f5d93ed4f69baba008fd293" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_from</definition>
        <argsstring></argsstring>
        <name>fb_recv_from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="949" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a03fbd0e37ccb140399d5111ad8a9173a" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt;</type>
        <definition>Vector&lt;char*&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_data</definition>
        <argsstring></argsstring>
        <name>fb_recv_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="950" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="950" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a54045911503ef590eee3c7a0badc648b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt;</type>
        <definition>Vector&lt;std::size_t&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_size</definition>
        <argsstring></argsstring>
        <name>fb_recv_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="951" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9ded15081c72b00f3649cb6890b03a31" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt;</type>
        <definition>Vector&lt;MPI_Request&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_reqs</definition>
        <argsstring></argsstring>
        <name>fb_recv_reqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="952" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a2c94d11906514b3f8290a85682eb02b8" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt;</type>
        <definition>Vector&lt;MPI_Status&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_stat</definition>
        <argsstring></argsstring>
        <name>fb_recv_stat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="953" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a6d78698d8d519bd122eb9c3d405d535b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt;</type>
        <definition>Vector&lt;char*&gt; amrex::FabArray&lt; FAB &gt;::fb_send_data</definition>
        <argsstring></argsstring>
        <name>fb_send_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="955" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7a8376a51b48f1310d3d350ac70fe345" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt;</type>
        <definition>Vector&lt;MPI_Request&gt; amrex::FabArray&lt; FAB &gt;::fb_send_reqs</definition>
        <argsstring></argsstring>
        <name>fb_send_reqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="956" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1ac557f1eed392826db1eec4119103134a" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_tag</definition>
        <argsstring></argsstring>
        <name>fb_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="957" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1aff254d6dd8fd15b836d0b7caf690dc85" prot="public" static="no" mutable="no">
        <type>const CPC *</type>
        <definition>const CPC* amrex::FabArray&lt; FAB &gt;::pc_cpc</definition>
        <argsstring></argsstring>
        <name>pc_cpc</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Data used in non-blocking ParallelCopy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="960" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a3d9f86cc0b8132e6b6b7baaf78f2e871" prot="public" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; *</type>
        <definition>const FabArray&lt;FAB&gt;* amrex::FabArray&lt; FAB &gt;::pc_src</definition>
        <argsstring></argsstring>
        <name>pc_src</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="961" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="961" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1acd459156e0298169038d8e9e25a4fc5c" prot="public" static="no" mutable="no">
        <type>CpOp</type>
        <definition>CpOp amrex::FabArray&lt; FAB &gt;::pc_op</definition>
        <argsstring></argsstring>
        <name>pc_op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="962" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a5bf4c33806175e260ac3e17f2a8821ad" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArray&lt; FAB &gt;::pc_tag</definition>
        <argsstring></argsstring>
        <name>pc_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="963" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a5a19b5ac3391b3b4009ec7c3ccafd8ad" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArray&lt; FAB &gt;::pc_actual_n_rcvs</definition>
        <argsstring></argsstring>
        <name>pc_actual_n_rcvs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="964" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1aa59d4f4c67f53c9633283c0cbd027bf5" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArray&lt; FAB &gt;::pc_snghost</definition>
        <argsstring></argsstring>
        <name>pc_snghost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="965" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1ab03c4402374ae12a7025a0e7ddefc8c9" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArray&lt; FAB &gt;::pc_dnghost</definition>
        <argsstring></argsstring>
        <name>pc_dnghost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="965" column="37" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a1063f67147a7d1a0fa08d648e2222134" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref></type>
        <definition>Periodicity amrex::FabArray&lt; FAB &gt;::pc_period</definition>
        <argsstring></argsstring>
        <name>pc_period</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="966" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="966" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1abab20cc977f9ec81d07c9dd9e4978400" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArray&lt; FAB &gt;::pc_SC</definition>
        <argsstring></argsstring>
        <name>pc_SC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="967" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a74ea3fc9de57d5c32ee47ca7e2b7fa0a" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArray&lt; FAB &gt;::pc_NC</definition>
        <argsstring></argsstring>
        <name>pc_NC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="967" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9080d099b2aa4f82b99aaecfa3de8de1" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArray&lt; FAB &gt;::pc_DC</definition>
        <argsstring></argsstring>
        <name>pc_DC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="967" column="38" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a43e9fa2e544bcbdf6d5517362812478a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::pc_finished</definition>
        <argsstring></argsstring>
        <name>pc_finished</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="968" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a3bfc3399875a6f1059ee5b6d4ed0304b" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::FabArray&lt; FAB &gt;::pc_the_recv_data</definition>
        <argsstring></argsstring>
        <name>pc_the_recv_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="971" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1acc7c99b21bfc901f19c7a04405f206de" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::FabArray&lt; FAB &gt;::pc_the_send_data</definition>
        <argsstring></argsstring>
        <name>pc_the_send_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="972" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="972" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a4a6c3426a40d9585978ccd6497d1cf8a" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArray&lt; FAB &gt;::pc_recv_from</definition>
        <argsstring></argsstring>
        <name>pc_recv_from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="973" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="973" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a227fee04d898cb38566728503cb44a70" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt;</type>
        <definition>Vector&lt;char*&gt; amrex::FabArray&lt; FAB &gt;::pc_recv_data</definition>
        <argsstring></argsstring>
        <name>pc_recv_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="974" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a265d8bd1b1bdb80d7c1c253b1bd5f5c0" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt;</type>
        <definition>Vector&lt;std::size_t&gt; amrex::FabArray&lt; FAB &gt;::pc_recv_size</definition>
        <argsstring></argsstring>
        <name>pc_recv_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="975" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a60edfeaa3cda4c59fc9a6d969595a028" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt;</type>
        <definition>Vector&lt;MPI_Request&gt; amrex::FabArray&lt; FAB &gt;::pc_recv_reqs</definition>
        <argsstring></argsstring>
        <name>pc_recv_reqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="976" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7792a53b1d33b3ec9183c54e676d1042" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt;</type>
        <definition>Vector&lt;MPI_Request&gt; amrex::FabArray&lt; FAB &gt;::pc_send_reqs</definition>
        <argsstring></argsstring>
        <name>pc_send_reqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="977" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="977" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>()</argsstring>
        <name>FabArray</name>
        <briefdescription>
<para>Constructs an empty FabArray&lt;FAB&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="167" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1231" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Construct a FabArray&lt;FAB&gt; with a valid region defined by bxs and a region of definition defined by the grow factor ngrow and the number of components nvar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="174" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1238" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="186" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1248" bodyend="1259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="198" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1262" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::~FabArray</definition>
        <argsstring>()</argsstring>
        <name>~FabArray</name>
        <briefdescription>
<para>The destructor <ndash/> deletes all FABs in the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="201" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1325" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>FabArray</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="203" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1284" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt; FAB &gt; &amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="204" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1302" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="206" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="207" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <reimplementedby refid="classamrex_1_1MultiFab_1a0d8c379908b048cb742470011c502084">define</reimplementedby>
        <reimplementedby refid="classamrex_1_1iMultiFab_1a5ac868702f5d6d3c8ced0bd5c1b64c5d">define</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Define this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> identically to that performed by the constructor having an analogous function signature. This is only valid if this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> was defined using the default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="215" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1361" bodyend="1369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <reimplementedby refid="classamrex_1_1MultiFab_1a051387c994b547b900dadc07c4141352">define</reimplementedby>
        <reimplementedby refid="classamrex_1_1iMultiFab_1a281e5d5ab94b2da37746b48219a29f9b">define</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="227" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1373" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
        <definition>const FabFactory&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::Factory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="239" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="239" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::FabArray&lt; FAB &gt;::arena</definition>
        <argsstring>() const noexcept</argsstring>
        <name>arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="242" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
        <definition>const Vector&lt;std::string&gt;&amp; amrex::FabArray&lt; FAB &gt;::tags</definition>
        <argsstring>() const noexcept</argsstring>
        <name>tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="244" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::hasEBFabFactory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasEBFabFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="246" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="246" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::isAllRegular</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAllRegular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="255" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="255" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::ok</definition>
        <argsstring>() const</argsstring>
        <name>ok</name>
        <briefdescription>
<para>Return true if the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is well-defined. That is, the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> has a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, the FABs are allocated for each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and the sizes of the FABs and the number of components are consistent with the definition of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="275" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1333" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="278" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="281" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="284" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="287" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="287" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="290" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="293" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="296" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="299" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::atLocalIdx</definition>
        <argsstring>(int L) noexcept</argsstring>
        <name>atLocalIdx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with local index L. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="302" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::atLocalIdx</definition>
        <argsstring>(int L) const noexcept</argsstring>
        <name>atLocalIdx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="303" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return pointer to FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="306" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1012" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB const  *</type>
        <definition>FAB const  * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="307" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1022" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="308" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1032" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB const  *</type>
        <definition>FAB const  * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="309" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1041" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::prefetchToHost</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>prefetchToHost</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="312" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1051" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::prefetchToDevice</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>prefetchToDevice</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="315" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1063" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="318" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1075" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="321" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1083" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="324" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1091" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="327" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1099" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="330" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1107" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="333" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1115" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="336" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1123" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="339" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1131" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K, int start_comp) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="342" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1139" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K, int start_comp) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="345" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1147" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="348" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1155" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(int K, int start_comp) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="351" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1163" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a56f866d5ace5debf481ebb2770c1fdb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(int K, FAB *elem)</argsstring>
        <name>setFab</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type>FAB *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the Kth FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="354" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1518" bodyend="1540"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad120e19b398c8fdcd683fc66a2828b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(const MFIter &amp;mfi, FAB *elem, bool assertion=true)</argsstring>
        <name>setFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>FAB *</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assertion</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Explicitly set the FAB associated with mfi in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="357" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1544" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Releases FAB memory in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; addThisBD is called in define</para>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="360" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1170" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="364" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1669" bodyend="1672"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(value_type val)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="368" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1677" bodyend="1680"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp to val. Also set the value of nghost boundary cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="376" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1685" bodyend="1691"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="382" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1696" bodyend="1718"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp, as well as nghost boundary cells, to val, provided they also intersect with the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="394" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1723" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="401" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1735" bodyend="1762"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="411" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1201" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="414" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1209" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells, that also intersect the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="422" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1217" bodyend="1220"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="425" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1225" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int num_comp, int nghost=0)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="428" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1767" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="431" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1775" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="434" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1796" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="437" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1815" bodyend="1831"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="440" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1836" bodyend="1850"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="443" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1855" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="446" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1876" bodyend="1890"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="449" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1895" bodyend="1911"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all values in the boundary region to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="453" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1573" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Set ncomp values in the boundary region, starting at start_comp to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="457" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1581" bodyend="1595"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab9442a964296f689a711f4b2594d333c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, const Geometry &amp;goem)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>goem</declname>
        </param>
        <briefdescription>
<para>Set all values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="461" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1600" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab81e0f54e2bf418568003fd4dc10b1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp, const Geometry &amp;goem)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>goem</declname>
        </param>
        <briefdescription>
<para>Set ncomp values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val, starting at start_comp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="465" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1608" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from fa to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in fa is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the valid regions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="473" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="473" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="476" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="476" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="480" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="480" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abde39eb49207b481b280b1386e828abb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="485" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="485" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a27a082106b94896a38832117858407b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="488" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="488" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from src to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in src is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the num_comp components starting at src_comp in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> src, with the destination components in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> starting at dest_comp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="501" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="501" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="507" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="507" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="514" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="514" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="522" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="522" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="528" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="528" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Similar to the above function, except that source and destination are grown by src_nghost and dst_nghost, respectively. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="537" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="537" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="546" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="546" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="554" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="554" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY, const FabArrayBase::CPC *a_cpc=nullptr)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> *</type>
          <declname>a_cpc</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="563" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="573" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="573" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="582" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="582" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="591" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="591" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a78457b34f328569ed1bc6065baff53c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY, const FabArrayBase::CPC *a_cpc=nullptr)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> *</type>
          <declname>a_cpc</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="601" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a066e3ab046b92e144075c8f9df4aaf04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::ParallelCopy_finish</definition>
        <argsstring>()</argsstring>
        <name>ParallelCopy_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="611" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="475" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="614" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="614" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="623" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="623" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::Redistribute</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>Redistribute</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to this. this and src have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, but different <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="634" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="803" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>brief Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest into dest. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="648" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1640" bodyend="1644"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa19dd0482e00be1e43cd9c37d60aa0b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, const Box &amp;subbox, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest and the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> subbox into that subregion of dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="656" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1648" bodyend="1653"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a307d4ba571507f21248861f1755fcb7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int src_comp, int dest_comp, int num_comp, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest into dest, starting at component dest_comp in dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="666" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1657" bodyend="1664"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a81b037f6ed7b60e5dc95d11512468187" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, const Box &amp;subbox, int src_comp, int dest_comp, int num_comp, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest and the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> subbox, into dest, starting at component dest_comp in dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="678" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::shift</definition>
        <argsstring>(const IntVect &amp;v)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift the boxarray by vector v. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="686" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1915" bodyend="1930"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>defined</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="688" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="986" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>defined</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="689" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="999" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy on intersection within a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Data is copied from valid regions to intersecting regions of definition. The purpose is to fill in the boundary regions of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. If cross=true, corner cells are not filled. If the length of periodic is provided, periodic boundaries are also filled. Note that <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> itself does not contains any periodicity information. FillBoundary expects that its cell-centered version of its <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is non-overlapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="702" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1934" bodyend="1941"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="704" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1945" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1ed9770416d4f7f30e3ff2e194d028f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="705" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1956" bodyend="1965"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Same as <ref refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" kindref="member">FillBoundary()</ref>, but only copies ncomp components starting at scomp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="708" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1969" bodyend="1976"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="709" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1980" bodyend="1987"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="710" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1991" bodyend="2001"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="712" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2005" bodyend="2008"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="713" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2012" bodyend="2015"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="714" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2019" bodyend="2022"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="715" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2060" bodyend="2064"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="716" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2068" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="718" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FillBoundary_test</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="720" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="843" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Fill cells outside periodic domains with their corresponding cells inside the domain. Ghost cells are treated the same as valid cells. The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is allowed to be overlapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="726" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2026" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="727" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2037" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="728" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2048" bodyend="2056"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::BuildMask</definition>
        <argsstring>(const Box &amp;phys_domain, const Periodicity &amp;period, value_type covered, value_type notcovered, value_type physbnd, value_type interior)</argsstring>
        <name>BuildMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>phys_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>covered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>notcovered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>physbnd</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>interior</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="738" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2078" bodyend="2116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only=false)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="745" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FB_local_copy_cpu</definition>
        <argsstring>(const FB &amp;TheFB, int scomp, int ncomp)</argsstring>
        <name>FB_local_copy_cpu</name>
        <param>
          <type>const FB &amp;</type>
          <declname>TheFB</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="749" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="364" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::PC_local_cpu</definition>
        <argsstring>(const CPC &amp;thecpc, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp, CpOp op)</argsstring>
        <name>PC_local_cpu</name>
        <param>
          <type>const CPC &amp;</type>
          <declname>thecpc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="750" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PCI.H" bodystart="6" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aaad9347944887bc14f15277d45585d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type x, const CommMetaData &amp;thecmd, int scomp, int ncomp)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const CommMetaData &amp;</type>
          <declname>thecmd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="754" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2121" bodyend="2154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>LayoutData&lt; int &gt; amrex::FabArray&lt; FAB &gt;::RecvLayoutMask</definition>
        <argsstring>(const CommMetaData &amp;thecmd)</argsstring>
        <name>RecvLayoutMask</name>
        <param>
          <type>const CommMetaData &amp;</type>
          <declname>thecmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="757" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2159" bodyend="2186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0e0073142d1598838048317216fa6d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <declname>Z</declname>
            <defname>Z</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="8" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="8" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <declname>Z</declname>
            <defname>Z</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="163" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="163" bodyend="242"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::SharedMemory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>SharedMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="885" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="885" bodyend="885"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::AllocFabs</definition>
        <argsstring>(const FabFactory&lt; FAB &gt; &amp;factory, Arena *ar, const Vector&lt; std::string &gt; &amp;tags)</argsstring>
        <name>AllocFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="890" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1406" bodyend="1514"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="16">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="7">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="4">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="2" relation="usage">
          <edgelabel>pc_recv_size</edgelabel>
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
          <edgelabel>pc_dnghost</edgelabel>
          <edgelabel>pc_snghost</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>pc_recv_from</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
          <edgelabel>pc_recv_data</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>pc_recv_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
          <edgelabel>pc_send_reqs</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>fb_period</edgelabel>
          <edgelabel>pc_period</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="6">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="7" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="4" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="18">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="9">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="22" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="22" bodyend="-1"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>AllocFabs</name></member>
      <member refid="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>arena</name></member>
      <member refid="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1aa19dd0482e00be1e43cd9c37d60aa0b2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a307d4ba571507f21248861f1755fcb7c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a81b037f6ed7b60e5dc95d11512468187" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a1de730376dd381a0e0aaf26cee0565b4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_cross</name></member>
      <member refid="classamrex_1_1FabArray_1a895064ef39dcc1b70cab62ef59243c15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_epo</name></member>
      <member refid="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FB_local_copy_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1aae76a45a4f6107d123d1f12123017515" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_ncomp</name></member>
      <member refid="classamrex_1_1FabArray_1aa14d5a982abbba95b4879b453d6e884b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_nghost</name></member>
      <member refid="classamrex_1_1FabArray_1afa2c5f52dddbe274a661b57fa60abf49" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_period</name></member>
      <member refid="classamrex_1_1FabArray_1a03fbd0e37ccb140399d5111ad8a9173a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1a256a4c5d1f5d93ed4f69baba008fd293" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_from</name></member>
      <member refid="classamrex_1_1FabArray_1a9ded15081c72b00f3649cb6890b03a31" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1a54045911503ef590eee3c7a0badc648b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_size</name></member>
      <member refid="classamrex_1_1FabArray_1a2c94d11906514b3f8290a85682eb02b8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_stat</name></member>
      <member refid="classamrex_1_1FabArray_1addcd803413e8691d103bd137cabf5406" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_scomp</name></member>
      <member refid="classamrex_1_1FabArray_1a6d78698d8d519bd122eb9c3d405d535b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_send_data</name></member>
      <member refid="classamrex_1_1FabArray_1a7a8376a51b48f1310d3d350ac70fe345" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_send_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1ac557f1eed392826db1eec4119103134a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_tag</name></member>
      <member refid="classamrex_1_1FabArray_1a74208704b8f6fd0320efbab5b6d84c33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_the_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1acdbdf6b190956f4aea653b4a8668daf3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_the_send_data</name></member>
      <member refid="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a0e0073142d1598838048317216fa6d12" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a1ed9770416d4f7f30e3ff2e194d028f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>isAllRegular</name></member>
      <member refid="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>Iterator</name></member>
      <member refid="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_dallocator</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_tags</name></member>
      <member refid="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ok</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1abde39eb49207b481b280b1386e828abb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a066e3ab046b92e144075c8f9df4aaf04" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a27a082106b94896a38832117858407b9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a78457b34f328569ed1bc6065baff53c0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5a19b5ac3391b3b4009ec7c3ccafd8ad" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_actual_n_rcvs</name></member>
      <member refid="classamrex_1_1FabArray_1aff254d6dd8fd15b836d0b7caf690dc85" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_cpc</name></member>
      <member refid="classamrex_1_1FabArray_1a9080d099b2aa4f82b99aaecfa3de8de1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_DC</name></member>
      <member refid="classamrex_1_1FabArray_1ab03c4402374ae12a7025a0e7ddefc8c9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_dnghost</name></member>
      <member refid="classamrex_1_1FabArray_1a43e9fa2e544bcbdf6d5517362812478a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_finished</name></member>
      <member refid="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>PC_local_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a74ea3fc9de57d5c32ee47ca7e2b7fa0a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_NC</name></member>
      <member refid="classamrex_1_1FabArray_1acd459156e0298169038d8e9e25a4fc5c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_op</name></member>
      <member refid="classamrex_1_1FabArray_1a1063f67147a7d1a0fa08d648e2222134" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_period</name></member>
      <member refid="classamrex_1_1FabArray_1a227fee04d898cb38566728503cb44a70" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1a4a6c3426a40d9585978ccd6497d1cf8a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_recv_from</name></member>
      <member refid="classamrex_1_1FabArray_1a60edfeaa3cda4c59fc9a6d969595a028" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_recv_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1a265d8bd1b1bdb80d7c1c253b1bd5f5c0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_recv_size</name></member>
      <member refid="classamrex_1_1FabArray_1abab20cc977f9ec81d07c9dd9e4978400" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_SC</name></member>
      <member refid="classamrex_1_1FabArray_1a7792a53b1d33b3ec9183c54e676d1042" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_send_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1aa59d4f4c67f53c9633283c0cbd027bf5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_snghost</name></member>
      <member refid="classamrex_1_1FabArray_1a3d9f86cc0b8132e6b6b7baaf78f2e871" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_src</name></member>
      <member refid="classamrex_1_1FabArray_1a5bf4c33806175e260ac3e17f2a8821ad" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_tag</name></member>
      <member refid="classamrex_1_1FabArray_1a3bfc3399875a6f1059ee5b6d4ed0304b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_the_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1acc7c99b21bfc901f19c7a04405f206de" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pc_the_send_data</name></member>
      <member refid="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>RecvLayoutMask</name></member>
      <member refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1ab9442a964296f689a711f4b2594d333c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1ab81e0f54e2bf418568003fd4dc10b1c0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a56f866d5ace5debf481ebb2770c1fdb2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1ad120e19b398c8fdcd683fc66a2828b5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aaad9347944887bc14f15277d45585d84" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>shmem</name></member>
      <member refid="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>tags</name></member>
      <member refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>~FabArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
