<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1FabArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabArray</compoundname>
    <basecompoundref refid="classamrex_1_1FabArrayBase" prot="public" virt="non-virtual">amrex::FabArrayBase</basecompoundref>
    <includes refid="AMReX__FabArray_8H" local="no">AMReX_FabArray.H</includes>
    <innerclass refid="structamrex_1_1FabArray_1_1FABType" prot="public">amrex::FabArray::FABType</innerclass>
    <innerclass refid="structamrex_1_1FabArray_1_1ShMem" prot="protected">amrex::FabArray::ShMem</innerclass>
    <templateparamlist>
      <param>
        <type>class FAB</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" prot="public" static="no">
        <type>typename std::conditional_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB &gt;::value, FAB, <ref refid="structamrex_1_1FabArray_1_1FABType" kindref="compound">FABType</ref> &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
        <definition>using amrex::FabArray&lt; FAB &gt;::value_type =  typename std::conditional_t&lt;IsBaseFab&lt;FAB&gt;::value, FAB, FABType&gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="354" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a4ea567a25f13cd931b2b1e9433eeda5e" prot="public" static="no">
        <type>FAB</type>
        <definition>using amrex::FabArray&lt; FAB &gt;::fab_type =  FAB</definition>
        <argsstring></argsstring>
        <name>fab_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="356" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="356" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a958d272c39f50f1157029d5a0c6ade1c" prot="private" static="no">
        <type>typename std::vector&lt; FAB * &gt;::iterator</type>
        <definition>using amrex::FabArray&lt; FAB &gt;::Iterator =  typename std::vector&lt;FAB*&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1342" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1342" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FabFactory&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1268" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1DataAllocator" kindref="compound">DataAllocator</ref></type>
        <definition>DataAllocator amrex::FabArray&lt; FAB &gt;::m_dallocator</definition>
        <argsstring></argsstring>
        <name>m_dallocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1269" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a4d42668928f56c18d43d24f673ebd2ce" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1detail_1_1SingleChunkArena" kindref="compound">detail::SingleChunkArena</ref> &gt;</type>
        <definition>std::unique_ptr&lt;detail::SingleChunkArena&gt; amrex::FabArray&lt; FAB &gt;::m_single_chunk_arena</definition>
        <argsstring></argsstring>
        <name>m_single_chunk_arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1270" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a406dbcd37d688080e340c80a34ed2807" prot="protected" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::FabArray&lt; FAB &gt;::m_single_chunk_size</definition>
        <argsstring></argsstring>
        <name>m_single_chunk_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1271" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::define_function_called</definition>
        <argsstring></argsstring>
        <name>define_function_called</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>has <ref refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" kindref="member">define()</ref> been called? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1274" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; FAB * &gt;</type>
        <definition>std::vector&lt;FAB*&gt; amrex::FabArray&lt; FAB &gt;::m_fabs_v</definition>
        <argsstring></argsstring>
        <name>m_fabs_v</name>
        <briefdescription>
<para>The data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1278" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a0deadb1f742a4e911d7ea64ea80c1292" prot="protected" static="no" mutable="yes">
        <type>void *</type>
        <definition>void* amrex::FabArray&lt; FAB &gt;::m_dp_arrays</definition>
        <argsstring></argsstring>
        <name>m_dp_arrays</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1281" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1abbe02ae23186064d6bae686374657674" prot="protected" static="no" mutable="yes">
        <type>void *</type>
        <definition>void* amrex::FabArray&lt; FAB &gt;::m_hp_arrays</definition>
        <argsstring></argsstring>
        <name>m_hp_arrays</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1283" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1ab4bfa4857f5d074015204b6caa0cfcf7" prot="protected" static="no" mutable="yes">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> &gt;</type>
        <definition>MultiArray4&lt;value_type&gt; amrex::FabArray&lt; FAB &gt;::m_arrays</definition>
        <argsstring></argsstring>
        <name>m_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1284" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1ac30f73f6b587c175fdc34bab68294613" prot="protected" static="no" mutable="yes">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>MultiArray4&lt;value_type const&gt; amrex::FabArray&lt; FAB &gt;::m_const_arrays</definition>
        <argsstring></argsstring>
        <name>m_const_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1285" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::FabArray&lt; FAB &gt;::m_tags</definition>
        <argsstring></argsstring>
        <name>m_tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1287" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FabArray_1_1ShMem" kindref="compound">ShMem</ref></type>
        <definition>ShMem amrex::FabArray&lt; FAB &gt;::shmem</definition>
        <argsstring></argsstring>
        <name>shmem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1337" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1337" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a4bec341c204bf002ce9ea2d636e94f56" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1FBData" kindref="compound">FBData</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FBData&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::fbd</definition>
        <argsstring></argsstring>
        <name>fbd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1407" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a4a22bada553ad3ff929d91be1b8bfc9f" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1PCData" kindref="compound">PCData</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;PCData&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::pcd</definition>
        <argsstring></argsstring>
        <name>pcd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1408" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a11346c64d84d261c3766c76a0b09a032" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt; FabArray&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::os_temp</definition>
        <argsstring></argsstring>
        <name>os_temp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1411" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1411" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8ab865aabcf79bbf6a6f529cfd8da96a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>FabArray</name>
        <briefdescription>
<para>Constructs an empty FabArray&lt;FAB&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="360" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1865" bodyend="1869"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a657ae8bca91f3f4f77ed6592af1f50c4" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(Arena *a) noexcept</argsstring>
        <name>FabArray</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an empty FabArray&lt;FAB&gt; that has a default <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>define</computeroutput> is called later with a nullptr as <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>&apos;s arena, the default <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> <computeroutput>a</computeroutput> will be used. If the arena in <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> is not a nullptr, the <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>&apos;s arena will be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="369" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1872" bodyend="1877"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Construct a FabArray&lt;FAB&gt; with a valid region defined by bxs and a region of definition defined by the grow factor ngrow and the number of components nvar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="376" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1880" bodyend="1887"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="388" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1890" bodyend="1901"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="400" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1904" bodyend="1923"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::~FabArray</definition>
        <argsstring>()</argsstring>
        <name>~FabArray</name>
        <briefdescription>
<para>The destructor <ndash/> deletes all FABs in the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="403" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1983" bodyend="1987"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>FabArray</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="405" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1926" bodyend="1948"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt; FAB &gt; &amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="406" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1952" bodyend="1980"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="408" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="409" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Define this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> identically to that performed by the constructor having an analogous function signature. This is only valid if this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> was defined using the default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="417" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2026" bodyend="2034"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="429" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2038" bodyend="2067"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
        <definition>const FabFactory&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::Factory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="441" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="441" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::FabArray&lt; FAB &gt;::arena</definition>
        <argsstring>() const noexcept</argsstring>
        <name>arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="444" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="444" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
        <definition>const Vector&lt;std::string&gt;&amp; amrex::FabArray&lt; FAB &gt;::tags</definition>
        <argsstring>() const noexcept</argsstring>
        <name>tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="446" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="446" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::hasEBFabFactory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasEBFabFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="448" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="448" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a223a9902c0f816a42304e047e86b8928" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> *</type>
        <definition>value_type* amrex::FabArray&lt; FAB &gt;::singleChunkPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>singleChunkPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the data pointer to the single chunk memory if this object uses a single contiguous chunk of memory, nullptr otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="459" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="459" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5641f9e3a5b649c9bd89f57c1c2f8597" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  *</type>
        <definition>value_type const* amrex::FabArray&lt; FAB &gt;::singleChunkPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>singleChunkPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the data pointer to the single chunk memory if this object uses a single contiguous chunk of memory, nullptr otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="465" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="465" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aaab9b29e3c145dfb90616774d6954afa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::FabArray&lt; FAB &gt;::singleChunkSize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>singleChunkSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the size of the single chunk memory if this object uses a single contiguous chunk of memory, 0 otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="471" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="471" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::isAllRegular</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAllRegular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="473" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="473" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::ok</definition>
        <argsstring>() const</argsstring>
        <name>ok</name>
        <briefdescription>
<para>Return true if the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is well-defined. That is, the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> has a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, the FABs are allocated for each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and the sizes of the FABs and the number of components are consistent with the definition of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="493" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1991" bodyend="2015"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af5d3da506729e946bd90678a06d09dc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::isDefined</definition>
        <argsstring>() const</argsstring>
        <name>isDefined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Has <ref refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" kindref="member">define()</ref> been called on this rank?</para>
<para><simplesect kind="return"><para>true if <computeroutput>define</computeroutput> has been called on this <computeroutput><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref></computeroutput>. Note that all constructors except <computeroutput><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> ()</computeroutput> and <computeroutput><ref refid="classamrex_1_1FabArray_1a657ae8bca91f3f4f77ed6592af1f50c4" kindref="member">FabArray(Arena*a)</ref></computeroutput> call <computeroutput>define</computeroutput>, even if the <computeroutput><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref></computeroutput> argument has <computeroutput>alloc=false</computeroutput>. One could also use <computeroutput><ref refid="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" kindref="member">FabArrayBase::empty()</ref></computeroutput> to find whether <computeroutput>define</computeroutput> is called or not, although they are not exactly the same. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="502" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2019" bodyend="2022"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="505" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="505" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="508" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="508" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="511" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="511" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="514" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="514" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="517" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="517" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="520" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="520" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="523" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="523" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="526" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="526" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::atLocalIdx</definition>
        <argsstring>(int L) noexcept</argsstring>
        <name>atLocalIdx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with local index L. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="529" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="529" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::atLocalIdx</definition>
        <argsstring>(int L) const noexcept</argsstring>
        <name>atLocalIdx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="530" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="530" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return pointer to FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="533" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1497" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB const  *</type>
        <definition>FAB const  * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="534" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1507" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="535" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1517" bodyend="1522"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB const  *</type>
        <definition>FAB const  * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="536" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1526" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::prefetchToHost</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>prefetchToHost</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="539" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1536" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::prefetchToDevice</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>prefetchToDevice</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="542" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1548" bodyend="1555"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="545" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1560" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="548" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1568" bodyend="1571"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="551" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1576" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="554" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1584" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="557" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1592" bodyend="1595"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="560" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1600" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="563" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1608" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="566" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1616" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K, int start_comp) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="569" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1624" bodyend="1627"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K, int start_comp) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="572" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1632" bodyend="1635"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="575" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1640" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(int K, int start_comp) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="578" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1648" bodyend="1651"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a968d143683b63220ddbded86cf5010a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> &gt;</type>
        <definition>MultiArray4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::arrays</definition>
        <argsstring>() noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="581" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1656" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a980019a53308f95d935ad936288ef3c1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>MultiArray4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="584" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1665" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae2c5db543d1317f228503a98b47ed796" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref> const  &gt;</type>
        <definition>MultiArray4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="587" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1674" bodyend="1678"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a01622e62fc6b5438eb72a553287bdfe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(int boxno, std::unique_ptr&lt; FAB &gt; elem)</argsstring>
        <name>setFab</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxno</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; FAB &gt;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the Kth FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="590" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2210" bodyend="2227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abf543729d784adfcd6d1a989f4caee9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_move_constructible_v&lt; F &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(int boxno, FAB &amp;&amp;elem)</argsstring>
        <name>setFab</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxno</declname>
        </param>
        <param>
          <type>FAB &amp;&amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the Kth FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="594" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2232" bodyend="2249"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0f8b639b019bb31429a51c718756cafd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(const MFIter &amp;mfi, std::unique_ptr&lt; FAB &gt; elem)</argsstring>
        <name>setFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; FAB &gt;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the FAB associated with mfi in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="597" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2253" bodyend="2270"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a01d769a51d15314e0f36925aa2182c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_move_constructible_v&lt; F &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(const MFIter &amp;mfi, FAB &amp;&amp;elem)</argsstring>
        <name>setFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>FAB &amp;&amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the FAB associated with mfi in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="601" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2275" bodyend="2292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4782a3068c5950a1838e1018f8ff69f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> FAB *</type>
        <definition>AMREX_NODISCARD FAB * amrex::FabArray&lt; FAB &gt;::release</definition>
        <argsstring>(int K)</argsstring>
        <name>release</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Release ownership of the FAB. This function is not thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="605" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1734" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4750acee26c62d569535b66ec2957bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> FAB *</type>
        <definition>AMREX_NODISCARD FAB * amrex::FabArray&lt; FAB &gt;::release</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>release</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Release ownership of the FAB. This function is not thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="609" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1754" bodyend="1769"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Releases FAB memory in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; addThisBD is called in define</para>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="612" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1773" bodyend="1808"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5086d98e3a63866d87afcd150a8170ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SFAB</type>
          </param>
          <param>
            <type>typename DFAB</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::conjunction_v&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; DFAB &gt;, <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; SFAB &gt;, std::is_convertible&lt; typename SFAB::value_type, typename DFAB::value_type &gt;&gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::LocalCopy</definition>
        <argsstring>(FabArray&lt; SFAB &gt; const &amp;src, int scomp, int dcomp, int ncomp, IntVect const &amp;nghost)</argsstring>
        <name>LocalCopy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; SFAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Perform local copy of <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para>The two FabArrays must have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, although they could have different data types. For example, this could be used to copy from <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;BaseFab&lt;float&gt;&gt; to <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;BaseFab&lt;double&gt;&gt;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="633" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1817" bodyend="1821"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abd6dc24319471bcd6406fa9da2145197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::LocalAdd</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp, IntVect const &amp;nghost)</argsstring>
        <name>LocalAdd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Perform local addition of <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para>The two FabArrays must have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="649" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1826" bodyend="1830"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="654" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2496" bodyend="2499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4216d9de507369835a657c156d8b8161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt; FAB &gt; &amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(value_type val)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="658" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2504" bodyend="2508"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a93e733b725f64c93f7a5fb2edf88086e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int ncomp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp to val. Also set the value of nghost boundary cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="666" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2513" bodyend="2519"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a37c41983a3c0543717a0391f7e054929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int ncomp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="672" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2524" bodyend="2561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a32d132563b832c544c1ddd9a930789d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int ncomp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp, as well as nghost boundary cells, to val, provided they also intersect with the Box region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="684" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2566" bodyend="2573"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2c2a565a4a3a422661b062ee2dd5f937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int ncomp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="691" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2578" bodyend="2622"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="701" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1835" bodyend="1838"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="704" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1843" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells, that also intersect the Box region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="712" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1851" bodyend="1854"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="715" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1859" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0966955f0937e0119cb942c5968ddb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int ncomp, int nghost=0)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="718" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2627" bodyend="2630"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3c57732914fe734955ae11ab8561f3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int ncomp, const IntVect &amp;nghost)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="721" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2635" bodyend="2668"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="724" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2673" bodyend="2704"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="727" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2709" bodyend="2744"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="730" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2749" bodyend="2780"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="733" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2785" bodyend="2820"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="736" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2825" bodyend="2856"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="739" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2861" bodyend="2896"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all values in the boundary region to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="743" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2297" bodyend="2300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Set ncomp values in the boundary region, starting at start_comp to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="747" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2305" bodyend="2401"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a499aee434c06201cadb658484dda3e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, const Geometry &amp;geom)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Set all values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="751" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2406" bodyend="2409"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a24591060d4412dddb8298001e5f580c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp, const Geometry &amp;geom)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Set ncomp values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val, starting at start_comp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="755" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2414" bodyend="2440"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a025b813208a188552aba514a69a3b480" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>F::value_type</type>
        <definition>F::value_type amrex::FabArray&lt; FAB &gt;::sum</definition>
        <argsstring>(int comp, IntVect const &amp;nghost, bool local=false) const</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the sum of component &quot;comp&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, MPI communication is skipped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="766" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2445" bodyend="2484"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4e8ff0027c22d9451a6edff7272fb29a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from src to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in fa is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the valid regions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="774" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="774" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0f2716c666d8cd0546009503e890f807" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="777" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="777" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6b28e002648520d4d0349bf94ab3a576" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="783" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="783" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a221477c8979f6bf89267c68344a25539" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="788" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="788" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aebae9f774cd70cb8f12ec1c807e3d72b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="791" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="791" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from src to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in src is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the num_comp components starting at src_comp in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> src, with the destination components in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> starting at dest_comp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="804" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="804" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="810" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="810" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="819" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="819" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="827" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="827" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="833" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="833" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Similar to the above function, except that source and destination are grown by src_nghost and dst_nghost, respectively. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="842" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="842" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="851" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="851" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="859" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="859" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad8ec59ef48f01ecc242f4b1b6f39248f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int scomp, int dcomp, int ncomp, const IntVect &amp;snghost, const IntVect &amp;dnghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY, const FabArrayBase::CPC *a_cpc=nullptr)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>snghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>dnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> *</type>
          <declname>a_cpc</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="868" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="878" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="878" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="888" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="888" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="898" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="898" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab34d1096b2cf68e1b0319cdc7b74a35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int scomp, int dcomp, int ncomp, const IntVect &amp;snghost, const IntVect &amp;dnghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY, const FabArrayBase::CPC *a_cpc=nullptr, bool to_ghost_cells_only=false)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>snghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>dnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> *</type>
          <declname>a_cpc</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>to_ghost_cells_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="909" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a324fc6d24d656da6a5365253b2c9437e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_finish</definition>
        <argsstring>()</argsstring>
        <name>ParallelCopy_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="920" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a30c574173b6d62fd03e7b1dbf510492c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopyToGhost</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int scomp, int dcomp, int ncomp, const IntVect &amp;snghost, const IntVect &amp;dnghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelCopyToGhost</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>snghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>dnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="922" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5f80b593666b704bc1646d8c6a2d5af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopyToGhost_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int scomp, int dcomp, int ncomp, const IntVect &amp;snghost, const IntVect &amp;dnghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelCopyToGhost_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>snghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>dnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="930" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0144d56dd577bc7e46e1d422f487b1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopyToGhost_finish</definition>
        <argsstring>()</argsstring>
        <name>ParallelCopyToGhost_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="938" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="941" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="941" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="952" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="952" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a91d4e639cd2eca22c25e9625de833b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::Redistribute</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int scomp, int dcomp, int ncomp, const IntVect &amp;nghost)</argsstring>
        <name>Redistribute</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to this. this and src have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, but different <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="963" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="804" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest into dest. Note that FAB dest is assumed to be identical on each process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="974" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2488" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adb1c4e9d6b9a2f607e18cc7426bbcef6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int scomp, int dcomp, int ncomp, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest into dest, starting at component dest_comp in dest. Note that FAB dest is assumed to be identical on each process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="983" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::shift</definition>
        <argsstring>(const IntVect &amp;v)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift the boxarray by vector v. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="986" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2900" bodyend="2913"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8c74ba9f034d3ca5e94e21eeef3be455" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>defined</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="988" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1471" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>defined</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="989" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1484" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3991ba7fcd5f937da838387b027ce7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy on intersection within a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Data is copied from valid regions to intersecting regions of definition. The purpose is to fill in the boundary regions of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. If cross=true, corner cells are not filled. If the length of periodic is provided, periodic boundaries are also filled. Note that <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> itself does not contains any periodicity information. FillBoundary expects that its cell-centered version of its <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is non-overlapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1003" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3058" bodyend="3065"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a73c4ba8aa5ed4620734ba6bbc09bfa6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1006" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3070" bodyend="3077"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a169e9888b603a9c1b97d1876f2e843e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1009" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3082" bodyend="3091"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7c3bcb50994c05df7dbfcd3d63a41249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as <ref refid="classamrex_1_1FabArray_1a3991ba7fcd5f937da838387b027ce7ef" kindref="member">FillBoundary()</ref>, but only copies ncomp components starting at scomp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1013" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3096" bodyend="3103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae0a03b23f179e0c50e162387e35ea00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1016" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3108" bodyend="3115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a59c47cdc663d31e529ec89d3a10c2969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1019" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3120" bodyend="3130"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a72d6ae94d21e9c7e846bf634520719c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1022" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3135" bodyend="3138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1ae3789788ab4f527e7aec42991b5265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1025" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3143" bodyend="3146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5e540e836f433cd1d5c5dcb581b2075e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1028" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3151" bodyend="3154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7c8a47c0924b8c0e06200e38c5eb9a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1031" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3159" bodyend="3162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa2fe5d6e1efcb3230f3ca23599f2fb47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1034" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3378" bodyend="3381"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a76f3e8ecacb352ca12c35e6b3fa46b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1037" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3386" bodyend="3390"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af36dee00f70339ae9a3e126bbbc5d56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1041" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FillBoundary_test</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1043" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="831" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a84ce4d97367dcb2da8be8bddfac2ef4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundaryAndSync</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>FillBoundaryAndSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Fill ghost cells and synchronize nodal data. Ghost regions are filled with data from the intersecting valid regions. The synchronization will override valid regions by the intersecting valid regions with a higher precedence. The smaller the global box index is, the higher precedence the box has. With periodic boundaries, for cells in the same box, those near the lower corner have higher precedence than those near the upper corner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>periodic length if it&apos;s non-zero </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1057" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3166" bodyend="3173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6a2ee6a93d9d13d4f4a1f864f3c767cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundaryAndSync</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period)</argsstring>
        <name>FillBoundaryAndSync</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Fill ghost cells and synchronize nodal data. Ghost regions are filled with data from the intersecting valid regions. The synchronization will override valid regions by the intersecting valid regions with a higher precedence. The smaller the global box index is, the higher precedence the box has. With periodic boundaries, for cells in the same box, those near the lower corner have higher precedence than those near the upper corner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>periodic length if it&apos;s non-zero </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1072" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3177" bodyend="3185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab6a99354331bc87dda4960292d90de4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundaryAndSync_nowait</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>FillBoundaryAndSync_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1074" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3189" bodyend="3192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abad0254090cd345d31ab5bb0cb7a82b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundaryAndSync_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period)</argsstring>
        <name>FillBoundaryAndSync_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1075" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3196" bodyend="3201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6cca07036c0a49c4ad881c9138a4041f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundaryAndSync_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundaryAndSync_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1077" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3205" bodyend="3209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a37eadd5f219d50c8f1c3422f2fa81eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::OverrideSync</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>OverrideSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Synchronize nodal data. The synchronization will override valid regions by the intersecting valid regions with a higher precedence. The smaller the global box index is, the higher precedence the box has. With periodic boundaries, for cells in the same box, those near the lower corner have higher precedence than those near the upper corner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>periodic length if it&apos;s non-zero </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1089" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3213" bodyend="3220"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4f7ee90203e2af36c474d9b2234c8cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::OverrideSync</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period)</argsstring>
        <name>OverrideSync</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Synchronize nodal data. The synchronization will override valid regions by the intersecting valid regions with a higher precedence. The smaller the global box index is, the higher precedence the box has. With periodic boundaries, for cells in the same box, those near the lower corner have higher precedence than those near the upper corner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>periodic length if it&apos;s non-zero </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1102" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3224" bodyend="3231"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4528c1a098c945ff4f1cef3a812b1af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::OverrideSync_nowait</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>OverrideSync_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3235" bodyend="3238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2f1b5bd6a26a0ed12733e9a6ce8b0eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::OverrideSync_nowait</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period)</argsstring>
        <name>OverrideSync_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1104" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3242" bodyend="3246"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adbc8db61cee190b8779c871001f78057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::OverrideSync_finish</definition>
        <argsstring>()</argsstring>
        <name>OverrideSync_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1105" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3250" bodyend="3254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3df70423b7ec841f351f1e2b1b9cd8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sum values in overlapped cells. The destination is limited to valid cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1110" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3258" bodyend="3261"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8e4f13e3c2e640f401ef8a191feafe91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1111" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3265" bodyend="3268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad6c0ef1b3e74b61dbd4990b79686027a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_nowait</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1112" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3289" bodyend="3292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa81e576487f7936bb94111a236308f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1113" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3296" bodyend="3299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a836ec3561b05f2151a8b299a4bacbec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary</definition>
        <argsstring>(int scomp, int ncomp, IntVect const &amp;nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sum values in overlapped cells. The destination is limited to valid + ngrow cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1118" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3272" bodyend="3275"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a722163b7587e2755a9e7bb885c788571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, IntVect const &amp;nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1120" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3303" bodyend="3306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9ed00fc28603314ebf1fb318874b1f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary</definition>
        <argsstring>(int scomp, int ncomp, IntVect const &amp;src_nghost, IntVect const &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sum values in overlapped cells. For computing the overlap, the dst is grown by dst_ngrow, while the src uses src_ngrow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1127" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3279" bodyend="3285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6ec9ed02407bad1f6399c0a1c1983749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, IntVect const &amp;src_nghost, IntVect const &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1129" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3310" bodyend="3325"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa686cf52b54e0b077e30c6a5093304cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>SumBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1131" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3329" bodyend="3339"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Fill ghost cells with values from their corresponding cells across periodic boundaries, regardless of whether the corresponding cells are valid. This differs from FillBoundary, which only fills from valid cells, and does not fill from ghost cells. The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is allowed to be overlapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1138" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3343" bodyend="3350"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1139" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3354" bodyend="3361"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1140" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3365" bodyend="3373"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::BuildMask</definition>
        <argsstring>(const Box &amp;phys_domain, const Periodicity &amp;period, value_type covered, value_type notcovered, value_type physbnd, value_type interior)</argsstring>
        <name>BuildMask</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>phys_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>covered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>notcovered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>physbnd</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>interior</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1150" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3395" bodyend="3458"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0ea9d56bb5358f023c121e3631afadd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only=false, bool override_sync=false)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>override_sync</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1158" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FB_local_copy_cpu</definition>
        <argsstring>(const FB &amp;TheFB, int scomp, int ncomp)</argsstring>
        <name>FB_local_copy_cpu</name>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FB</ref> &amp;</type>
          <declname>TheFB</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1163" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="211" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::PC_local_cpu</definition>
        <argsstring>(const CPC &amp;thecpc, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp, CpOp op)</argsstring>
        <name>PC_local_cpu</name>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">CPC</ref> &amp;</type>
          <declname>thecpc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1164" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PCI.H" bodystart="6" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2b78f7c0a869eecad1d281d26363cb35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const CommMetaData &amp;thecmd, int scomp, int ncomp)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CommMetaData" kindref="compound">CommMetaData</ref> &amp;</type>
          <declname>thecmd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1168" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3463" bodyend="3499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>LayoutData&lt; int &gt; amrex::FabArray&lt; FAB &gt;::RecvLayoutMask</definition>
        <argsstring>(const CommMetaData &amp;thecmd)</argsstring>
        <name>RecvLayoutMask</name>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CommMetaData" kindref="compound">CommMetaData</ref> &amp;</type>
          <declname>thecmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1171" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3504" bodyend="3533"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a60891bcadc0382dfc1aaf4df8ad34771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FB_local_copy_gpu</definition>
        <argsstring>(const FB &amp;TheFB, int scomp, int ncomp)</argsstring>
        <name>FB_local_copy_gpu</name>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FB</ref> &amp;</type>
          <declname>TheFB</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1175" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="272" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6479ffc5e154a5b21d80e1b6dedb44cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::PC_local_gpu</definition>
        <argsstring>(const CPC &amp;thecpc, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp, CpOp op)</argsstring>
        <name>PC_local_gpu</name>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">CPC</ref> &amp;</type>
          <declname>thecpc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1176" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PCI.H" bodystart="88" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a202d8ada102cc6fc40749039c0e1f3a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::CMD_local_setVal_gpu</definition>
        <argsstring>(value_type x, const CommMetaData &amp;thecmd, int scomp, int ncomp)</argsstring>
        <name>CMD_local_setVal_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CommMetaData" kindref="compound">CommMetaData</ref> &amp;</type>
          <declname>thecmd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1179" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="332" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2064856b8d0efe0ae3e92d91a72f3274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::CMD_remote_setVal_gpu</definition>
        <argsstring>(value_type x, const CommMetaData &amp;thecmd, int scomp, int ncomp)</argsstring>
        <name>CMD_remote_setVal_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CommMetaData" kindref="compound">CommMetaData</ref> &amp;</type>
          <declname>thecmd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1180" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="362" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a62a6ea18e68973543bf8b2a9bab89d8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>F::value_type</type>
        <definition>F::value_type amrex::FabArray&lt; FAB &gt;::norminf</definition>
        <argsstring>(int comp, int ncomp, IntVect const &amp;nghost, bool local=false, [[maybe_unused]] bool ignore_covered=false) const</argsstring>
        <name>norminf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return infinity norm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, MPI communication is skipped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignore_covered</parametername>
</parameternamelist>
<parameterdescription>
<para>ignore covered cells. Only relevant for cell-centered EB data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1249" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3538" bodyend="3624"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aea595d71e8f04b18bc48aaca29acfe77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IFAB</type>
          </param>
          <param>
            <type>typename F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>F::value_type</type>
        <definition>F::value_type amrex::FabArray&lt; FAB &gt;::norminf</definition>
        <argsstring>(FabArray&lt; IFAB &gt; const &amp;mask, int comp, int ncomp, IntVect const &amp;nghost, bool local=false) const</argsstring>
        <name>norminf</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; IFAB &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return infinity norm in masked region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>only mask=true region is included </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, MPI communication is skipped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1263" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3629" bodyend="3680"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b108f48e43d0b56e3113d2264fdc910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>Z</declname>
            <defname>Z</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only, bool override_sync)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>override_sync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="8" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="8" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af36dee00f70339ae9a3e126bbbc5d56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>Z</declname>
            <defname>Z</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="168" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="168" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a44c4542a9504ebedf9c0439ad4f2650b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::pack_send_buffer_gpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;src, int scomp, int ncomp, Vector&lt; char * &gt; const &amp;send_data, Vector&lt; std::size_t &gt; const &amp;send_size, Vector&lt; CopyComTagsContainer const * &gt; const &amp;send_cctc)</argsstring>
        <name>pack_send_buffer_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>send_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">CopyComTagsContainer</ref> const * &gt; const &amp;</type>
          <declname>send_cctc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="730" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="730" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a34105be3fcf0be0cc074081b0667441f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::unpack_recv_buffer_gpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, int dcomp, int ncomp, Vector&lt; char * &gt; const &amp;recv_data, Vector&lt; std::size_t &gt; const &amp;recv_size, Vector&lt; CopyComTagsContainer const * &gt; const &amp;recv_cctc, CpOp op, bool is_thread_safe)</argsstring>
        <name>unpack_recv_buffer_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>recv_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>recv_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">CopyComTagsContainer</ref> const * &gt; const &amp;</type>
          <declname>recv_cctc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_thread_safe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="790" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="790" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abf79f429c979d93fb8a204aae9851054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::pack_send_buffer_cpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;src, int scomp, int ncomp, Vector&lt; char * &gt; const &amp;send_data, Vector&lt; std::size_t &gt; const &amp;send_size, Vector&lt; CopyComTagsContainer const * &gt; const &amp;send_cctc)</argsstring>
        <name>pack_send_buffer_cpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>send_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">CopyComTagsContainer</ref> const * &gt; const &amp;</type>
          <declname>send_cctc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="900" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="900" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad3f362d93f85699c530e36d2f78193ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::unpack_recv_buffer_cpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, int dcomp, int ncomp, Vector&lt; char * &gt; const &amp;recv_data, Vector&lt; std::size_t &gt; const &amp;recv_size, Vector&lt; CopyComTagsContainer const * &gt; const &amp;recv_cctc, CpOp op, bool is_thread_safe)</argsstring>
        <name>unpack_recv_buffer_cpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>recv_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>recv_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">CopyComTagsContainer</ref> const * &gt; const &amp;</type>
          <declname>recv_cctc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_thread_safe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="939" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="939" bodyend="1027"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0ec0671737732f4a925a56eb1f138d16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void amrex::FabArray&lt; FAB &gt;::pack_send_buffer_gpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;src, int scomp, int ncomp, Vector&lt; char * &gt; const &amp;send_data, Vector&lt; std::size_t &gt; const &amp;send_size, Vector&lt; const CopyComTagsContainer * &gt; const &amp;send_cctc)</argsstring>
        <name>pack_send_buffer_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>send_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">CopyComTagsContainer</ref> * &gt; const &amp;</type>
          <declname>send_cctc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1209" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8c6dd4507f03d916f85476d2571a10c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void amrex::FabArray&lt; FAB &gt;::unpack_recv_buffer_gpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, int dcomp, int ncomp, Vector&lt; char * &gt; const &amp;recv_data, Vector&lt; std::size_t &gt; const &amp;recv_size, Vector&lt; const CopyComTagsContainer * &gt; const &amp;recv_cctc, CpOp op, bool is_thread_safe)</argsstring>
        <name>unpack_recv_buffer_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>recv_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>recv_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">CopyComTagsContainer</ref> * &gt; const &amp;</type>
          <declname>recv_cctc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_thread_safe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1215" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad369c044980014877a2affbed7e266dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void amrex::FabArray&lt; FAB &gt;::pack_send_buffer_cpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;src, int scomp, int ncomp, Vector&lt; char * &gt; const &amp;send_data, Vector&lt; std::size_t &gt; const &amp;send_size, Vector&lt; const CopyComTagsContainer * &gt; const &amp;send_cctc)</argsstring>
        <name>pack_send_buffer_cpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>send_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">CopyComTagsContainer</ref> * &gt; const &amp;</type>
          <declname>send_cctc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1224" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6251aaa8ffe703d3eb8a259393471a5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BUF</type>
            <defval><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void amrex::FabArray&lt; FAB &gt;::unpack_recv_buffer_cpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, int dcomp, int ncomp, Vector&lt; char * &gt; const &amp;recv_data, Vector&lt; std::size_t &gt; const &amp;recv_size, Vector&lt; const CopyComTagsContainer * &gt; const &amp;recv_cctc, CpOp op, bool is_thread_safe)</argsstring>
        <name>unpack_recv_buffer_cpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>recv_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>recv_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">CopyComTagsContainer</ref> * &gt; const &amp;</type>
          <declname>recv_cctc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_thread_safe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1230" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab3e18d4d369bda7337c541adad0c6cd3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::Saxpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;y, value_type a, FabArray&lt; FAB &gt; const &amp;x, int xcomp, int ycomp, int ncomp, IntVect const &amp;nghost)</argsstring>
        <name>Saxpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>y += a*x </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar a </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ycomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1427" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2917" bodyend="2958"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a742793255ff2aed0213773f989cc8394" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::Xpay</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;y, value_type a, FabArray&lt; FAB &gt; const &amp;x, int xcomp, int ycomp, int ncomp, IntVect const &amp;nghost)</argsstring>
        <name>Xpay</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>y = x + a*y </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar a </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ycomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1442" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2963" bodyend="3003"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a424d30f07a7374d3620c454f8e3c5ae7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::LinComb</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, value_type a, const FabArray&lt; FAB &gt; &amp;x, int xcomp, value_type b, const FabArray&lt; FAB &gt; &amp;y, int ycomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>LinComb</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" kindref="member">value_type</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst = a*x + b*y </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar a </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar b </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ycomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1460" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="3008" bodyend="3053"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::SharedMemory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>SharedMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1339" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1339" bodyend="1339"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab5c7582edb11b88faec8de4ccdc1e120" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::AllocFabs</definition>
        <argsstring>(const FabFactory&lt; FAB &gt; &amp;factory, Arena *ar, const Vector&lt; std::string &gt; &amp;tags, bool alloc_single_chunk)</argsstring>
        <name>AllocFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc_single_chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1344" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2071" bodyend="2194"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a693754f4ec64472c486d1d4431d71d8c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab_assert</definition>
        <argsstring>(int K, FAB const &amp;fab) const</argsstring>
        <name>setFab_assert</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type>FAB const &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1348" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2198" bodyend="2206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad37c52d123770b902efbb42a7ba56578" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::build_arrays</definition>
        <argsstring>() const</argsstring>
        <name>build_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1351" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1683" bodyend="1713"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3d078863cd6f3c8fc6ee8929573be274" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::clear_arrays</definition>
        <argsstring>()</argsstring>
        <name>clear_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1353" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1717" bodyend="1729"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An Array of FortranArrayBox(FAB)-like Objects. </para>
    </briefdescription>
    <detaileddescription>
<para>The FabArray&lt;FAB&gt; class implements a collection (stored as an array) of Fortran array box-like ( <computeroutput>FAB</computeroutput> ) objects. The parameterized type <computeroutput>FAB</computeroutput> is intended to be any class derived from BaseFab&lt;T&gt;. For example, <computeroutput>FAB</computeroutput> may be a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> of integers, so we could write:</para>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;<ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab&lt;int&gt;</ref> &gt; int_fabs;</para>
<para>Then int_fabs is a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> that can hold a collection of <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab&lt;int&gt;</ref> objects.</para>
<para><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is not just a general container class for Fortran arrays. It is intended to hold &quot;grid&quot; data for use in finite difference calculations in which the data is defined on a union of (usually disjoint) rectangular regions embedded in a uniform index space. This region, called the valid region, is represented by a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. For the purposes of this discussion, the Kth Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> represents the interior region of the Kth grid.</para>
<para>Since the intent is to be used with finite difference calculations a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> also includes the notion of a boundary region for each grid. The boundary region is specified by the ngrow parameter which tells the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to allocate each <computeroutput>FAB</computeroutput> to be ngrow cells larger in all directions than the underlying Box. The larger region covered by the union of all the <computeroutput>FABs</computeroutput> is called the region of definition. The underlying notion is that the valid region contains the grid interior data and the region of definition includes the interior region plus the boundary areas.</para>
<para>Operations are available to copy data from the valid regions into these boundary areas where the two overlap. The number of components, that is, the number of values that can be stored in each cell of a <computeroutput>FAB</computeroutput>, is either given as an argument to the constructor or is inherent in the definition of the underlying <computeroutput>FAB</computeroutput>. Each <computeroutput>FAB</computeroutput> in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> will have the same number of components.</para>
<para>In summary, a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is an array of <computeroutput>FABs</computeroutput>. The Kth element contains a <computeroutput>FAB</computeroutput> that holds the data for the Kth grid, a Box that defines the valid region of the Kth grid.</para>
<para>A typical use for a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> would be to hold the solution vector or right-hand-side when solving a linear system of equations on a union of rectangular grids. The copy operations would be used to copy data from the valid regions of neighboring grids into the boundary regions after each relaxation step of the iterative method. If a multigrid method is used, a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> could be used to hold the data at each level in the multigrid hierarchy.</para>
<para>This class is a concrete class not a polymorphic one.</para>
<para>This class does NOT provide a copy constructor or assignment operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>FortranArrayBox-like object. Typically a derived class of <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. Not to be confused with <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="34">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="35" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="57">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="18">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>K</label>
      </node>
      <node id="19">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="10">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="1">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="50">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="51" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="3">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="52" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>std::vector&lt; FAB * &gt;</label>
      </node>
      <node id="39">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="40" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="65">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FAB &gt; &gt;</label>
      </node>
      <node id="23">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="8" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="17">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="12">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="43">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="46" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>std::mutex</label>
      </node>
      <node id="44">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="35" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
      </node>
      <node id="46">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="30">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="31" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="13">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="32" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FAB &gt; &gt;</label>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="61">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="29">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="40">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="37">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="38" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="22" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="16">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="47">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="64">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt;</label>
      </node>
      <node id="9">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="10" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FAB &gt; &gt;</label>
      </node>
      <node id="22">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="23" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="35">
        <label>std::string</label>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="56" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="340" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="343" bodyend="1464"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1a0966955f0937e0119cb942c5968ddb15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a3c57732914fe734955ae11ab8561f3b4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ADD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>addThisBD</name></member>
      <member refid="classamrex_1_1FabArray_1ab5c7582edb11b88faec8de4ccdc1e120" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>AllocFabs</name></member>
      <member refid="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>arena</name></member>
      <member refid="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a968d143683b63220ddbded86cf5010a0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a980019a53308f95d935ad936288ef3c1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc3c1d759fbd867cf7d9c806e56c30c7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>box</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4bb7e999eee8c04f07573269b54e39d0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>boxarray</name></member>
      <member refid="classamrex_1_1FabArray_1ad37c52d123770b902efbb42a7ba56578" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>build_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3bb1453b2bf26b145d0553dcaf8332be" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>buildTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad8ef26468982ff9ba6e2fbc5eb8073bb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>bytesOfMapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CFinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CFinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArray_1a3d078863cd6f3c8fc6ee8929573be274" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>clear_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1033b7779ec8b48b594b158fbabe13b4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>clearThisBD</name></member>
      <member refid="classamrex_1_1FabArray_1a202d8ada102cc6fc40749039c0e1f3a7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CMD_local_setVal_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a2064856b8d0efe0ae3e92d91a72f3274" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CMD_remote_setVal_gpu</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab114448634e4d64e8584321d24ba3990" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>comm_tile_size</name></member>
      <member refid="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ae2c5db543d1317f228503a98b47ed796" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>COPY</name></member>
      <member refid="classamrex_1_1FabArray_1a6b28e002648520d4d0349bf94ab3a576" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1adb1c4e9d6b9a2f607e18cc7426bbcef6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab76531d8f4022eaa58de8ba56796e5de" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9b1e2db87b23393e6a9a51718fa451b1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CPCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CpOp</name></member>
      <member refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2099ffa4c81398ed273722ce2ff7b6f3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>define_fb_metadata</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a8c74ba9f034d3ca5e94e21eeef3be455" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>distributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1abd59469241abaab18e1c2db8b7ceb4ed" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>empty</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a4ea567a25f13cd931b2b1e9433eeda5e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fab_type</name></member>
      <member refid="classamrex_1_1FabArray_1a8ab865aabcf79bbf6a6f529cfd8da96a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a657ae8bca91f3f4f77ed6592af1f50c4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a16240683aaab59d05d3659c64723890f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2626dd8a948d7ef6dcb5ea286709ad6e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab81793c2f32c7430eed823483c6c41a4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adce0fffa78b25dbbfa1f82701e579425" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FB_local_copy_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a60891bcadc0382dfc1aaf4df8ad34771" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FB_local_copy_gpu</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9e9131d2e52b3140088bed29299df5e5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a41abb738518224cedd8cfe16206382ba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a4bec341c204bf002ce9ea2d636e94f56" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fbd</name></member>
      <member refid="classamrex_1_1FabArray_1a0ea9d56bb5358f023c121e3631afadd7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9b108f48e43d0b56e3113d2264fdc910" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a3991ba7fcd5f937da838387b027ce7ef" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a73c4ba8aa5ed4620734ba6bbc09bfa6b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a169e9888b603a9c1b97d1876f2e843e2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7c3bcb50994c05df7dbfcd3d63a41249" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ae0a03b23f179e0c50e162387e35ea00b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a59c47cdc663d31e529ec89d3a10c2969" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1af36dee00f70339ae9a3e126bbbc5d56e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1af36dee00f70339ae9a3e126bbbc5d56e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a72d6ae94d21e9c7e846bf634520719c6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a1ae3789788ab4f527e7aec42991b5265" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5e540e836f433cd1d5c5dcb581b2075e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a7c8a47c0924b8c0e06200e38c5eb9a23" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1aa2fe5d6e1efcb3230f3ca23599f2fb47" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a76f3e8ecacb352ca12c35e6b3fa46b10" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1FabArray_1a84ce4d97367dcb2da8be8bddfac2ef4e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundaryAndSync</name></member>
      <member refid="classamrex_1_1FabArray_1a6a2ee6a93d9d13d4f4a1f864f3c767cb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundaryAndSync</name></member>
      <member refid="classamrex_1_1FabArray_1a6cca07036c0a49c4ad881c9138a4041f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundaryAndSync_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ab6a99354331bc87dda4960292d90de4d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundaryAndSync_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1abad0254090cd345d31ab5bb0cb7a82b6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundaryAndSync_nowait</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0f7d18c9334054a0934c2740860971c2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713c123f38e7c4666b28628d59c6e0c9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a16c472ffe97ca76e2ffa59ffceec0931" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6011806b7564dbb0849cc33d57e95a4f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad0036a8cccab0b66956ebdb8fb07d16f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac8219bfa75d50673c667ce09d6cb2d83" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a793ba5ae5a1533bae6a98b901df96664" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af1e359a059abb783d093f29cc1c84693" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushParForCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a38c437b445b30f872df4f5ed6232e9a1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushParForInfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a11436d5c97b9158ac23058287feada66" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushPolarB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a70b561d2ca803ef3488983323339bac6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushPolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac71669e7574424826140208ef85fcc4a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushRB180</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a44faf0f19d9f24cacd58d8396b2c1610" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushRB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab092b4d04401abad6715b550b01dd5b4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushRB90</name></member>
      <member refid="classamrex_1_1FabArrayBase_1abf133627f3fe188828f9cdf811dd8a86" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushRB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a03141dc770d42b5297105bb259b9c8e5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a653b5bd0ac05e183721ba30b5c5dbb55" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a13121d16e1be9ac4ea05a7df793a47fd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FPinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adee16eddda3b226990da74e087c9cfd9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FPinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a26c57d9e401fcc56f720c50f5bfdeb06" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getAllocSingleChunk</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa0cb5039380dc0545d40ac5ac6589943" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaeb133e861baa561ecdcb23aa91ea48a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af08e453541172e394dd9c710f5fc132f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1addc7d9a3237b58405473e60db76f4157" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getParForInfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae6417c14fa4f3f5efacf7ea324a1a3d6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getPolarB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a304ba0bf4637208cfdd1a94098c55637" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getRB180</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1fa0d3a08ed46a79dd0fae8c8f9603af" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getRB90</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a47294c772e3bc6de1c901df4c2aa2b10" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getTileArray</name></member>
      <member refid="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>indexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7a4ed8b70e3aa4c3ddd3a24fb1c0f3a0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>IndexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab9d1477fa7e20518ac22fdb03574a4b2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a60aa58517fd2a7d6976e114df171df25" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>is_cell_centered</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a641ffe22574cc57f3544687b3e23d174" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>is_nodal</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a90447f2e6d22e5e0e06a538fd37063d5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>is_nodal</name></member>
      <member refid="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>isAllRegular</name></member>
      <member refid="classamrex_1_1FabArray_1af5d3da506729e946bd90678a06d09dc2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>isDefined</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5f85b5648838d8d7cf103fbbeaec76be" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>isFusingCandidate</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6512ea611a6c04b5710334d9d9bfbb4e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>isOwner</name></member>
      <member refid="classamrex_1_1FabArray_1a958d272c39f50f1157029d5a0c6ade1c" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>Iterator</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a682fdf86619f6028fea2805d9693ae22" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ixType</name></member>
      <member refid="classamrex_1_1FabArray_1a424d30f07a7374d3620c454f8e3c5ae7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>LinComb</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aabf6dbff99d8524f9c9d082302afdd5e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>local_size</name></member>
      <member refid="classamrex_1_1FabArray_1abd6dc24319471bcd6406fa9da2145197" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>LocalAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a5086d98e3a63866d87afcd150a8170ef" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>LocalCopy</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa848db21ec5426fab2c86d441cd0a314" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>localindex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a12b9e0ac23fbfa55a6ae4d6bf2d97ba8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_alloc_single_chunk</name></member>
      <member refid="classamrex_1_1FabArray_1ab4bfa4857f5d074015204b6caa0cfcf7" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af3d0b759e5fa01a885c95e93e0e9f7b1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_BD_count</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_bdkey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92e87a53eaf353557dfcf6b875123a81" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_CFinfo_stats</name></member>
      <member refid="classamrex_1_1FabArray_1ac30f73f6b587c175fdc34bab68294613" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_const_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acf463c256f5ac08e3c6c71666a682308" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_CPC_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_dallocator</name></member>
      <member refid="classamrex_1_1FabArray_1a0deadb1f742a4e911d7ea64ea80c1292" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_dp_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aef73f8365f2afd099a2293d8f94c7b3e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FA_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5f3f2c05af6fbc9a1e5c59e03133505d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FBC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a34cc63703ab4e2492a4444199def31d2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FPinfo_stats</name></member>
      <member refid="classamrex_1_1FabArray_1abbe02ae23186064d6bae686374657674" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_hp_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1cba13cd9d7009299774b13eb2f49484" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_mem_usage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac8c10e1b5a28a55c6dc388f7df101a97" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_multi_ghost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad2c72c01911307129e1f6124db9cdf36" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_region_tag</name></member>
      <member refid="classamrex_1_1FabArray_1a4d42668928f56c18d43d24f673ebd2ce" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_single_chunk_arena</name></member>
      <member refid="classamrex_1_1FabArray_1a406dbcd37d688080e340c80a34ed2807" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_single_chunk_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa5ab85a3018faa2b983936fa4116cd4f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TAC_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_tags</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa2a265ca0b7ce27ee0f3d66c86fe929d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab58a879dec4546737754f55dd8b600e2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheCrseFineCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6ec51851470b2e1ec57805bad7725268" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acdb408349f86d3e32c29e245a361ba0c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheFillPatchCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3ac3a9247a9551f551256c6a1043e002" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheParForCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8bd69d649f9a0446dbc7ba981c58199a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_ThePolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9549d43d5d9d74ddb7c541d9f3339848" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheRB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac6817d7110b3389ad5ececd0da4e241a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheRB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afc113a32c271a6c406b525795a5d71e0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa36883196eb7b1d039fd1941966a4310" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9be61766811dc57b7c5126f7020cc6bc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>MaxComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b167b63030177e95b45822b38732fec" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mfiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>n_comp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acb3699bf4d436f320a73a9c5239b81cd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>n_filled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>n_grow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92cef599b0ae34401a5463ec6fddc606" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a76a6089045a5d690f809bd0d2e7c51ab" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nGrowFilled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1FabArray_1a62a6ea18e68973543bf8b2a9bab89d8a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>norminf</name></member>
      <member refid="classamrex_1_1FabArray_1aea595d71e8f04b18bc48aaca29acfe77" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>norminf</name></member>
      <member refid="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ok</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a4216d9de507369835a657c156d8b8161" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a11346c64d84d261c3766c76a0b09a032" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>os_temp</name></member>
      <member refid="classamrex_1_1FabArray_1a37eadd5f219d50c8f1c3422f2fa81eb2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>OverrideSync</name></member>
      <member refid="classamrex_1_1FabArray_1a4f7ee90203e2af36c474d9b2234c8cae" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>OverrideSync</name></member>
      <member refid="classamrex_1_1FabArray_1adbc8db61cee190b8779c871001f78057" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>OverrideSync_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a4528c1a098c945ff4f1cef3a812b1af5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>OverrideSync_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a2f1b5bd6a26a0ed12733e9a6ce8b0eb9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>OverrideSync_nowait</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8e414f069d04091245f3e9e94a3aa237" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>OwnerShip</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ownership</name></member>
      <member refid="classamrex_1_1FabArray_1ad369c044980014877a2affbed7e266dd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pack_send_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1abf79f429c979d93fb8a204aae9851054" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pack_send_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a0ec0671737732f4a925a56eb1f138d16" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pack_send_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a44c4542a9504ebedf9c0439ad4f2650b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pack_send_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a4e8ff0027c22d9451a6edff7272fb29a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a221477c8979f6bf89267c68344a25539" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a0f2716c666d8cd0546009503e890f807" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ad8ec59ef48f01ecc242f4b1b6f39248f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a324fc6d24d656da6a5365253b2c9437e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_finish</name></member>
      <member refid="classamrex_1_1FabArray_1aebae9f774cd70cb8f12ec1c807e3d72b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ab34d1096b2cf68e1b0319cdc7b74a35e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a30c574173b6d62fd03e7b1dbf510492c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopyToGhost</name></member>
      <member refid="classamrex_1_1FabArray_1a0144d56dd577bc7e46e1d422f487b1d9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopyToGhost_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a5f80b593666b704bc1646d8c6a2d5af2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopyToGhost_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>PC_local_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a6479ffc5e154a5b21d80e1b6dedb44cf" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>PC_local_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a4a22bada553ad3ff929d91be1b8bfc9f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pcd</name></member>
      <member refid="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aeefdcd1fc2b2d609017e01fa8862c931" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>PolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae3da0c50a11f56d59552e30b45b10741" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>PolarBCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8bf2b5f80cfa6a00fd92a2c10b16720c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>popRegionTag</name></member>
      <member refid="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2a2878413402bf8cff44357bf4964a5d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>printMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a550a79531f98644ed6572f635f854cf7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6c6874f6a073ba5a8fe15d5fc7837a5d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9eae1384b7fc7342c235f99b503fad01" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>queryMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab671a167eb6b1779fa2df2a227931f82" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>queryMemUsageHWM</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7245d3dc29d3e2aade3f28f9319fa76d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>RB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa058b98f7a208d8b6beec36c786cc0b9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>RB180CacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aba31942c259bb854daca8574b393a17f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>RB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a336a5ecfcff59f5dbb7fbba057e2de73" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>RB90CacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>RecvLayoutMask</name></member>
      <member refid="classamrex_1_1FabArray_1a91d4e639cd2eca22c25e9625de833b3a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1a4782a3068c5950a1838e1018f8ff69f5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>release</name></member>
      <member refid="classamrex_1_1FabArray_1a4750acee26c62d569535b66ec2957bca" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>release</name></member>
      <member refid="classamrex_1_1FabArray_1ab3e18d4d369bda7337c541adad0c6cd3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Saxpy</name></member>
      <member refid="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a499aee434c06201cadb658484dda3e37" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a24591060d4412dddb8298001e5f580c5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a01622e62fc6b5438eb72a553287bdfe2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1abf543729d784adfcd6d1a989f4caee9c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a0f8b639b019bb31429a51c718756cafd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a01d769a51d15314e0f36925aa2182c9a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a693754f4ec64472c486d1d4431d71d8c" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab_assert</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7d9c921734d6199c74f9ce44f81eba81" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setMultiGhost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ad51584223d99ae31e86bf9a21c10b7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setNGrowFilled</name></member>
      <member refid="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a93e733b725f64c93f7a5fb2edf88086e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a37c41983a3c0543717a0391f7e054929" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a32d132563b832c544c1ddd9a930789d1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a2c2a565a4a3a422661b062ee2dd5f937" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a2b78f7c0a869eecad1d281d26363cb35" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>shmem</name></member>
      <member refid="classamrex_1_1FabArray_1a223a9902c0f816a42304e047e86b8928" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>singleChunkPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a5641f9e3a5b649c9bd89f57c1c2f8597" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>singleChunkPtr</name></member>
      <member refid="classamrex_1_1FabArray_1aaab9b29e3c145dfb90616774d6954afa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>singleChunkSize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713a78056e395c21e855dcc1ed56525c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>size</name></member>
      <member refid="classamrex_1_1FabArray_1a025b813208a188552aba514a69a3b480" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>sum</name></member>
      <member refid="classamrex_1_1FabArray_1a3df70423b7ec841f351f1e2b1b9cd8d4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a8e4f13e3c2e640f401ef8a191feafe91" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a836ec3561b05f2151a8b299a4bacbec7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a9ed00fc28603314ebf1fb318874b1f64" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1aa686cf52b54e0b077e30c6a5093304cb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ad6c0ef1b3e74b61dbd4990b79686027a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1aa81e576487f7936bb94111a236308f68" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a722163b7587e2755a9e7bb885c788571" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a6ec9ed02407bad1f6399c0a1c1983749" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>TACache</name></member>
      <member refid="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>tags</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>TAMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a583784f4a6e46aacd6f953de8d6f4fb0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>TheCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac2344224d72849f0e7fe1888d150a550" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>TheFPinfo</name></member>
      <member refid="classamrex_1_1FabArray_1a6251aaa8ffe703d3eb8a259393471a5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>unpack_recv_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1ad3f362d93f85699c530e36d2f78193ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>unpack_recv_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a8c6dd4507f03d916f85476d2571a10c3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>unpack_recv_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a34105be3fcf0be0cc074081b0667441f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>unpack_recv_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>updateBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7022fe872e97df24058250928b3d84b6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>updateMemUsage</name></member>
      <member refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FabArray_1a742793255ff2aed0213773f989cc8394" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Xpay</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>~FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a58a43e40ea0bcd02334490f1126c6d7f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>~FabArrayBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
