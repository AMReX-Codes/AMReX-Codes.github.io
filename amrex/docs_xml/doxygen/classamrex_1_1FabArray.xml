<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1FabArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabArray</compoundname>
    <includes refid="AMReX__BaseFwd_8H" local="no">AMReX_BaseFwd.H</includes>
    <innerclass refid="structamrex_1_1FabArray_1_1FABType" prot="public">amrex::FabArray::FABType</innerclass>
    <innerclass refid="structamrex_1_1FabArray_1_1ShMem" prot="protected">amrex::FabArray::ShMem</innerclass>
    <templateparamlist>
      <param>
        <type>class FAB</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" static="no">
        <type>typename std::conditional&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB &gt;::value, FAB, <ref refid="structamrex_1_1FabArray_1_1FABType" kindref="compound">FABType</ref> &gt;::type::value_type</type>
        <definition>using amrex::FabArray&lt; FAB &gt;::value_type =  typename std::conditional&lt;IsBaseFab&lt;FAB&gt;::value, FAB, FABType&gt;::type::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="279" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="279" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" static="no">
        <type>std::vector&lt; FAB * &gt;::iterator</type>
        <definition>typedef std::vector&lt;FAB*&gt;::iterator amrex::FabArray&lt; FAB &gt;::Iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1062" column="48" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1062" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FabFactory&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="989" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1DataAllocator" kindref="compound">DataAllocator</ref></type>
        <definition>DataAllocator amrex::FabArray&lt; FAB &gt;::m_dallocator</definition>
        <argsstring></argsstring>
        <name>m_dallocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="990" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::define_function_called</definition>
        <argsstring></argsstring>
        <name>define_function_called</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="992" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; FAB * &gt;</type>
        <definition>std::vector&lt;FAB*&gt; amrex::FabArray&lt; FAB &gt;::m_fabs_v</definition>
        <argsstring></argsstring>
        <name>m_fabs_v</name>
        <briefdescription>
<para>The data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="996" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a0deadb1f742a4e911d7ea64ea80c1292" prot="protected" static="no" mutable="yes">
        <type>void *</type>
        <definition>void* amrex::FabArray&lt; FAB &gt;::m_dp_arrays</definition>
        <argsstring></argsstring>
        <name>m_dp_arrays</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="999" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1abbe02ae23186064d6bae686374657674" prot="protected" static="no" mutable="yes">
        <type>void *</type>
        <definition>void* amrex::FabArray&lt; FAB &gt;::m_hp_arrays</definition>
        <argsstring></argsstring>
        <name>m_hp_arrays</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1001" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1001" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1ab4bfa4857f5d074015204b6caa0cfcf7" prot="protected" static="no" mutable="yes">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>MultiArray4&lt;value_type&gt; amrex::FabArray&lt; FAB &gt;::m_arrays</definition>
        <argsstring></argsstring>
        <name>m_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1002" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1ac30f73f6b587c175fdc34bab68294613" prot="protected" static="no" mutable="yes">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>MultiArray4&lt;value_type const&gt; amrex::FabArray&lt; FAB &gt;::m_const_arrays</definition>
        <argsstring></argsstring>
        <name>m_const_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1003" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::FabArray&lt; FAB &gt;::m_tags</definition>
        <argsstring></argsstring>
        <name>m_tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1005" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FabArray_1_1ShMem" kindref="compound">ShMem</ref></type>
        <definition>ShMem amrex::FabArray&lt; FAB &gt;::shmem</definition>
        <argsstring></argsstring>
        <name>shmem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1057" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1057" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a4bec341c204bf002ce9ea2d636e94f56" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1FBData" kindref="compound">FBData</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FBData&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::fbd</definition>
        <argsstring></argsstring>
        <name>fbd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1119" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a4a22bada553ad3ff929d91be1b8bfc9f" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1PCData" kindref="compound">PCData</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;PCData&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::pcd</definition>
        <argsstring></argsstring>
        <name>pcd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1121" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>()</argsstring>
        <name>FabArray</name>
        <briefdescription>
<para>Constructs an empty FabArray&lt;FAB&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="283" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1479" bodyend="1483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Construct a FabArray&lt;FAB&gt; with a valid region defined by bxs and a region of definition defined by the grow factor ngrow and the number of components nvar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="290" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1486" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="302" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1496" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="314" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1510" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::~FabArray</definition>
        <argsstring>()</argsstring>
        <name>~FabArray</name>
        <briefdescription>
<para>The destructor <ndash/> deletes all FABs in the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="317" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1581" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>FabArray</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="319" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1532" bodyend="1550"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt; FAB &gt; &amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="320" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1554" bodyend="1578"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="322" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="323" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <reimplementedby refid="classamrex_1_1MultiFab_1a0d8c379908b048cb742470011c502084">define</reimplementedby>
        <reimplementedby refid="classamrex_1_1iMultiFab_1a5ac868702f5d6d3c8ced0bd5c1b64c5d">define</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Define this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> identically to that performed by the constructor having an analogous function signature. This is only valid if this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> was defined using the default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="331" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1617" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <reimplementedby refid="classamrex_1_1MultiFab_1a051387c994b547b900dadc07c4141352">define</reimplementedby>
        <reimplementedby refid="classamrex_1_1iMultiFab_1a281e5d5ab94b2da37746b48219a29f9b">define</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="343" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1629" bodyend="1658"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
        <definition>const FabFactory&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::Factory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="355" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::FabArray&lt; FAB &gt;::arena</definition>
        <argsstring>() const noexcept</argsstring>
        <name>arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="358" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
        <definition>const Vector&lt;std::string&gt;&amp; amrex::FabArray&lt; FAB &gt;::tags</definition>
        <argsstring>() const noexcept</argsstring>
        <name>tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="360" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="360" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::hasEBFabFactory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasEBFabFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="362" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="362" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::isAllRegular</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAllRegular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="371" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="371" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::ok</definition>
        <argsstring>() const</argsstring>
        <name>ok</name>
        <briefdescription>
<para>Return true if the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is well-defined. That is, the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> has a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, the FABs are allocated for each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and the sizes of the FABs and the number of components are consistent with the definition of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="391" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1589" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="394" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="397" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="400" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="400" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="403" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="403" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="406" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="406" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="409" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="412" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="412" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="415" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::atLocalIdx</definition>
        <argsstring>(int L) noexcept</argsstring>
        <name>atLocalIdx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with local index L. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="418" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="418" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::atLocalIdx</definition>
        <argsstring>(int L) const noexcept</argsstring>
        <name>atLocalIdx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="419" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return pointer to FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="422" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1155" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB const  *</type>
        <definition>FAB const  * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="423" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1165" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="424" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1175" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>FAB const  *</type>
        <definition>FAB const  * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>fabPtr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="425" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1184" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::prefetchToHost</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>prefetchToHost</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="428" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1194" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::prefetchToDevice</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>prefetchToDevice</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="431" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1206" bodyend="1213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="434" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1218" bodyend="1221"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="437" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1226" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="440" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1234" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="443" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1242" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="446" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1250" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="449" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1258" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="452" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1266" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="455" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1274" bodyend="1277"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K, int start_comp) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="458" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1282" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K, int start_comp) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="461" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1290" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(const MFIter &amp;mfi, int start_comp) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="464" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1298" bodyend="1301"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_array</definition>
        <argsstring>(int K, int start_comp) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="467" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1306" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a968d143683b63220ddbded86cf5010a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>MultiArray4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::arrays</definition>
        <argsstring>() noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="470" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1314" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a980019a53308f95d935ad936288ef3c1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>MultiArray4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="473" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1323" bodyend="1327"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae2c5db543d1317f228503a98b47ed796" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>MultiArray4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::const_arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="476" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1332" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af68b446a1fcbac3b613ed9404ccb67d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(int K, std::unique_ptr&lt; FAB &gt; elem)</argsstring>
        <name>setFab</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; FAB &gt;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the Kth FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="479" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1785" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7fe02e7cced6aadd20cee89b41afef8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_move_constructible&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(int K, FAB &amp;&amp;elem)</argsstring>
        <name>setFab</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type>FAB &amp;&amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the Kth FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="483" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1807" bodyend="1824"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0f8b639b019bb31429a51c718756cafd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(const MFIter &amp;mfi, std::unique_ptr&lt; FAB &gt; elem)</argsstring>
        <name>setFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; FAB &gt;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the FAB associated with mfi in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="486" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1828" bodyend="1845"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a01d769a51d15314e0f36925aa2182c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_move_constructible&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(const MFIter &amp;mfi, FAB &amp;&amp;elem)</argsstring>
        <name>setFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>FAB &amp;&amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the FAB associated with mfi in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="490" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1850" bodyend="1867"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4782a3068c5950a1838e1018f8ff69f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> FAB *</type>
        <definition>AMREX_NODISCARD FAB * amrex::FabArray&lt; FAB &gt;::release</definition>
        <argsstring>(int K)</argsstring>
        <name>release</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Release ownership of the FAB. This function is not thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="494" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1371" bodyend="1385"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4750acee26c62d569535b66ec2957bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> FAB *</type>
        <definition>AMREX_NODISCARD FAB * amrex::FabArray&lt; FAB &gt;::release</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>release</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Release ownership of the FAB. This function is not thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="498" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1390" bodyend="1404"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Releases FAB memory in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; addThisBD is called in define</para>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="501" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1408" bodyend="1444"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="505" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1970" bodyend="1973"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(value_type val)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="509" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1978" bodyend="1981"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp to val. Also set the value of nghost boundary cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="517" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1986" bodyend="1992"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="523" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1997" bodyend="2032"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp, as well as nghost boundary cells, to val, provided they also intersect with the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="535" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2037" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="542" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2049" bodyend="2091"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="552" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1449" bodyend="1452"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="555" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1457" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells, that also intersect the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="563" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1465" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="566" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1473" bodyend="1476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int num_comp, int nghost=0)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="569" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2096" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="572" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2104" bodyend="2135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="575" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2140" bodyend="2169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="578" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2174" bodyend="2207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="581" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2212" bodyend="2241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="584" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2246" bodyend="2279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="587" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2284" bodyend="2313"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="590" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2318" bodyend="2351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all values in the boundary region to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="594" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1872" bodyend="1875"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Set ncomp values in the boundary region, starting at start_comp to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="598" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1880" bodyend="1894"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a499aee434c06201cadb658484dda3e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, const Geometry &amp;geom)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Set all values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="602" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1899" bodyend="1902"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a24591060d4412dddb8298001e5f580c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp, const Geometry &amp;geom)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Set ncomp values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val, starting at start_comp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="606" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1907" bodyend="1933"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from fa to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in fa is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the valid regions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="614" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="614" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="617" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="617" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="623" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="623" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abde39eb49207b481b280b1386e828abb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="628" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="628" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a27a082106b94896a38832117858407b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="631" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="631" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from src to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in src is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the num_comp components starting at src_comp in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> src, with the destination components in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> starting at dest_comp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="644" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="644" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="650" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="650" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="659" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="659" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="667" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="667" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="673" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="673" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Similar to the above function, except that source and destination are grown by src_nghost and dst_nghost, respectively. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="682" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="682" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="691" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="691" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="699" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="699" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY, const FabArrayBase::CPC *a_cpc=nullptr)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> *</type>
          <declname>a_cpc</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="708" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="718" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="718" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="728" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="728" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="738" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="738" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a78457b34f328569ed1bc6065baff53c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy_nowait</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY, const FabArrayBase::CPC *a_cpc=nullptr)</argsstring>
        <name>ParallelCopy_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> *</type>
          <declname>a_cpc</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="749" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a066e3ab046b92e144075c8f9df4aaf04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::ParallelCopy_finish</definition>
        <argsstring>()</argsstring>
        <name>ParallelCopy_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="759" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="471" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="762" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="762" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="773" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="773" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::Redistribute</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>Redistribute</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to this. this and src have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, but different <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="784" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="801" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>brief Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest into dest. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="798" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1941" bodyend="1945"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa19dd0482e00be1e43cd9c37d60aa0b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, const Box &amp;subbox, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest and the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> subbox into that subregion of dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="806" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1949" bodyend="1954"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a307d4ba571507f21248861f1755fcb7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int src_comp, int dest_comp, int num_comp, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest into dest, starting at component dest_comp in dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="816" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1958" bodyend="1965"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a81b037f6ed7b60e5dc95d11512468187" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, const Box &amp;subbox, int src_comp, int dest_comp, int num_comp, int nghost=0) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest and the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> subbox, into dest, starting at component dest_comp in dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="828" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::shift</definition>
        <argsstring>(const IntVect &amp;v)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift the boxarray by vector v. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="836" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2355" bodyend="2370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>defined</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="838" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1129" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>defined</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="839" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1142" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy on intersection within a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Data is copied from valid regions to intersecting regions of definition. The purpose is to fill in the boundary regions of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. If cross=true, corner cells are not filled. If the length of periodic is provided, periodic boundaries are also filled. Note that <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> itself does not contains any periodicity information. FillBoundary expects that its cell-centered version of its <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is non-overlapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="852" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2374" bodyend="2381"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="854" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2385" bodyend="2392"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1ed9770416d4f7f30e3ff2e194d028f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="855" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2396" bodyend="2405"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as <ref refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" kindref="member">FillBoundary()</ref>, but only copies ncomp components starting at scomp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="858" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2409" bodyend="2416"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="859" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2420" bodyend="2427"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="860" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2431" bodyend="2441"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="862" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2445" bodyend="2448"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="863" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2452" bodyend="2455"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="864" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2459" bodyend="2462"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="865" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2569" bodyend="2573"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="866" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2577" bodyend="2582"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="868" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FillBoundary_test</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="870" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="841" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3df70423b7ec841f351f1e2b1b9cd8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sum values in overlapped cells. The destination is limited to valid cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="875" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2466" bodyend="2469"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8e4f13e3c2e640f401ef8a191feafe91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="876" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2473" bodyend="2476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad6c0ef1b3e74b61dbd4990b79686027a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_nowait</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="877" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2490" bodyend="2493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa81e576487f7936bb94111a236308f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="878" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2497" bodyend="2500"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad168d755fd708b5bcf609d710f82d7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary</definition>
        <argsstring>(int scomp, int ncomp, IntVect const &amp;ngrow, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sum values in overlapped cells. The destination is limited to valid + ngrow cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="883" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2480" bodyend="2486"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af3c167fcabb7385ac46d377690f0f929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, IntVect const &amp;ngrow, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>SumBoundary_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="885" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2504" bodyend="2517"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa686cf52b54e0b077e30c6a5093304cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::SumBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>SumBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="887" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2521" bodyend="2531"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Fill cells outside periodic domains with their corresponding cells inside the domain. Ghost cells are treated the same as valid cells. The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is allowed to be overlapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="893" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2535" bodyend="2542"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="894" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2546" bodyend="2553"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="895" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2557" bodyend="2565"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::BuildMask</definition>
        <argsstring>(const Box &amp;phys_domain, const Periodicity &amp;period, value_type covered, value_type notcovered, value_type physbnd, value_type interior)</argsstring>
        <name>BuildMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>phys_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>covered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>notcovered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>physbnd</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>interior</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="905" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2587" bodyend="2648"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only=false)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="912" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FB_local_copy_cpu</definition>
        <argsstring>(const FB &amp;TheFB, int scomp, int ncomp)</argsstring>
        <name>FB_local_copy_cpu</name>
        <param>
          <type>const FB &amp;</type>
          <declname>TheFB</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="916" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="360" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::PC_local_cpu</definition>
        <argsstring>(const CPC &amp;thecpc, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp, CpOp op)</argsstring>
        <name>PC_local_cpu</name>
        <param>
          <type>const CPC &amp;</type>
          <declname>thecpc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="917" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PCI.H" bodystart="6" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aaad9347944887bc14f15277d45585d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type x, const CommMetaData &amp;thecmd, int scomp, int ncomp)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const CommMetaData &amp;</type>
          <declname>thecmd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="921" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2653" bodyend="2688"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>LayoutData&lt; int &gt; amrex::FabArray&lt; FAB &gt;::RecvLayoutMask</definition>
        <argsstring>(const CommMetaData &amp;thecmd)</argsstring>
        <name>RecvLayoutMask</name>
        <param>
          <type>const CommMetaData &amp;</type>
          <declname>thecmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="924" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="2693" bodyend="2722"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a60891bcadc0382dfc1aaf4df8ad34771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FB_local_copy_gpu</definition>
        <argsstring>(const FB &amp;TheFB, int scomp, int ncomp)</argsstring>
        <name>FB_local_copy_gpu</name>
        <param>
          <type>const FB &amp;</type>
          <declname>TheFB</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="928" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="421" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6479ffc5e154a5b21d80e1b6dedb44cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::PC_local_gpu</definition>
        <argsstring>(const CPC &amp;thecpc, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp, CpOp op)</argsstring>
        <name>PC_local_gpu</name>
        <param>
          <type>const CPC &amp;</type>
          <declname>thecpc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="929" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PCI.H" bodystart="88" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a202d8ada102cc6fc40749039c0e1f3a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::CMD_local_setVal_gpu</definition>
        <argsstring>(value_type x, const CommMetaData &amp;thecmd, int scomp, int ncomp)</argsstring>
        <name>CMD_local_setVal_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const CommMetaData &amp;</type>
          <declname>thecmd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="932" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="487" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2064856b8d0efe0ae3e92d91a72f3274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::CMD_remote_setVal_gpu</definition>
        <argsstring>(value_type x, const CommMetaData &amp;thecmd, int scomp, int ncomp)</argsstring>
        <name>CMD_remote_setVal_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const CommMetaData &amp;</type>
          <declname>thecmd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="933" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="517" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0e0073142d1598838048317216fa6d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <declname>Z</declname>
            <defname>Z</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="8" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="8" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <declname>Z</declname>
            <defname>Z</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="165" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="165" bodyend="243"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7904811e2a83af68b16bd6c6bd9bce6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::pack_send_buffer_gpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;src, int scomp, int ncomp, Vector&lt; char * &gt; const &amp;send_data, Vector&lt; std::size_t &gt; const &amp;send_size, Vector&lt; const CopyComTagsContainer * &gt; const &amp;send_cctc)</argsstring>
        <name>pack_send_buffer_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>send_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const CopyComTagsContainer * &gt; const &amp;</type>
          <declname>send_cctc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="961" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="884" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adb64751b92238db7f01db95d9ef45ed9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::unpack_recv_buffer_gpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, int dcomp, int ncomp, Vector&lt; char * &gt; const &amp;recv_data, Vector&lt; std::size_t &gt; const &amp;recv_size, Vector&lt; const CopyComTagsContainer * &gt; const &amp;recv_cctc, CpOp op, bool is_thread_safe)</argsstring>
        <name>unpack_recv_buffer_gpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>recv_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>recv_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const CopyComTagsContainer * &gt; const &amp;</type>
          <declname>recv_cctc</declname>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_thread_safe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="966" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="943" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a345e1546f8ae1dcca4a44a140abe8483" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::pack_send_buffer_cpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;src, int scomp, int ncomp, Vector&lt; char * &gt; const &amp;send_data, Vector&lt; std::size_t &gt; const &amp;send_size, Vector&lt; const CopyComTagsContainer * &gt; const &amp;send_cctc)</argsstring>
        <name>pack_send_buffer_cpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>send_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const CopyComTagsContainer * &gt; const &amp;</type>
          <declname>send_cctc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="974" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="1057" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1add9c8df1fdfd199b240988bfd3a43d87" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::unpack_recv_buffer_cpu</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, int dcomp, int ncomp, Vector&lt; char * &gt; const &amp;recv_data, Vector&lt; std::size_t &gt; const &amp;recv_size, Vector&lt; const CopyComTagsContainer * &gt; const &amp;recv_cctc, CpOp op, bool is_thread_safe)</argsstring>
        <name>unpack_recv_buffer_cpu</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; const &amp;</type>
          <declname>recv_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::size_t &gt; const &amp;</type>
          <declname>recv_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const CopyComTagsContainer * &gt; const &amp;</type>
          <declname>recv_cctc</declname>
        </param>
        <param>
          <type>CpOp</type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_thread_safe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="979" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="1095" bodyend="1183"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::SharedMemory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>SharedMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1059" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1059" bodyend="1059"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::AllocFabs</definition>
        <argsstring>(const FabFactory&lt; FAB &gt; &amp;factory, Arena *ar, const Vector&lt; std::string &gt; &amp;tags)</argsstring>
        <name>AllocFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1064" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1662" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a693754f4ec64472c486d1d4431d71d8c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab_assert</definition>
        <argsstring>(int K, FAB const &amp;fab) const</argsstring>
        <name>setFab_assert</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <param>
          <type>FAB const &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1067" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1774" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad37c52d123770b902efbb42a7ba56578" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
            <defval>FAB</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; F &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::build_arrays</definition>
        <argsstring>() const</argsstring>
        <name>build_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="1070" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="1341" bodyend="1366"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="12" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="2">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="3" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="4" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="7" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="4">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="3">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="4" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFwd.H" line="8" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFwd.H" bodystart="8" bodyend="-1"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>AllocFabs</name></member>
      <member refid="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>arena</name></member>
      <member refid="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a968d143683b63220ddbded86cf5010a0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a980019a53308f95d935ad936288ef3c1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad37c52d123770b902efbb42a7ba56578" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>build_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArray_1a202d8ada102cc6fc40749039c0e1f3a7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CMD_local_setVal_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a2064856b8d0efe0ae3e92d91a72f3274" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CMD_remote_setVal_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ae2c5db543d1317f228503a98b47ed796" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>const_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1aa19dd0482e00be1e43cd9c37d60aa0b2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a307d4ba571507f21248861f1755fcb7c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a81b037f6ed7b60e5dc95d11512468187" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FB_local_copy_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a60891bcadc0382dfc1aaf4df8ad34771" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FB_local_copy_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a4bec341c204bf002ce9ea2d636e94f56" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fbd</name></member>
      <member refid="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a0e0073142d1598838048317216fa6d12" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a1ed9770416d4f7f30e3ff2e194d028f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>isAllRegular</name></member>
      <member refid="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>Iterator</name></member>
      <member refid="classamrex_1_1FabArray_1ab4bfa4857f5d074015204b6caa0cfcf7" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1ac30f73f6b587c175fdc34bab68294613" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_const_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_dallocator</name></member>
      <member refid="classamrex_1_1FabArray_1a0deadb1f742a4e911d7ea64ea80c1292" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_dp_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArray_1abbe02ae23186064d6bae686374657674" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_hp_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_tags</name></member>
      <member refid="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ok</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a345e1546f8ae1dcca4a44a140abe8483" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pack_send_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a7904811e2a83af68b16bd6c6bd9bce6a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pack_send_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1abde39eb49207b481b280b1386e828abb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a066e3ab046b92e144075c8f9df4aaf04" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a27a082106b94896a38832117858407b9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a78457b34f328569ed1bc6065baff53c0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>PC_local_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a6479ffc5e154a5b21d80e1b6dedb44cf" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>PC_local_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a4a22bada553ad3ff929d91be1b8bfc9f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>pcd</name></member>
      <member refid="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>RecvLayoutMask</name></member>
      <member refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1a4782a3068c5950a1838e1018f8ff69f5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>release</name></member>
      <member refid="classamrex_1_1FabArray_1a4750acee26c62d569535b66ec2957bca" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>release</name></member>
      <member refid="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a499aee434c06201cadb658484dda3e37" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a24591060d4412dddb8298001e5f580c5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1af68b446a1fcbac3b613ed9404ccb67d1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a7fe02e7cced6aadd20cee89b41afef8e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a0f8b639b019bb31429a51c718756cafd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a01d769a51d15314e0f36925aa2182c9a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a693754f4ec64472c486d1d4431d71d8c" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab_assert</name></member>
      <member refid="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aaad9347944887bc14f15277d45585d84" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>shmem</name></member>
      <member refid="classamrex_1_1FabArray_1a3df70423b7ec841f351f1e2b1b9cd8d4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a8e4f13e3c2e640f401ef8a191feafe91" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad168d755fd708b5bcf609d710f82d7ef" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1aa686cf52b54e0b077e30c6a5093304cb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ad6c0ef1b3e74b61dbd4990b79686027a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1aa81e576487f7936bb94111a236308f68" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af3c167fcabb7385ac46d377690f0f929" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>tags</name></member>
      <member refid="classamrex_1_1FabArray_1add9c8df1fdfd199b240988bfd3a43d87" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>unpack_recv_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1adb64751b92238db7f01db95d9ef45ed9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>unpack_recv_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>~FabArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
