<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1Parser" kind="class" language="C++" prot="public">
    <compoundname>amrex::Parser</compoundname>
    <includes refid="AMReX__Parser_8H" local="no">AMReX_Parser.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Parser_1aca543eaeca8c30f6bc8fe87ec274eac7" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Parser::m_expression</definition>
        <argsstring></argsstring>
        <name>m_expression</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="84" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Parser_1a3aa5da2c5ae28b4e8b2651d645665469" prot="private" static="no" mutable="no">
        <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
        <definition>struct amrex_parser* amrex::Parser::m_parser</definition>
        <argsstring></argsstring>
        <name>m_parser</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="85" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Parser_1a40b3bb3eeaf987385f81a2467100b50e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Parser::m_nvars</definition>
        <argsstring></argsstring>
        <name>m_nvars</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="86" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Parser_1a83c3f851d6a459e4d7023025587caa5a" prot="private" static="no" mutable="yes">
        <type>char *</type>
        <definition>char* amrex::Parser::m_host_executor</definition>
        <argsstring></argsstring>
        <name>m_host_executor</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="87" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Parser_1a4d7d19981d12fc28c81c5d87302ffd14" prot="private" static="no" mutable="yes">
        <type>char *</type>
        <definition>char* amrex::Parser::m_device_executor</definition>
        <argsstring></argsstring>
        <name>m_device_executor</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="89" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Parser_1a6c45b0ac549d682e55f6b8366d9b3fc1" prot="private" static="no" mutable="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Parser::m_max_stack_size</definition>
        <argsstring></argsstring>
        <name>m_max_stack_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="91" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Parser_1a9829ccc584238c1042b7c1ef25b69685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::Parser</definition>
        <argsstring>(std::string const &amp;func_body)</argsstring>
        <name>Parser</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>func_body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="61" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a979ec2bb844542bdd274c04010282c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::Parser</definition>
        <argsstring>()=default</argsstring>
        <name>Parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1abdb30b6438c497e1da632eef58c386bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::~Parser</definition>
        <argsstring>()</argsstring>
        <name>~Parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="63" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a47d09b414b7b5b8e369c3b58819676fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::define</definition>
        <argsstring>(std::string const &amp;func_body)</argsstring>
        <name>define</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>func_body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="18" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a7b646848d23d8e9b8ecd6c5695a29bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::setConstant</definition>
        <argsstring>(std::string const &amp;name, amrex::Real c)</argsstring>
        <name>setConstant</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="66" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1ac7f2281fb9a99b8c410d9cbc0b20b67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::registerVariables</definition>
        <argsstring>(Vector&lt; std::string &gt; const &amp;vars)</argsstring>
        <name>registerVariables</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; const &amp;</type>
          <declname>vars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="68" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a217d48dc80e0448899823a0d47460d8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="70" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1ae8f69b337a650c2a73a3aa33dad35064" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Parser::depth</definition>
        <argsstring>() const</argsstring>
        <name>depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="72" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a27dc3946de52071f374c1a11e6182bad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Parser::maxStackSize</definition>
        <argsstring>() const</argsstring>
        <name>maxStackSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="73" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a0f04178345ce7a2b52355e44d8e28968" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string const  &amp;</type>
        <definition>std::string const  &amp; amrex::Parser::expr</definition>
        <argsstring>() const</argsstring>
        <name>expr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="75" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a0dfb30d6386a630f676982f25fb24a06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt; std::string &gt; amrex::Parser::symbols</definition>
        <argsstring>() const</argsstring>
        <name>symbols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="77" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a84c2f77f7586faf9e89ef87489297bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1ParserExecutor" kindref="compound">ParserExecutor</ref>&lt; N &gt;</type>
        <definition>ParserExecutor&lt; N &gt; amrex::Parser::compile</definition>
        <argsstring>() const</argsstring>
        <name>compile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="79" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="96" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Parser_1a923a57159dca2eca1fc8bb5f418351e5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="82" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="39" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5">
        <label>Real</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="4">
        <label>amrex::parser_nvp</label>
        <link refid="unionamrex_1_1parser__nvp"/>
        <childnode refid="3" relation="usage">
          <edgelabel>n</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>v</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::Parser</label>
        <link refid="classamrex_1_1Parser"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_parser</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_expression</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::parser_node</label>
        <link refid="structamrex_1_1parser__node"/>
        <childnode refid="3" relation="usage">
          <edgelabel>l</edgelabel>
          <edgelabel>r</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>lvp</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::amrex_parser</label>
        <link refid="structamrex_1_1amrex__parser"/>
        <childnode refid="3" relation="usage">
          <edgelabel>ast</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="58" bodyend="92"/>
    <listofallmembers>
      <member refid="classamrex_1_1Parser_1a923a57159dca2eca1fc8bb5f418351e5" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>clear</name></member>
      <member refid="classamrex_1_1Parser_1a84c2f77f7586faf9e89ef87489297bfa" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>compile</name></member>
      <member refid="classamrex_1_1Parser_1a47d09b414b7b5b8e369c3b58819676fb" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>define</name></member>
      <member refid="classamrex_1_1Parser_1ae8f69b337a650c2a73a3aa33dad35064" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>depth</name></member>
      <member refid="classamrex_1_1Parser_1a0f04178345ce7a2b52355e44d8e28968" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>expr</name></member>
      <member refid="classamrex_1_1Parser_1a4d7d19981d12fc28c81c5d87302ffd14" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_device_executor</name></member>
      <member refid="classamrex_1_1Parser_1aca543eaeca8c30f6bc8fe87ec274eac7" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_expression</name></member>
      <member refid="classamrex_1_1Parser_1a83c3f851d6a459e4d7023025587caa5a" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_host_executor</name></member>
      <member refid="classamrex_1_1Parser_1a6c45b0ac549d682e55f6b8366d9b3fc1" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_max_stack_size</name></member>
      <member refid="classamrex_1_1Parser_1a40b3bb3eeaf987385f81a2467100b50e" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_nvars</name></member>
      <member refid="classamrex_1_1Parser_1a3aa5da2c5ae28b4e8b2651d645665469" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_parser</name></member>
      <member refid="classamrex_1_1Parser_1a27dc3946de52071f374c1a11e6182bad" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>maxStackSize</name></member>
      <member refid="classamrex_1_1Parser_1a9829ccc584238c1042b7c1ef25b69685" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>Parser</name></member>
      <member refid="classamrex_1_1Parser_1a979ec2bb844542bdd274c04010282c19" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>Parser</name></member>
      <member refid="classamrex_1_1Parser_1a217d48dc80e0448899823a0d47460d8b" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>print</name></member>
      <member refid="classamrex_1_1Parser_1ac7f2281fb9a99b8c410d9cbc0b20b67b" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>registerVariables</name></member>
      <member refid="classamrex_1_1Parser_1a7b646848d23d8e9b8ecd6c5695a29bbf" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>setConstant</name></member>
      <member refid="classamrex_1_1Parser_1a0dfb30d6386a630f676982f25fb24a06" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>symbols</name></member>
      <member refid="classamrex_1_1Parser_1abdb30b6438c497e1da632eef58c386bc" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>~Parser</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
