<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1Parser" kind="class" language="C++" prot="public">
    <compoundname>amrex::Parser</compoundname>
    <includes refid="AMReX__Parser_8H" local="no">AMReX_Parser.H</includes>
    <innerclass refid="structamrex_1_1Parser_1_1Data" prot="private">amrex::Parser::Data</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Parser_1a24953b8ef5ef372c2ca196d8592053e1" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1Parser_1_1Data" kindref="compound">Data</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Data&gt; amrex::Parser::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <qualifiedname>amrex::Parser::m_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="118" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Parser_1a38fbb1b724d2f5ea93477b942c1b589c" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::Parser::m_vars</definition>
        <argsstring></argsstring>
        <name>m_vars</name>
        <qualifiedname>amrex::Parser::m_vars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="119" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="119" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Parser_1a9829ccc584238c1042b7c1ef25b69685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::Parser</definition>
        <argsstring>(std::string const &amp;func_body)</argsstring>
        <name>Parser</name>
        <qualifiedname>amrex::Parser::Parser</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>func_body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="70" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a979ec2bb844542bdd274c04010282c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::Parser</definition>
        <argsstring>()=default</argsstring>
        <name>Parser</name>
        <qualifiedname>amrex::Parser::Parser</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="71" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a47d09b414b7b5b8e369c3b58819676fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::define</definition>
        <argsstring>(std::string const &amp;func_body)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::Parser::define</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>func_body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="72" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="18" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a1463e62b561526c2d4932222cbd663fc" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <qualifiedname>amrex::Parser::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="74" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1abce888c0693fdd70003a6177b18d06a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::setConstant</definition>
        <argsstring>(std::string const &amp;name, double c)</argsstring>
        <name>setConstant</name>
        <qualifiedname>amrex::Parser::setConstant</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="76" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1ac7f2281fb9a99b8c410d9cbc0b20b67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::registerVariables</definition>
        <argsstring>(Vector&lt; std::string &gt; const &amp;vars)</argsstring>
        <name>registerVariables</name>
        <qualifiedname>amrex::Parser::registerVariables</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; const &amp;</type>
          <declname>vars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="78" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a217d48dc80e0448899823a0d47460d8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <qualifiedname>amrex::Parser::print</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="80" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1aa3e51f354702ada83a42fa17d6450ff1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::printExe</definition>
        <argsstring>() const</argsstring>
        <name>printExe</name>
        <qualifiedname>amrex::Parser::printExe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="81" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="133" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1ae8f69b337a650c2a73a3aa33dad35064" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Parser::depth</definition>
        <argsstring>() const</argsstring>
        <name>depth</name>
        <qualifiedname>amrex::Parser::depth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="93" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a27dc3946de52071f374c1a11e6182bad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Parser::maxStackSize</definition>
        <argsstring>() const</argsstring>
        <name>maxStackSize</name>
        <qualifiedname>amrex::Parser::maxStackSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="84" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="103" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a39e13b29c0ab51b5a27264c706a1d7a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::Parser::expr</definition>
        <argsstring>() const</argsstring>
        <name>expr</name>
        <qualifiedname>amrex::Parser::expr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="86" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="113" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a0dfb30d6386a630f676982f25fb24a06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt; std::string &gt; amrex::Parser::symbols</definition>
        <argsstring>() const</argsstring>
        <name>symbols</name>
        <qualifiedname>amrex::Parser::symbols</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="88" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a84c2f77f7586faf9e89ef87489297bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1ParserExecutor" kindref="compound">ParserExecutor</ref>&lt; N &gt;</type>
        <definition>ParserExecutor&lt; N &gt; amrex::Parser::compile</definition>
        <argsstring>() const</argsstring>
        <name>compile</name>
        <qualifiedname>amrex::Parser::compile</qualifiedname>
        <briefdescription>
<para>This compiles for both GPU and CPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="91" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="172" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a2bcb71246d0395f1f9c3ce37e2286c09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1ParserExecutor" kindref="compound">ParserExecutor</ref>&lt; N &gt;</type>
        <definition>ParserExecutor&lt; N &gt; amrex::Parser::compileHost</definition>
        <argsstring>() const</argsstring>
        <name>compileHost</name>
        <qualifiedname>amrex::Parser::compileHost</qualifiedname>
        <briefdescription>
<para>This compiles for CPU only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="94" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="124" bodyend="168"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>T</label>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; char const * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::Parser</label>
        <link refid="classamrex_1_1Parser"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_vars</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Parser::Data</label>
        <link refid="structamrex_1_1Parser_1_1Data"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_expression</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_parser</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_locals</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::amrex_parser</label>
        <link refid="structamrex_1_1amrex__parser"/>
        <childnode refid="7" relation="usage">
          <edgelabel>ast</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::parser_node</label>
        <link refid="structamrex_1_1parser__node"/>
        <childnode refid="7" relation="usage">
          <edgelabel>l</edgelabel>
          <edgelabel>padding2</edgelabel>
          <edgelabel>r</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::shared_ptr&lt; amrex::Parser::Data &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="68" bodyend="120"/>
    <listofallmembers>
      <member refid="classamrex_1_1Parser_1a84c2f77f7586faf9e89ef87489297bfa" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>compile</name></member>
      <member refid="classamrex_1_1Parser_1a2bcb71246d0395f1f9c3ce37e2286c09" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>compileHost</name></member>
      <member refid="classamrex_1_1Parser_1a47d09b414b7b5b8e369c3b58819676fb" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>define</name></member>
      <member refid="classamrex_1_1Parser_1ae8f69b337a650c2a73a3aa33dad35064" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>depth</name></member>
      <member refid="classamrex_1_1Parser_1a39e13b29c0ab51b5a27264c706a1d7a8" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>expr</name></member>
      <member refid="classamrex_1_1Parser_1a24953b8ef5ef372c2ca196d8592053e1" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_data</name></member>
      <member refid="classamrex_1_1Parser_1a38fbb1b724d2f5ea93477b942c1b589c" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_vars</name></member>
      <member refid="classamrex_1_1Parser_1a27dc3946de52071f374c1a11e6182bad" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>maxStackSize</name></member>
      <member refid="classamrex_1_1Parser_1a1463e62b561526c2d4932222cbd663fc" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>operator bool</name></member>
      <member refid="classamrex_1_1Parser_1a9829ccc584238c1042b7c1ef25b69685" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>Parser</name></member>
      <member refid="classamrex_1_1Parser_1a979ec2bb844542bdd274c04010282c19" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>Parser</name></member>
      <member refid="classamrex_1_1Parser_1a217d48dc80e0448899823a0d47460d8b" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>print</name></member>
      <member refid="classamrex_1_1Parser_1aa3e51f354702ada83a42fa17d6450ff1" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>printExe</name></member>
      <member refid="classamrex_1_1Parser_1ac7f2281fb9a99b8c410d9cbc0b20b67b" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>registerVariables</name></member>
      <member refid="classamrex_1_1Parser_1abce888c0693fdd70003a6177b18d06a6" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>setConstant</name></member>
      <member refid="classamrex_1_1Parser_1a0dfb30d6386a630f676982f25fb24a06" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>symbols</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
