<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1Parser" kind="class" language="C++" prot="public">
    <compoundname>amrex::Parser</compoundname>
    <includes refid="AMReX__Parser_8H" local="no">AMReX_Parser.H</includes>
    <innerclass refid="structamrex_1_1Parser_1_1Data" prot="private">amrex::Parser::Data</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Parser_1a24953b8ef5ef372c2ca196d8592053e1" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1Parser_1_1Data" kindref="compound">Data</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Data&gt; amrex::Parser::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="126" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Parser_1a9829ccc584238c1042b7c1ef25b69685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::Parser</definition>
        <argsstring>(std::string const &amp;func_body)</argsstring>
        <name>Parser</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>func_body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="85" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a979ec2bb844542bdd274c04010282c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::Parser</definition>
        <argsstring>()=default</argsstring>
        <name>Parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="86" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1abdb30b6438c497e1da632eef58c386bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::~Parser</definition>
        <argsstring>()</argsstring>
        <name>~Parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="87" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="41" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a47d09b414b7b5b8e369c3b58819676fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::define</definition>
        <argsstring>(std::string const &amp;func_body)</argsstring>
        <name>define</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>func_body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="88" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="18" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a1463e62b561526c2d4932222cbd663fc" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Parser::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="90" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1abce888c0693fdd70003a6177b18d06a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::setConstant</definition>
        <argsstring>(std::string const &amp;name, double c)</argsstring>
        <name>setConstant</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="92" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1ac7f2281fb9a99b8c410d9cbc0b20b67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::registerVariables</definition>
        <argsstring>(Vector&lt; std::string &gt; const &amp;vars)</argsstring>
        <name>registerVariables</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; const &amp;</type>
          <declname>vars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a217d48dc80e0448899823a0d47460d8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Parser::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="96" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1ae8f69b337a650c2a73a3aa33dad35064" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Parser::depth</definition>
        <argsstring>() const</argsstring>
        <name>depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="98" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a27dc3946de52071f374c1a11e6182bad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Parser::maxStackSize</definition>
        <argsstring>() const</argsstring>
        <name>maxStackSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="99" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a39e13b29c0ab51b5a27264c706a1d7a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::Parser::expr</definition>
        <argsstring>() const</argsstring>
        <name>expr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="101" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="107" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a0dfb30d6386a630f676982f25fb24a06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt; std::string &gt; amrex::Parser::symbols</definition>
        <argsstring>() const</argsstring>
        <name>symbols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="103" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.cpp" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a84c2f77f7586faf9e89ef87489297bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1ParserExecutor" kindref="compound">ParserExecutor</ref>&lt; N &gt;</type>
        <definition>ParserExecutor&lt; N &gt; amrex::Parser::compile</definition>
        <argsstring>() const</argsstring>
        <name>compile</name>
        <briefdescription>
<para>This compiles for both GPU and CPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="106" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="173" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Parser_1a2bcb71246d0395f1f9c3ce37e2286c09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1ParserExecutor" kindref="compound">ParserExecutor</ref>&lt; N &gt;</type>
        <definition>ParserExecutor&lt; N &gt; amrex::Parser::compileHost</definition>
        <argsstring>() const</argsstring>
        <name>compileHost</name>
        <briefdescription>
<para>This compiles for CPU only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="109" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="131" bodyend="169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="6">
        <label>amrex::parser_nvp</label>
        <link refid="unionamrex_1_1parser__nvp"/>
        <childnode refid="5" relation="usage">
          <edgelabel>n</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::Parser</label>
        <link refid="classamrex_1_1Parser"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::parser_node</label>
        <link refid="structamrex_1_1parser__node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>l</edgelabel>
          <edgelabel>r</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>lvp</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Parser::Data</label>
        <link refid="structamrex_1_1Parser_1_1Data"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_parser</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_expression</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="4">
        <label>amrex::amrex_parser</label>
        <link refid="structamrex_1_1amrex__parser"/>
        <childnode refid="5" relation="usage">
          <edgelabel>ast</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::shared_ptr&lt; amrex::Parser::Data &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="82" bodyend="127"/>
    <listofallmembers>
      <member refid="classamrex_1_1Parser_1a84c2f77f7586faf9e89ef87489297bfa" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>compile</name></member>
      <member refid="classamrex_1_1Parser_1a2bcb71246d0395f1f9c3ce37e2286c09" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>compileHost</name></member>
      <member refid="classamrex_1_1Parser_1a47d09b414b7b5b8e369c3b58819676fb" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>define</name></member>
      <member refid="classamrex_1_1Parser_1ae8f69b337a650c2a73a3aa33dad35064" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>depth</name></member>
      <member refid="classamrex_1_1Parser_1a39e13b29c0ab51b5a27264c706a1d7a8" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>expr</name></member>
      <member refid="classamrex_1_1Parser_1a24953b8ef5ef372c2ca196d8592053e1" prot="private" virt="non-virtual"><scope>amrex::Parser</scope><name>m_data</name></member>
      <member refid="classamrex_1_1Parser_1a27dc3946de52071f374c1a11e6182bad" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>maxStackSize</name></member>
      <member refid="classamrex_1_1Parser_1a1463e62b561526c2d4932222cbd663fc" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>operator bool</name></member>
      <member refid="classamrex_1_1Parser_1a9829ccc584238c1042b7c1ef25b69685" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>Parser</name></member>
      <member refid="classamrex_1_1Parser_1a979ec2bb844542bdd274c04010282c19" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>Parser</name></member>
      <member refid="classamrex_1_1Parser_1a217d48dc80e0448899823a0d47460d8b" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>print</name></member>
      <member refid="classamrex_1_1Parser_1ac7f2281fb9a99b8c410d9cbc0b20b67b" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>registerVariables</name></member>
      <member refid="classamrex_1_1Parser_1abce888c0693fdd70003a6177b18d06a6" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>setConstant</name></member>
      <member refid="classamrex_1_1Parser_1a0dfb30d6386a630f676982f25fb24a06" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>symbols</name></member>
      <member refid="classamrex_1_1Parser_1abdb30b6438c497e1da632eef58c386bc" prot="public" virt="non-virtual"><scope>amrex::Parser</scope><name>~Parser</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
