<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1Array2D" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array2D</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>int</type>
        <declname>XLO</declname>
        <defname>XLO</defname>
      </param>
      <param>
        <type>int</type>
        <declname>XHI</declname>
        <defname>XHI</defname>
      </param>
      <param>
        <type>int</type>
        <declname>YLO</declname>
        <defname>YLO</defname>
      </param>
      <param>
        <type>int</type>
        <declname>YHI</declname>
        <defname>YHI</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array2D_1ad663a1d8bd1165b26303ff63b0cfafbe" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::arr[(XHI-XLO+1) *(YHI-YLO+1)]</definition>
        <argsstring>[(XHI-XLO+1) *(YHI-YLO+1)]</argsstring>
        <name>arr</name>
        <qualifiedname>amrex::Array2D::arr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="628" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="628" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Array2D_1af9421c64ec2dda2b4fdb6cc7b791970a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::Array2D::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the total number of elements of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="347" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a72d60797777b0b9b0d067973bc44f5bb" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::xlo</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlo</name>
        <qualifiedname>amrex::Array2D::xlo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>x</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="355" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1af7acc5b7688c99606310d6696c3d3f2e" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::xhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>xhi</name>
        <qualifiedname>amrex::Array2D::xhi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>x</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="362" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="362" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a35e026fafa6647f1686d9a8fcf06aeeb" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::xlen</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlen</name>
        <qualifiedname>amrex::Array2D::xlen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>x</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="370" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="370" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1abbea812f0505e4ba2930f337b84c63e6" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::ylo</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylo</name>
        <qualifiedname>amrex::Array2D::ylo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>y</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="378" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="378" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a205a89150d99e4b002d8122871893d5a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::yhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>yhi</name>
        <qualifiedname>amrex::Array2D::yhi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>y</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="385" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a0c717b73e40092744b4c9345e1e741e8" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::ylen</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylen</name>
        <qualifiedname>amrex::Array2D::ylen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>y</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="393" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="393" bodyend="393"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array2D_1a82cca4d3b9cf29049306008ba7facf8a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array2D::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="400" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="400" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1aeec028d131bc63bedc5eefe9a49cce37" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array2D::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="407" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="407" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1aa7d5680e0f449c807d809808787c459b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array2D::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="414" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a23803ac6cb9826bd4dd087eb65363814" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array2D::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="421" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a5cecad8d21979524fd253ff49934c264" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ const T &amp;</type>
        <definition>__host__ __device__ const T &amp; amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array2D::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j)</computeroutput>, instead of using square brackets. If the order is not specified, Fortran column-major order is assumed (the index <computeroutput>i</computeroutput> moves the fastest) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="431" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="431" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a1f9f34cba2e99dc54637dc145b0cd23a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T &amp;</type>
        <definition>__host__ __device__ T &amp; amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array2D::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j)</computeroutput>, instead of using square brackets. If the order is not specified, Fortran column-major order is assumed (the index <computeroutput>i</computeroutput> moves the fastest) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="446" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="446" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a5cecad8d21979524fd253ff49934c264" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ const T &amp;</type>
        <definition>__host__ __device__ const T &amp; amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array2D::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j)</computeroutput>, instead of using square brackets. When the order is manually specified as <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, row-major order is used (the index <computeroutput>j</computeroutput> moves the fastest). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="461" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="461" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a1f9f34cba2e99dc54637dc145b0cd23a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T &amp;</type>
        <definition>__host__ __device__ T &amp; amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array2D::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j)</computeroutput>, instead of using square brackets. When the order is manually specified as <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, row-major order is used (the index <computeroutput>j</computeroutput> moves the fastest). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="476" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="476" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a9413f350939521e7a448c8e2484ce257" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::Array2D::sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called without any arguments, returns the sum of all elements in the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="488" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="488" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a332c9a5ae5eae47255f89f48ba7fa5e4" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::sum</definition>
        <argsstring>(int axis, int loc) const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::Array2D::sum</qualifiedname>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called with two arguments, performs a sum reduction over the specified <computeroutput>axis</computeroutput>, for a particular location index <computeroutput>loc</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to reduce (0 for <emphasis>x</emphasis> dimension, 1 for <emphasis>y</emphasis> dimension) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This can be used, for instance, to calculate the sum over the <emphasis>y</emphasis> dimension of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object that was instantiated as <programlisting filename=".cpp"><codeline><highlight class="normal">Array2D&lt;amrex::Real,<sp/>1,<sp/>M,<sp/>1,<sp/>N&gt;<sp/>array;</highlight></codeline>
</programlisting></para>
<para>One could instantiate an <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object to hold the results, <programlisting filename=".cpp"><codeline><highlight class="normal">Array1D&lt;amrex::Real,<sp/>1,<sp/>M&gt;<sp/>vec;</highlight></codeline>
</programlisting> and then perform the summation for each element of the resulting vector. <programlisting filename=".cpp"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>M;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec(i)<sp/>=<sp/>array.sum(1,i)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> In this example, the axis is 1 and the location index is <computeroutput>i</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="526" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="526" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1ace80cae29e3fbe5a36c058ff0da21ad9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::Array2D::product</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called without any arguments, returns the product of all elements in the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="548" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="548" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1ac7427fd370381faa6c4c6b33a0d61f63" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::product</definition>
        <argsstring>(int axis, int loc) const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::Array2D::product</qualifiedname>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called with two arguments, performs a product reduction over the specified <computeroutput>axis</computeroutput>, for a particular location index <computeroutput>loc</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to reduce (0 for <emphasis>x</emphasis> dimension, 1 for <emphasis>y</emphasis> dimension) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This can be used, for instance, to calculate the product over the <emphasis>x</emphasis> dimension of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object that was instantiated as <programlisting filename=".cpp"><codeline><highlight class="normal">Array2D&lt;amrex::Real,<sp/>1,<sp/>M,<sp/>1,<sp/>N&gt;<sp/>array;</highlight></codeline>
</programlisting></para>
<para>One could instantiate an <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object to hold the results with, <programlisting filename=".cpp"><codeline><highlight class="normal">Array1D&lt;amrex::Real,<sp/>1,<sp/>N&gt;<sp/>vec;</highlight></codeline>
</programlisting> and then perform the product for each element of the resulting vector.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>N;<sp/>++j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec(j)<sp/>=<sp/>array.sum(0,j)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> In this example, the axis is 0 and the location index is <computeroutput>j</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="587" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="587" bodyend="602"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A GPU-compatible two-dimensional array.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>XLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>x</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>XHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>x</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>YLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>y</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>YHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>y</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ORDER</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref> (C/C++ row-major order) or <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref> (Fortran column-major order, which is the default if not given) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;</label>
        <link refid="structamrex_1_1Array2D"/>
        <childnode refid="2" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="340" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="341" bodyend="629"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array2D_1ad663a1d8bd1165b26303ff63b0cfafbe" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>arr</name></member>
      <member refid="structamrex_1_1Array2D_1a82cca4d3b9cf29049306008ba7facf8a" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array2D_1aa7d5680e0f449c807d809808787c459b" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array2D_1aeec028d131bc63bedc5eefe9a49cce37" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array2D_1a23803ac6cb9826bd4dd087eb65363814" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array2D_1a5cecad8d21979524fd253ff49934c264" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array2D_1a1f9f34cba2e99dc54637dc145b0cd23a" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array2D_1a5cecad8d21979524fd253ff49934c264" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array2D_1a1f9f34cba2e99dc54637dc145b0cd23a" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array2D_1ace80cae29e3fbe5a36c058ff0da21ad9" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array2D_1ac7427fd370381faa6c4c6b33a0d61f63" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array2D_1af9421c64ec2dda2b4fdb6cc7b791970a" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>size</name></member>
      <member refid="structamrex_1_1Array2D_1a9413f350939521e7a448c8e2484ce257" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>sum</name></member>
      <member refid="structamrex_1_1Array2D_1a332c9a5ae5eae47255f89f48ba7fa5e4" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>sum</name></member>
      <member refid="structamrex_1_1Array2D_1af7acc5b7688c99606310d6696c3d3f2e" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>xhi</name></member>
      <member refid="structamrex_1_1Array2D_1a35e026fafa6647f1686d9a8fcf06aeeb" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>xlen</name></member>
      <member refid="structamrex_1_1Array2D_1a72d60797777b0b9b0d067973bc44f5bb" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>xlo</name></member>
      <member refid="structamrex_1_1Array2D_1a205a89150d99e4b002d8122871893d5a" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>yhi</name></member>
      <member refid="structamrex_1_1Array2D_1a0c717b73e40092744b4c9345e1e741e8" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>ylen</name></member>
      <member refid="structamrex_1_1Array2D_1abbea812f0505e4ba2930f337b84c63e6" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>ylo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
