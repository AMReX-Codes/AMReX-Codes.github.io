<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1Array2D" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array2D</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>XLO</declname>
        <defname>XLO</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>XHI</declname>
        <defname>XHI</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>YLO</declname>
        <defname>YLO</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>YHI</declname>
        <defname>YHI</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array2D_1ad663a1d8bd1165b26303ff63b0cfafbe" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::arr[(XHI-XLO+1) *(YHI-YLO+1)]</definition>
        <argsstring>[(XHI-XLO+1) *(YHI-YLO+1)]</argsstring>
        <name>arr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="529" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="529" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Array2D_1ac3b0f0863090dfd120326dccff60fb81" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE unsigned int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the total number of elements of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="288" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a57c003d9da2dfa7cfb6acf8a53a73730" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::xlo</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>x</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="296" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a08f53cc26a4b05c464b19204c78a4d15" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::xhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>xhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>x</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="303" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a7ed97ce5a43fa5616d9d89171c05c286" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE unsigned int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::xlen</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>x</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="311" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1aa8de85adf5367a972d5da3c2562530f9" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::ylo</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>y</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="319" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a43bb34db8b97178d1face87e09e5aabb" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::yhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>yhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>y</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="326" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a4d166bce8fe043e2c55ecff72150199a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE unsigned int amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::ylen</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object in the <emphasis>y</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="334" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="334" bodyend="334"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array2D_1a0f29339aa77e869e34494375b844dd71" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="341" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1aedd8fdf9c40df37ea0f9f74e8c2417d4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="348" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="348" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a42be0c736c3acf0edca56ce234243655" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="355" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a6c11e88a9c5d43efdbfc6f1acef6397d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="362" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="362" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1afcd28b7fb56119e276e8e2c50b271d71" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j)</computeroutput>, instead of using square brackets. If the order is not specified, Fortran column-major order is assumed (the index <computeroutput>i</computeroutput> moves the fastest) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="372" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a8cae9876b2158d16359202ee47da38aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j)</computeroutput>, instead of using square brackets. If the order is not specified, Fortran column-major order is assumed (the index <computeroutput>i</computeroutput> moves the fastest) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="385" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1afcd28b7fb56119e276e8e2c50b271d71" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j)</computeroutput>, instead of using square brackets. When the order is manually specified as <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, row-major order is used (the index <computeroutput>j</computeroutput> moves the fastest). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="398" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a8cae9876b2158d16359202ee47da38aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j)</computeroutput>, instead of using square brackets. When the order is manually specified as <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, row-major order is used (the index <computeroutput>j</computeroutput> moves the fastest). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="411" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="411" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a20209ab4cd8d47141802b24c5a95268a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called without any arguments, returns the sum of all elements in the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="421" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="421" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a85acd12849153eb0faca0f5c22f84d3d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::sum</definition>
        <argsstring>(int axis, int loc) const noexcept</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called with two arguments, performs a sum reduction over the specified <computeroutput>axis</computeroutput>, for a particular location index <computeroutput>loc</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to reduce (0 for <emphasis>x</emphasis> dimension, 1 for <emphasis>y</emphasis> dimension) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This can be used, for instance, to calculate the sum over the <emphasis>y</emphasis> dimension of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object that was instantiated as <verbatim>Array2D&lt;amrex::Real, 1, M, 1, N&gt; array; </verbatim></para>
<para>One could instantiate an <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object to hold the results, <verbatim>Array1D&lt;amrex::Real, 1, M&gt; vec; </verbatim> and then perform the summation for each element of the resulting vector. <verbatim>for (int i = 1; i &lt;= M; ++i) {
    vec(i) = array.sum(1,i)
}
</verbatim> In this example, the axis is 1 and the location index is <computeroutput>i</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="455" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="455" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1a26f2d871d23e377a6267697907b6d287" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called without any arguments, returns the product of all elements in the <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="477" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="477" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array2D_1afd8b853ff1742083599a018e439274ac" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;::product</definition>
        <argsstring>(int axis, int loc) const noexcept</argsstring>
        <name>product</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called with two arguments, performs a product reduction over the specified <computeroutput>axis</computeroutput>, for a particular location index <computeroutput>loc</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to reduce (0 for <emphasis>x</emphasis> dimension, 1 for <emphasis>y</emphasis> dimension) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This can be used, for instance, to calculate the product over the <emphasis>x</emphasis> dimension of an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object that was instantiated as <verbatim>Array2D&lt;amrex::Real, 1, M, 1, N&gt; array; </verbatim></para>
<para>One could instantiate an <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object to hold the results with, <verbatim>Array1D&lt;amrex::Real, 1, N&gt; vec; </verbatim> and then perform the product for each element of the resulting vector.</para>
<para><verbatim>for (int j = 1; j &lt;= N; ++j) {
    vec(j) = array.sum(0,j)
}
</verbatim> In this example, the axis is 0 and the location index is <computeroutput>j</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="512" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="512" bodyend="527"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A GPU-compatible two-dimensional array.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>XLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>x</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>XHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>x</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>YLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>y</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>YHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>y</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ORDER</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref> (C/C++ row-major order) or <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref> (Fortran column-major order, which is the default if not given) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::Array2D&lt; T, XLO, XHI, YLO, YHI, ORDER &gt;</label>
        <link refid="structamrex_1_1Array2D"/>
        <childnode refid="2" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="281" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="282" bodyend="530"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array2D_1ad663a1d8bd1165b26303ff63b0cfafbe" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>arr</name></member>
      <member refid="structamrex_1_1Array2D_1a0f29339aa77e869e34494375b844dd71" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array2D_1a42be0c736c3acf0edca56ce234243655" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array2D_1aedd8fdf9c40df37ea0f9f74e8c2417d4" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array2D_1a6c11e88a9c5d43efdbfc6f1acef6397d" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array2D_1afcd28b7fb56119e276e8e2c50b271d71" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array2D_1a8cae9876b2158d16359202ee47da38aa" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array2D_1afcd28b7fb56119e276e8e2c50b271d71" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array2D_1a8cae9876b2158d16359202ee47da38aa" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array2D_1a26f2d871d23e377a6267697907b6d287" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array2D_1afd8b853ff1742083599a018e439274ac" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array2D_1ac3b0f0863090dfd120326dccff60fb81" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>size</name></member>
      <member refid="structamrex_1_1Array2D_1a20209ab4cd8d47141802b24c5a95268a" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>sum</name></member>
      <member refid="structamrex_1_1Array2D_1a85acd12849153eb0faca0f5c22f84d3d" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>sum</name></member>
      <member refid="structamrex_1_1Array2D_1a08f53cc26a4b05c464b19204c78a4d15" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>xhi</name></member>
      <member refid="structamrex_1_1Array2D_1a7ed97ce5a43fa5616d9d89171c05c286" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>xlen</name></member>
      <member refid="structamrex_1_1Array2D_1a57c003d9da2dfa7cfb6acf8a53a73730" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>xlo</name></member>
      <member refid="structamrex_1_1Array2D_1a43bb34db8b97178d1face87e09e5aabb" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>yhi</name></member>
      <member refid="structamrex_1_1Array2D_1a4d166bce8fe043e2c55ecff72150199a" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>ylen</name></member>
      <member refid="structamrex_1_1Array2D_1aa8de85adf5367a972d5da3c2562530f9" prot="public" virt="non-virtual"><scope>amrex::Array2D</scope><name>ylo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
