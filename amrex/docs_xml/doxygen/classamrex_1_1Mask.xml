<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Mask" kind="class" language="C++" prot="public">
    <compoundname>amrex::Mask</compoundname>
    <basecompoundref refid="classamrex_1_1BaseFab" prot="public" virt="non-virtual">amrex::BaseFab&lt; int &gt;</basecompoundref>
    <includes refid="AMReX__Mask_8H" local="no">AMReX_Mask.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Mask_1a5c614b68bcc988e86e52c106c20c5d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>() noexcept</argsstring>
        <name>Mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="8" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a1bbe56597e75e9487f95ea8a720ee5e7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="11" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ae6d52518e33c58ca5c4ea5e118fcec5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Box &amp;bx, int nc, Arena *ar)</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="14" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a230355fcd3e68a68f02f4ebd6ad2ce17" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Box &amp;bx, int nc=1, bool alloc=true, bool shared=false, Arena *ar=nullptr)</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="17" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a6b295b191764969c7033a967abd45d97" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>Mask</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>construct from input stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ad02006dde1ef4ca41a75811a92bf13e4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int &gt; const &amp;a) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a9e0cfc8f510bbf07e9f0594a4c9fc2a4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a4670e88b006383b4e03c316766396277" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int const  &gt; const &amp;a) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a335d200f394ffaf88181dec440362382" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int const  &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aeef7181e2e8e18b348ae7318eff3b402" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::~Mask</definition>
        <argsstring>() noexcept</argsstring>
        <name>~Mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa1437a1b1611cb70a4d8c6a581c7a5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Mask &amp;&amp;rhs) noexcept=default</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a42404772901ea5f0d3a72d98fc48497d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Mask const &amp;rhs, MakeType make_type, int scomp, int ncomp)</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>make_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ab3bc08bd2f3deea5af111c3720a02b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Mask &amp;)=delete</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a2d7bc995fb1eddf4211d4e93d63d9534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator=</definition>
        <argsstring>(const Mask &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ac8e651aa7881ce8282167ad72e4a1af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator=</definition>
        <argsstring>(Mask &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa99a533ca8b84883dd44bf870fb7c5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Mask::readFrom</definition>
        <argsstring>(std::istream &amp;)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <briefdescription>
<para>initialize from stream, FAB-style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="89" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a5ef706f693c3efeb1fcc340c89ad612f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Mask::writeOn</definition>
        <argsstring>(std::ostream &amp;) const </argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <briefdescription>
<para>output to stream, FAB-style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="94" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa6769e9167061ce48e444aca6efd800f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Mask&amp; amrex::Mask::operator&amp;=</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place And operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="98" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a72dfdaf9c03ae2b16e2a0247e8389679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place And </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a8ecbba189263af0eafa77def5fa6716f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, but specify source/destination/number of components </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="117" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="223" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ab684af86d90f642d609824eb112cf3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, and specify subregion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ac4cac8ce584658e11f3c89a8e4e9dde7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>in-pace And, over source components to destination components, and on intersection of source and destination boxes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="148" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="244" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1af447fa28de90bdab6394beef1c05f8a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Mask&amp; amrex::Mask::operator|=</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place Or operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="156" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a3ee206e0a509b7aa6b9949cc2d47219a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place Or </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="164" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ae7e8e1a4f5f4e1d293a6e9b244544a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, but specify source/destination/number of components </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="175" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="272" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a663f4ca369c842785baf71ecf01f2c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, and specify subregion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="189" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="282" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a2aae66ecdd2f06f138d52e7bafe54a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>in-pace Or, over source components to destination components, and on intersection of source and destination boxes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="206" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="293" bodyend="310"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Mask_1abfff64dce9dca205fc9d3fdde790dc44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, Mask &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
<para>Initialize from stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="54" bodyend="76"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Mask_1ae8ef1e1e84d4d8e51b1b765e0f057de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Mask &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
<para>output to stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="30" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> is a derived Fab class whose elements maintain a logical &quot;TRUE&quot; or &quot;FALSE&quot; state. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> can perform several elementary logical operations on its data members.</para><para>Implement a logical class <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> to maintain the TRUE or FALSE state of elements in a box. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> can perform element-wise logical operations, but is otherwise very similar to an <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> object. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> object can set its components based on comparing (a subregion of a) real-valued <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> element magnitudes to a scalar value, or by &quot;and&quot;, &quot;or&quot; operations with (the a subregion of) other Masks.</para><para>This class does NOT provide a copy constructor or assignment operator. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4263">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="4264" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4264">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
      </node>
      <node id="4262">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="4263" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4266">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="4267" relation="public-inheritance">
        </childnode>
        <childnode refid="4270" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="4269">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="4271">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4271" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4267">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="4268" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="4268">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="4269" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="4270">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="4271" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="4272" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="4272">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="4265">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="4266" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="25" bodyend="212"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1ad9f38baae12166bf4265a51fcdba8841" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a856679a234221554d3479ce58bcafa00" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1afd142f7a5a7db7af8055581157e7df2c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e926f4b5c3640fbcf8a2233c683a6b7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1abecedb61761ae70ded029c8b43322e48" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>addproduct</name></member>
      <member refid="structamrex_1_1DataAllocator_1a30716debe7359b2514c7dd7eebe6c826" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>alloc</name></member>
      <member refid="classamrex_1_1Mask_1a72dfdaf9c03ae2b16e2a0247e8389679" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1a8ecbba189263af0eafa77def5fa6716f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1ab684af86d90f642d609824eb112cf3b4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1ac4cac8ce584658e11f3c89a8e4e9dde7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="structamrex_1_1DataAllocator_1a32d3c8bf67dd1026e15ee2c745480726" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>arena</name></member>
      <member refid="classamrex_1_1BaseFab_1aa456605f5709d47be9474befe9d9e128" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a87f7cf83d52d37f3d3d8f5ebff16040a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a039630ee4496b6d7fd17020a78f4f899" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a4afe2a21e5f0306a9a93e841414ccfaa" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1ab18c6ddc18dd52531c64ab349ddb46fe" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a8c15ecf768daf7962f3414ae4218aae8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a06a5f585e5e6942146ce675c2ecf5ea4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1ada5eb01c33cee9af4b2a5b3a05712ec3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e470d7e72db0c3169e83e34ce4f657b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5d9786facded55bfce06cc443594cab" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a83d88e02757dac7e30b2ac7a13020b22" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa42c6cb505873cad1b9c9de64a20c407" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a53ab00ff398b5beb473bf85810189532" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a2f3151d06126f561f1e1bb90614fec65" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1afc214d0b4ff488adc6f9e2d2935b1719" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a7ed94eb9f8370777608d32c3adcb2cc6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ac3d993534dd6528e6a965d64906cf65a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a0d29e1227b0a3d2381b35cce869f9e5f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseFab_1aeba81b8b4aa7054af02788dc42c797c3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1abb84b4707e9d74caf8ad1ed348918ff7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1a90d94d23b4c7ff81a86093956d38b332" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a21a8ed23adcc906fd3a3814f3e851f3c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a5545cf0d50c4fb182b9936fa5a6a1fab" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a40063acf8c2d129f64ec2c4fe47f4dc1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a6e4885cd56e887cc91f925473a91cc09" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1afa7492f637831aaefb9a3e9ccfd9da78" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a32633316b16a82689c37b9afc7257e94" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a754743e8defd81b6584737ce1643a9bb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1ac38eb2d18e6b2f06711baf2a404161b2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copyToMem</name></member>
      <member refid="structamrex_1_1DataAllocator_1a7efc193b557d263444d91cc90c7c7073" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>DataAllocator</name></member>
      <member refid="structamrex_1_1DataAllocator_1a1cbea797e47f9d7448b1f574beb24d8b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>DataAllocator</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b5f6bd26ae63d34e365dddfe1fa0991" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a726b1072e06cb71131cdc2a940d4f277" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a16b84cc11d180bc313f0a81cb1ac8731" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1a1843f322e192533110ca6472eef26910" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1aa890ab91fa97095ed0b15587c3f4120a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a135a00024a83310371611e9eb1636d75" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ab94465d1601f0e2516503f87c08fc270" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a7783f92753885f1760db6a197f835c26" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ac597fa0c8923f6d33308729f6180a092" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a74a5c8a01c940cb6f3f332f5484e3f31" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a99be10917e130f6fd29f3247351e0148" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a4908224865534fede607561a4e3e4d8f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e95d8cfaadfe53080ae0092b53202fb" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1a60bd1d06d367b740866572efd0130918" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a6305f1ef49f4565baa73c35c182a7ef7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1aac55ecf639495e77e6248c70a8f29bbf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1ae1dd825e77cdf5c698774cf03cfafa94" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a2aa4e1642137c9681ec5c11884b4e77d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a3845769bb072508c4e0566b55dddf8c7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a9236f2f88feff79c1d50b9b830750f91" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1ac5a36d719054f74a00bfc52e10ec9918" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>elixir</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b42e2b61ac6d8050def0a5e9bde849f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Finalize</name></member>
      <member refid="structamrex_1_1DataAllocator_1adaecd2fc8c1ddc50d895652495341de5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>free</name></member>
      <member refid="classamrex_1_1BaseFab_1a0890deeffafc5605f4766c47cc975439" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1acdceecb3c2305bf9c42f5236c81b9907" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ae6cabd78f18cfc8f0d9544ef683cd640" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa9f484b4626de9d2f16380e768d6f3e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1BaseFab_1a1d6dfeb0de1a785895b2a26e05c8ce4a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d377082253244d029a41f4d80e0fdf9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1acccba64f5c6d3ce8d8ddf6e6f14061b1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a959d4c46c684e24b22cb1c7257f7da7c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1ab11964929d2da8a0c2a5bbf7cdbf10c8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d6db68c9ef28ef91234e66512faceb8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1a56b3de1c8cf4f5747c1219f411783d99" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3062d6b59da26a5ef2ab8900bd1e665" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1a53f3433e018b4fd627c40be110013159" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1a51f4b810782e5f9f63474adbd3f76f41" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1ad138d01fb5a57ad77306a3adbf8026cb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>loVect</name></member>
      <member refid="structamrex_1_1DataAllocator_1a901b7f1e68950afc823ebc10c093cb94" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1Mask_1a5c614b68bcc988e86e52c106c20c5d59" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a1bbe56597e75e9487f95ea8a720ee5e7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ae6d52518e33c58ca5c4ea5e118fcec5a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a230355fcd3e68a68f02f4ebd6ad2ce17" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a6b295b191764969c7033a967abd45d97" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ad02006dde1ef4ca41a75811a92bf13e4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a9e0cfc8f510bbf07e9f0594a4c9fc2a4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a4670e88b006383b4e03c316766396277" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a335d200f394ffaf88181dec440362382" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1aa1437a1b1611cb70a4d8c6a581c7a5bf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a42404772901ea5f0d3a72d98fc48497d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ab3bc08bd2f3deea5af111c3720a02b9c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1BaseFab_1a66695e0608fe850a6c9d44b0e022b6ba" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1af4a8317171c537136ef82e4502e0d7d4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1a1993ea667fc5b620195bb42fe003cc1a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1aee32dcf282a28ad947aa119859ec6d9e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a554f518d10db9e4f7ba253396479b862" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a3664aa12489eadfbdadaf073849ff168" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a25e1017f1d46df8aace1afa61ad5a0e5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1accb8fba792ba3c928a08af36f6d723f0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a7df22a3c052c547774b12ba80e37d8cf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b0d67d423e3244b319821ee42763278" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a314333f79f6621b91e21537a878d56ee" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ad3f65f484419bf54c596f036415513b8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1af7b25a0151065df3cb1fa193d5ab447f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b9a1ab4ed5f83f25906871e1df38ee3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf8e3b4742be92554a0520ece9e570c9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ae7bae9bb40d6f5d425e6e874536b8b37" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e8e7b3e7cdc9290b8662499b12c64eb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a2bc88f523cb4217ddc584a0f0ea71a14" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ea35b6f072f3fce2ef9dbc34d581bdc" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a740bcc1b9a90b5131e784844e7bcd238" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a713260a23faccae106757c7306ca3f4d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a70fae1e24dfdf66fb89239e506dd29a9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1ab4985cae01df385507d1c5e375313ed5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a902540474252099c5e514b622db88d55" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a5e4e78adc9a9eda669d92917537489f4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a15fbb4b6143b5cd7f3c4d16ddbd7d890" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aaad34c23cb5769d8a4a39b81f4fafcbe" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a07c692f9742adc264321ffa336f19082" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a927888c348b5bfe43d772b294fdfde29" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1afd4f4db6029a2db4ab2c5ada4b3cd871" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a16a050f6b5efa284ced1545f1d08dcb6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ab76e032be803d6672fa1582e0ab186a2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1afa39285f3d767bba5757841539f858a9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a43f0ed693f7f5436621aaf9b27620c56" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1ac03d6fdd6bd658196becfefc5b3b93a8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a267006cc0717e9dfbcbd22afc1c89d8c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytesOwned</name></member>
      <member refid="classamrex_1_1BaseFab_1a7406ec91dc010602121f1492f2d3a748" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1af3ab7e9a7cb47a3eb41ba6a97ab2e798" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1af705b2c81f5c09e1da3fb68235a25b38" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1aa851b55fb6039e8f36c8240cff0ea83b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1ac91418da8436f87e146b9502ab97c003" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1ab28274e01596549362a13db99bfc2d0f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a024ef815d3aae1c71fc06bb626839e5b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ea3836a6832aa23196a2b34327dc60a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1ae8491cd2baa64b0c0f253b2487023d9a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf26c270066d314a52ccdbc5f61ea302" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BaseFab_1a99b1638f6702821a6b6e63cb860d938f" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>nvar</name></member>
      <member refid="classamrex_1_1Mask_1aa6769e9167061ce48e444aca6efd800f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&amp;=</name></member>
      <member refid="classamrex_1_1BaseFab_1a00567b9c2330aba34d69316077efa81b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1afda4a61030056c7cfa8e50030f83119a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a130423b85fe24394d3c49502c1a1cd35" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a5b68b86090865ca3b16f1b92e9ee797f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1abb59e43e55cd73187b3b2ef940fc5c38" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1ab52142915e868be900459e72c143ef0c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a7c05ed5ff6650388093fc1766c8207d6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1aec8fd8bbeb16e610841d26734d970da4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1aaaa7f060abb4bd7f312167d0a54211a2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a41addea28e914e87385c7cccc36a323c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a11f12df0ff870ae8eed0cc3a57277925" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1ad791fe8d253e2a835b31e2da0aa7ce46" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1Mask_1ae8ef1e1e84d4d8e51b1b765e0f057de7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1Mask_1a2d7bc995fb1eddf4211d4e93d63d9534" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Mask_1ac8e651aa7881ce8282167ad72e4a1af3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3101a71fce4d1d50de1fca73ff4b0f4" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a1cb37c9e32c4fe10271d1def459489eb" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Mask_1abfff64dce9dca205fc9d3fdde790dc44" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1Mask_1af447fa28de90bdab6394beef1c05f8a9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator|=</name></member>
      <member refid="classamrex_1_1Mask_1a3ee206e0a509b7aa6b9949cc2d47219a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1ae7e8e1a4f5f4e1d293a6e9b244544a40" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1a663f4ca369c842785baf71ecf01f2c0f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1a2aae66ecdd2f06f138d52e7bafe54a88" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1eeed2ada20a86fca2a39f39479e65a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2f3e2461a2c2f263371f7dba2072d655" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a7c3bd10c66be94a65e0c1a48c26be91e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ac580cdc45606d3173a778b218f3b81f6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5fe4dd46693e1c9725372571007c1ac" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a62992b09122ddd625b8ab95fc235442f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a39920efe0f245e4f98b71dd9f3bc22e3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a4407616f7c77aa9461345e18791804f5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a40c2e367dd3c247e4d7d1d56500ebad6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1acc3fa2566c4bf2de3e6f0773e3b0601b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1BaseFab_1aea7b9b15c8959be232fa8d0b14b2b507" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1BaseFab_1aa0817740f0638356f528493bcce9f998" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a3c04a8bad004cce7be5212f564183587" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a16713df951bd62e1c8c51937242948ce" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a3b23f6d29a0e53350deb85239416296b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acf3b50d012730dd3521fb2be517573b9" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1Mask_1aa99a533ca8b84883dd44bf870fb7c5b3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1BaseFab_1a4390286fe2327bd5f0561a75ee14499b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>release</name></member>
      <member refid="classamrex_1_1BaseFab_1a48099208f15f741c739316388f61737a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1afac959463921393c96bd955a164ba836" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a21a04bd9674c0dac0edf9862284c3fec" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a03513ca096ccb98cbfc04eed4ea4bf1f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1aede6afede165d8f14c5bedb035654c4a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a141ba4c0b87cbaf780261ba65ac4970a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1ab55c5cdbff39b6eb2074b4846c9efb2e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1af402572146dec8a5ee8fa286d64a921f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ae241c4705f0c6496df4a574810b1ffe0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a9b2dec9facea006d0abc61d9b8f5f88e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ad7bc4827d074f13225637fb60b8f2ca9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ad6b37436bb81f04c247a9485b8c7588f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1aff30e8e8e269729948759942fdb9af76" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a51f395aad812c9915cf00f2d558c0d94" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a4965748df55211a5a68c9765f6f9a12e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1ac574b5236fd0038cc245c5bf694892d6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa2583296d034c025f56af4b64d20aad" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e65169d29942cf3adde870d63a91834" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1add27f351ea3f7f75bf696d5940cacff1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1a1d29a05b0fd35a145529776f7a0f24bb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1a0deb30182f8b5babea5c6eed19e61083" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a9fb8e9b93b4a0d30444bd9d36763f040" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a2433222c078c64fcb8c01cab64c20566" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>size</name></member>
      <member refid="classamrex_1_1BaseFab_1a787a8e1e40a6a13728e44ccbf5a5ec5a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e30e4a2bf961e7ffd1f5293c9505630" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a454db75001aea1672b807616b0f2f9a2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1af6a04a591d0036d83f4aa6ccbfa164c0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1aa86e53b5d3afdae2606ab0be640bb022" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1aac8f37b7bba5334a86bf90b58fb062d8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>value_type</name></member>
      <member refid="classamrex_1_1Mask_1a5ef706f693c3efeb1fcc340c89ad612f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BaseFab_1a59bd9a7d965171339fc1bc82caff261c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1a87880711ecbed852b69d6a91e4eef3d4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>~BaseFab</name></member>
      <member refid="classamrex_1_1Mask_1aeef7181e2e8e18b348ae7318eff3b402" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>~Mask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
