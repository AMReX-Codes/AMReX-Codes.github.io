<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1FPC" kind="class" language="C++" prot="public">
    <compoundname>amrex::FPC</compoundname>
    <includes refid="AMReX__FPC_8H" local="no">AMReX_FPC.H</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FPC_1ad1410e009ae5d7319fd2687c7a3457ff" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::FPC::normal_float_order</definition>
        <argsstring>[]</argsstring>
        <name>normal_float_order</name>
        <initializer>= { 1, 2, 3, 4 }</initializer>
        <briefdescription>
<para>4-element array representing &quot;normal&quot; float order: {1,2,3,4} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FPC_1ad8695587637ebea6ad37b278fb7e677d" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::FPC::reverse_float_order</definition>
        <argsstring>[]</argsstring>
        <name>reverse_float_order</name>
        <initializer>= { 4, 3, 2, 1 }</initializer>
        <briefdescription>
<para>4-element array representing &quot;reverse&quot; float order: {4,3,2,1} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FPC_1a71ce71bf65be5235d8e74ee6921cfea7" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::FPC::reverse_float_order_2</definition>
        <argsstring>[]</argsstring>
        <name>reverse_float_order_2</name>
        <initializer>= { 2, 1, 4, 3 }</initializer>
        <briefdescription>
<para>Another &quot;reversed&quot; FP order: {2,1,4,3}. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="29" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FPC_1a9ece1c795d9454f01f5253539c466abc" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::FPC::normal_double_order</definition>
        <argsstring>[]</argsstring>
        <name>normal_double_order</name>
        <initializer>= { 1, 2, 3, 4, 5, 6, 7, 8 }</initializer>
        <briefdescription>
<para>The &quot;normal&quot; double order: {1,2,3,4,5,6,7,8}. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FPC_1a8b52b326d6af9d2935f378f82ab6d6ed" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::FPC::reverse_double_order</definition>
        <argsstring>[]</argsstring>
        <name>reverse_double_order</name>
        <initializer>= { 8, 7, 6, 5, 4, 3, 2, 1 }</initializer>
        <briefdescription>
<para>A &quot;reversed&quot; double order: {8,7,6,5,4,3,2,1}. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FPC_1aa5f55a6cd8a3addc8eb1927b9f700564" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::FPC::reverse_double_order_2</definition>
        <argsstring>[]</argsstring>
        <name>reverse_double_order_2</name>
        <initializer>= { 2, 1, 4, 3, 6, 5, 8, 7 }</initializer>
        <briefdescription>
<para>Another &quot;reversed&quot; double order: {2,1,4,3,6,5,8,7}. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FPC_1afac92c1763e3625fb356c57f027faf34" prot="public" static="yes" mutable="no">
        <type>const Long</type>
        <definition>const Long amrex::FPC::ieee_float</definition>
        <argsstring>[]</argsstring>
        <name>ieee_float</name>
        <initializer>= { 32L,  8L, 23L, 0L, 1L,  9L, 0L,   0x7FL }</initializer>
        <briefdescription>
<para>Array detailing the format of IEEE 32-bit normal order floats. In general, here&apos;s what the various indices in &quot;format&quot; array means: format[0] = number of bits per number format[1] = number of bits in exponent format[2] = number of bits in mantissa format[3] = start bit of sign format[4] = start bit of exponent format[5] = start bit of mantissa format[6] = high order mantissa bit (CRAY needs this) format[7] = bias of exponent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FPC_1abdb4c6267365b40cf9675d3180b50634" prot="public" static="yes" mutable="no">
        <type>const Long</type>
        <definition>const Long amrex::FPC::ieee_double</definition>
        <argsstring>[]</argsstring>
        <name>ieee_double</name>
        <initializer>= { 64L, 11L, 52L, 0L, 1L, 12L, 0L,  0x3FFL }</initializer>
        <briefdescription>
<para>Array detailing the format of IEEE 64-bit normal order doubles. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FPC_1a6f67a43bd516bcc9547cb3b76424b2b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
        <definition>const IntDescriptor &amp; amrex::FPC::NativeLongDescriptor</definition>
        <argsstring>()</argsstring>
        <name>NativeLongDescriptor</name>
        <briefdescription>
<para>Returns a constant reference to an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> describing the native &quot;Long&quot; under which <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> was compiled. Each <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> library will have exactly one of these compiled into it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.cpp" bodystart="89" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FPC_1a9cad45e259106beaa8e4dc56f613bd06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
        <definition>const IntDescriptor &amp; amrex::FPC::NativeIntDescriptor</definition>
        <argsstring>()</argsstring>
        <name>NativeIntDescriptor</name>
        <briefdescription>
<para>Returns a constant reference to an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> describing the native &quot;int&quot; under which <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> was compiled. Each <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> library will have exactly one of these compiled into it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.cpp" bodystart="76" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FPC_1ab470772000cfb5f507edc5f294383bbc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
        <definition>const RealDescriptor &amp; amrex::FPC::NativeRealDescriptor</definition>
        <argsstring>()</argsstring>
        <name>NativeRealDescriptor</name>
        <briefdescription>
<para>Returns a constant reference to a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> describing the native Real under which <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> was compiled. Each <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> library will have exactly one of these compiled into it. Note that &quot;Real&quot; will be one of &quot;float&quot; or &quot;double&quot; depending on how the version of <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> was built. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.cpp" bodystart="103" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FPC_1a56bb549e278ccc2611fd389c3d2b6bdb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
        <definition>const RealDescriptor &amp; amrex::FPC::Native32RealDescriptor</definition>
        <argsstring>()</argsstring>
        <name>Native32RealDescriptor</name>
        <briefdescription>
<para>NativeRealDescriptor is equivalent to Native32RealDescriptor if BL_FLOAT is used. Otherwise, it is equivalent to Native64RealDescriptor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.cpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FPC_1a3e122a19b07bc732bf83c360354ef2a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
        <definition>const RealDescriptor &amp; amrex::FPC::Native64RealDescriptor</definition>
        <argsstring>()</argsstring>
        <name>Native64RealDescriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.cpp" bodystart="137" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FPC_1a712d35cb1071948f9fd7ce809fa8ff2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
        <definition>const RealDescriptor &amp; amrex::FPC::Ieee32NormalRealDescriptor</definition>
        <argsstring>()</argsstring>
        <name>Ieee32NormalRealDescriptor</name>
        <briefdescription>
<para>Returns a constant reference to a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> detailing the IEEE 32-bit normal FP format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.cpp" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FPC_1a545419a941e545b123cc638c15bfcb72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
        <definition>const RealDescriptor &amp; amrex::FPC::Ieee64NormalRealDescriptor</definition>
        <argsstring>()</argsstring>
        <name>Ieee64NormalRealDescriptor</name>
        <briefdescription>
<para>Returns a constant reference to a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> detailing the IEEE 64-bit normal FP format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="96" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.cpp" bodystart="158" bodyend="162"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Collection of Floating-Point Constants Supporting FAB I/O. </para>    </briefdescription>
    <detaileddescription>
<para>This class is a poor-person&apos;s namespace of floating-point constants used in support of FAB I/O. Since we can&apos;t assume the existence of namespaces, and we don&apos;t like global constants, we make them static constant data members of this class. </para>    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FPC.H" bodystart="19" bodyend="97"/>
    <listofallmembers>
      <member refid="classamrex_1_1FPC_1a712d35cb1071948f9fd7ce809fa8ff2e" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>Ieee32NormalRealDescriptor</name></member>
      <member refid="classamrex_1_1FPC_1a545419a941e545b123cc638c15bfcb72" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>Ieee64NormalRealDescriptor</name></member>
      <member refid="classamrex_1_1FPC_1abdb4c6267365b40cf9675d3180b50634" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>ieee_double</name></member>
      <member refid="classamrex_1_1FPC_1afac92c1763e3625fb356c57f027faf34" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>ieee_float</name></member>
      <member refid="classamrex_1_1FPC_1a56bb549e278ccc2611fd389c3d2b6bdb" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>Native32RealDescriptor</name></member>
      <member refid="classamrex_1_1FPC_1a3e122a19b07bc732bf83c360354ef2a4" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>Native64RealDescriptor</name></member>
      <member refid="classamrex_1_1FPC_1a9cad45e259106beaa8e4dc56f613bd06" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>NativeIntDescriptor</name></member>
      <member refid="classamrex_1_1FPC_1a6f67a43bd516bcc9547cb3b76424b2b8" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>NativeLongDescriptor</name></member>
      <member refid="classamrex_1_1FPC_1ab470772000cfb5f507edc5f294383bbc" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>NativeRealDescriptor</name></member>
      <member refid="classamrex_1_1FPC_1a9ece1c795d9454f01f5253539c466abc" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>normal_double_order</name></member>
      <member refid="classamrex_1_1FPC_1ad1410e009ae5d7319fd2687c7a3457ff" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>normal_float_order</name></member>
      <member refid="classamrex_1_1FPC_1a8b52b326d6af9d2935f378f82ab6d6ed" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>reverse_double_order</name></member>
      <member refid="classamrex_1_1FPC_1aa5f55a6cd8a3addc8eb1927b9f700564" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>reverse_double_order_2</name></member>
      <member refid="classamrex_1_1FPC_1ad8695587637ebea6ad37b278fb7e677d" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>reverse_float_order</name></member>
      <member refid="classamrex_1_1FPC_1a71ce71bf65be5235d8e74ee6921cfea7" prot="public" virt="non-virtual"><scope>amrex::FPC</scope><name>reverse_float_order_2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
