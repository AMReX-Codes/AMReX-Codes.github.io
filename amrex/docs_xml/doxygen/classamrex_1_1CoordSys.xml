<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1CoordSys" kind="class" language="C++" prot="public">
    <compoundname>amrex::CoordSys</compoundname>
    <derivedcompoundref refid="classamrex_1_1Geometry" prot="public" virt="non-virtual">amrex::Geometry</derivedcompoundref>
    <includes refid="AMReX__CoordSys_8H" local="no">AMReX_CoordSys.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806eba" prot="public" static="no" strong="no">
        <type></type>
        <name>CoordType</name>
        <enumvalue id="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa2debcd8f37986ae0e3c488f583234ccc" prot="public">
          <name>undef</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa773443060faab3679fd6637fbb386086" prot="public">
          <name>cartesian</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa090e74483c754250a5e0ee448bdfe8b3" prot="public">
          <name>RZ</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaaa0c55dfafca5806f988babd974f5b158" prot="public">
          <name>SPHERICAL</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="27" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="27" bodyend="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1CoordSys_1a80883db17d63160073d45479d937e74b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806eba" kindref="member">CoordType</ref></type>
        <definition>CoordType amrex::CoordSys::c_sys</definition>
        <argsstring></argsstring>
        <name>c_sys</name>
        <initializer>= <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa2debcd8f37986ae0e3c488f583234ccc" kindref="member">undef</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="239" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CoordSys_1a87497b1adb83ce034ea0ab943fffc08f" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::CoordSys::offset[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="240" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CoordSys_1a178c38de0cae8e587e4c34541db7f45b" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::CoordSys::dx[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>dx</name>
        <initializer>= {AMREX_D_DECL(0.,0.,0.)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="242" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CoordSys_1a09a58ce8c24e2ad549c98754fd2adaeb" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::CoordSys::inv_dx[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>inv_dx</name>
        <initializer>= {AMREX_D_DECL(std::numeric_limits&lt;Real&gt;::infinity(),
                        std::numeric_limits&lt;Real&gt;::infinity(),
                        std::numeric_limits&lt;Real&gt;::infinity())}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="243" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CoordSys_1abee8e858b3ca22a33388275e0a2cfcbf" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::CoordSys::ok</definition>
        <argsstring></argsstring>
        <name>ok</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="247" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1CoordSys_1a4db09c25776b9c0b4dfb9b49cbfe4aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const CoordSys &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1CoordSys" kindref="compound">CoordSys</ref> &amp;</type>
          <defname>c</defname>
        </param>
        <briefdescription>
<para>Nice ASCII output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="29" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="395" bodyend="407"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1CoordSys_1a24251fbdbd3497be0c9ef8a30260aa41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, CoordSys &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1CoordSys" kindref="compound">CoordSys</ref> &amp;</type>
          <defname>c</defname>
        </param>
        <briefdescription>
<para>Nice ASCII input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="32" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="415" bodyend="440"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a13dd49de2ef262fde3364ae394f32538" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CoordSys::Ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Ok</name>
        <briefdescription>
<para>Is ok? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="35" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a2bf1bf10c89e3d151b0ad49b2c1722fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::SetCoord</definition>
        <argsstring>(CoordType coord) noexcept</argsstring>
        <name>SetCoord</name>
        <param>
          <type><ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806eba" kindref="member">CoordType</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
<para>Set the CoordType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="38" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a2c36af3bfd89e3168d643c45f123cac5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806eba" kindref="member">CoordType</ref></type>
        <definition>CoordType amrex::CoordSys::Coord</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Coord</name>
        <briefdescription>
<para>Returns the CoordType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="41" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a37d58cefcf442aea6b94e824394cde52" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::CoordSys::CoordInt</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CoordInt</name>
        <briefdescription>
<para>Returns the CoordType as an int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="44" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a87414a566bba1fff3d0185286a11ba56" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CoordSys::IsSPHERICAL</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsSPHERICAL</name>
        <briefdescription>
<para>Is CoordType == SPHERICAL? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="47" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aff79cb7249a744e24c5b335935f20fe6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CoordSys::IsRZ</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsRZ</name>
        <briefdescription>
<para>Is CoordType == RZ? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="52" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a500695aa14e3fd01f3d7162fd784133e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CoordSys::IsCartesian</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsCartesian</name>
        <briefdescription>
<para>Is CoordType == cartesian? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="57" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aded987526da2665b805f491a3544ccd8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::SetOffset</definition>
        <argsstring>(const Real *x_lo) noexcept</argsstring>
        <name>SetOffset</name>
        <param>
          <type>const Real *</type>
          <declname>x_lo</declname>
        </param>
        <briefdescription>
<para>Sets the offset for each coordinate direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="20" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a9d3eb77447b9c748b7223e271f6c9bb1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Real *</type>
        <definition>const Real* amrex::CoordSys::Offset</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Offset</name>
        <briefdescription>
<para>Returns the offset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="65" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aa67991fbbc479f95a966bcf04ae0e49a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::Offset</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>Offset</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the offset for the specified coordinate direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="68" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1ade9815d7413549b5bb09000f1c9ede76" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Real *</type>
        <definition>const Real* amrex::CoordSys::CellSize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CellSize</name>
        <briefdescription>
<para>Returns the cellsize for each coordinate direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="71" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1afc9b2295dec506f60239afca5e6a4a5d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::CellSize</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>CellSize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the cellsize for the specified coordinate direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="74" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aa352d079ec1fb2e0c971e8f5a6b077da" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;Real,AMREX_SPACEDIM&gt; amrex::CoordSys::CellSizeArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CellSizeArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="76" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1ad195c96d818c1331428e90a727745304" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Real *</type>
        <definition>const Real* amrex::CoordSys::InvCellSize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>InvCellSize</name>
        <briefdescription>
<para>Returns the inverse cellsize for each coordinate direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="82" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a3a9c67df49c93b825ac5378f5411b9da" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::InvCellSize</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>InvCellSize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the inverse cellsize for the specified coordinate direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="85" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1ad30ea5aed12689007843a59201563409" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;Real,AMREX_SPACEDIM&gt; amrex::CoordSys::InvCellSizeArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>InvCellSizeArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="87" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a5c2b7698e44ce750730b8246fc1aa992" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::CellCenter</definition>
        <argsstring>(int point, int dir) const noexcept</argsstring>
        <name>CellCenter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns location of cell center in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="93" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a20d11f9a4a56cc4abbbc63520b1a5e7f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::CellCenter</definition>
        <argsstring>(const IntVect &amp;point, Vector&lt; Real &gt; &amp;loc) const noexcept</argsstring>
        <name>CellCenter</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Return location of cell center. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="99" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aa88777a3be31a577cf01ed63a806f94b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::CellCenter</definition>
        <argsstring>(const IntVect &amp;point, Real *loc) const noexcept</argsstring>
        <name>CellCenter</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Return location of cell center. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="102" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aad8c159e97f7422f2bf45b92bf3a3002" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::LoEdge</definition>
        <argsstring>(int point, int dir) const noexcept</argsstring>
        <name>LoEdge</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns location of lo edge in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="105" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a6f6cad7c903feeb070e26cea3df1af5c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::LoEdge</definition>
        <argsstring>(const IntVect &amp;point, int dir) const noexcept</argsstring>
        <name>LoEdge</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Equivalent to LoEdge(point[dir], dir). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="111" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a9ec92efce51bbde30e91c69673b080cf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::HiEdge</definition>
        <argsstring>(int point, int dir) const noexcept</argsstring>
        <name>HiEdge</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns location of hi edge in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="117" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a67a1ad822f7d6fac4907e3d37ab8953d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::HiEdge</definition>
        <argsstring>(const IntVect &amp;point, int dir) const noexcept</argsstring>
        <name>HiEdge</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Equivalent to HiEdge(point[dir], dir). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="123" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1abbaf6097689bdafcce5853d0a74c8a73" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::LoFace</definition>
        <argsstring>(const IntVect &amp;point, int dir, Vector&lt; Real &gt; &amp;loc) const noexcept</argsstring>
        <name>LoFace</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Sets location of lo face into loc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="129" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1ae177792027908beb20976fbd0628d754" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::LoFace</definition>
        <argsstring>(const IntVect &amp;point, int dir, Real *loc) const noexcept</argsstring>
        <name>LoFace</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Sets location of lo face into loc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="132" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a8c5e075f96416bf7b2b62f2b049c8066" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::HiFace</definition>
        <argsstring>(const IntVect &amp;point, int dir, Vector&lt; Real &gt; &amp;loc) const noexcept</argsstring>
        <name>HiFace</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Sets location of hi face into loc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="135" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="85" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a99d299808c6a8314a3e2064894d0a03a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::HiFace</definition>
        <argsstring>(const IntVect &amp;point, int dir, Real *loc) const noexcept</argsstring>
        <name>HiFace</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Sets location of hi face into loc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="138" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a2b1eed19248c0b8ffc16733bbf1d6baa" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::LoNode</definition>
        <argsstring>(const IntVect &amp;point, Vector&lt; Real &gt; &amp;loc) const noexcept</argsstring>
        <name>LoNode</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Return location of lower left hand corner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="141" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="106" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a0f2dc8592daa645225f6fbb76c7061c7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::LoNode</definition>
        <argsstring>(const IntVect &amp;point, Real *loc) const noexcept</argsstring>
        <name>LoNode</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Return location of lower left hand corner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="144" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="94" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a6900764dc4dfae368296b0caf5548999" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::HiNode</definition>
        <argsstring>(const IntVect &amp;point, Vector&lt; Real &gt; &amp;loc) const noexcept</argsstring>
        <name>HiNode</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Return location of upper right hand corner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="147" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="126" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a450803429d6c54bdfaeacaadeace5cb3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::HiNode</definition>
        <argsstring>(const IntVect &amp;point, Real *loc) const noexcept</argsstring>
        <name>HiNode</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Return location of upper right hand corner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="150" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="114" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a285d110b44d2e4412b27427418246fa4" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::CoordSys::CellIndex</definition>
        <argsstring>(const Real *point) const noexcept</argsstring>
        <name>CellIndex</name>
        <param>
          <type>const Real *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns cell centered index of cell containing point. This may return undesired results if point is on a cell boundary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="156" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="134" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aedba9cb3e81e6a96fd3cea8330ef0708" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::CoordSys::LowerIndex</definition>
        <argsstring>(const Real *point) const noexcept</argsstring>
        <name>LowerIndex</name>
        <param>
          <type>const Real *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns node centered index of lower left hand corner of cell containing this point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="161" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="147" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a74cecde9e2041a58b0d9b81b8ed00c22" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::CoordSys::UpperIndex</definition>
        <argsstring>(const Real *point) const noexcept</argsstring>
        <name>UpperIndex</name>
        <param>
          <type>const Real *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns node centered index of upper right hand corner of cell containing this point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="166" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="160" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a7d18b648e6020f7b18907a2a96c8b4fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::SetVolume</definition>
        <argsstring>(FArrayBox &amp;a_volfab, const Box &amp;region) const</argsstring>
        <name>SetVolume</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>a_volfab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Compute cell volumes in given region and place them into input FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="171" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="181" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a273cbc218839d9d4f88bfde8b8253c2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::GetVolume</definition>
        <argsstring>(FArrayBox &amp;vol, const Box &amp;region) const</argsstring>
        <name>GetVolume</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Compute cell volumes in given region and place them into resize()d input FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="176" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1ab487c819b8467fb587f459b98d100897" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::SetDLogA</definition>
        <argsstring>(FArrayBox &amp;a_dlogafab, const Box &amp;region, int dir) const</argsstring>
        <name>SetDLogA</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>a_dlogafab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Compute d(log(A))/dr at cell centers in given region and place them into input FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="181" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="217" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1add482d37cf7569590ad9052ef0c9d5be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::GetDLogA</definition>
        <argsstring>(FArrayBox &amp;dloga, const Box &amp;region, int dir) const</argsstring>
        <name>GetDLogA</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Compute d(log(A))/dr at cell centers in given region and return the results in the resize()d input FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="186" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="208" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aba35a53907662ab238f8ad457a9c242d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::Volume</definition>
        <argsstring>(const IntVect &amp;point) const</argsstring>
        <name>Volume</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Return the volume of the specified cell. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="189" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="443" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a1f29329ea886494a3df45eaba9c0b2cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::Volume</definition>
        <argsstring>(const Real xlo[AMREX_SPACEDIM], const Real xhi[AMREX_SPACEDIM]) const</argsstring>
        <name>Volume</name>
        <param>
          <type>const Real</type>
          <declname>xlo</declname>
          <array>[AMREX_SPACEDIM]</array>
        </param>
        <param>
          <type>const Real</type>
          <declname>xhi</declname>
          <array>[AMREX_SPACEDIM]</array>
        </param>
        <briefdescription>
<para>Return the volume of the specified cell. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="192" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="453" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a3036d0e98088cf5ce1478f81b6d02aea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::SetFaceArea</definition>
        <argsstring>(FArrayBox &amp;a_areafab, const Box &amp;region, int dir) const</argsstring>
        <name>SetFaceArea</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>a_areafab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Compute area of cell faces in given region and given index direction and return the result in input FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="199" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="257" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1af912928529cb7ca74eae3d2a812c9c0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::GetFaceArea</definition>
        <argsstring>(FArrayBox &amp;area, const Box &amp;region, int dir) const</argsstring>
        <name>GetFaceArea</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Compute area of cell faces in given region and given index direction and return the result in resize()d input FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="205" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="246" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aef00cc43234b7a33f92f246bbea6edac" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::AreaLo</definition>
        <argsstring>(const IntVect &amp;point, int dir) const noexcept</argsstring>
        <name>AreaLo</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns lo face area of given cell in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="208" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="473" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a7de7d489e53654914daf590cc820fd60" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::CoordSys::AreaHi</definition>
        <argsstring>(const IntVect &amp;point, int dir) const noexcept</argsstring>
        <name>AreaHi</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns hi face area of given cell in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="211" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="517" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1aea1434ade6324f26e8535f495ad65bdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::GetEdgeLoc</definition>
        <argsstring>(Vector&lt; Real &gt; &amp;loc, const Box &amp;region, int dir) const</argsstring>
        <name>GetEdgeLoc</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return array of physical locations of cell edges in the resize()d input array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="217" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="284" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a1e5bb6708a24e6df5c5d73422b637620" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::GetCellLoc</definition>
        <argsstring>(Vector&lt; Real &gt; &amp;loc, const Box &amp;region, int dir) const</argsstring>
        <name>GetCellLoc</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return array of physical locations of cell centers in the resize()d input array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="223" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="303" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a3a021239e50efa6a5a02ac8a3b5e45c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::GetEdgeVolCoord</definition>
        <argsstring>(Vector&lt; Real &gt; &amp;vc, const Box &amp;region, int dir) const</argsstring>
        <name>GetEdgeVolCoord</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>vc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return array of volume coordinates at cell edges for region in given direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="229" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="322" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CoordSys_1a635fa3a22b91c84b298c72e42f9c18d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CoordSys::GetCellVolCoord</definition>
        <argsstring>(Vector&lt; Real &gt; &amp;vc, const Box &amp;region, int dir) const</argsstring>
        <name>GetCellVolCoord</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>vc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return array of volume coordinates at cell centers for region in given direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="235" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="359" bodyend="392"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Coordinate System. </para>
    </briefdescription>
    <detaileddescription>
<para>Routines for mapping between physical coordinate system and index space. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
      </node>
      <node id="2">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Real</label>
      </node>
      <node id="1">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="2" relation="usage">
          <edgelabel>dx</edgelabel>
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.H" bodystart="24" bodyend="248"/>
    <listofallmembers>
      <member refid="classamrex_1_1CoordSys_1a7de7d489e53654914daf590cc820fd60" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>AreaHi</name></member>
      <member refid="classamrex_1_1CoordSys_1aef00cc43234b7a33f92f246bbea6edac" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>AreaLo</name></member>
      <member refid="classamrex_1_1CoordSys_1a80883db17d63160073d45479d937e74b" prot="protected" virt="non-virtual"><scope>amrex::CoordSys</scope><name>c_sys</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa773443060faab3679fd6637fbb386086" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>cartesian</name></member>
      <member refid="classamrex_1_1CoordSys_1a5c2b7698e44ce750730b8246fc1aa992" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1a20d11f9a4a56cc4abbbc63520b1a5e7f" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1aa88777a3be31a577cf01ed63a806f94b" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1a285d110b44d2e4412b27427418246fa4" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CellIndex</name></member>
      <member refid="classamrex_1_1CoordSys_1ade9815d7413549b5bb09000f1c9ede76" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1afc9b2295dec506f60239afca5e6a4a5d" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1aa352d079ec1fb2e0c971e8f5a6b077da" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CellSizeArray</name></member>
      <member refid="classamrex_1_1CoordSys_1a2c36af3bfd89e3168d643c45f123cac5" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>Coord</name></member>
      <member refid="classamrex_1_1CoordSys_1a37d58cefcf442aea6b94e824394cde52" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CoordInt</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806eba" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>CoordType</name></member>
      <member refid="classamrex_1_1CoordSys_1a178c38de0cae8e587e4c34541db7f45b" prot="protected" virt="non-virtual"><scope>amrex::CoordSys</scope><name>dx</name></member>
      <member refid="classamrex_1_1CoordSys_1a1e5bb6708a24e6df5c5d73422b637620" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>GetCellLoc</name></member>
      <member refid="classamrex_1_1CoordSys_1a635fa3a22b91c84b298c72e42f9c18d9" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>GetCellVolCoord</name></member>
      <member refid="classamrex_1_1CoordSys_1add482d37cf7569590ad9052ef0c9d5be" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>GetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1aea1434ade6324f26e8535f495ad65bdf" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>GetEdgeLoc</name></member>
      <member refid="classamrex_1_1CoordSys_1a3a021239e50efa6a5a02ac8a3b5e45c3" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>GetEdgeVolCoord</name></member>
      <member refid="classamrex_1_1CoordSys_1af912928529cb7ca74eae3d2a812c9c0c" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1CoordSys_1a273cbc218839d9d4f88bfde8b8253c2c" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1CoordSys_1a9ec92efce51bbde30e91c69673b080cf" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>HiEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a67a1ad822f7d6fac4907e3d37ab8953d" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>HiEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a8c5e075f96416bf7b2b62f2b049c8066" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>HiFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a99d299808c6a8314a3e2064894d0a03a" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>HiFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a6900764dc4dfae368296b0caf5548999" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>HiNode</name></member>
      <member refid="classamrex_1_1CoordSys_1a450803429d6c54bdfaeacaadeace5cb3" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>HiNode</name></member>
      <member refid="classamrex_1_1CoordSys_1a09a58ce8c24e2ad549c98754fd2adaeb" prot="protected" virt="non-virtual"><scope>amrex::CoordSys</scope><name>inv_dx</name></member>
      <member refid="classamrex_1_1CoordSys_1ad195c96d818c1331428e90a727745304" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>InvCellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1a3a9c67df49c93b825ac5378f5411b9da" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>InvCellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1ad30ea5aed12689007843a59201563409" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>InvCellSizeArray</name></member>
      <member refid="classamrex_1_1CoordSys_1a500695aa14e3fd01f3d7162fd784133e" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>IsCartesian</name></member>
      <member refid="classamrex_1_1CoordSys_1aff79cb7249a744e24c5b335935f20fe6" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>IsRZ</name></member>
      <member refid="classamrex_1_1CoordSys_1a87414a566bba1fff3d0185286a11ba56" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>IsSPHERICAL</name></member>
      <member refid="classamrex_1_1CoordSys_1aad8c159e97f7422f2bf45b92bf3a3002" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>LoEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a6f6cad7c903feeb070e26cea3df1af5c" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>LoEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1abbaf6097689bdafcce5853d0a74c8a73" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>LoFace</name></member>
      <member refid="classamrex_1_1CoordSys_1ae177792027908beb20976fbd0628d754" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>LoFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a2b1eed19248c0b8ffc16733bbf1d6baa" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>LoNode</name></member>
      <member refid="classamrex_1_1CoordSys_1a0f2dc8592daa645225f6fbb76c7061c7" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>LoNode</name></member>
      <member refid="classamrex_1_1CoordSys_1aedba9cb3e81e6a96fd3cea8330ef0708" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>LowerIndex</name></member>
      <member refid="classamrex_1_1CoordSys_1a87497b1adb83ce034ea0ab943fffc08f" prot="protected" virt="non-virtual"><scope>amrex::CoordSys</scope><name>offset</name></member>
      <member refid="classamrex_1_1CoordSys_1a9d3eb77447b9c748b7223e271f6c9bb1" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>Offset</name></member>
      <member refid="classamrex_1_1CoordSys_1aa67991fbbc479f95a966bcf04ae0e49a" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>Offset</name></member>
      <member refid="classamrex_1_1CoordSys_1abee8e858b3ca22a33388275e0a2cfcbf" prot="protected" virt="non-virtual"><scope>amrex::CoordSys</scope><name>ok</name></member>
      <member refid="classamrex_1_1CoordSys_1a13dd49de2ef262fde3364ae394f32538" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>Ok</name></member>
      <member refid="classamrex_1_1CoordSys_1a4db09c25776b9c0b4dfb9b49cbfe4aa6" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1CoordSys_1a24251fbdbd3497be0c9ef8a30260aa41" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa090e74483c754250a5e0ee448bdfe8b3" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>RZ</name></member>
      <member refid="classamrex_1_1CoordSys_1a2bf1bf10c89e3d151b0ad49b2c1722fa" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>SetCoord</name></member>
      <member refid="classamrex_1_1CoordSys_1ab487c819b8467fb587f459b98d100897" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>SetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1a3036d0e98088cf5ce1478f81b6d02aea" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>SetFaceArea</name></member>
      <member refid="classamrex_1_1CoordSys_1aded987526da2665b805f491a3544ccd8" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>SetOffset</name></member>
      <member refid="classamrex_1_1CoordSys_1a7d18b648e6020f7b18907a2a96c8b4fd" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>SetVolume</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaaa0c55dfafca5806f988babd974f5b158" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>SPHERICAL</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa2debcd8f37986ae0e3c488f583234ccc" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>undef</name></member>
      <member refid="classamrex_1_1CoordSys_1a74cecde9e2041a58b0d9b81b8ed00c22" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>UpperIndex</name></member>
      <member refid="classamrex_1_1CoordSys_1aba35a53907662ab238f8ad457a9c242d" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>Volume</name></member>
      <member refid="classamrex_1_1CoordSys_1a1f29329ea886494a3df45eaba9c0b2cb" prot="public" virt="non-virtual"><scope>amrex::CoordSys</scope><name>Volume</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
