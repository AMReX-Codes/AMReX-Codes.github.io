<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1BoxDomain" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxDomain</compoundname>
    <basecompoundref refid="classamrex_1_1BoxList" prot="protected" virt="non-virtual">amrex::BoxList</basecompoundref>
    <includes refid="AMReX__BoxDomain_8H" local="no">AMReX_BoxDomain.H</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1BoxDomain_1aadd7573c3340ebe816567b7f767e94a8" prot="public" static="no">
        <type><ref refid="classamrex_1_1BoxList_1adf0575e48f46e057b423a516c7328f93" kindref="member">BoxList::const_iterator</ref></type>
        <definition>using amrex::BoxDomain::const_iterator =  BoxList::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>amrex::BoxDomain::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="71" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" bodystart="71" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1BoxDomain_1a3db3f4e602c9ae00c64da4d8d2a048aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ClusterList</definition>
        <argsstring></argsstring>
        <name>ClusterList</name>
        <qualifiedname>amrex::BoxDomain::ClusterList</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ClusterList" kindref="compound">ClusterList</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="69" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" bodystart="69" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a47079914541e9badea37cd84a4eb8511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>()</argsstring>
        <name>BoxDomain</name>
        <qualifiedname>amrex::BoxDomain::BoxDomain</qualifiedname>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> of <ref refid="classamrex_1_1IndexTypeND_1abf223fe9abd76b2f43575bd0e6858686" kindref="member">IndexType::TheCellType()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="74" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1adf430e5f38acc600c84e559bb68dc5d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>BoxDomain</name>
        <qualifiedname>amrex::BoxDomain::BoxDomain</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>A Box Domain out of single Box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="77" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a64ee738d97ad6b873205801db2689a09" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>(IndexType itype)</argsstring>
        <name>BoxDomain</name>
        <qualifiedname>amrex::BoxDomain::BoxDomain</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
          <declname>itype</declname>
        </param>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> of IndexType itype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="80" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1afe56e5629c6f85bd01429ac8469eb038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxDomain::add</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>add</name>
        <qualifiedname>amrex::BoxDomain::add</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add a Box to the domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="121" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1af68c7f595490816f50871a46efbbeded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxDomain::add</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>add</name>
        <qualifiedname>amrex::BoxDomain::add</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Add all Boxes in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to the domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="86" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a1d49c186eeea202115e3194e30c47a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::rmBox</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>rmBox</name>
        <qualifiedname>amrex::BoxDomain::rmBox</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Remove a box from the domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="89" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="159" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1afe4ab28d7d6d8b37ffb2d2940d47b1e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxDomain::ok</definition>
        <argsstring>() const</argsstring>
        <name>ok</name>
        <qualifiedname>amrex::BoxDomain::ok</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if this <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> is valid. Checks for disjointedness. Returns true if the <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="95" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="180" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1adabfc3621a41317e6fc4a0c0d156aa57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>const BoxList &amp; amrex::BoxDomain::boxList</definition>
        <argsstring>() const</argsstring>
        <name>boxList</name>
        <qualifiedname>amrex::BoxDomain::boxList</qualifiedname>
        <briefdescription>
<para>Return a const reference to the underlying <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> of this <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="134" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a03627b9f1cb88ad3ff6066b036e3ed97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxDomain::operator==</definition>
        <argsstring>(const BoxDomain &amp;rhs) const</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::BoxDomain::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxDomains equal? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="137" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a35966fff359c5b6498bcc2ca60c67f12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxDomain::operator!=</definition>
        <argsstring>(const BoxDomain &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::BoxDomain::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxDomains not equal? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="140" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a1732a2c030467bb5a6d20721d0ff99c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::refine</definition>
        <argsstring>(int ratio)</argsstring>
        <name>refine</name>
        <qualifiedname>amrex::BoxDomain::refine</qualifiedname>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Refine all Boxes in the domain by the refinement ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="143" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a12ab20cb383ad53fb9169af3f7120438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::coarsen</definition>
        <argsstring>(int ratio)</argsstring>
        <name>coarsen</name>
        <qualifiedname>amrex::BoxDomain::coarsen</qualifiedname>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen all Boxes in the domain by the refinement ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="146" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="220" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a6168e6055822180730994c1ad73e068e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::intersect</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>intersect</name>
        <qualifiedname>amrex::BoxDomain::intersect</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Intersect this <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> with Box b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="149" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="11" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a20c090a963f6f3fb6db35d43bb0cce3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::accrete</definition>
        <argsstring>(int sz)</argsstring>
        <name>accrete</name>
        <qualifiedname>amrex::BoxDomain::accrete</qualifiedname>
        <param>
          <type>int</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Grow each Box by size sz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="152" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="210" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a4e42de6a63d5099e53e83300e71d5f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxDomain &amp;bl)</argsstring>
        <name>complementIn</name>
        <qualifiedname>amrex::BoxDomain::complementIn</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Creates the complement of <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> bl in Box b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="155" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a1b546c6d1a623b0335f40983e1d46b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxList::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::BoxDomain::clear</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="98" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1ac4030d4780cc8ca926857c82819c1c42" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BoxList::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::BoxDomain::size</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="101" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a54c5936a5ec0332d158270277e862f85" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::isEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isEmpty</name>
        <qualifiedname>amrex::BoxDomain::isEmpty</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="104" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a6dac99633eca2bfbb8c2f287f423f9a4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::isNotEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isNotEmpty</name>
        <qualifiedname>amrex::BoxDomain::isNotEmpty</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="107" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1acb7f8b8c07867e9a40ac51922ce07e31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxList::minimalBox</definition>
        <argsstring>() const</argsstring>
        <name>minimalBox</name>
        <qualifiedname>amrex::BoxDomain::minimalBox</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="110" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="749" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a25986c43e3bd0e8b7043955680879e16" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
        <definition>IndexType amrex::BoxList::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <qualifiedname>amrex::BoxDomain::ixType</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="113" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a827d337283d6b99be9feff0887409674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BoxList::simplify</definition>
        <argsstring>(bool best=false)</argsstring>
        <name>simplify</name>
        <qualifiedname>amrex::BoxDomain::simplify</qualifiedname>
        <param>
          <type>bool</type>
          <declname>best</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="116" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="654" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1abc4b6bd9e48f341f77e5b0381b5308e0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList_1ad652e92fe1eaacabb971a11038426ff6" kindref="member">iterator</ref></type>
        <definition>iterator amrex::BoxList::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::BoxDomain::begin</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="119" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a8e3958e44ca086a0b4a511f62cddc031" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain_1aadd7573c3340ebe816567b7f767e94a8" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::BoxList::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::BoxDomain::begin</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="119" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a3f031aa03b4e913c8fa413cf76d1807d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList_1ad652e92fe1eaacabb971a11038426ff6" kindref="member">iterator</ref></type>
        <definition>iterator amrex::BoxList::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::BoxDomain::end</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="122" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a35fb0445d4f861be4ed66bf9861e9f14" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain_1aadd7573c3340ebe816567b7f767e94a8" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::BoxList::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::BoxDomain::end</qualifiedname>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="122" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a128dd0ae9ea6a6c9bed4a5af6a77518f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxList::contains</definition>
        <argsstring>(const BoxList &amp;bl) const</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxDomain::contains</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="125" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="254" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1ae1365cb7aee29d36a33db9804bcc1a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList &amp; amrex::BoxList::shift</definition>
        <argsstring>(int dir, int nzones)</argsstring>
        <name>shift</name>
        <qualifiedname>amrex::BoxDomain::shift</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="128" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="565" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a212f2fed6ea24374e6eab8924370f83c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList &amp; amrex::BoxList::shiftHalf</definition>
        <argsstring>(int dir, int num_halfs)</argsstring>
        <name>shiftHalf</name>
        <qualifiedname>amrex::BoxDomain::shiftHalf</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_halfs</declname>
        </param>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="131" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="575" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1ab7f6f44784766807b294541ab761df61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>BoxList &amp; amrex::BoxList::shiftHalf</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>shiftHalf</name>
        <qualifiedname>amrex::BoxDomain::shiftHalf</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Promoted from <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="131" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="585" bodyend="592"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a378ee4b07d91023565d794005b1e7869" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>(BoxList &amp;&amp;bl)</argsstring>
        <name>BoxDomain</name>
        <qualifiedname>amrex::BoxDomain::BoxDomain</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Construct from a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> that has no overlap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="160" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="116" bodyend="118"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A List of Disjoint Boxes. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> is a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> with the restriction that Boxes in the list are disjoint. Note that a <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> is NOT a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> due to the protected inheritance. This is a concrete class, not a polymorphic one. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::BoxDomain</label>
        <link refid="classamrex_1_1BoxDomain"/>
        <childnode refid="2" relation="protected-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>amrex::IndexTypeND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::BoxDomain</label>
        <link refid="classamrex_1_1BoxDomain"/>
        <childnode refid="2" relation="protected-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="4">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" bodystart="67" bodyend="161"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxDomain_1a20c090a963f6f3fb6db35d43bb0cce3f" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>accrete</name></member>
      <member refid="classamrex_1_1BoxList_1a32688a9bda515abc18135aaef21f2812" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>accrete</name></member>
      <member refid="classamrex_1_1BoxDomain_1afe56e5629c6f85bd01429ac8469eb038" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>add</name></member>
      <member refid="classamrex_1_1BoxDomain_1af68c7f595490816f50871a46efbbeded" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>add</name></member>
      <member refid="classamrex_1_1BoxList_1a62a9e0ec396f6f764973eb0feb6b43ff" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>Bcast</name></member>
      <member refid="classamrex_1_1BoxDomain_1abc4b6bd9e48f341f77e5b0381b5308e0" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>begin</name></member>
      <member refid="classamrex_1_1BoxDomain_1a8e3958e44ca086a0b4a511f62cddc031" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>begin</name></member>
      <member refid="classamrex_1_1BoxDomain_1a47079914541e9badea37cd84a4eb8511" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxDomain_1adf430e5f38acc600c84e559bb68dc5d2" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxDomain_1a64ee738d97ad6b873205801db2689a09" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxDomain_1a378ee4b07d91023565d794005b1e7869" prot="private" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxList_1a31584546393b5ff7f420e6bffd8486bd" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a128274e71f12eceb9980758522776803" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a1c27b6ccc4493126a264598cebbb88b7" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1aa5e1e0f1149682e0c8cd5a88451811ba" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a3c9b3b9af19b73c1c7efafda6238dbe9" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a30479ce1f63ba9843fe6d5253b6c3fb9" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a54773484ed81f097deb889555b7ca24b" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1afe00f77bc420a45f32d484d982e02072" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a57ceea7a76c84d3befd6ec06c059bbe7" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a6603dcbdc28135b48e5bfa98b942da73" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxDomain_1adabfc3621a41317e6fc4a0c0d156aa57" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>boxList</name></member>
      <member refid="classamrex_1_1BoxList_1a70df1b0aadeb1c7f0360299f0e2b2fc4" prot="private" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>btype</name></member>
      <member refid="classamrex_1_1BoxList_1a6064b561ef6b7f4001b73a063b22bd57" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>capacity</name></member>
      <member refid="classamrex_1_1BoxList_1a5401acc7f967b93eb6e755966491aa58" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>catenate</name></member>
      <member refid="classamrex_1_1BoxList_1a297a2a3a29d1e4dee564a816d45e82fc" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>cbegin</name></member>
      <member refid="classamrex_1_1BoxList_1a15a6c62e9713841765d115f00a5723f3" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>cend</name></member>
      <member refid="classamrex_1_1BoxDomain_1a1b546c6d1a623b0335f40983e1d46b8a" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>clear</name></member>
      <member refid="classamrex_1_1BoxDomain_1a3db3f4e602c9ae00c64da4d8d2a048aa" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>ClusterList</name></member>
      <member refid="classamrex_1_1BoxDomain_1a12ab20cb383ad53fb9169af3f7120438" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxList_1a027351c65c539a1bed66b7fe71727293" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxDomain_1a4e42de6a63d5099e53e83300e71d5f5d" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1adccff45f40de690c73705b0096f71d2e" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a810b81750936e6130384f4849c0578a8" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1abd4832e2118120dab69131b25df3b011" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxDomain_1aadd7573c3340ebe816567b7f767e94a8" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>const_iterator</name></member>
      <member refid="classamrex_1_1BoxDomain_1a128dd0ae9ea6a6c9bed4a5af6a77518f" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxList_1a19b1f76e1e9f2201c72c3c5663d02109" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxList_1a48642872f61049760846b041482095c9" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>data</name></member>
      <member refid="classamrex_1_1BoxList_1a4ad1d287e2d8a0aac1a7b775d6c3ccce" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>data</name></member>
      <member refid="classamrex_1_1BoxList_1a9333bd66642bc9bc12d0eb45fa6a44b8" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxList_1ad9a1a42f5c2756f29d3f26031a1e2b1b" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxDomain_1a3f031aa03b4e913c8fa413cf76d1807d" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>end</name></member>
      <member refid="classamrex_1_1BoxDomain_1a35fb0445d4f861be4ed66bf9861e9f14" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>end</name></member>
      <member refid="classamrex_1_1BoxList_1a9ac8e9f23e7b6fc535710ec981c10a55" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>front</name></member>
      <member refid="classamrex_1_1BoxList_1a24b63449b10f1eadb3b702cd03d59bdc" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>front</name></member>
      <member refid="classamrex_1_1BoxDomain_1a6168e6055822180730994c1ad73e068e" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>intersect</name></member>
      <member refid="classamrex_1_1BoxList_1acdc04c590be5dfb0bc29b4c9de00eb17" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>intersect</name></member>
      <member refid="classamrex_1_1BoxList_1a18846dc6645e047916b3833a7ec1a777" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>isDisjoint</name></member>
      <member refid="classamrex_1_1BoxDomain_1a54c5936a5ec0332d158270277e862f85" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>isEmpty</name></member>
      <member refid="classamrex_1_1BoxDomain_1a6dac99633eca2bfbb8c2f287f423f9a4" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>isNotEmpty</name></member>
      <member refid="classamrex_1_1BoxList_1ad652e92fe1eaacabb971a11038426ff6" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>iterator</name></member>
      <member refid="classamrex_1_1BoxDomain_1a25986c43e3bd0e8b7043955680879e16" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>ixType</name></member>
      <member refid="classamrex_1_1BoxList_1af1451e74b2d7de70b58b9979e21aeb49" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>join</name></member>
      <member refid="classamrex_1_1BoxList_1ae86c1cb2471cb633d0abf4657d080a73" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>join</name></member>
      <member refid="classamrex_1_1BoxList_1adeadcf55bf1de6d0a14007817795bfbf" prot="private" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>m_lbox</name></member>
      <member refid="classamrex_1_1BoxList_1aac6c4404f747acf9bf7603a2b9251fc0" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxList_1a39538957433bdb89514719e8599bf602" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxDomain_1acb7f8b8c07867e9a40ac51922ce07e31" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxDomain_1afe4ab28d7d6d8b37ffb2d2940d47b1e4" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxDomain_1a35966fff359c5b6498bcc2ca60c67f12" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxList_1a4610d792f42c68d9c5481dcf83d09397" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxList_1aedde54e9d7f12cf9e32e4822d2e872c4" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxList_1a8c613ffacddbdc0f074632fa070efa54" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxDomain_1a03627b9f1cb88ad3ff6066b036e3ed97" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxList_1a111f72bd85cc49ade7c956cdf35d330b" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxList_1ab9071e12fb35012248c8978ed5e9b5a1" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>ordered_simplify</name></member>
      <member refid="classamrex_1_1BoxList_1aa7b46566b3811f4d2bfa5d247e4a1db4" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a6450f86fcfe69bdce1c9bad67dfd7d8a" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1ab724751a92360bcd17bc6cf11227fe11" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1aaf9cf5350e31edefe87e9e8b2f2278ef" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>push_back</name></member>
      <member refid="classamrex_1_1BoxDomain_1a1732a2c030467bb5a6d20721d0ff99c7" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxList_1a918464f548ae528156c47263f59597f3" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxList_1abf4644145ceb9882c2e06be03148da11" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>removeEmpty</name></member>
      <member refid="classamrex_1_1BoxList_1a7b999e76e5422aa024da160623cc81f8" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>reserve</name></member>
      <member refid="classamrex_1_1BoxDomain_1a1d49c186eeea202115e3194e30c47a68" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>rmBox</name></member>
      <member refid="classamrex_1_1BoxList_1a5500e705c89c6c7f8d69a15fec86ac67" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>set</name></member>
      <member refid="classamrex_1_1BoxDomain_1ae1365cb7aee29d36a33db9804bcc1a89" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxDomain_1a212f2fed6ea24374e6eab8924370f83c" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BoxDomain_1ab7f6f44784766807b294541ab761df61" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BoxDomain_1a827d337283d6b99be9feff0887409674" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>simplify</name></member>
      <member refid="classamrex_1_1BoxList_1aaf1b93b74700437fde78c1cecfba7283" prot="private" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>simplify_doit</name></member>
      <member refid="classamrex_1_1BoxDomain_1ac4030d4780cc8ca926857c82819c1c42" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>size</name></member>
      <member refid="classamrex_1_1BoxList_1a90b7a6656171c845e6f3b9761babf173" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxList_1ae0859bd8531420c10412435d6674856e" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxList_1a9d63414afae1383f87a0fa6bda4c3cc7" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>swap</name></member>
      <member refid="classamrex_1_1BoxList_1a65e7da9a77d7d7f5ebffbeecd8b3bf51" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>~BoxList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
