<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1StateData" kind="class" language="C++" prot="public">
    <compoundname>amrex::StateData</compoundname>
    <includes refid="AMReX__StateData_8H" local="no">AMReX_StateData.H</includes>
    <innerclass refid="structamrex_1_1StateData_1_1TimeInterval" prot="private">amrex::StateData::TimeInterval</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1StateData_1a51a3670e2ed07485744ef6462ebfd6ce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class StateDataPhysBCFunct</definition>
        <argsstring></argsstring>
        <name>StateDataPhysBCFunct</name>
        <param>
          <type><ref refid="classamrex_1_1StateDataPhysBCFunct" kindref="compound">StateDataPhysBCFunct</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="34" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1StateData_1ac29954add581987ecf4948fb9090b2d6" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FabFactory&lt;FArrayBox&gt; &gt; amrex::StateData::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="411" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1a5201a1b8230055d506cef5f265a8b8e2" prot="private" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> *</type>
        <definition>const StateDescriptor* amrex::StateData::desc</definition>
        <argsstring></argsstring>
        <name>desc</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Pointer to data descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="420" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1a51e767063a27b4c6941e585193242bde" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::StateData::domain</definition>
        <argsstring></argsstring>
        <name>domain</name>
        <briefdescription>
<para>Problem domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="423" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1af7a3b275665dcd4803b3780a02e36b48" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::StateData::grids</definition>
        <argsstring></argsstring>
        <name>grids</name>
        <briefdescription>
<para>Grids defined at this level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="426" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1aa537bc30a17ee4576c5490ca30da94c1" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::StateData::dmap</definition>
        <argsstring></argsstring>
        <name>dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="428" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1ad6b519ebb5a60157c412e833587b12b3" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1StateData_1_1TimeInterval" kindref="compound">TimeInterval</ref></type>
        <definition>TimeInterval amrex::StateData::new_time</definition>
        <argsstring></argsstring>
        <name>new_time</name>
        <briefdescription>
<para>Time variable assoc with new data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="431" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1a49bf88f51c149857686027e44513f4f8" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1StateData_1_1TimeInterval" kindref="compound">TimeInterval</ref></type>
        <definition>TimeInterval amrex::StateData::old_time</definition>
        <argsstring></argsstring>
        <name>old_time</name>
        <briefdescription>
<para>Time variable assoc with old data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="434" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1a08b05c680ad59e2ac04f8178d52cf3a0" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiFab&gt; amrex::StateData::new_data</definition>
        <argsstring></argsstring>
        <name>new_data</name>
        <briefdescription>
<para>Pointer to new-time data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="437" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1a9702465fcc6db1bb193b1a82222b0e1c" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiFab&gt; amrex::StateData::old_data</definition>
        <argsstring></argsstring>
        <name>old_data</name>
        <briefdescription>
<para>Pointer to previous time data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="440" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1a79cbe7313de5292d236958355ff878dd" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::StateData::arena</definition>
        <argsstring></argsstring>
        <name>arena</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> we should use for allocating the data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="443" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="443" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1StateData_1af35f43aa012590a264cbb08405ff5c1f" prot="private" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt; std::string &gt; amrex::StateData::fabArrayHeaderNames</definition>
        <argsstring></argsstring>
        <name>fabArrayHeaderNames</name>
        <briefdescription>
<para>This is used as a temporary collection of <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> header names written during a checkpoint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="449" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateData_1a60cd1a78a793b7a4ce54e70da0f0dd55" prot="private" static="yes" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt; *</type>
        <definition>std::map&lt; std::string, Vector&lt; char &gt; &gt; * amrex::StateData::faHeaderMap</definition>
        <argsstring></argsstring>
        <name>faHeaderMap</name>
        <briefdescription>
<para>This is used to store preread <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> headers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="452" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="452" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1StateData_1a947b62feb1753b7ebe6c604066b1d494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::StateData::StateData</definition>
        <argsstring>()</argsstring>
        <name>StateData</name>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="41" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ae0dbe25ac3e59b6bfb42e24f8fa8cf9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::StateData::StateData</definition>
        <argsstring>(const Box &amp;p_domain, const BoxArray &amp;grds, const DistributionMapping &amp;dm, const StateDescriptor *d, Real cur_time, Real dt, const FabFactory&lt; FArrayBox &gt; &amp;factory)</argsstring>
        <name>StateData</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>p_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>cur_time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
<para>Constructor that properly initializes data members. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_domain</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grds</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dm</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cur_time</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factory</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="54" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="39" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a3d5f27474f7f24ed6995b4735150be55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::StateData::~StateData</definition>
        <argsstring>()</argsstring>
        <name>~StateData</name>
        <briefdescription>
<para>The destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="65" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a9ed30f9771b7271144f8746cc4644cfe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::StateData::StateData</definition>
        <argsstring>(StateData &amp;&amp;rhs) noexcept</argsstring>
        <name>StateData</name>
        <param>
          <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="67" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a26b9b0159d7c1920219dc3bb059380cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
        <definition>StateData &amp; amrex::StateData::operator=</definition>
        <argsstring>(StateData const &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="68" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="65" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a9ee2ed55ac82c740d722ffe69da70f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::StateData::StateData</definition>
        <argsstring>(StateData const &amp;rhs)=delete</argsstring>
        <name>StateData</name>
        <param>
          <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="70" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ac22ac5d88623f3dba92cb57a5e92d5fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
        <definition>StateData&amp; amrex::StateData::operator=</definition>
        <argsstring>(StateData &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="71" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a4e4c8151397754fd5f8dadb6307bb58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::define</definition>
        <argsstring>(const Box &amp;p_domain, const BoxArray &amp;grds, const DistributionMapping &amp;dm, const StateDescriptor &amp;d, Real cur_time, Real dt, const FabFactory&lt; FArrayBox &gt; &amp;factory)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>p_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>cur_time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
<para>Initializes data members if you used default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_domain</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grds</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dm</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cur_time</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factory</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="84" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="92" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a1c745ccf4e72c085db52b18751ccc25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::copyOld</definition>
        <argsstring>(const StateData &amp;state)</argsstring>
        <name>copyOld</name>
        <param>
          <type>const <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Copies old data from another <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> object and sets the same time level. If old data is uninitialized, allocates it with same properties as the input data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="98" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="138" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ad67c07eef71baec1306b491e1f02475d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::copyNew</definition>
        <argsstring>(const StateData &amp;state)</argsstring>
        <name>copyNew</name>
        <param>
          <type>const <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Copies new data from another <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> object and sets the same time level. If new data is uninitialized, allocates it with the same properties as the input data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="106" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="154" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ac696f694c50d2b6251f9576fabfdedcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::allocOldData</definition>
        <argsstring>()</argsstring>
        <name>allocOldData</name>
        <briefdescription>
<para>Allocates space for old timestep data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="111" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="308" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a06540ec48ea9f0078a983964f233a9d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::removeOldData</definition>
        <argsstring>()</argsstring>
        <name>removeOldData</name>
        <briefdescription>
<para>Deletes the space used by the old timestep data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="116" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ad51ab660eddbb7e6d4b51f53101a5509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reverts back to initial state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="121" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="170" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ac6dd29902982ccf98c08a09c793a49be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::swapTimeLevels</definition>
        <argsstring>(Real dt)</argsstring>
        <name>swapTimeLevels</name>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Old data becomes new data and new time is incremented by dt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="128" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="389" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a19585d569e94bd3e15d5c6a0f4c969c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::replaceOldData</definition>
        <argsstring>(MultiFab &amp;&amp;mf)</argsstring>
        <name>replaceOldData</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;&amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
<para>Swaps old data with a new <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. Deletes the previous old data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="136" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1adfaafffb0ba3924042c4357b7d51fe53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::replaceOldData</definition>
        <argsstring>(StateData &amp;s)</argsstring>
        <name>replaceOldData</name>
        <param>
          <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Swaps old data with another <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref>. Does not delete the previous old data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="144" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a0a6ffa5747a2c044f456d77adf50f338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::replaceNewData</definition>
        <argsstring>(MultiFab &amp;&amp;mf)</argsstring>
        <name>replaceNewData</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;&amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
<para>Swaps new data with a new <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. Deletes the previous new data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="152" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a3c5fc5e62763a1c66248c47951055162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::replaceNewData</definition>
        <argsstring>(StateData &amp;s)</argsstring>
        <name>replaceNewData</name>
        <param>
          <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Swaps new data with another <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref>. Does not delete the previous new data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="160" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a8e6217ecac0e2a8d99ce273835b20e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::setTimeLevel</definition>
        <argsstring>(Real time, Real dt_old, Real dt_new)</argsstring>
        <name>setTimeLevel</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt_old</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt_new</declname>
        </param>
        <briefdescription>
<para>Sets time of old and new data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_new</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt_old</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt_new</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="170" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="370" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a174f384ed70022d265210fb0ffa0f448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::setOldTimeLevel</definition>
        <argsstring>(Real time)</argsstring>
        <name>setOldTimeLevel</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Sets time of old data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_old</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="179" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="327" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a9abd20c02f978ad493cfe44eec3dec13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::setNewTimeLevel</definition>
        <argsstring>(Real time)</argsstring>
        <name>setNewTimeLevel</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Sets time of new data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_new</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="186" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="340" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a6a65bf767c55f02b3c1ebbc0b35d3bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::syncNewTimeLevel</definition>
        <argsstring>(Real time)</argsstring>
        <name>syncNewTimeLevel</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="188" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="353" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a9c9d09d9399b42dacae6863ff33fb8ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::RegisterData</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;multiFabCopyDesc, Vector&lt; MultiFabId &gt; &amp;mfid)</argsstring>
        <name>RegisterData</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>multiFabCopyDesc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a55427a27e71c45e7066414b0accf4a9b" kindref="member">MultiFabId</ref> &gt; &amp;</type>
          <declname>mfid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="190" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="579" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1add0ef828c3264079f14cc05abcbb6cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::InterpAddBox</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;multiFabCopyDesc, Vector&lt; MultiFabId &gt; &amp;mfid, BoxList *returnedUnfillableBoxes, Vector&lt; FillBoxId &gt; &amp;returnedFillBoxIds, const Box &amp;subbox, Real time, int src_comp, int dest_comp, int num_comp, bool extrap=false)</argsstring>
        <name>InterpAddBox</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>multiFabCopyDesc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a55427a27e71c45e7066414b0accf4a9b" kindref="member">MultiFabId</ref> &gt; &amp;</type>
          <declname>mfid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> *</type>
          <declname>returnedUnfillableBoxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FillBoxId" kindref="compound">FillBoxId</ref> &gt; &amp;</type>
          <declname>returnedFillBoxIds</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="193" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="588" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a64b6d97172a5fa5f54ecaed8181bbe28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::InterpFillFab</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;fabCopyDesc, const Vector&lt; MultiFabId &gt; &amp;mfid, const Vector&lt; FillBoxId &gt; &amp;fillBoxIds, FArrayBox &amp;dest, Real time, int src_comp, int dest_comp, int num_comp, bool extrap=false)</argsstring>
        <name>InterpFillFab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>fabCopyDesc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a55427a27e71c45e7066414b0accf4a9b" kindref="member">MultiFabId</ref> &gt; &amp;</type>
          <declname>mfid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FillBoxId" kindref="compound">FillBoxId</ref> &gt; &amp;</type>
          <declname>fillBoxIds</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="204" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="662" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a7ca9ba16e42a6ffe8e9bcbabf51d25db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::FillBoundary</definition>
        <argsstring>(FArrayBox &amp;dest, Real time, const Real *dx, const RealBox &amp;prob_domain, int dest_comp, int src_comp, int num_comp=1)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>prob_domain</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Set physical bndry values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob_domain</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="226" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="434" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a593e4c97974095398a43d0132ef3a868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::FillBoundary</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;dest, Real time, Geometry const &amp;geom, int dest_comp, int src_comp, int num_comp)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="234" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="525" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a83d7bc0a021a283efce9b4f500315540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::checkPoint</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;fullpathname, std::ostream &amp;os, VisMF::How how, bool dump_old=true)</argsstring>
        <name>checkPoint</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fullpathname</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <declname>how</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dump_old</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Write the state data to a checkpoint file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullpathname</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>how</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dump_old</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="251" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="773" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a34ec54719f6bb5ab1f546f425b53c009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::restart</definition>
        <argsstring>(std::istream &amp;is, const Box &amp;p_domain, const BoxArray &amp;grds, const DistributionMapping &amp;dm, const FabFactory&lt; FArrayBox &gt; &amp;factory, const StateDescriptor &amp;d, const std::string &amp;chkfile)</argsstring>
        <name>restart</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>p_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chkfile</declname>
        </param>
        <briefdescription>
<para>Restart with domain box, grids, and dmap provided. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_domain</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grds</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dm</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factroy</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>restart_file</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="268" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="178" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1aa6591b111a02fd2bc24bf77c7d2e41e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::restart</definition>
        <argsstring>(const StateDescriptor &amp;d, const StateData &amp;rhs)</argsstring>
        <name>restart</name>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>or from another similar state </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="282" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="284" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1af7d0d9b72529aed95163ed531d9c7e81" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> *</type>
        <definition>const StateDescriptor* amrex::StateData::descriptor</definition>
        <argsstring>() const noexcept</argsstring>
        <name>descriptor</name>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="288" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ae6c8e83a79b4df57c9dccb1f5062204a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
        <definition>const Box&amp; amrex::StateData::getDomain</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDomain</name>
        <briefdescription>
<para>Returns the valid domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="293" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a805fefd43e63ca5b6b0b3ddd26f8b04c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::StateData::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="298" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a1f08c8bd5682d1afe2031d820e4456f9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::StateData::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="300" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a74036cca3383362145e0dd06a14a65ad" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::setDistributionMap</definition>
        <argsstring>(DistributionMapping &amp;new_dmap) noexcept</argsstring>
        <name>setDistributionMap</name>
        <param>
          <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>new_dmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_dmap</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="306" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a82894d26881a9d4dbabb3cfbf6053e4d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
        <definition>const FabFactory&lt;FArrayBox&gt;&amp; amrex::StateData::Factory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="308" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a46807890235430fd9f2e12d422a6321b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::StateData::curTime</definition>
        <argsstring>() const noexcept</argsstring>
        <name>curTime</name>
        <briefdescription>
<para>Returns the current time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="313" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1aacf7931abf97b3774c79b60e80d177a4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::StateData::prevTime</definition>
        <argsstring>() const noexcept</argsstring>
        <name>prevTime</name>
        <briefdescription>
<para>Returns the previous time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="321" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="321" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a2351d4871d6a5f299b26c1d6150690a7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab&amp; amrex::StateData::newData</definition>
        <argsstring>() noexcept</argsstring>
        <name>newData</name>
        <briefdescription>
<para>Returns the new data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="329" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a5a81beda34e62a92aadd7941bcc5157e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab&amp; amrex::StateData::newData</definition>
        <argsstring>() const noexcept</argsstring>
        <name>newData</name>
        <briefdescription>
<para>Returns the new data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="334" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1aad9dcb2a2c843b2643d2d3637f047341" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab&amp; amrex::StateData::oldData</definition>
        <argsstring>() noexcept</argsstring>
        <name>oldData</name>
        <briefdescription>
<para>Returns the old data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="339" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a37932d39174ba8a1475585e6a843ae4b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab&amp; amrex::StateData::oldData</definition>
        <argsstring>() const noexcept</argsstring>
        <name>oldData</name>
        <briefdescription>
<para>Returns the old data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="344" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="344" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a85837b66263e6415ba8a9b4830749ac8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::StateData::newGrid</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>newGrid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the FAB of new data at grid index <lsquo/>i<rsquo/>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="351" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="351" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a328237a5f801df70d0bb7ca0b3b4f354" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::StateData::oldGrid</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>oldGrid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the FAB of old data at grid index <lsquo/>i<rsquo/>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="358" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a84e433aa5076093c39d51bf97a9b0ca6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref></type>
        <definition>BCRec amrex::StateData::getBC</definition>
        <argsstring>(int comp, int i) const noexcept</argsstring>
        <name>getBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns boundary conditions of specified component on the specified grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="366" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="319" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1aa92325475654d8018a7a4d96811ff90b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::printTimeInterval</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>printTimeInterval</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Prints out the time interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="373" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="849" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1af94692a78b7f532f582acd48d9697443" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateData::hasOldData</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasOldData</name>
        <briefdescription>
<para>True if there is any old data available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="378" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="378" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1af9809e458fa0bd25965558bf3aa2c802" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateData::hasNewData</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasNewData</name>
        <briefdescription>
<para>True if there is any new data available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="383" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="383" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a79c82337179f95a7d38ae57b4535e91a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::getData</definition>
        <argsstring>(Vector&lt; MultiFab * &gt; &amp;data, Vector&lt; Real &gt; &amp;datatime, Real time) const</argsstring>
        <name>getData</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>datatime</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="385" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="717" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a593ba91494f1ec4754498a39a2ea91be" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::StateData::getArena</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getArena</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="392" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="392" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ae83ccc99cebafd9a616419f206acfc72" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::setArena</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>setArena</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="397" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="397" bodyend="397"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1StateData_1a024ebcb9c74754c219b73d26d31683af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
        <definition>static const Vector&lt;std::string&gt;&amp; amrex::StateData::FabArrayHeaderNames</definition>
        <argsstring>()</argsstring>
        <name>FabArrayHeaderNames</name>
        <briefdescription>
<para>These facilitate prereading <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> headers to avoid synchronization when reading multiple FabArrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="403" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="403" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1ad627f2819f507158b90f5f2570b1d182" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::StateData::ClearFabArrayHeaderNames</definition>
        <argsstring>()</argsstring>
        <name>ClearFabArrayHeaderNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="404" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="404" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateData_1a0ae8938d03e0425949acee6bfdf003af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::StateData::SetFAHeaderMapPtr</definition>
        <argsstring>(std::map&lt; std::string, Vector&lt; char &gt; &gt; *fahmp)</argsstring>
        <name>SetFAHeaderMapPtr</name>
        <param>
          <type>std::map&lt; std::string, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt; *</type>
          <declname>fahmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="406" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="406" bodyend="406"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1StateData_1ae0c6a25c6e4470142b535f3ef3f9abf9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateData::restartDoit</definition>
        <argsstring>(std::istream &amp;is, const std::string &amp;chkfile)</argsstring>
        <name>restartDoit</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chkfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="454" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="213" bodyend="281"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Current and previous level-time data. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> holds state data on a level for the current and previous time step. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="35">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="16" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::StateDescriptor::BndryFunc &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="32" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::InterpBase</label>
        <link refid="classamrex_1_1InterpBase"/>
      </node>
      <node id="36">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="8">
        <label>T</label>
      </node>
      <node id="21">
        <label>Real</label>
      </node>
      <node id="16">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::StateDescriptor</label>
        <link refid="classamrex_1_1StateDescriptor"/>
        <childnode refid="12" relation="usage">
          <edgelabel>bc_func</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>bc</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mapper_comp</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_groupsize</edgelabel>
          <edgelabel>m_primary</edgelabel>
          <edgelabel>max_map_start_comp</edgelabel>
          <edgelabel>min_map_end_comp</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>names</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mapper</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="10" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>std::unique_ptr&lt; amrex::MultiFab &gt;</label>
      </node>
      <node id="33">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="25">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="22">
        <label>std::map&lt; std::string, amrex::Vector&lt; char &gt; &gt;</label>
        <childnode refid="23" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="30" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; amrex::InterpBase * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="34">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="32" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="31" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>amrex::Vector&lt; char &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; amrex::BCRec &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="27" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::StateData::TimeInterval</label>
        <link refid="structamrex_1_1StateData_1_1TimeInterval"/>
        <childnode refid="21" relation="usage">
          <edgelabel>start</edgelabel>
          <edgelabel>stop</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="4">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="31">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="32" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt;</label>
      </node>
      <node id="3">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::StateData</label>
        <link refid="classamrex_1_1StateData"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>fabArrayHeaderNames</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>arena</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>desc</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>new_data</edgelabel>
          <edgelabel>old_data</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>new_time</edgelabel>
          <edgelabel>old_time</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>faHeaderMap</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="28">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="24">
        <label>std::string</label>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.H" bodystart="33" bodyend="455"/>
    <listofallmembers>
      <member refid="classamrex_1_1StateData_1ac696f694c50d2b6251f9576fabfdedcb" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>allocOldData</name></member>
      <member refid="classamrex_1_1StateData_1a79cbe7313de5292d236958355ff878dd" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>arena</name></member>
      <member refid="classamrex_1_1StateData_1a805fefd43e63ca5b6b0b3ddd26f8b04c" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1StateData_1a83d7bc0a021a283efce9b4f500315540" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1StateData_1ad627f2819f507158b90f5f2570b1d182" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>ClearFabArrayHeaderNames</name></member>
      <member refid="classamrex_1_1StateData_1ad67c07eef71baec1306b491e1f02475d" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>copyNew</name></member>
      <member refid="classamrex_1_1StateData_1a1c745ccf4e72c085db52b18751ccc25f" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>copyOld</name></member>
      <member refid="classamrex_1_1StateData_1a46807890235430fd9f2e12d422a6321b" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>curTime</name></member>
      <member refid="classamrex_1_1StateData_1a4e4c8151397754fd5f8dadb6307bb58a" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>define</name></member>
      <member refid="classamrex_1_1StateData_1a5201a1b8230055d506cef5f265a8b8e2" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>desc</name></member>
      <member refid="classamrex_1_1StateData_1af7d0d9b72529aed95163ed531d9c7e81" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>descriptor</name></member>
      <member refid="classamrex_1_1StateData_1a1f08c8bd5682d1afe2031d820e4456f9" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1StateData_1aa537bc30a17ee4576c5490ca30da94c1" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>dmap</name></member>
      <member refid="classamrex_1_1StateData_1a51e767063a27b4c6941e585193242bde" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>domain</name></member>
      <member refid="classamrex_1_1StateData_1af35f43aa012590a264cbb08405ff5c1f" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>fabArrayHeaderNames</name></member>
      <member refid="classamrex_1_1StateData_1a024ebcb9c74754c219b73d26d31683af" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>FabArrayHeaderNames</name></member>
      <member refid="classamrex_1_1StateData_1a82894d26881a9d4dbabb3cfbf6053e4d" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>Factory</name></member>
      <member refid="classamrex_1_1StateData_1a60cd1a78a793b7a4ce54e70da0f0dd55" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>faHeaderMap</name></member>
      <member refid="classamrex_1_1StateData_1a7ca9ba16e42a6ffe8e9bcbabf51d25db" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1StateData_1a593e4c97974095398a43d0132ef3a868" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1StateData_1a593ba91494f1ec4754498a39a2ea91be" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>getArena</name></member>
      <member refid="classamrex_1_1StateData_1a84e433aa5076093c39d51bf97a9b0ca6" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>getBC</name></member>
      <member refid="classamrex_1_1StateData_1a79c82337179f95a7d38ae57b4535e91a" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>getData</name></member>
      <member refid="classamrex_1_1StateData_1ae6c8e83a79b4df57c9dccb1f5062204a" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>getDomain</name></member>
      <member refid="classamrex_1_1StateData_1af7a3b275665dcd4803b3780a02e36b48" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>grids</name></member>
      <member refid="classamrex_1_1StateData_1af9809e458fa0bd25965558bf3aa2c802" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>hasNewData</name></member>
      <member refid="classamrex_1_1StateData_1af94692a78b7f532f582acd48d9697443" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>hasOldData</name></member>
      <member refid="classamrex_1_1StateData_1add0ef828c3264079f14cc05abcbb6cb8" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>InterpAddBox</name></member>
      <member refid="classamrex_1_1StateData_1a64b6d97172a5fa5f54ecaed8181bbe28" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>InterpFillFab</name></member>
      <member refid="classamrex_1_1StateData_1ac29954add581987ecf4948fb9090b2d6" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1StateData_1a08b05c680ad59e2ac04f8178d52cf3a0" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>new_data</name></member>
      <member refid="classamrex_1_1StateData_1ad6b519ebb5a60157c412e833587b12b3" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>new_time</name></member>
      <member refid="classamrex_1_1StateData_1a2351d4871d6a5f299b26c1d6150690a7" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>newData</name></member>
      <member refid="classamrex_1_1StateData_1a5a81beda34e62a92aadd7941bcc5157e" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>newData</name></member>
      <member refid="classamrex_1_1StateData_1a85837b66263e6415ba8a9b4830749ac8" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>newGrid</name></member>
      <member refid="classamrex_1_1StateData_1a9702465fcc6db1bb193b1a82222b0e1c" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>old_data</name></member>
      <member refid="classamrex_1_1StateData_1a49bf88f51c149857686027e44513f4f8" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>old_time</name></member>
      <member refid="classamrex_1_1StateData_1aad9dcb2a2c843b2643d2d3637f047341" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>oldData</name></member>
      <member refid="classamrex_1_1StateData_1a37932d39174ba8a1475585e6a843ae4b" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>oldData</name></member>
      <member refid="classamrex_1_1StateData_1a328237a5f801df70d0bb7ca0b3b4f354" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>oldGrid</name></member>
      <member refid="classamrex_1_1StateData_1a26b9b0159d7c1920219dc3bb059380cb" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1StateData_1ac22ac5d88623f3dba92cb57a5e92d5fa" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1StateData_1aacf7931abf97b3774c79b60e80d177a4" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>prevTime</name></member>
      <member refid="classamrex_1_1StateData_1aa92325475654d8018a7a4d96811ff90b" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>printTimeInterval</name></member>
      <member refid="classamrex_1_1StateData_1a9c9d09d9399b42dacae6863ff33fb8ee" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>RegisterData</name></member>
      <member refid="classamrex_1_1StateData_1a06540ec48ea9f0078a983964f233a9d2" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>removeOldData</name></member>
      <member refid="classamrex_1_1StateData_1a0a6ffa5747a2c044f456d77adf50f338" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>replaceNewData</name></member>
      <member refid="classamrex_1_1StateData_1a3c5fc5e62763a1c66248c47951055162" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>replaceNewData</name></member>
      <member refid="classamrex_1_1StateData_1a19585d569e94bd3e15d5c6a0f4c969c6" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>replaceOldData</name></member>
      <member refid="classamrex_1_1StateData_1adfaafffb0ba3924042c4357b7d51fe53" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>replaceOldData</name></member>
      <member refid="classamrex_1_1StateData_1ad51ab660eddbb7e6d4b51f53101a5509" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>reset</name></member>
      <member refid="classamrex_1_1StateData_1a34ec54719f6bb5ab1f546f425b53c009" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>restart</name></member>
      <member refid="classamrex_1_1StateData_1aa6591b111a02fd2bc24bf77c7d2e41e2" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>restart</name></member>
      <member refid="classamrex_1_1StateData_1ae0c6a25c6e4470142b535f3ef3f9abf9" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>restartDoit</name></member>
      <member refid="classamrex_1_1StateData_1ae83ccc99cebafd9a616419f206acfc72" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>setArena</name></member>
      <member refid="classamrex_1_1StateData_1a74036cca3383362145e0dd06a14a65ad" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>setDistributionMap</name></member>
      <member refid="classamrex_1_1StateData_1a0ae8938d03e0425949acee6bfdf003af" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>SetFAHeaderMapPtr</name></member>
      <member refid="classamrex_1_1StateData_1a9abd20c02f978ad493cfe44eec3dec13" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>setNewTimeLevel</name></member>
      <member refid="classamrex_1_1StateData_1a174f384ed70022d265210fb0ffa0f448" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>setOldTimeLevel</name></member>
      <member refid="classamrex_1_1StateData_1a8e6217ecac0e2a8d99ce273835b20e91" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>setTimeLevel</name></member>
      <member refid="classamrex_1_1StateData_1a947b62feb1753b7ebe6c604066b1d494" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>StateData</name></member>
      <member refid="classamrex_1_1StateData_1ae0dbe25ac3e59b6bfb42e24f8fa8cf9c" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>StateData</name></member>
      <member refid="classamrex_1_1StateData_1a9ed30f9771b7271144f8746cc4644cfe" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>StateData</name></member>
      <member refid="classamrex_1_1StateData_1a9ee2ed55ac82c740d722ffe69da70f41" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>StateData</name></member>
      <member refid="classamrex_1_1StateData_1a51a3670e2ed07485744ef6462ebfd6ce" prot="private" virt="non-virtual"><scope>amrex::StateData</scope><name>StateDataPhysBCFunct</name></member>
      <member refid="classamrex_1_1StateData_1ac6dd29902982ccf98c08a09c793a49be" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>swapTimeLevels</name></member>
      <member refid="classamrex_1_1StateData_1a6a65bf767c55f02b3c1ebbc0b35d3bf1" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>syncNewTimeLevel</name></member>
      <member refid="classamrex_1_1StateData_1a3d5f27474f7f24ed6995b4735150be55" prot="public" virt="non-virtual"><scope>amrex::StateData</scope><name>~StateData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
