<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1ParticleContainer__impl" kind="class" language="C++" prot="public">
    <compoundname>amrex::ParticleContainer_impl</compoundname>
    <basecompoundref refid="classamrex_1_1ParticleContainerBase" prot="public" virt="non-virtual">amrex::ParticleContainerBase</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1AmrParticleContainer__impl" prot="public" virt="non-virtual">amrex::AmrParticleContainer_impl&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1NeighborParticleContainer" prot="public" virt="non-virtual">amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1TracerParticleContainer" prot="public" virt="non-virtual">amrex::TracerParticleContainer</derivedcompoundref>
    <includes refid="AMReX__ParticleContainer_8H" local="no">AMReX_ParticleContainer.H</includes>
    <templateparamlist>
      <param>
        <type>typename T_ParticleType</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>T_NArrayReal</declname>
        <defname>T_NArrayReal</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>T_NArrayInt</declname>
        <defname>T_NArrayInt</defname>
      </param>
      <param>
        <type>template&lt; class &gt; class</type>
        <declname>Allocator</declname>
        <defname>Allocator</defname>
        <defval><ref refid="namespaceamrex_1a179fafc569924202b166896b608cd5c2" kindref="member">DefaultAllocator</ref></defval>
      </param>
      <param>
        <type>class T_CellAssignor</type>
        <defval><ref refid="structamrex_1_1DefaultAssignor" kindref="compound">DefaultAssignor</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" prot="public" static="no">
        <type>T_ParticleType</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleType =  T_ParticleType</definition>
        <argsstring></argsstring>
        <name>ParticleType</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="148" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a3d2e30f73679e93e69b1acec892d4a3a" prot="public" static="no">
        <type>typename ParticleType::ConstType</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ConstParticleType =  typename ParticleType::ConstType</definition>
        <argsstring></argsstring>
        <name>ConstParticleType</name>
        <qualifiedname>amrex::ParticleContainer_impl::ConstParticleType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="149" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a7b7b13085dd52256f182ec5cb5cb45a9" prot="public" static="no">
        <type>T_CellAssignor</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::CellAssignor =  T_CellAssignor</definition>
        <argsstring></argsstring>
        <name>CellAssignor</name>
        <qualifiedname>amrex::ParticleContainer_impl::CellAssignor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="150" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1abe9bf1c099a89cdd2fc4f11117f111b7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Allocator&lt; T &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::AllocatorType =  Allocator&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>AllocatorType</name>
        <qualifiedname>amrex::ParticleContainer_impl::AllocatorType</qualifiedname>
        <briefdescription>
<para>The memory allocator in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="169" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a12ac56edf0492d0b5d958ff028a6a537" prot="public" static="no">
        <type><ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1aa7617bd59325bac568183d9bbcf32ee3" kindref="member">NStructReal</ref>+<ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a591fb654644bfe6f3b18e63547e1079f" kindref="member">NStructInt</ref>+<ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref> &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::SuperParticleType =  Particle&lt;NStructReal+NArrayReal, NStructInt+NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>SuperParticleType</name>
        <qualifiedname>amrex::ParticleContainer_impl::SuperParticleType</qualifiedname>
        <briefdescription>
<para>The type of the &quot;SuperParticle&quot; which stored all components in AoS form. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="171" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1aac72f922b5c6acf01660db3263a3967b" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1aa7617bd59325bac568183d9bbcf32ee3" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a591fb654644bfe6f3b18e63547e1079f" kindref="member">NStructInt</ref> &gt;::RealType</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::RealType =  typename Particle&lt;NStructReal, NStructInt&gt;::RealType</definition>
        <argsstring></argsstring>
        <name>RealType</name>
        <qualifiedname>amrex::ParticleContainer_impl::RealType</qualifiedname>
        <briefdescription>
<para>The type of the Real data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="173" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1ae983cf8ab0ac0e50438110da4061ea1c" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref>, Allocator, <ref refid="classamrex_1_1ParticleContainer__impl_1a7b7b13085dd52256f182ec5cb5cb45a9" kindref="member">CellAssignor</ref> &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleContainerType =  ParticleContainer_impl&lt;ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleContainerType</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleContainerType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="181" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" prot="public" static="no">
        <type><ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref>, Allocator &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleTileType =  ParticleTile&lt;ParticleType, NArrayReal, NArrayInt, Allocator&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleTileType</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleTileType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="182" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a39f3dad374127876863b7888ac53b465" prot="public" static="no">
        <type><ref refid="structamrex_1_1ParticleInitType" kindref="compound">ParticleInitType</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1aa7617bd59325bac568183d9bbcf32ee3" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a591fb654644bfe6f3b18e63547e1079f" kindref="member">NStructInt</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref> &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleInitData =  ParticleInitType&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleInitData</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleInitData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="183" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a2a95432c01c58984730881db4e162f02" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, <ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleLevel =  std::map&lt;std::pair&lt;int, int&gt;, ParticleTileType&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleLevel</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleLevel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A single level worth of particles is indexed (grid id, tile id) for both SoA and AoS data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="187" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1abaa15570421b529a29a0798dc49a66fe" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1ParticleTile_1a0aeb55b6a15d10428c88a314412914c5" kindref="member">ParticleTileType::ParticleTileDataType</ref></type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::PTDType =  typename ParticleTileType::ParticleTileDataType</definition>
        <argsstring></argsstring>
        <name>PTDType</name>
        <qualifiedname>amrex::ParticleContainer_impl::PTDType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="188" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a054ee29354e85c2c92a5b5ee61d0386d" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1ParticleTile_1a45e1a00c0cf61da02993d8b31b4cb431" kindref="member">ParticleTileType::ConstParticleTileDataType</ref></type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ConstPTDType =  typename ParticleTileType::ConstParticleTileDataType</definition>
        <argsstring></argsstring>
        <name>ConstPTDType</name>
        <qualifiedname>amrex::ParticleContainer_impl::ConstPTDType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="189" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a3995a8f437ce88e5a973f4f2f97501bf" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1ParticleTile_1aecc824f28d4d4735eb5ca3cb0d763216" kindref="member">ParticleTileType::AoS</ref></type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::AoS =  typename ParticleTileType::AoS</definition>
        <argsstring></argsstring>
        <name>AoS</name>
        <qualifiedname>amrex::ParticleContainer_impl::AoS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="190" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a69ff052875e307b7cb9ca774912b4003" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1ParticleTile_1a22d017997751335e72bad98b42931cfc" kindref="member">ParticleTileType::SoA</ref></type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::SoA =  typename ParticleTileType::SoA</definition>
        <argsstring></argsstring>
        <name>SoA</name>
        <qualifiedname>amrex::ParticleContainer_impl::SoA</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="191" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a3c635ec7175b9f6f28bce938ea801423" prot="public" static="no">
        <type>typename SoA::RealVector</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::RealVector =  typename SoA::RealVector</definition>
        <argsstring></argsstring>
        <name>RealVector</name>
        <qualifiedname>amrex::ParticleContainer_impl::RealVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="193" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1acc301a126a29e5a25eba6ae159190ff4" prot="public" static="no">
        <type>typename SoA::IntVector</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::IntVector =  typename SoA::IntVector</definition>
        <argsstring></argsstring>
        <name>IntVector</name>
        <qualifiedname>amrex::ParticleContainer_impl::IntVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="194" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a54e7d39c60aed23dded20dfdea50f7de" prot="public" static="no">
        <type>typename AoS::ParticleVector</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleVector =  typename AoS::ParticleVector</definition>
        <argsstring></argsstring>
        <name>ParticleVector</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="195" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1ad555e3e5802b997740fb9876d8b5880f" prot="public" static="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; char &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::CharVector =  Gpu::DeviceVector&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>CharVector</name>
        <qualifiedname>amrex::ParticleContainer_impl::CharVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="196" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1adb85276367bb16831500bd619a7fa724" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParIter__impl" kindref="compound">ParIter_impl</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref>, Allocator, <ref refid="classamrex_1_1ParticleContainer__impl_1a7b7b13085dd52256f182ec5cb5cb45a9" kindref="member">CellAssignor</ref> &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParIterType =  ParIter_impl&lt;ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor&gt;</definition>
        <argsstring></argsstring>
        <name>ParIterType</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParIterType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="197" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a8a9724a602a1034017c9578d45910a90" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParConstIter__impl" kindref="compound">ParConstIter_impl</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref>, Allocator, <ref refid="classamrex_1_1ParticleContainer__impl_1a7b7b13085dd52256f182ec5cb5cb45a9" kindref="member">CellAssignor</ref> &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParConstIterType =  ParConstIter_impl&lt;ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor&gt;</definition>
        <argsstring></argsstring>
        <name>ParConstIterType</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParConstIterType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="198" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer__impl_1a4ad32bd643f611ee9d4b501b4a572069" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>NewAllocator</declname>
            <defname>NewAllocator</defname>
            <defval><ref refid="namespaceamrex_1a179fafc569924202b166896b608cd5c2" kindref="member">amrex::DefaultAllocator</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">amrex::ParticleContainer_impl</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref>, NewAllocator &gt;</type>
        <definition>using amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ContainerLike =  amrex::ParticleContainer_impl&lt;ParticleType, NArrayReal, NArrayInt, NewAllocator&gt;</definition>
        <argsstring></argsstring>
        <name>ContainerLike</name>
        <qualifiedname>amrex::ParticleContainer_impl::ContainerLike</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>type trait to translate one particle container to another, with changed allocator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1361" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1361" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1aa7617bd59325bac568183d9bbcf32ee3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::NStructReal</definition>
        <argsstring></argsstring>
        <name>NStructReal</name>
        <qualifiedname>amrex::ParticleContainer_impl::NStructReal</qualifiedname>
        <initializer>= ParticleType::NReal</initializer>
        <briefdescription>
<para>Number of extra Real components in the particle struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="153" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a591fb654644bfe6f3b18e63547e1079f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::NStructInt</definition>
        <argsstring></argsstring>
        <name>NStructInt</name>
        <qualifiedname>amrex::ParticleContainer_impl::NStructInt</qualifiedname>
        <initializer>= ParticleType::NInt</initializer>
        <briefdescription>
<para>Number of extra integer components in the particle struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="155" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::NArrayReal</definition>
        <argsstring></argsstring>
        <name>NArrayReal</name>
        <qualifiedname>amrex::ParticleContainer_impl::NArrayReal</qualifiedname>
        <initializer>= T_NArrayReal</initializer>
        <briefdescription>
<para>Number of extra Real components stored in struct-of-array form. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="157" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::NArrayInt</definition>
        <argsstring></argsstring>
        <name>NArrayInt</name>
        <qualifiedname>amrex::ParticleContainer_impl::NArrayInt</qualifiedname>
        <initializer>= T_NArrayInt</initializer>
        <briefdescription>
<para>Number of extra integer components stored in struct-of-array form. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="159" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1adb1caf15575d7ae4f1e3a056e35c5558" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::has_polymorphic_allocator</definition>
        <argsstring></argsstring>
        <name>has_polymorphic_allocator</name>
        <qualifiedname>amrex::ParticleContainer_impl::has_polymorphic_allocator</qualifiedname>
        <initializer>=
        <ref refid="structamrex_1_1IsPolymorphicArenaAllocator" kindref="compound">IsPolymorphicArenaAllocator</ref>&lt;Allocator&lt;<ref refid="classamrex_1_1ParticleContainer__impl_1aac72f922b5c6acf01660db3263a3967b" kindref="member">RealType</ref>&gt;&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="200" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="200" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1ParticleContainer__impl_1a8fbe7bffd0c677974504ded6ef24a9f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ParIterBase_impl&lt; true, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</definition>
        <argsstring></argsstring>
        <name>ParIterBase_impl&lt; true, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParIterBase_impl&lt; true, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParIterBase__impl" kindref="compound">ParIterBase_impl</ref>&lt; true, <ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref>, Allocator, <ref refid="classamrex_1_1ParticleContainer__impl_1a7b7b13085dd52256f182ec5cb5cb45a9" kindref="member">CellAssignor</ref> &gt;</type>
        </param>
        <briefdescription>
<para>The type of the &quot;Particle&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="159" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1ParticleContainer__impl_1a4c62beafa833201efa7c9e7ee259d785" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ParIterBase_impl&lt; false, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</definition>
        <argsstring></argsstring>
        <name>ParIterBase_impl&lt; false, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParIterBase_impl&lt; false, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParIterBase__impl" kindref="compound">ParIterBase_impl</ref>&lt; false, <ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" kindref="member">NArrayInt</ref>, Allocator, <ref refid="classamrex_1_1ParticleContainer__impl_1a7b7b13085dd52256f182ec5cb5cb45a9" kindref="member">CellAssignor</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="159" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="164" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a1b57811f2abf751ac0228b4c5c43442c" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref></type>
        <definition>RealDescriptor amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleRealDescriptor</definition>
        <argsstring></argsstring>
        <name>ParticleRealDescriptor</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleRealDescriptor</qualifiedname>
        <initializer>= <ref refid="classamrex_1_1FPC_1a3e122a19b07bc732bf83c360354ef2a4" kindref="member">FPC::Native64RealDescriptor</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="178" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1aaa226a4b30b1045dfef949fb868e706b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::h_redistribute_real_comp</definition>
        <argsstring></argsstring>
        <name>h_redistribute_real_comp</name>
        <qualifiedname>amrex::ParticleContainer_impl::h_redistribute_real_comp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1405" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a65100fe165b67994e823d372e4c5256e" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::h_redistribute_int_comp</definition>
        <argsstring></argsstring>
        <name>h_redistribute_int_comp</name>
        <qualifiedname>amrex::ParticleContainer_impl::h_redistribute_int_comp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1406" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a2b9f02af8e7da88a8e55af2dadfbcce9" prot="public" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::levelDirectoriesCreated</definition>
        <argsstring></argsstring>
        <name>levelDirectoriesCreated</name>
        <qualifiedname>amrex::ParticleContainer_impl::levelDirectoriesCreated</qualifiedname>
        <briefdescription>
<para>Variables for i/o optimization saved for pre and post checkpoint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1409" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1afd72327ed221e95f199aa4b22e98f662" prot="public" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::usePrePost</definition>
        <argsstring></argsstring>
        <name>usePrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::usePrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1410" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a1464b4259b521c1ed74a68c83ee8ef1a" prot="public" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::doUnlink</definition>
        <argsstring></argsstring>
        <name>doUnlink</name>
        <qualifiedname>amrex::ParticleContainer_impl::doUnlink</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1411" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a20ff6222649a69a92ec84ebb90686f97" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::maxnextidPrePost</definition>
        <argsstring></argsstring>
        <name>maxnextidPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::maxnextidPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1412" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a1f6eee153647b98b534ef908e86ae03f" prot="public" static="no" mutable="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::nOutFilesPrePost</definition>
        <argsstring></argsstring>
        <name>nOutFilesPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::nOutFilesPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1413" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a9579f1b170547de35dcb4a0b4d84d0c0" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::nparticlesPrePost</definition>
        <argsstring></argsstring>
        <name>nparticlesPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::nparticlesPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1414" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a0a0a8965a9936565a35f699f67df9554" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt;</type>
        <definition>Vector&lt;Long&gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::nParticlesAtLevelPrePost</definition>
        <argsstring></argsstring>
        <name>nParticlesAtLevelPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::nParticlesAtLevelPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1415" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a163a2894a9c1d9ff00c278ee873d2497" prot="public" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;int&gt; &gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::whichPrePost</definition>
        <argsstring></argsstring>
        <name>whichPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::whichPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1416" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1afc23dd0deef223d058b767ce1866bd56" prot="public" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;int&gt; &gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::countPrePost</definition>
        <argsstring></argsstring>
        <name>countPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::countPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1417" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a19cc9a46b7d9e49c478bc9f26714ee0b" prot="public" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Long&gt; &gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::wherePrePost</definition>
        <argsstring></argsstring>
        <name>wherePrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::wherePrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1418" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a1967a72736444134d0de172ad1358743" prot="public" static="no" mutable="yes">
        <type>std::string</type>
        <definition>std::string amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::HdrFileNamePrePost</definition>
        <argsstring></argsstring>
        <name>HdrFileNamePrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::HdrFileNamePrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1419" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1aa059f60f99bc3f5a3bcf24cdb6638920" prot="public" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::filePrefixPrePost</definition>
        <argsstring></argsstring>
        <name>filePrefixPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::filePrefixPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1420" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1420" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a8117b70d723320a9c0c4dfc5d57fb224" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DenseBins" kindref="compound">DenseBins</ref>&lt; typename <ref refid="structamrex_1_1ParticleTile_1a0aeb55b6a15d10428c88a314412914c5" kindref="member">ParticleTileType::ParticleTileDataType</ref> &gt;</type>
        <definition>DenseBins&lt;typename ParticleTileType::ParticleTileDataType&gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::m_bins</definition>
        <argsstring></argsstring>
        <name>m_bins</name>
        <qualifiedname>amrex::ParticleContainer_impl::m_bins</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1514" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1514" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1af9c8295a918075bcaac70f264b946b0e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::m_runtime_comps_defined</definition>
        <argsstring></argsstring>
        <name>m_runtime_comps_defined</name>
        <qualifiedname>amrex::ParticleContainer_impl::m_runtime_comps_defined</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1532" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1532" bodyend="1532"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a972a56d27fa5ca77b8eb78e93637180d" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::m_num_runtime_real</definition>
        <argsstring></argsstring>
        <name>m_num_runtime_real</name>
        <qualifiedname>amrex::ParticleContainer_impl::m_num_runtime_real</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1533" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1533" bodyend="1533"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a87e6d8dc966e6089011ddb15c43a2f74" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::m_num_runtime_int</definition>
        <argsstring></argsstring>
        <name>m_num_runtime_int</name>
        <qualifiedname>amrex::ParticleContainer_impl::m_num_runtime_int</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1534" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1534" bodyend="1534"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1ad2bc38953d14a33e1d165372b1f8d3e4" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::particle_size</definition>
        <argsstring></argsstring>
        <name>particle_size</name>
        <qualifiedname>amrex::ParticleContainer_impl::particle_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1536" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a0f5632ab05c6d5c93ec4c4deb0ed0753" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::superparticle_size</definition>
        <argsstring></argsstring>
        <name>superparticle_size</name>
        <qualifiedname>amrex::ParticleContainer_impl::superparticle_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1536" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1ae3bf517b7cadd7ea83a0fb14a706c48a" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::num_real_comm_comps</definition>
        <argsstring></argsstring>
        <name>num_real_comm_comps</name>
        <qualifiedname>amrex::ParticleContainer_impl::num_real_comm_comps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1537" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1ad29ae6f512fcf498a95666ad47ee71e5" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::num_int_comm_comps</definition>
        <argsstring></argsstring>
        <name>num_int_comm_comps</name>
        <qualifiedname>amrex::ParticleContainer_impl::num_int_comm_comps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1537" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a08209cdd1d5e91d7d010403fd22b3468" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1a2a95432c01c58984730881db4e162f02" kindref="member">ParticleLevel</ref> &gt;</type>
        <definition>Vector&lt;ParticleLevel&gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::m_particles</definition>
        <argsstring></argsstring>
        <name>m_particles</name>
        <qualifiedname>amrex::ParticleContainer_impl::m_particles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1538" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a6590f9d96ec2dacb9bd5e9bc028f84f5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::m_soa_rdata_names</definition>
        <argsstring></argsstring>
        <name>m_soa_rdata_names</name>
        <qualifiedname>amrex::ParticleContainer_impl::m_soa_rdata_names</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1541" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer__impl_1a3010aeeab3ad4bb64d4780d6fc34f81a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::m_soa_idata_names</definition>
        <argsstring></argsstring>
        <name>m_soa_idata_names</name>
        <qualifiedname>amrex::ParticleContainer_impl::m_soa_idata_names</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1542" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1542" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a5b175fd2bdaed24ba7c697985561e773" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleContainer_impl</definition>
        <argsstring>()</argsstring>
        <name>ParticleContainer_impl</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleContainer_impl</qualifiedname>
        <briefdescription>
<para>Default constructor - construct an empty particle container that has no concept of a level hierarchy. Must be properly initialized later. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="205" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="205" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a893cd026d19d1c7791f9edbf1beb9e80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleContainer_impl</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>ParticleContainer_impl</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleContainer_impl</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
<para>Construct a particle container using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. The container will track changes in the grid structure of the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> automatically. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gdb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref>, which contains pointers to the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> objects that define the AMR hierarchy. Usually, this is generated by an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="219" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a448d1854177c7b246db5a02823eb32df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleContainer_impl</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>ParticleContainer_impl</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleContainer_impl</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Construct a particle container using a given <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. Single level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> object, which describes the problem domain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, which describes how the boxes are distributed onto MPI tasks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, which gives the set of grid boxes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="235" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="235" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1acaf9845e14cca4dc0cf89bfba1c09a7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleContainer_impl</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>ParticleContainer_impl</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleContainer_impl</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Construct a particle container using a given <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of refinement ratios. Multi-level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of DistributionMappings, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of BoxArrays, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of integer refinement ratios, of size num_levels - 1. rr[n] gives the refinement ratio between levels n and n+1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="255" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="255" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a17b32ed9f05b29c632ad9dc82e13f0fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleContainer_impl</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>ParticleContainer_impl</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleContainer_impl</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as the above, but accepts different refinement ratios in each direction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of DistributionMappings, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of BoxArrays, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of IntVect refinement ratios, of size num_levels - 1. rr[n] gives the refinement ratio between levels n and n+1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="275" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="275" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1af10957def8edc4549269e00ba154a0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::~ParticleContainer_impl</definition>
        <argsstring>() override=default</argsstring>
        <name>~ParticleContainer_impl</name>
        <qualifiedname>amrex::ParticleContainer_impl::~ParticleContainer_impl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="287" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a3eb505b47edc7093c1b416c4db35f925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleContainer_impl</definition>
        <argsstring>(const ParticleContainer_impl &amp;)=delete</argsstring>
        <name>ParticleContainer_impl</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleContainer_impl</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="289" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1abb538e22fbb1040357afa25499040130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref> &amp;</type>
        <definition>ParticleContainer_impl &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::operator=</definition>
        <argsstring>(const ParticleContainer_impl &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleContainer_impl::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="290" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a27b28bd4f409e4f4fee09aa7e43a9f33" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticleContainer_impl</definition>
        <argsstring>(ParticleContainer_impl &amp;&amp;) noexcept=default</argsstring>
        <name>ParticleContainer_impl</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticleContainer_impl</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="292" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aba1add770f076a80ad7cdaafd468600d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref> &amp;</type>
        <definition>ParticleContainer_impl &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::operator=</definition>
        <argsstring>(ParticleContainer_impl &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleContainer_impl::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="293" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1acaf325141f257a6747887448a2d50094" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::Define</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>Define</name>
        <qualifiedname>amrex::ParticleContainer_impl::Define</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
<para>Define a default-constructed ParticleContainer using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. The container will track changes in the grid structure of the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> automatically. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gdb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref>, which contains pointers to the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> objects that define the AMR hierarchy. Usually, this is generated by an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="303" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="303" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a580c70def9c72011c57ef1b0cec64376" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::Define</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>Define</name>
        <qualifiedname>amrex::ParticleContainer_impl::Define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Define a default-constructed ParticleContainer using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. Single-level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> object, which describes the problem domain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, which describes how the boxes are distributed onto MPI tasks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, which gives the set of grid boxes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="317" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="317" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ad5bd0f3d81314b010cf18db12bf1d2e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <qualifiedname>amrex::ParticleContainer_impl::Define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Define a default-constructed ParticleContainer using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. Multi-level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of DistributionMappings, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of BoxArrays, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of integer refinement ratios, of size num_levels - 1. rr[n] gives the refinement ratio between levels n and n+1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="335" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="335" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a8ed78268b70651f86cae8e2c4cd84781" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <qualifiedname>amrex::ParticleContainer_impl::Define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Define a default-constructed ParticleContainer using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. Multi-level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of DistributionMappings, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of BoxArrays, one for each level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of integer refinement ratios, of size num_levels - 1. rr[n] gives the refinement ratio between levels n and n+1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="354" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="354" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aa2c16c3a436932f9a3f4ce5eaaf11e0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::numLocalTilesAtLevel</definition>
        <argsstring>(int lev) const</argsstring>
        <name>numLocalTilesAtLevel</name>
        <qualifiedname>amrex::ParticleContainer_impl::numLocalTilesAtLevel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>The total number of tiles on this rank on this level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="365" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="365" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1af3cf62158c41dbaee7e1529179f86c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::reserveData</definition>
        <argsstring>() override</argsstring>
        <name>reserveData</name>
        <qualifiedname>amrex::ParticleContainer_impl::reserveData</qualifiedname>
        <reimplements refid="classamrex_1_1ParticleContainerBase_1a2c12c2876534a20504bacf7ab9bdf905">reserveData</reimplements>
        <briefdescription>
<para>This reserves data in the vector of dummy MultiFabs used by the ParticleContainer for the maximum number of levels possible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="373" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="426" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a907ddeaea4ca42fcb1c485d701013d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::resizeData</definition>
        <argsstring>() override</argsstring>
        <name>resizeData</name>
        <qualifiedname>amrex::ParticleContainer_impl::resizeData</qualifiedname>
        <reimplements refid="classamrex_1_1ParticleContainerBase_1afe479d3bc2102c21f40ac931163088c2">resizeData</reimplements>
        <briefdescription>
<para>This resizes the vector of dummy MultiFabs used by the ParticleContainer for the current number of levels and calls RedefineDummyMF on each level. Note that this must be done prior to using ParticleIterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="381" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="435" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a320cf40ccdf2e69ed16da45855a4a553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::InitFromAsciiFile</definition>
        <argsstring>(const std::string &amp;file, int extradata, const IntVect *Nrep=nullptr)</argsstring>
        <name>InitFromAsciiFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::InitFromAsciiFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>extradata</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> *</type>
          <declname>Nrep</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="383" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="39" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ae2a286ec882515ce66d914e2208559ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::InitFromBinaryFile</definition>
        <argsstring>(const std::string &amp;file, int extradata)</argsstring>
        <name>InitFromBinaryFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::InitFromBinaryFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>extradata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="386" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="485" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ab51040008aeb3fd4d4211ca6aaecf335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::InitFromBinaryMetaFile</definition>
        <argsstring>(const std::string &amp;file, int extradata)</argsstring>
        <name>InitFromBinaryMetaFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::InitFromBinaryMetaFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>extradata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="388" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="931" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a8df0b51652a1ab42f397e61ffd93bc1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::InitRandom</definition>
        <argsstring>(Long icount, ULong iseed, const ParticleInitData &amp;pdata, bool serialize=false, RealBox bx=RealBox())</argsstring>
        <name>InitRandom</name>
        <qualifiedname>amrex::ParticleContainer_impl::InitRandom</qualifiedname>
        <param>
          <type>Long</type>
          <declname>icount</declname>
        </param>
        <param>
          <type>ULong</type>
          <declname>iseed</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer__impl_1a39f3dad374127876863b7888ac53b465" kindref="member">ParticleInitData</ref> &amp;</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>serialize</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></type>
          <declname>bx</declname>
          <defval><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>()</defval>
        </param>
        <briefdescription>
<para>This initializes the particle container with icount randomly distributed particles. If serialize is true, then the particles will all be generated on the IO Process, and the particle positions will be broadcast to all other process. If serialize is false, then the particle positions will be randomly generated in parallel, which each process using the random seed iseed + MyProc. The particles can be constrained to lie within the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> bx, if so desired. The default is the full domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icount</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iseed</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mass</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serialize</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="406" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="970" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a26dbd487e76ae4b1c3d8579d95ca7f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::InitRandomPerBox</definition>
        <argsstring>(Long icount, ULong iseed, const ParticleInitData &amp;pdata)</argsstring>
        <name>InitRandomPerBox</name>
        <qualifiedname>amrex::ParticleContainer_impl::InitRandomPerBox</qualifiedname>
        <param>
          <type>Long</type>
          <declname>icount</declname>
        </param>
        <param>
          <type>ULong</type>
          <declname>iseed</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer__impl_1a39f3dad374127876863b7888ac53b465" kindref="member">ParticleInitData</ref> &amp;</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>This initializes the container with icount randomly distributed particles per box, using the random seed iseed. All the particles have the same data and attributes, which are passed using the pdata struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine is used when we want to replicate a box for a scaling study <ndash/> within each box the distribution is random but the particle data is replicated across all boxes in the container. The boxes are assumed to be those on the coarsest level.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icount</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iseed</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="426" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="1364" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a781cd3233ca44103d55d8549606c899a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::InitOnePerCell</definition>
        <argsstring>(Real x_off, Real y_off, Real z_off, const ParticleInitData &amp;pdata)</argsstring>
        <name>InitOnePerCell</name>
        <qualifiedname>amrex::ParticleContainer_impl::InitOnePerCell</qualifiedname>
        <param>
          <type>Real</type>
          <declname>x_off</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y_off</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z_off</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer__impl_1a39f3dad374127876863b7888ac53b465" kindref="member">ParticleInitData</ref> &amp;</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>This initializes the particle container with one particle per cell, where the other particle data and attributes are all constant. The coarsest level is used to generate the particle positions. The particle variable values are passed in through the pdata struct. The parameters x_off, y_off, and z_off represent offsets between 0 and 1 that show where inside the cells to place the particles. 0.5 means cell centered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x_off</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_off</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_off</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="443" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="1465" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a51391fb142dbee6a66f681a38e862e4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::InitNRandomPerCell</definition>
        <argsstring>(int n_per_cell, const ParticleInitData &amp;pdata)</argsstring>
        <name>InitNRandomPerCell</name>
        <qualifiedname>amrex::ParticleContainer_impl::InitNRandomPerCell</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_per_cell</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer__impl_1a39f3dad374127876863b7888ac53b465" kindref="member">ParticleInitData</ref> &amp;</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>This initializes the particle container with n_per_cell randomly distributed particles per cell, where the other particle data and and attributes are all constant. The cells on the coarsest level are used to generate the particle positions. The particle variable values are passed in through the pdata struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_per_cell</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="458" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="1549" bodyend="1687"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a61a99e80f77f904e2696eab11fa27b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Increment</definition>
        <argsstring>(MultiFab &amp;mf, int level)</argsstring>
        <name>Increment</name>
        <qualifiedname>amrex::ParticleContainer_impl::Increment</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
          <defname>lev</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the number of particles in each cell to the values currently located in the input <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="460" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="701" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aa4d9ff822804a004174b12259691f2d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::IncrementWithTotal</definition>
        <argsstring>(MultiFab &amp;mf, int level, bool local=false)</argsstring>
        <name>IncrementWithTotal</name>
        <qualifiedname>amrex::ParticleContainer_impl::IncrementWithTotal</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="462" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="728" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a0c3e76aa78d6fba2fbdc67e9f9418b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Redistribute</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0, int local=0, bool remove_negative=true)</argsstring>
        <name>Redistribute</name>
        <qualifiedname>amrex::ParticleContainer_impl::Redistribute</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_negative</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Redistribute puts all the particles back in the right places (for some value of right) </para>
        </briefdescription>
        <detaileddescription>
<para>Assigns particles to the levels, grids, and tiles that contain their current positions. If periodic boundary conditions are used, those will be enforced here.</para>
<para>If Redistribute is called with default arguments, all particles will be placed on the finest level that covers their current positions.</para>
<para>The lev_min, lev_max, and nGrow flags are used to do proper checking for subcycling particles. The default values are fine for non-subcycling methods</para>
<para>The local flag controls whether this is <computeroutput>local</computeroutput> or <computeroutput>global</computeroutput> Redistribute. In a local Redistribute, particles can only have moved a certain distance since the last time <ref refid="classamrex_1_1ParticleContainer__impl_1a0c3e76aa78d6fba2fbdc67e9f9418b2d" kindref="member">Redistribute()</ref> was called. Thus, communication only needs to happen between neighboring ranks. In a global Redistribute, the particles can potentially go from any rank to any rank. This usually happens after initialization or when doing dynamic load balancing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum level consider. Particles on levels less than this will not be touched, and particles on finer levels will not be assigned to levels less than this, either. Default: 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum level consider. Particles on levels greater than this will not be touched, and particles on coarser levels will not be assigned to levels greater than this, either. If negative, will use the finest level in the hierarchy. Default: -1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>If particles are within nGrow cells of their current box, they will not moved. This is useful for subcycling methods, when fine level particles need to be redistributed but are not necessarily at the same time as those on the coarse level. Default: 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>If 0, this will be a non-local redistribute, meaning that particle can potentially go to any other box in the simulation. If &gt; 0, this is the maximum number of cells a particle can have moved since the last <ref refid="classamrex_1_1ParticleContainer__impl_1a0c3e76aa78d6fba2fbdc67e9f9418b2d" kindref="member">Redistribute()</ref> call. Knowing this number allows an optimized MPI communication pattern to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="500" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1219" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a11b7e58536c0018fec367cae73c564cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class index_type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ReorderParticles</definition>
        <argsstring>(int lev, const MFIter &amp;mfi, const index_type *permutations)</argsstring>
        <name>ReorderParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::ReorderParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const index_type *</type>
          <declname>permutations</declname>
        </param>
        <briefdescription>
<para>Reorder particles on the tile given by lev and mfi using a the permutations array. </para>
        </briefdescription>
        <detaileddescription>
<para>permutations is a pointer to an array on the GPU of size numParticles() with permutations[new index] = old index.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mfi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permutations</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="516" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1244" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a5a522d14748b73644f8a9c542c73810f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::SortParticlesForDeposition</definition>
        <argsstring>(IntVect idx_type)</argsstring>
        <name>SortParticlesForDeposition</name>
        <qualifiedname>amrex::ParticleContainer_impl::SortParticlesForDeposition</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
          <declname>idx_type</declname>
        </param>
        <briefdescription>
<para>Sort particles on each tile such that particles adjacent in memory are likely to map to adjacent cells. This ordering can be beneficial for performance on GPU when deposition quantities onto a grid. </para>
        </briefdescription>
        <detaileddescription>
<para>idx_type = {0, 0, 0}: Sort particles to a cell centered grid idx_type = {1, 1, 1}: Sort particles to a node centered grid idx_type = {2, 2, 2}: Compromise between a cell and node centered grid. This last option uses more memory than the fist two. Mixed versions are also possible.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="532" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1388" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aa901019469055fb65969c92b37460ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::SortParticlesByCell</definition>
        <argsstring>()</argsstring>
        <name>SortParticlesByCell</name>
        <qualifiedname>amrex::ParticleContainer_impl::SortParticlesByCell</qualifiedname>
        <briefdescription>
<para>Sort the particles on each tile by cell, using Fortran ordering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="537" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1346" bodyend="1349"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a765156e4c796a3fb87ef155c773f020e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::SortParticlesByBin</definition>
        <argsstring>(IntVect bin_size)</argsstring>
        <name>SortParticlesByBin</name>
        <qualifiedname>amrex::ParticleContainer_impl::SortParticlesByBin</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
          <declname>bin_size</declname>
        </param>
        <briefdescription>
<para>Sort the particles on each tile by groups of cells, given an IntVect bin_size. </para>
        </briefdescription>
        <detaileddescription>
<para>If bin_size is the zero vector, this operation is a no-op. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="545" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1355" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a1bc5ab891d45a0e44da097b43f94b7fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::OK</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0) const</argsstring>
        <name>OK</name>
        <qualifiedname>amrex::ParticleContainer_impl::OK</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>OK checks that all particles are in the right places (for some value of right) </para>
        </briefdescription>
        <detaileddescription>
<para>These flags are used to do proper checking for subcycling particles the default values are fine for non-subcycling methods</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="557" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2501" bodyend="2510"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ae66736cd613a47f851269128336e533f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; Long, 3 &gt;</type>
        <definition>std::array&lt; Long, 3 &gt; amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ByteSpread</definition>
        <argsstring>() const</argsstring>
        <name>ByteSpread</name>
        <qualifiedname>amrex::ParticleContainer_impl::ByteSpread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="559" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="597" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ad7528534f68470a63985ebec885d21cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; Long, 3 &gt;</type>
        <definition>std::array&lt; Long, 3 &gt; amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::PrintCapacity</definition>
        <argsstring>() const</argsstring>
        <name>PrintCapacity</name>
        <qualifiedname>amrex::ParticleContainer_impl::PrintCapacity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="561" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="641" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a841e3e49cf95184882af71b4ae2eed7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ShrinkToFit</definition>
        <argsstring>()</argsstring>
        <name>ShrinkToFit</name>
        <qualifiedname>amrex::ParticleContainer_impl::ShrinkToFit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="563" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="681" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aa76328c26eb35699479bed078241aa27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::NumberOfParticlesAtLevel</definition>
        <argsstring>(int level, bool only_valid=true, bool only_local=false) const</argsstring>
        <name>NumberOfParticlesAtLevel</name>
        <qualifiedname>amrex::ParticleContainer_impl::NumberOfParticlesAtLevel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>only_valid</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>only_local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns # of particles at specified the level. </para>
        </briefdescription>
        <detaileddescription>
<para>If &quot;only_valid&quot; is true it only counts valid particles.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_valid</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_local</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="575" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="551" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aca2a05694e8f764f7a897f443005ef25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt;</type>
        <definition>Vector&lt; Long &gt; amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::NumberOfParticlesInGrid</definition>
        <argsstring>(int level, bool only_valid=true, bool only_local=false) const</argsstring>
        <name>NumberOfParticlesInGrid</name>
        <qualifiedname>amrex::ParticleContainer_impl::NumberOfParticlesInGrid</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>only_valid</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>only_local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="577" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="496" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1af2d2b1e86982b739cd6fc6b2549c9de0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::TotalNumberOfParticles</definition>
        <argsstring>(bool only_valid=true, bool only_local=false) const</argsstring>
        <name>TotalNumberOfParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::TotalNumberOfParticles</qualifiedname>
        <param>
          <type>bool</type>
          <declname>only_valid</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>only_local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns # of particles at all levels. </para>
        </briefdescription>
        <detaileddescription>
<para>If &quot;only_valid&quot; is true it only counts valid particles.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>only_valid</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_local</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="587" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="481" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a514437dcd26d7780f2a2089a049c82be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::RemoveParticlesAtLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>RemoveParticlesAtLevel</name>
        <qualifiedname>amrex::ParticleContainer_impl::RemoveParticlesAtLevel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>The Following methods are for managing Virtual and Ghost Particles. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes all particles at a given level</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="597" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="738" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ac94552c20fc683c201073a40e3c363e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::RemoveParticlesNotAtFinestLevel</definition>
        <argsstring>()</argsstring>
        <name>RemoveParticlesNotAtFinestLevel</name>
        <qualifiedname>amrex::ParticleContainer_impl::RemoveParticlesNotAtFinestLevel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="599" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="752" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ad7f2305fa0eddc382a087c81c35f9e23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::CreateVirtualParticles</definition>
        <argsstring>(int level, AoS &amp;virts) const</argsstring>
        <name>CreateVirtualParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::CreateVirtualParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl_1a3995a8f437ce88e5a973f4f2f97501bf" kindref="member">AoS</ref> &amp;</type>
          <declname>virts</declname>
        </param>
        <briefdescription>
<para>Creates virtual particles for a given level that represent in some capacity all particles at finer levels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="608" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="819" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a735b84bd8fe130d01d4f54dbb4b1ecd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::CreateGhostParticles</definition>
        <argsstring>(int level, int ngrow, AoS &amp;ghosts) const</argsstring>
        <name>CreateGhostParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::CreateGhostParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl_1a3995a8f437ce88e5a973f4f2f97501bf" kindref="member">AoS</ref> &amp;</type>
          <declname>ghosts</declname>
        </param>
        <briefdescription>
<para>Create ghost particles for a given level that are copies of particles near coarse-&gt;fine boundaries in level-1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ngrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ghosts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="618" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1066" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1af07591b0e5cfcfb3640c51432e733666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::AddParticlesAtLevel</definition>
        <argsstring>(AoS &amp;particles, int level, int nGrow=0)</argsstring>
        <name>AddParticlesAtLevel</name>
        <qualifiedname>amrex::ParticleContainer_impl::AddParticlesAtLevel</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl_1a3995a8f437ce88e5a973f4f2f97501bf" kindref="member">AoS</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Add particles from a pbox to the grid at this level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particles</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="627" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2516" bodyend="2521"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1afa430c0a5370e6ee010ff86d66309306" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::CreateVirtualParticles</definition>
        <argsstring>(int level, ParticleTileType &amp;virts) const</argsstring>
        <name>CreateVirtualParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::CreateVirtualParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
          <declname>virts</declname>
        </param>
        <briefdescription>
<para>Creates virtual particles for a given level that represent in some capacity all particles at finer levels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="636" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="830" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a97268ac7cd3066438826a2bc300beec6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::CreateGhostParticles</definition>
        <argsstring>(int level, int ngrow, ParticleTileType &amp;ghosts) const</argsstring>
        <name>CreateGhostParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::CreateGhostParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
          <declname>ghosts</declname>
        </param>
        <briefdescription>
<para>Create ghost particles for a given level that are copies of particles near coarse-&gt;fine boundaries in level-1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ngrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ghosts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="646" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1077" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a1f373ace2975d324bf951dafd46c3eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::AddParticlesAtLevel</definition>
        <argsstring>(ParticleTileType &amp;particles, int level, int nGrow=0)</argsstring>
        <name>AddParticlesAtLevel</name>
        <qualifiedname>amrex::ParticleContainer_impl::AddParticlesAtLevel</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Add particles from a pbox to the grid at this level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particles</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="655" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2527" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a5ff47752a865159c15227706e6205ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::clearParticles</definition>
        <argsstring>()</argsstring>
        <name>clearParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::clearParticles</qualifiedname>
        <briefdescription>
<para>Clear all the particles in this container. This does not free memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="661" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1111" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1accf7ad43ed041475794e70d7fd06a278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PCType</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PCType &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::copyParticles</definition>
        <argsstring>(const PCType &amp;other, bool local=false)</argsstring>
        <name>copyParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::copyParticles</qualifiedname>
        <param>
          <type>const PCType &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy particles from other to this ParticleContainer. Will clear all the particles from this container first. local controls whether or not to call <ref refid="classamrex_1_1ParticleContainer__impl_1a0c3e76aa78d6fba2fbdc67e9f9418b2d" kindref="member">Redistribute()</ref> after adding the particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other pc to copy from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to call redistribute after </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="674" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1127" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a066654616c0e94d4df8d77acc92fd305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PCType</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PCType &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::addParticles</definition>
        <argsstring>(const PCType &amp;other, bool local=false)</argsstring>
        <name>addParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::addParticles</qualifiedname>
        <param>
          <type>const PCType &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add particles from other to this ParticleContainer. local controls whether or not to call Redistribute after adding the particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other pc to copy from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to call redistribute after </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="685" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1138" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a6c77d64d9145058cc584301f8f7cac8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
          <param>
            <type>class PCType</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PCType &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;! std::is_integral_v&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>bar</declname>
            <defname>bar</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::copyParticles</definition>
        <argsstring>(const PCType &amp;other, F &amp;&amp;f, bool local=false)</argsstring>
        <name>copyParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::copyParticles</qualifiedname>
        <param>
          <type>const PCType &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy particles from other to this ParticleContainer. Will clear all the particles from this container first. local controls whether or not to call <ref refid="classamrex_1_1ParticleContainer__impl_1a0c3e76aa78d6fba2fbdc67e9f9418b2d" kindref="member">Redistribute()</ref> after adding the particles. </para>
        </briefdescription>
        <detaileddescription>
<para>This version conditionally copies based on a predicate function applied to each particle.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>that takes a SuperParticle and returns a bool</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other pc to copy from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function to apply to each particle as a filter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to call redistribute after </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="704" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1151" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a350d212dc03074db8a66750689660cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
          <param>
            <type>class PCType</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PCType &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;! std::is_integral_v&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>bar</declname>
            <defname>bar</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::addParticles</definition>
        <argsstring>(const PCType &amp;other, F const &amp;f, bool local=false)</argsstring>
        <name>addParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::addParticles</qualifiedname>
        <param>
          <type>const PCType &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add particles from other to this ParticleContainer. local controls whether or not to call Redistribute after adding the particles. </para>
        </briefdescription>
        <detaileddescription>
<para>This version conditionally copies based on a predicate function applied to each particle.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>that takes a SuperParticle and returns a bool</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other pc to copy from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function to apply to each particle as a filter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to call redistribute after </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="722" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1165" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ae95ee1cface54e5fda03407190b3a464" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WriteParticleRealData</definition>
        <argsstring>(void *data, size_t size, std::ostream &amp;os) const</argsstring>
        <name>WriteParticleRealData</name>
        <qualifiedname>amrex::ParticleContainer_impl::WriteParticleRealData</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Write a contiguous chunk of real particle data to an ostream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the start of the buffer to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>The ostream into which to write the data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="731" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="14" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a26d6df612421a3465dc622e1c52954b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ReadParticleRealData</definition>
        <argsstring>(void *data, size_t size, std::istream &amp;is)</argsstring>
        <name>ReadParticleRealData</name>
        <qualifiedname>amrex::ParticleContainer_impl::ReadParticleRealData</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Read a contiguous chunk of real particle data from an istream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the start of the buffer into which to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>The istream from which to read the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rd</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> describing the type of the floating point data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="741" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a27c1365779e42101977956a8b1a52a14" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::Checkpoint</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; std::string &gt; &amp;real_comp_names=Vector&lt; std::string &gt;(), const Vector&lt; std::string &gt; &amp;int_comp_names=Vector&lt; std::string &gt;()) const</argsstring>
        <name>Checkpoint</name>
        <qualifiedname>amrex::ParticleContainer_impl::Checkpoint</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
<para>Writes a particle checkpoint to file, suitable for restarting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of real component names, optional </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of int component names, optional </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="751" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="751" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a53896bd985c853c947a38f910c63af2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Checkpoint</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, bool is_checkpoint, const Vector&lt; std::string &gt; &amp;real_comp_names=Vector&lt; std::string &gt;(), const Vector&lt; std::string &gt; &amp;int_comp_names=Vector&lt; std::string &gt;()) const</argsstring>
        <name>Checkpoint</name>
        <qualifiedname>amrex::ParticleContainer_impl::Checkpoint</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
<para>Writes a particle checkpoint to file, suitable for restarting. This version allows the particle component names to be passed in. This overload exists for backwards compatibility. The is_checkpoint parameter is ignored. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="763" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="50" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a0e34ff12a872e7b4f1a3e1ea4092f75d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Checkpoint</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names) const</argsstring>
        <name>Checkpoint</name>
        <qualifiedname>amrex::ParticleContainer_impl::Checkpoint</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <briefdescription>
<para>Writes a particle checkpoint to file, suitable for restarting. This version allows some components to be toggled off, if they don&apos;t need to be stored in the chk file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_real_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, whether or not we include that component in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_int_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, whether or not we include that component in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of real component names </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of int component names </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="779" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="96" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1af4a82116b11fb56e946701ec1576abf9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WriteBinaryParticleData</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names, F &amp;&amp;f, bool is_checkpoint=false) const</argsstring>
        <name>WriteBinaryParticleData</name>
        <qualifiedname>amrex::ParticleContainer_impl::WriteBinaryParticleData</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Writes particle data to disk in the <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> native format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_real_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, whether or not we include that component in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_int_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, whether or not we include that component in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that returns whether a given particle should be written or not </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_checkpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the data is written to a checkpoint or plotfile </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="800" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="417" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a838acf7e996acf88afbeba40e1739b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::CheckpointPre</definition>
        <argsstring>()</argsstring>
        <name>CheckpointPre</name>
        <qualifiedname>amrex::ParticleContainer_impl::CheckpointPre</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="808" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="441" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a4af9afe57030eb2d0a66b1fab9660594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::CheckpointPost</definition>
        <argsstring>()</argsstring>
        <name>CheckpointPost</name>
        <qualifiedname>amrex::ParticleContainer_impl::CheckpointPost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="810" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="498" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1acb9f13c7fa4d704bfb55677fca839469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Restart</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;file)</argsstring>
        <name>Restart</name>
        <qualifiedname>amrex::ParticleContainer_impl::Restart</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Restart from checkpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="818" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="642" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1abf5ffec33df70c64b7ca055873a055da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Restart</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;file, bool is_checkpoint)</argsstring>
        <name>Restart</name>
        <qualifiedname>amrex::ParticleContainer_impl::Restart</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
<para>Older version, for backwards compatibility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_checkpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the particle id and cpu are included in the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="827" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="633" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ae2a882c357b72c84b934c0126976c65b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>This version of WritePlotFile writes all components and assigns component names. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="835" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="111" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ac619ec4f2ce3efa064323b62a4abab23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt;, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &gt; &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, F &amp;&amp;f) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>This version of WritePlotFile writes all components and assigns component names. </para>
        </briefdescription>
        <detaileddescription>
<para>This version also lets you pass in a functor to toggle whether each particle gets output.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that returns whether or not to write each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="849" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="262" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a326446070fe5e2374da5bedf87cc25e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <briefdescription>
<para>This version of WritePlotFile writes all components and allows the user to specify the names of the components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="859" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="140" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a02301b2a02e6fb1ca08c96c9fda109be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names, F &amp;&amp;f) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>This version of WritePlotFile writes all components and allows the user to specify the names of the components. </para>
        </briefdescription>
        <detaileddescription>
<para>This version also lets you pass in a functor to toggle whether each particle gets output.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that returns whether or not to write each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="877" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="292" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1af248577e6120966c6ed573fe1d8828b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; std::string &gt; &amp;real_comp_names) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <briefdescription>
<para>This version of WritePlotFile writes all components and allows the user to specify the names of the components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="889" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="172" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a8f7940c8c21dec419a2c751a2e61c20a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt;, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &gt; &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; std::string &gt; &amp;real_comp_names, F &amp;&amp;f) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>This version of WritePlotFile writes all components and allows the user to specify the names of the components. </para>
        </briefdescription>
        <detaileddescription>
<para>This version also lets you pass in a functor to toggle whether each particle gets output.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that returns whether or not to write each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="906" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="325" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a54674ebf0207f608d21f7862c256ad99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <briefdescription>
<para>This version of WritePlotFile assigns component names, but allows the user to pass in a vector of ints that toggle on / off the writing of specific components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_real_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, whether to include that comp in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_int_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, whether to include that comp in the file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="918" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="208" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a039fc5fda00bc515f0a1064af928cdc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, F &amp;&amp;f) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>This version of WritePlotFile assigns component names, but allows the user to pass in a vector of ints that toggle on / off the writing of specific components. </para>
        </briefdescription>
        <detaileddescription>
<para>This version also lets you pass in a functor to toggle whether each particle gets output.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_real_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, whether to include that comp in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_int_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, whether to include that comp in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that returns whether or not to write each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="938" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="362" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a92576f2c69ef205393563dfc7efe5b4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <briefdescription>
<para>This is the most general version of WritePlotFile, which takes component names and flags for whether to write each variable as components. Note that the user should pass in vectors containing names of all the components, whether they are written or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_real_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, whether to include that comp in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_int_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, whether to include that comp in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="956" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="243" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aff4d24c0425cd1106380405cc293eacc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names, F &amp;&amp;f) const</argsstring>
        <name>WritePlotFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>This is the most general version of WritePlotFile, which takes component names and flags for whether to write each variable as components. Note that the user should pass in vectors containing names of all the components, whether they are written or not. </para>
        </briefdescription>
        <detaileddescription>
<para>This version also lets you pass in a functor to toggle whether each particle gets output.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory into which to write (i.e. &quot;plt00000&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sub-directory for this particle type (i.e. &quot;Tracer&quot;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_real_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, whether to include that comp in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_int_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, whether to include that comp in the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each real component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_comp_names</parametername>
</parameternamelist>
<parameterdescription>
<para>for each integer component, a name to label the data with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that returns whether or not to write each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="982" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="397" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a04848df25835aa49080bb5eb4854085f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFilePre</definition>
        <argsstring>()</argsstring>
        <name>WritePlotFilePre</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFilePre</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="990" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="554" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a33a9eb317737d277ff55d8ceac83cad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WritePlotFilePost</definition>
        <argsstring>()</argsstring>
        <name>WritePlotFilePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::WritePlotFilePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="992" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a4348f22ec8abc2cab803f8a1aea6e494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WriteAsciiFile</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>WriteAsciiFile</name>
        <qualifiedname>amrex::ParticleContainer_impl::WriteAsciiFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="994" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="1126" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a7c10a812f79168dc064ac09d8dfe3555" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1a2a95432c01c58984730881db4e162f02" kindref="member">ParticleLevel</ref> &gt; &amp;</type>
        <definition>const Vector&lt; ParticleLevel &gt; &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetParticles</definition>
        <argsstring>() const</argsstring>
        <name>GetParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetParticles</qualifiedname>
        <briefdescription>
<para>Return the underlying <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (over AMR levels) of ParticleLevels. Const version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1000" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1000" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1af4615169eda7e26320e7e02fc878b441" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1ParticleContainer__impl_1a2a95432c01c58984730881db4e162f02" kindref="member">ParticleLevel</ref> &gt; &amp;</type>
        <definition>Vector&lt; ParticleLevel &gt; &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetParticles</definition>
        <argsstring>()</argsstring>
        <name>GetParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetParticles</qualifiedname>
        <briefdescription>
<para>Return the underlying <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (over AMR levels) of ParticleLevels. Non-const version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1006" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1006" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a7d57d6e2c8f5a398ced6018b1ca5623f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleContainer__impl_1a2a95432c01c58984730881db4e162f02" kindref="member">ParticleLevel</ref> &amp;</type>
        <definition>const ParticleLevel &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetParticles</definition>
        <argsstring>(int lev) const</argsstring>
        <name>GetParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the ParticleLevel for level &quot;lev&quot;. Const version. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   The ParticleLevel must already exist, meaning that the &quot;resizeData()&quot;
   method of this ParticleContainer has been called.

   Note that, when using a ParticleContainer that has been constructed
   with an AmrCore*, &quot;resizeData()&quot; must be called *after* the grids
   have been created, meaning after the call to AmrCore::InitFromScratch
   or AmrCore::InitFromCheckpoint has been made.

   \param lev the level at which to get the particles
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1021" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1021" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1abf48a32a4f0bb2379e256afe5e57bdaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer__impl_1a2a95432c01c58984730881db4e162f02" kindref="member">ParticleLevel</ref> &amp;</type>
        <definition>ParticleLevel &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetParticles</definition>
        <argsstring>(int lev)</argsstring>
        <name>GetParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the ParticleLevel for level &quot;lev&quot;. Non-const version. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   The ParticleLevel must already exist, meaning that the &quot;resizeData()&quot;
   method of this ParticleContainer has been called.

   Note that, when using a ParticleContainer that has been constructed
   with an AmrCore*, &quot;resizeData()&quot; must be called *after* the grids
   have been created, meaning after the call to AmrCore::InitFromScratch
   or AmrCore::InitFromCheckpoint has been made.

   \param lev the level at which to get the particles
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1036" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1036" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a52077b438cd08b19e37486a4f402a460" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>const ParticleTileType &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticlesAt</definition>
        <argsstring>(int lev, int grid, int tile) const</argsstring>
        <name>ParticlesAt</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticlesAt</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tile</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> for level &quot;lev&quot;, grid &quot;grid&quot; and tile &quot;tile.&quot; Const version. </para>
        </briefdescription>
        <detaileddescription>
<para>Here, grid and tile are integers that give the index and LocalTileIndex of the tile you want.</para>
<para>This is a runtime error if a <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> at &quot;grid&quot; and &quot;tile&quot; has not been created yet.</para>
<para>The ParticleLevel must already exist, meaning that the &quot;resizeData()&quot; method of this ParticleContainer has been called.</para>
<para>Note that, when using a ParticleContainer that has been constructed with an AmrCore*, &quot;resizeData()&quot; must be called <emphasis>after</emphasis> the grids have been created, meaning after the call to <ref refid="classamrex_1_1AmrCore_1a309a4bad63faba98cfc57641e274413d" kindref="member">AmrCore::InitFromScratch</ref> or AmrCore::InitFromCheckpoint has been made.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level at which to get the particles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the grid at which to get the particles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tile</parametername>
</parameternamelist>
<parameterdescription>
<para>the LocalTileIndex of the tile at which to get the particles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1060" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1060" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ade23813204c0c42e9a4da001d9a16446" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>ParticleTileType &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticlesAt</definition>
        <argsstring>(int lev, int grid, int tile)</argsstring>
        <name>ParticlesAt</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticlesAt</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tile</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> for level &quot;lev&quot;, grid &quot;grid&quot; and tile &quot;tile.&quot; Non-const version. </para>
        </briefdescription>
        <detaileddescription>
<para>Here, grid and tile are integers that give the index and LocalTileIndex of the tile you want.</para>
<para>This is a runtime error if a <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> at &quot;grid&quot; and &quot;tile&quot; has not been created yet.</para>
<para>The ParticleLevel must already exist, meaning that the &quot;resizeData()&quot; method of this ParticleContainer has been called.</para>
<para>Note that, when using a ParticleContainer that has been constructed with an AmrCore*, &quot;resizeData()&quot; must be called <emphasis>after</emphasis> the grids have been created, meaning after the call to <ref refid="classamrex_1_1AmrCore_1a309a4bad63faba98cfc57641e274413d" kindref="member">AmrCore::InitFromScratch</ref> or AmrCore::InitFromCheckpoint has been made.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level at which to get the particles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the grid at which to get the particles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tile</parametername>
</parameternamelist>
<parameterdescription>
<para>the LocalTileIndex of the tile at which to get the particles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1085" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1085" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a32f4e8e7c16db83c91f2a79bf1325c80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>const ParticleTileType &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticlesAt</definition>
        <argsstring>(int lev, const Iterator &amp;iter) const</argsstring>
        <name>ParticlesAt</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticlesAt</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> for level &quot;lev&quot; and Iterator &quot;iter&quot;. Const version. </para>
        </briefdescription>
        <detaileddescription>
<para>Here, iter is either an <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> or ParIter object pointing to the tile you want.</para>
<para>This is a runtime error if a <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> at &quot;iter&quot; has not been created yet.</para>
<para>The ParticleLevel must already exist, meaning that the &quot;resizeData()&quot; method of this ParticleContainer has been called.</para>
<para>Note that, when using a ParticleContainer that has been constructed with an AmrCore*, &quot;resizeData()&quot; must be called <emphasis>after</emphasis> the grids have been created, meaning after the call to <ref refid="classamrex_1_1AmrCore_1a309a4bad63faba98cfc57641e274413d" kindref="member">AmrCore::InitFromScratch</ref> or AmrCore::InitFromCheckpoint has been made.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level at which to get the particles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> or ParIter pointing to the tile to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1110" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1110" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a1d3f01e46337c97d258407ba888bf3f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>ParticleTileType &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::ParticlesAt</definition>
        <argsstring>(int lev, const Iterator &amp;iter)</argsstring>
        <name>ParticlesAt</name>
        <qualifiedname>amrex::ParticleContainer_impl::ParticlesAt</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> for level &quot;lev&quot; and Iterator &quot;iter&quot;. Non-const version. </para>
        </briefdescription>
        <detaileddescription>
<para>Here, iter is either an <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> or ParIter object pointing to the tile you want.</para>
<para>This is a runtime error if a <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> at &quot;iter&quot; has not been created yet.</para>
<para>The ParticleLevel must already exist, meaning that the &quot;resizeData()&quot; method of this ParticleContainer has been called.</para>
<para>Note that, when using a ParticleContainer that has been constructed with an AmrCore*, &quot;resizeData()&quot; must be called <emphasis>after</emphasis> the grids have been created, meaning after the call to <ref refid="classamrex_1_1AmrCore_1a309a4bad63faba98cfc57641e274413d" kindref="member">AmrCore::InitFromScratch</ref> or AmrCore::InitFromCheckpoint has been made.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level at which to get the particles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> or ParIter pointing to the tile to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1135" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1135" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ac2c025f0da37b5df433f31d23dd15783" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>ParticleTileType &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::DefineAndReturnParticleTile</definition>
        <argsstring>(int lev, int grid, int tile)</argsstring>
        <name>DefineAndReturnParticleTile</name>
        <qualifiedname>amrex::ParticleContainer_impl::DefineAndReturnParticleTile</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tile</declname>
        </param>
        <briefdescription>
<para>Define and return the <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> for level &quot;lev&quot;, grid &quot;grid&quot; and tile &quot;tile.&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   Here, grid and tile are integers that give the index and LocalTileIndex
   of the tile you want.

   If a ParticleTile at &quot;grid&quot; and &quot;tile&quot; has not been created yet,
   this function call will add it. This call will also allocate space
   for any runtime-added particle components.

   The ParticleLevel must already exist, meaning that the &quot;resizeData()&quot;
   method of this ParticleContainer has been called.

   Note that, when using a ParticleContainer that has been constructed
   with an AmrCore*, &quot;resizeData()&quot; must be called *after* the grids
   have been created, meaning after the call to AmrCore::InitFromScratch
   or AmrCore::InitFromCheckpoint has been made.

   \param lev  the level at which to get the particles
   \param grid the index of the grid at which to get the particles
   \param tile the LocalTileIndex of the tile at which to get the particles
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1160" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1160" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a01523ce80d7e802153bbf3606f9589c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>ParticleTileType &amp; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::DefineAndReturnParticleTile</definition>
        <argsstring>(int lev, const Iterator &amp;iter)</argsstring>
        <name>DefineAndReturnParticleTile</name>
        <qualifiedname>amrex::ParticleContainer_impl::DefineAndReturnParticleTile</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Define and return the <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref> for level &quot;lev&quot;, and Iterator &quot;iter&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   Here, iter is either an MFIter or ParIter object pointing to the
   tile you want.

   If a ParticleTile at &quot;grid&quot; and &quot;tile&quot; has not been created yet,
   this function call will add it. This call will also allocate space
   for any runtime-added particle components.

   The ParticleLevel must already exist, meaning that the &quot;resizeData()&quot;
   method of this ParticleContainer has been called.

   Note that, when using a ParticleContainer that has been constructed
   with an AmrCore*, &quot;resizeData()&quot; must be called *after* the grids
   have been created, meaning after the call to AmrCore::InitFromScratch
   or AmrCore::InitFromCheckpoint has been made.

   \param lev  the level at which to get the particles
   \param iter MFIter or ParIter pointing to the tile to return
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1192" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1192" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a0521b81db32f27b22d9d6d627bb47688" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::AssignDensity</definition>
        <argsstring>(int rho_index, Vector&lt; std::unique_ptr&lt; MultiFab &gt; &gt; &amp;mf_to_be_filled, int lev_min, int ncomp, int finest_level, int ngrow=2) const</argsstring>
        <name>AssignDensity</name>
        <qualifiedname>amrex::ParticleContainer_impl::AssignDensity</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rho_index</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>mf_to_be_filled</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>finest_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Functions depending the layout of the data. Use with caution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rho_index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mf_to_be_filled</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finest_level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ngrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1213" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrParticles.H" bodystart="17" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a722e91dba53fa628b8ae421a2637ef02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::AssignCellDensitySingleLevel</definition>
        <argsstring>(int rho_index, MultiFab &amp;mf, int level, int ncomp=1, int particle_lvl_offset=0) const</argsstring>
        <name>AssignCellDensitySingleLevel</name>
        <qualifiedname>amrex::ParticleContainer_impl::AssignCellDensitySingleLevel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rho_index</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>particle_lvl_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1217" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2562" bodyend="2696"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a0be0a3daa1c49d0371f9f8ad119c109a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename Assignor</type>
            <defval><ref refid="classamrex_1_1ParticleContainer__impl_1a7b7b13085dd52256f182ec5cb5cb45a9" kindref="member">CellAssignor</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Index</definition>
        <argsstring>(const P &amp;p, int lev) const</argsstring>
        <name>Index</name>
        <qualifiedname>amrex::ParticleContainer_impl::Index</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1221" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="201" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ad20adffbe4b4746c86ea9fc41034e860" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref></type>
        <definition>ParticleLocData amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Reset</definition>
        <argsstring>(ParticleType &amp;prt, bool update, bool verbose=true, ParticleLocData pld=ParticleLocData()) const</argsstring>
        <name>Reset</name>
        <qualifiedname>amrex::ParticleContainer_impl::Reset</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref> &amp;</type>
          <declname>prt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>update</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref></type>
          <declname>pld</declname>
          <defval><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref>()</defval>
        </param>
        <briefdescription>
<para>Updates a particle&apos;s location (Where), tries to periodic shift any particles that have left the domain. May need work (see inline comments) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pld</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1232" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="392" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a292a389112a6b521e0fd93a93d1500eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::PeriodicShift</definition>
        <argsstring>(P &amp;p) const</argsstring>
        <name>PeriodicShift</name>
        <qualifiedname>amrex::ParticleContainer_impl::PeriodicShift</qualifiedname>
        <param>
          <type>P &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if the particle was shifted. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1241" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="376" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a51414af32d7051aef77e91a94ae009ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::SetLevelDirectoriesCreated</definition>
        <argsstring>(bool tf)</argsstring>
        <name>SetLevelDirectoriesCreated</name>
        <qualifiedname>amrex::ParticleContainer_impl::SetLevelDirectoriesCreated</qualifiedname>
        <param>
          <type>bool</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1243" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1243" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a0bb96928ae0b6b67cdfe378c09ca9028" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetLevelDirectoriesCreated</definition>
        <argsstring>() const</argsstring>
        <name>GetLevelDirectoriesCreated</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetLevelDirectoriesCreated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1245" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1245" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a5bec5781b720b0e352bf4175e53db209" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::SetUsePrePost</definition>
        <argsstring>(bool tf) const</argsstring>
        <name>SetUsePrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::SetUsePrePost</qualifiedname>
        <param>
          <type>bool</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1247" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1247" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a34e38da1037a8148ddca00deea8abafc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetUsePrePost</definition>
        <argsstring>() const</argsstring>
        <name>GetUsePrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetUsePrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1250" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1250" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a32654ffc430315cf14b8f4cb3e0551d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetMaxNextIDPrePost</definition>
        <argsstring>() const</argsstring>
        <name>GetMaxNextIDPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetMaxNextIDPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1254" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1254" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a74a0a296ae6ee82e07762e815425598c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetNParticlesPrePost</definition>
        <argsstring>() const</argsstring>
        <name>GetNParticlesPrePost</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetNParticlesPrePost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1255" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1255" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a07a6c47cf3f6c0e4eb77bbb5a3651cac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::SetUseUnlink</definition>
        <argsstring>(bool tf) const</argsstring>
        <name>SetUseUnlink</name>
        <qualifiedname>amrex::ParticleContainer_impl::SetUseUnlink</qualifiedname>
        <param>
          <type>bool</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1257" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1257" bodyend="1259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aae309f81887fa1f35e89af02581df42a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetUseUnlink</definition>
        <argsstring>() const</argsstring>
        <name>GetUseUnlink</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetUseUnlink</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1261" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1261" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a2d404cca389bc501cd8388997a62507a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::RedistributeCPU</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0, int local=0, bool remove_negative=true)</argsstring>
        <name>RedistributeCPU</name>
        <qualifiedname>amrex::ParticleContainer_impl::RedistributeCPU</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_negative</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1265" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1614" bodyend="2142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1abb2694fa742ba11d0c8dac15cc9c2831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::RedistributeGPU</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0, int local=0, bool remove_negative=true)</argsstring>
        <name>RedistributeGPU</name>
        <qualifiedname>amrex::ParticleContainer_impl::RedistributeGPU</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_negative</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1268" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1418" bodyend="1605"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1acc0e05b69f7bc04b034f32697edd73f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::superParticleSize</definition>
        <argsstring>() const</argsstring>
        <name>superParticleSize</name>
        <qualifiedname>amrex::ParticleContainer_impl::superParticleSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1271" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1271" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ae2d11ae7c001e15f3972b81fb5dc209f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::AddRealComp</definition>
        <argsstring>(std::string const &amp;name, int communicate=1)</argsstring>
        <name>AddRealComp</name>
        <qualifiedname>amrex::ParticleContainer_impl::AddRealComp</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>communicate</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1273" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1273" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1af0579fbeb5709e05fe1ac750d25494ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::AddRealComp</definition>
        <argsstring>(int communicate=1)</argsstring>
        <name>AddRealComp</name>
        <qualifiedname>amrex::ParticleContainer_impl::AddRealComp</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>communicate</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1301" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1301" bodyend="1304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a10378c3c4f42997ea152ae8f038fdc29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::AddIntComp</definition>
        <argsstring>(std::string const &amp;name, int communicate=1)</argsstring>
        <name>AddIntComp</name>
        <qualifiedname>amrex::ParticleContainer_impl::AddIntComp</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>communicate</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1306" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1306" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a954e045f1dc43c3cb20780467983d532" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::AddIntComp</definition>
        <argsstring>(int communicate=1)</argsstring>
        <name>AddIntComp</name>
        <qualifiedname>amrex::ParticleContainer_impl::AddIntComp</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>communicate</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1334" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1334" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a926b41920a7dd2ca180db0717f726faa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::NumRuntimeRealComps</definition>
        <argsstring>() const</argsstring>
        <name>NumRuntimeRealComps</name>
        <qualifiedname>amrex::ParticleContainer_impl::NumRuntimeRealComps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1339" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1339" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a72e673a1fb1acdb894fb63417aaf3c59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::NumRuntimeIntComps</definition>
        <argsstring>() const</argsstring>
        <name>NumRuntimeIntComps</name>
        <qualifiedname>amrex::ParticleContainer_impl::NumRuntimeIntComps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1340" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1340" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a5c0a1d474a92f4622e6156cbd8b42a27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::NumRealComps</definition>
        <argsstring>() const</argsstring>
        <name>NumRealComps</name>
        <qualifiedname>amrex::ParticleContainer_impl::NumRealComps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1342" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1342" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ab761b38df59cb25e8a4fb73ad61dad64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::NumIntComps</definition>
        <argsstring>() const</argsstring>
        <name>NumIntComps</name>
        <qualifiedname>amrex::ParticleContainer_impl::NumIntComps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1343" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1343" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a935197ee3cb7a3665b16ec8ded3ea0ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ResizeRuntimeRealComp</definition>
        <argsstring>(int new_size, bool communicate)</argsstring>
        <name>ResizeRuntimeRealComp</name>
        <qualifiedname>amrex::ParticleContainer_impl::ResizeRuntimeRealComp</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>communicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the Real runtime components (SoA)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_size</parametername>
</parameternamelist>
<parameterdescription>
<para>new number of Real runtime components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>communicate</parametername>
</parameternamelist>
<parameterdescription>
<para>participate this component in redistribute </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1350" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2702" bodyend="2722"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a13e8f05b4ed5423af853e90b6ea04c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ResizeRuntimeIntComp</definition>
        <argsstring>(int new_size, bool communicate)</argsstring>
        <name>ResizeRuntimeIntComp</name>
        <qualifiedname>amrex::ParticleContainer_impl::ResizeRuntimeIntComp</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>communicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the Int runtime components (SoA)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_size</parametername>
</parameternamelist>
<parameterdescription>
<para>new number of integer runtime components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>communicate</parametername>
</parameternamelist>
<parameterdescription>
<para>participate this component in redistribute </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1357" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2728" bodyend="2748"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1aec14ad85cd735ad9aeaa4b51e26fff6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>NewAllocator</declname>
            <defname>NewAllocator</defname>
            <defval><ref refid="namespaceamrex_1a179fafc569924202b166896b608cd5c2" kindref="member">amrex::DefaultAllocator</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParticleContainer__impl_1a4ad32bd643f611ee9d4b501b4a572069" kindref="member">ContainerLike</ref>&lt; NewAllocator &gt;</type>
        <definition>ContainerLike&lt; NewAllocator &gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::make_alike</definition>
        <argsstring>() const</argsstring>
        <name>make_alike</name>
        <qualifiedname>amrex::ParticleContainer_impl::make_alike</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an empty particle container</para>
<para>This creates a new <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> particle container type with same compile-time and run-time attributes. But, it can change its allocator. This is helpful when creating temporary particle buffers for filter operations and device-to-host copies.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Allocator</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> allocator, e.g., <ref refid="classamrex_1_1PinnedArenaAllocator" kindref="compound">amrex::PinnedArenaAllocator</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an empty particle container </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1375" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1375" bodyend="1403"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1acfeb22c8b5b4266834fea14b1444703c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::WriteParticles</definition>
        <argsstring>(int level, std::ofstream &amp;ofs, int fnum, Vector&lt; int &gt; &amp;which, Vector&lt; int &gt; &amp;count, Vector&lt; Long &gt; &amp;where, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, IntVector &gt; &gt; &amp;particle_io_flags, bool is_checkpoint) const</argsstring>
        <name>WriteParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::WriteParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>ofs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fnum</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>which</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &amp;</type>
          <declname>where</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, <ref refid="classamrex_1_1ParticleContainer__impl_1acc301a126a29e5a25eba6ae159190ff4" kindref="member">IntVector</ref> &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1458" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="574" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a36f7b9890c89ef5af2261d6f1397dcab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::SetSoACompileTimeNames</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;rdata_name, std::vector&lt; std::string &gt; const &amp;idata_name)</argsstring>
        <name>SetSoACompileTimeNames</name>
        <qualifiedname>amrex::ParticleContainer_impl::SetSoACompileTimeNames</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>rdata_name</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>idata_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overwrite the default names for the compile-time SoA components </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1467" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="109" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a7f203918278faf984e759498878417e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetRealSoANames</definition>
        <argsstring>() const</argsstring>
        <name>GetRealSoANames</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetRealSoANames</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the names for the real SoA components </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1470" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1470" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ac480e891b8153fb8cdc696e5c1e9c62e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::GetIntSoANames</definition>
        <argsstring>() const</argsstring>
        <name>GetIntSoANames</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetIntSoANames</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the names for the int SoA components </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1473" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1473" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a8cc7be639e70708d236fb56ef77e2785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::HasRealComp</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>HasRealComp</name>
        <qualifiedname>amrex::ParticleContainer_impl::HasRealComp</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a container has a ParticleReal component</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>component name to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found, else false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1480" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a7915159e09ba4c623b8b1ea13948bc4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::HasIntComp</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>HasIntComp</name>
        <qualifiedname>amrex::ParticleContainer_impl::HasIntComp</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a container has an Integer component</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>component name to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found, else false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1487" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ab08c431ee132e75a611ff41e557f98d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::GetRealCompIndex</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>GetRealCompIndex</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetRealCompIndex</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the ParticleReal SoA index of a component</para>
<para>This throws a runtime exception if the component does not exist.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>component name to query index for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero-based index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1496" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="161" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ac16a973f89d619e09805652fcf4f7b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::GetIntCompIndex</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>GetIntCompIndex</name>
        <qualifiedname>amrex::ParticleContainer_impl::GetIntCompIndex</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Integer SoA index of a component</para>
<para>This throws a runtime exception if the component does not exist.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>component name to query index for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero-based index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1505" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="183" bodyend="195"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a2d19ef2ac991ec35e1f75c934f453e0e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Where</definition>
        <argsstring>(const P &amp;prt, ParticleLocData &amp;pld, int lev_min=0, int lev_max=-1, int nGrow=0, int local_grid=-1) const</argsstring>
        <name>Where</name>
        <qualifiedname>amrex::ParticleContainer_impl::Where</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>prt</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref> &amp;</type>
          <declname>pld</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>local_grid</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Checks a particle&apos;s location on levels lev_min and higher. Returns false if the particle does not exist on that level. Only if lev_min == lev_max, nGrow can be &gt; 0 (i.e., including nGrow ghost cells). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pld</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_grid</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1438" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="216" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a129df32f5a8f7186b9f1a2307f64b12f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::EnforcePeriodicWhere</definition>
        <argsstring>(P &amp;prt, ParticleLocData &amp;pld, int lev_min=0, int lev_max=-1, int local_grid=-1) const</argsstring>
        <name>EnforcePeriodicWhere</name>
        <qualifiedname>amrex::ParticleContainer_impl::EnforcePeriodicWhere</qualifiedname>
        <param>
          <type>P &amp;</type>
          <declname>prt</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref> &amp;</type>
          <declname>pld</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>local_grid</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Checks whether the particle has crossed a periodic boundary in such a way that it is on levels lev_min and higher. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pld</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_grid</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1453" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="297" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a608343590b5172b850efbd370f0cd6e9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RTYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ReadParticles</definition>
        <argsstring>(int cnt, int grd, int lev, std::ifstream &amp;ifs, int finest_level_in_file, bool convert_ids)</argsstring>
        <name>ReadParticles</name>
        <qualifiedname>amrex::ParticleContainer_impl::ReadParticles</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>ifs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>finest_level_in_file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>convert_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1510" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="945" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a4820e40e502374a1e7b31736b3df0f29" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::SetParticleSize</definition>
        <argsstring>()</argsstring>
        <name>SetParticleSize</name>
        <qualifiedname>amrex::ParticleContainer_impl::SetParticleSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1512" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="16" bodyend="40"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ad396acd787a21008fac169e86ab7dd1f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::particlePostLocate</definition>
        <argsstring>(ParticleType &amp;, const ParticleLocData &amp;, const int)</argsstring>
        <name>particlePostLocate</name>
        <qualifiedname>amrex::ParticleContainer_impl::particlePostLocate</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1517" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1517" bodyend="1518"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a6a78df0fb6333e80fe5e85599eb197ef" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;::correctCellVectors</definition>
        <argsstring>(int, int, int, const ParticleType &amp;)</argsstring>
        <name>correctCellVectors</name>
        <qualifiedname>amrex::ParticleContainer_impl::correctCellVectors</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" kindref="member">ParticleType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1520" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="1520" bodyend="1521"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ab6d68054b299d03929d9b54369caf883" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::RedistributeMPI</definition>
        <argsstring>(std::map&lt; int, Vector&lt; char &gt; &gt; &amp;not_ours, int lev_min=0, int lev_max=0, int nGrow=0, int local=0)</argsstring>
        <name>RedistributeMPI</name>
        <qualifiedname>amrex::ParticleContainer_impl::RedistributeMPI</qualifiedname>
        <param>
          <type>std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt; &amp;</type>
          <declname>not_ours</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1523" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2148" bodyend="2496"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1a46b8ebf431eb48f5d95892000a082ed0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::locateParticle</definition>
        <argsstring>(P &amp;p, ParticleLocData &amp;pld, int lev_min, int lev_max, int nGrow, int local_grid=-1) const</argsstring>
        <name>locateParticle</name>
        <qualifiedname>amrex::ParticleContainer_impl::locateParticle</qualifiedname>
        <param>
          <type>P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref> &amp;</type>
          <declname>pld</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>local_grid</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1527" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="446" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer__impl_1ab62f103d41e9e2005bb670b5a2726502" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer_impl&lt; ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <qualifiedname>amrex::ParticleContainer_impl::Initialize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="1530" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="45" bodyend="99"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A distributed container for Particles sorted onto the levels, grids, and tiles of a block-structured AMR hierarchy. </para>
    </briefdescription>
    <detaileddescription>
<para>The data layout on a single tile is determined by the value of the following template parameters:</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_NStructReal</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra Real components in the particle struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_NStructInt</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra integer components in the particle struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_NArrayReal</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra Real components stored in struct-of-array form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_NArrayInt</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra integer components stored in struct-of-array form </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>amrex::AmrParticleContainer_impl&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</label>
        <link refid="classamrex_1_1AmrParticleContainer__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::AmrTracerParticleContainer</label>
        <link refid="classamrex_1_1AmrTracerParticleContainer"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1NeighborParticleContainer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
      </node>
      <node id="1">
        <label>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;</label>
        <link refid="classamrex_1_1ParticleContainer__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::TracerParticleContainer&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1TracerParticleContainer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>amrex::AmrParticleLocator&lt; amrex::DenseBins&lt; amrex::BoxND &gt; &gt;</label>
        <link refid="classamrex_1_1AmrParticleLocator"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_locators</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_grid_assignors</edgelabel>
        </childnode>
      </node>
      <node id="90">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="91" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="91" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="100">
        <label>amrex::Array4CopyTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4CopyTag"/>
        <childnode refid="90" relation="usage">
          <edgelabel>dfab</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>sfab</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>dbox</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="104">
        <label>amrex::CommRecvBufTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1CommRecvBufTag"/>
        <childnode refid="90" relation="usage">
          <edgelabel>dfab</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>bx</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>amrex::CommSendBufTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1CommSendBufTag"/>
        <childnode refid="93" relation="usage">
          <edgelabel>sfab</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>bx</edgelabel>
        </childnode>
      </node>
      <node id="139">
        <label>amrex::DenseBins&lt; typename amrex::ParticleTileData &gt;</label>
        <link refid="classamrex_1_1DenseBins"/>
        <childnode refid="140" relation="usage">
          <edgelabel>m_bins</edgelabel>
          <edgelabel>m_counts</edgelabel>
          <edgelabel>m_local_offsets</edgelabel>
          <edgelabel>m_offsets</edgelabel>
          <edgelabel>m_perm</edgelabel>
        </childnode>
      </node>
      <node id="110">
        <label>amrex::FBData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="111" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="117" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="119" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="121" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="123" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="92" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="97" relation="usage">
          <edgelabel>m_fb_local_copy_handler</edgelabel>
        </childnode>
        <childnode refid="101" relation="usage">
          <edgelabel>m_recv_copy_handler</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_send_copy_handler</edgelabel>
        </childnode>
        <childnode refid="109" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="125" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="128" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::FabFactory&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="47">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="37">
        <label>K</label>
      </node>
      <node id="89">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="90" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="93" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="126">
        <label>amrex::PCData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="127" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="117" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="119" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="121" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::PODVector&lt; amrex::AssignGrid&lt; BinIteratorFactory &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="140">
        <label>amrex::PODVector&lt; index_type &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="130">
        <label>amrex::PODVector&lt; int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="131" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>T</label>
      </node>
      <node id="99">
        <label>amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="100" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="103">
        <label>amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="104" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="107">
        <label>amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="108" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="133">
        <label>amrex::Vector&lt; Long &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="134" relation="public-inheritance">
        </childnode>
      </node>
      <node id="121">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="122" relation="public-inheritance">
        </childnode>
      </node>
      <node id="142">
        <label>amrex::Vector&lt; ParticleLevel &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="143" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Vector&lt; amrex::IntVectND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::Vector&lt; amrex::ParticleLocator&lt; amrex::DenseBins&lt; amrex::BoxND &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="137">
        <label>amrex::Vector&lt; amrex::Vector&lt; Long &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="138" relation="public-inheritance">
        </childnode>
      </node>
      <node id="135">
        <label>amrex::Vector&lt; amrex::Vector&lt; int &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="136" relation="public-inheritance">
        </childnode>
      </node>
      <node id="123">
        <label>amrex::Vector&lt; amrex::mpidatatypes::MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="124" relation="public-inheritance">
        </childnode>
      </node>
      <node id="117">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="118" relation="public-inheritance">
        </childnode>
      </node>
      <node id="66">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="67" relation="public-inheritance">
        </childnode>
      </node>
      <node id="119">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="120" relation="public-inheritance">
        </childnode>
      </node>
      <node id="94">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="24" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="26" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="55">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="56" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="50" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="47" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="47" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="43">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="44" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="43" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="55" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="76" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="56" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="81">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="23" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="63">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="64" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="66" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="65" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="96">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="35">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="3" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="70" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="127">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_dstng</edgelabel>
          <edgelabel>m_offset</edgelabel>
          <edgelabel>m_srcng</edgelabel>
        </childnode>
        <childnode refid="116" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_dstba</edgelabel>
          <edgelabel>m_srcba</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="28" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="113" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
      </node>
      <node id="111">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="116" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="74">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="43" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="85">
        <label>amrex::IArrayBox</label>
        <link refid="classamrex_1_1IArrayBox"/>
        <childnode refid="86" relation="public-inheritance">
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>ifabio</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>amrex::IFABio</label>
        <link refid="classamrex_1_1IFABio"/>
      </node>
      <node id="3">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="76">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="30">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="53">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="11">
        <label>amrex::ParGDB</label>
        <link refid="classamrex_1_1ParGDB"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_rr</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::ParGDBBase</label>
        <link refid="classamrex_1_1ParGDBBase"/>
      </node>
      <node id="129">
        <label>amrex::ParticleBufferMap</label>
        <link refid="classamrex_1_1ParticleBufferMap"/>
        <childnode refid="17" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_dm</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>m_bucket_to_gid</edgelabel>
          <edgelabel>m_bucket_to_lev</edgelabel>
          <edgelabel>m_bucket_to_pid</edgelabel>
          <edgelabel>m_lev_gid_to_bucket</edgelabel>
          <edgelabel>m_lev_offsets</edgelabel>
          <edgelabel>m_proc_box_counts</edgelabel>
          <edgelabel>m_proc_box_offsets</edgelabel>
        </childnode>
        <childnode refid="130" relation="usage">
          <edgelabel>d_bucket_to_pid</edgelabel>
          <edgelabel>d_lev_gid_to_bucket</edgelabel>
          <edgelabel>d_lev_offsets</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
        <childnode refid="3" relation="usage">
          <edgelabel>tile_size</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_particle_locator</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_gdb_object</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_gdb</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_dummy_mf</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>redistribute_mask_ptr</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>neighbor_procs</edgelabel>
        </childnode>
        <childnode refid="129" relation="usage">
          <edgelabel>m_buffer_map</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;</label>
        <link refid="classamrex_1_1ParticleContainer__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="132" relation="usage">
          <edgelabel>ParticleRealDescriptor</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>h_redistribute_int_comp</edgelabel>
          <edgelabel>h_redistribute_real_comp</edgelabel>
        </childnode>
        <childnode refid="133" relation="usage">
          <edgelabel>nParticlesAtLevelPrePost</edgelabel>
        </childnode>
        <childnode refid="135" relation="usage">
          <edgelabel>countPrePost</edgelabel>
          <edgelabel>whichPrePost</edgelabel>
        </childnode>
        <childnode refid="137" relation="usage">
          <edgelabel>wherePrePost</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>HdrFileNamePrePost</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>filePrefixPrePost</edgelabel>
        </childnode>
        <childnode refid="139" relation="usage">
          <edgelabel>m_bins</edgelabel>
        </childnode>
        <childnode refid="142" relation="usage">
          <edgelabel>m_particles</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_soa_idata_names</edgelabel>
          <edgelabel>m_soa_rdata_names</edgelabel>
        </childnode>
      </node>
      <node id="116">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="50" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="132">
        <label>amrex::RealDescriptor</label>
        <link refid="classamrex_1_1RealDescriptor"/>
        <childnode refid="133" relation="usage">
          <edgelabel>fr</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>ord</edgelabel>
        </childnode>
      </node>
      <node id="83">
        <label>amrex::detail::SingleChunkArena</label>
        <link refid="classamrex_1_1detail_1_1SingleChunkArena"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="101">
        <label>std::map&lt; RecvSendCopyHandlerKey, std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="102" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>std::map&lt; RecvSendCopyHandlerKey, std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="106" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="69" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="97">
        <label>std::map&lt; std::uint64_t, std::unique_ptr&lt; amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="98" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="69" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="55" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="62" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="65" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="141">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="131">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="72">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="37" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="37" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::mutex</label>
      </node>
      <node id="28">
        <label>std::string</label>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
      </node>
      <node id="114">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="134">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="122">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="143">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="138">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="136">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="124">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="118">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="120">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="113">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="114" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="115">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="72" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="109">
        <label>std::unique_ptr&lt; amrex::FBData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="110" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="128">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="34" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="80" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>std::unique_ptr&lt; amrex::IFABio &gt;</label>
        <childnode refid="88" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="125">
        <label>std::unique_ptr&lt; amrex::PCData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="126" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::unique_ptr&lt; amrex::ParGDB &gt;</label>
        <childnode refid="11" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="99" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="103" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="106">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="107" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
        <childnode refid="83" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::unique_ptr&lt; amrex::iMultiFab &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="84">
        <label>std::vector&lt; IArrayBox * &gt;</label>
        <childnode refid="85" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="60">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="41">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" line="145" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainer.H" bodystart="146" bodyend="1543"/>
    <listofallmembers>
      <member refid="classamrex_1_1ParticleContainer__impl_1a10378c3c4f42997ea152ae8f038fdc29" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AddIntComp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a954e045f1dc43c3cb20780467983d532" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AddIntComp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a066654616c0e94d4df8d77acc92fd305" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>addParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a350d212dc03074db8a66750689660cc3" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>addParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af07591b0e5cfcfb3640c51432e733666" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AddParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a1f373ace2975d324bf951dafd46c3eda" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AddParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ae2d11ae7c001e15f3972b81fb5dc209f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AddRealComp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af0579fbeb5709e05fe1ac750d25494ca" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AddRealComp</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1acf979d3c7c577a5197acd056646c9b04" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AggregationBuffer</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a46ea8e4ecb6c6cfc29dcc47675b959bf" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AggregationType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1abe9bf1c099a89cdd2fc4f11117f111b7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AllocatorType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a3995a8f437ce88e5a973f4f2f97501bf" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AoS</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a77dd3b3180d1946ee84111d2bff63136" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>arena</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a722e91dba53fa628b8ae421a2637ef02" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AssignCellDensitySingleLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a0521b81db32f27b22d9d6d627bb47688" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>AssignDensity</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adcf30e3dbe2798fa430837cb4b7454c8" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>BufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1720e5ec3b987f6bee57fde2d515012a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>BuildRedistributeMask</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ae66736cd613a47f851269128336e533f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ByteSpread</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a7b7b13085dd52256f182ec5cb5cb45a9" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CellAssignor</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ad555e3e5802b997740fb9876d8b5880f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CharVector</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a27c1365779e42101977956a8b1a52a14" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Checkpoint</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a53896bd985c853c947a38f910c63af2e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Checkpoint</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a0e34ff12a872e7b4f1a3e1ea4092f75d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Checkpoint</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a4af9afe57030eb2d0a66b1fab9660594" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CheckpointPost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a838acf7e996acf88afbeba40e1739b46" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CheckpointPre</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a575c4433c9b8bfec8bd57d5a9bdf7191" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CheckpointVersion</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a5ff47752a865159c15227706e6205ced" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>clearParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a3d2e30f73679e93e69b1acec892d4a3a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ConstParticleType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a054ee29354e85c2c92a5b5ee61d0386d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ConstPTDType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a4ad32bd643f611ee9d4b501b4a572069" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ContainerLike</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1accf7ad43ed041475794e70d7fd06a278" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>copyParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a6c77d64d9145058cc584301f8f7cac8e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>copyParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a6a78df0fb6333e80fe5e85599eb197ef" prot="private" virt="virtual"><scope>amrex::ParticleContainer_impl</scope><name>correctCellVectors</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1afc23dd0deef223d058b767ce1866bd56" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>countPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a735b84bd8fe130d01d4f54dbb4b1ecd5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CreateGhostParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a97268ac7cd3066438826a2bc300beec6" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CreateGhostParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ad7f2305fa0eddc382a087c81c35f9e23" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CreateVirtualParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1afa430c0a5370e6ee010ff86d66309306" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>CreateVirtualParticles</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a777b3fdf529e65178ba4be9fd37b75f4" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>DataPrefix</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1acaf325141f257a6747887448a2d50094" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a580c70def9c72011c57ef1b0cec64376" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ad5bd0f3d81314b010cf18db12bf1d2e3" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a8ed78268b70651f86cae8e2c4cd84781" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ac2c025f0da37b5df433f31d23dd15783" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>DefineAndReturnParticleTile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a01523ce80d7e802153bbf3606f9589c0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>DefineAndReturnParticleTile</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1acaa5cea3d2bd6ed396a169f4057f45d3" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>defineBufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa218a301fbc9bf494d8dcecf7ee60d6d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>do_tiling</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a1464b4259b521c1ed74a68c83ee8ef1a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>doUnlink</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a129df32f5a8f7186b9f1a2307f64b12f" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>EnforcePeriodicWhere</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aa059f60f99bc3f5a3bcf24cdb6638920" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>filePrefixPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a4d06d65f87feb1bfe8867f86c1de3fd3" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Geom</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ac16a973f89d619e09805652fcf4f7b94" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetIntCompIndex</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ac480e891b8153fb8cdc696e5c1e9c62e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetIntSoANames</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a0bb96928ae0b6b67cdfe378c09ca9028" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetLevelDirectoriesCreated</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a32654ffc430315cf14b8f4cb3e0551d7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetMaxNextIDPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a74a0a296ae6ee82e07762e815425598c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetNParticlesPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a92778e3dfeb634870d6ae8822fd0d2b2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a56f6e04e3321621a6ca9688d6c2a86ca" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a7c10a812f79168dc064ac09d8dfe3555" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af4615169eda7e26320e7e02fc878b441" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a7d57d6e2c8f5a398ced6018b1ca5623f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1abf48a32a4f0bb2379e256afe5e57bdaa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ab08c431ee132e75a611ff41e557f98d5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetRealCompIndex</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a7f203918278faf984e759498878417e4" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetRealSoANames</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a34e38da1037a8148ddca00deea8abafc" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetUsePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aae309f81887fa1f35e89af02581df42a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>GetUseUnlink</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a65100fe165b67994e823d372e4c5256e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>h_redistribute_int_comp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aaa226a4b30b1045dfef949fb868e706b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>h_redistribute_real_comp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1adb1caf15575d7ae4f1e3a056e35c5558" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>has_polymorphic_allocator</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a7915159e09ba4c623b8b1ea13948bc4f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>HasIntComp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a8cc7be639e70708d236fb56ef77e2785" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>HasRealComp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a1967a72736444134d0de172ad1358743" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>HdrFileNamePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a61a99e80f77f904e2696eab11fa27b82" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Increment</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aa4d9ff822804a004174b12259691f2d5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>IncrementWithTotal</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a0be0a3daa1c49d0371f9f8ad119c109a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Index</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a320cf40ccdf2e69ed16da45855a4a553" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>InitFromAsciiFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ae2a286ec882515ce66d914e2208559ff" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>InitFromBinaryFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ab51040008aeb3fd4d4211ca6aaecf335" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>InitFromBinaryMetaFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ab62f103d41e9e2005bb670b5a2726502" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a51391fb142dbee6a66f681a38e862e4b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>InitNRandomPerCell</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a781cd3233ca44103d55d8549606c899a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>InitOnePerCell</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a8df0b51652a1ab42f397e61ffd93bc1a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>InitRandom</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a26dbd487e76ae4b1c3d8579d95ca7f8a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>InitRandomPerBox</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1acc301a126a29e5a25eba6ae159190ff4" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>IntVector</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0fef888a5370f9723f2ab2df2fe32266" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>isDefined</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a2b9f02af8e7da88a8e55af2dadfbcce9" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>levelDirectoriesCreated</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a46b8ebf431eb48f5d95892000a082ed0" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>locateParticle</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae968111a4e6a727889fa145dff69406e" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a8117b70d723320a9c0c4dfc5d57fb224" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_bins</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_buffer_map</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_dummy_mf</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_gdb</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7faac754ff05cf1b841bfe49dad579ba" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_gdb_object</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a87e6d8dc966e6089011ddb15c43a2f74" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_num_runtime_int</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a972a56d27fa5ca77b8eb78e93637180d" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_num_runtime_real</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9bbd6752d478b3a24e66f2caa11196b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_particle_locator</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a08209cdd1d5e91d7d010403fd22b3468" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_particles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af9c8295a918075bcaac70f264b946b0e" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_runtime_comps_defined</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a3010aeeab3ad4bb64d4780d6fc34f81a" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_soa_idata_names</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a6590f9d96ec2dacb9bd5e9bc028f84f5" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_soa_rdata_names</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aed7d0053f45c4e966e5e3e69d6f19d68" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_stable_redistribute</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aec14ad85cd735ad9aeaa4b51e26fff6a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>make_alike</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a20ff6222649a69a92ec84ebb90686f97" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>maxnextidPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a86efecc15f1b38749fee866a4be234ea" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>MaxParticlesPerRead</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae385b95f314d4d6691f1c53ba91505c6" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>MaxReaders</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5bc087527efb5c9aec1ca15f3abafc35" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>memEfficientSort</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a3063446dc305120704ec3f1670f301c1" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NArrayInt</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a32623939f5453d39bcfc26fef34972a8" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NArrayReal</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>neighbor_procs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2779b5a388da42483553b8802cf2371f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NeighborProcs</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a1f6eee153647b98b534ef908e86ae03f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>nOutFilesPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a0a0a8965a9936565a35f699f67df9554" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>nParticlesAtLevelPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a9579f1b170547de35dcb4a0b4d84d0c0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>nparticlesPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a591fb654644bfe6f3b18e63547e1079f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NStructInt</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aa7617bd59325bac568183d9bbcf32ee3" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NStructReal</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ad29ae6f512fcf498a95666ad47ee71e5" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>num_int_comm_comps</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ae3bf517b7cadd7ea83a0fb14a706c48a" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>num_real_comm_comps</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aa76328c26eb35699479bed078241aa27" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NumberOfParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aca2a05694e8f764f7a897f443005ef25" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NumberOfParticlesInGrid</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ab761b38df59cb25e8a4fb73ad61dad64" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NumIntComps</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aa2c16c3a436932f9a3f4ce5eaaf11e0c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>numLocalTilesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a5c0a1d474a92f4622e6156cbd8b42a27" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NumRealComps</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a72e673a1fb1acdb894fb63417aaf3c59" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NumRuntimeIntComps</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a926b41920a7dd2ca180db0717f726faa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>NumRuntimeRealComps</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a1bc5ab891d45a0e44da097b43f94b7fb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>OK</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a92aa9afcd8adbbb62d06b8c3c293912a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>OnSameGrids</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1abb538e22fbb1040357afa25499040130" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aba1add770f076a80ad7cdaafd468600d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a05d7cf849b59c815bc33a0f71d68576b" prot="public" virt="non-virtual" ambiguityscope="amrex::ParticleContainerBase::"><scope>amrex::ParticleContainer_impl</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab1ba13d6abacc075b19e6375ec9889f8" prot="public" virt="non-virtual" ambiguityscope="amrex::ParticleContainerBase::"><scope>amrex::ParticleContainer_impl</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a8a9724a602a1034017c9578d45910a90" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParConstIterType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a4c62beafa833201efa7c9e7ee259d785" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParIterBase_impl&lt; false, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a8fbe7bffd0c677974504ded6ef24a9f0" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParIterBase_impl&lt; true, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1adb85276367bb16831500bd619a7fa724" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParIterType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ad2bc38953d14a33e1d165372b1f8d3e4" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>particle_size</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2c0b7f83bf8704d063c57f1e629f4fcb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a5b175fd2bdaed24ba7c697985561e773" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainer_impl</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a893cd026d19d1c7791f9edbf1beb9e80" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainer_impl</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a448d1854177c7b246db5a02823eb32df" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainer_impl</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1acaf9845e14cca4dc0cf89bfba1c09a7f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainer_impl</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a17b32ed9f05b29c632ad9dc82e13f0fa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainer_impl</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a3eb505b47edc7093c1b416c4db35f925" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainer_impl</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a27b28bd4f409e4f4fee09aa7e43a9f33" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainer_impl</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a51bba5cff5a55e3f6ce46c0b56fa1809" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5f71ad65c90b78b062f40127d91a3134" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af17feaf161d82ae2ef0466b6188cc7b0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ae983cf8ab0ac0e50438110da4061ea1c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleContainerType</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1d3c53a73651fd4d1b30a4b7f92f11b5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae2ad71767464fef55467f5b2af2ade3f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleGeom</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a39f3dad374127876863b7888ac53b465" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleInitData</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a2a95432c01c58984730881db4e162f02" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ad396acd787a21008fac169e86ab7dd1f" prot="private" virt="virtual"><scope>amrex::ParticleContainer_impl</scope><name>particlePostLocate</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a1b57811f2abf751ac0228b4c5c43442c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleRealDescriptor</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a52077b438cd08b19e37486a4f402a460" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ade23813204c0c42e9a4da001d9a16446" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a32f4e8e7c16db83c91f2a79bf1325c80" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a1d3f01e46337c97d258407ba888bf3f0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleTileType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af9086e3760f0e461a8aa1cb5cbe2b608" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a54e7d39c60aed23dded20dfdea50f7de" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ParticleVector</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a292a389112a6b521e0fd93a93d1500eb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>PeriodicShift</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a455c5a8b3e564ebdd8f3008995096057" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>PlotfileVersion</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ad7528534f68470a63985ebec885d21cf" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>PrintCapacity</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1abaa15570421b529a29a0798dc49a66fe" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>PTDType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a26d6df612421a3465dc622e1c52954b1" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ReadParticleRealData</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a608343590b5172b850efbd370f0cd6e9" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ReadParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aac72f922b5c6acf01660db3263a3967b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>RealType</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a3c635ec7175b9f6f28bce938ea801423" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>RealVector</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad5f30ae5a0147ce527c0ba93eba393b2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>RedefineDummyMF</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a0c3e76aa78d6fba2fbdc67e9f9418b2d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>redistribute_mask_nghost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>redistribute_mask_ptr</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a2d404cca389bc501cd8388997a62507a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>RedistributeCPU</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1abb2694fa742ba11d0c8dac15cc9c2831" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>RedistributeGPU</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ab6d68054b299d03929d9b54369caf883" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>RedistributeMPI</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a514437dcd26d7780f2a2089a049c82be" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>RemoveParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ac94552c20fc683c201073a40e3c363e1" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>RemoveParticlesNotAtFinestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a11b7e58536c0018fec367cae73c564cb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ReorderParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af3cf62158c41dbaee7e1529179f86c84" prot="public" virt="virtual"><scope>amrex::ParticleContainer_impl</scope><name>reserveData</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ad20adffbe4b4746c86ea9fc41034e860" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Reset</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a907ddeaea4ca42fcb1c485d701013d27" prot="public" virt="virtual"><scope>amrex::ParticleContainer_impl</scope><name>resizeData</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a13e8f05b4ed5423af853e90b6ea04c38" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ResizeRuntimeIntComp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a935197ee3cb7a3665b16ec8ded3ea0ce" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ResizeRuntimeRealComp</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1acb9f13c7fa4d704bfb55677fca839469" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Restart</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1abf5ffec33df70c64b7ca055873a055da" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Restart</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2f11cba25c96c199ed3d09db4af66668" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetArena</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a51414af32d7051aef77e91a94ae009ef" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetLevelDirectoriesCreated</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae4c36450603243012e55a13c30b6f924" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af39ed2aa32a6359b1ab7368a3c1dea13" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a4b94090fae113940cbe7af3cf19e724c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9231dc83e842370bb5e91c77eb5a6915" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae09bdef9314b42d58a5000ba54298b95" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adf3e361fae56b92d85299fb77fbe111b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetParticleGeometry</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a4820e40e502374a1e7b31736b3df0f29" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetParticleSize</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a36f7b9890c89ef5af2261d6f1397dcab" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetSoACompileTimeNames</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a3a3a7f6cf9b25237e536f06d7db113b5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>setStableRedistribute</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a5bec5781b720b0e352bf4175e53db209" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetUsePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a07a6c47cf3f6c0e4eb77bbb5a3651cac" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetUseUnlink</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SetVerbose</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a841e3e49cf95184882af71b4ae2eed7c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>ShrinkToFit</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a69ff052875e307b7cb9ca774912b4003" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SoA</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a765156e4c796a3fb87ef155c773f020e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SortParticlesByBin</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aa901019469055fb65969c92b37460ffd" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SortParticlesByCell</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a5a522d14748b73644f8a9c542c73810f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SortParticlesForDeposition</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a039ae2c7aff1bad803fbb84ca49a79a7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>stableRedistribute</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a0f5632ab05c6d5c93ec4c4deb0ed0753" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>superparticle_size</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1acc0e05b69f7bc04b034f32697edd73f3" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>superParticleSize</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a12ac56edf0492d0b5d958ff028a6a537" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>SuperParticleType</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aef5ac9f0985c8a3170a554969eb375cb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>tile_size</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af2d2b1e86982b739cd6fc6b2549c9de0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>TotalNumberOfParticles</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adaf8edd2c78ff65581a26e7ce38a5489" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>use_comms_arena</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1afd72327ed221e95f199aa4b22e98f662" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>usePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aecfa142bba944fe440b23bd13a79c08e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Verbose</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a2d19ef2ac991ec35e1f75c934f453e0e" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>Where</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a19cc9a46b7d9e49c478bc9f26714ee0b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>wherePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a163a2894a9c1d9ff00c278ee873d2497" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>whichPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a4348f22ec8abc2cab803f8a1aea6e494" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WriteAsciiFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af4a82116b11fb56e946701ec1576abf9" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WriteBinaryParticleData</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ae95ee1cface54e5fda03407190b3a464" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WriteParticleRealData</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1acfeb22c8b5b4266834fea14b1444703c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WriteParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ae2a882c357b72c84b934c0126976c65b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1ac619ec4f2ce3efa064323b62a4abab23" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a326446070fe5e2374da5bedf87cc25e2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a02301b2a02e6fb1ca08c96c9fda109be" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af248577e6120966c6ed573fe1d8828b4" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a8f7940c8c21dec419a2c751a2e61c20a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a54674ebf0207f608d21f7862c256ad99" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a039fc5fda00bc515f0a1064af928cdc6" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a92576f2c69ef205393563dfc7efe5b4a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1aff4d24c0425cd1106380405cc293eacc" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a33a9eb317737d277ff55d8ceac83cad0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFilePost</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1a04848df25835aa49080bb5eb4854085f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>WritePlotFilePre</name></member>
      <member refid="classamrex_1_1ParticleContainer__impl_1af10957def8edc4549269e00ba154a0b4" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer_impl</scope><name>~ParticleContainer_impl</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9767823a5595f287569a535bb3b8ae59" prot="public" virt="virtual"><scope>amrex::ParticleContainer_impl</scope><name>~ParticleContainerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
