<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1FArrayBox" kind="class" language="C++" prot="public">
    <compoundname>amrex::FArrayBox</compoundname>
    <basecompoundref refid="classamrex_1_1BaseFab" prot="public" virt="non-virtual">amrex::BaseFab&lt; Real &gt;</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1CutFab" prot="public" virt="non-virtual">amrex::CutFab</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1EBFArrayBox" prot="public" virt="non-virtual">amrex::EBFArrayBox</derivedcompoundref>
    <includes refid="AMReX__FArrayBox_8H" local="no">AMReX_FArrayBox.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FArrayBox_1a1d09202fafedb82d79c005250c3cef2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FABio</definition>
        <argsstring></argsstring>
        <name>FABio</name>
        <briefdescription>
<para><ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> is a friend of ours. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="202" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FArrayBox_1af0dbc00602c50f34664b6c6cb39033be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;fb)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
<para>Write FABs in ASCII form. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="294" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="962" bodyend="968"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FArrayBox_1ad6e8fbbe92b476fd75bf5ace98418fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;fb)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
<para>Read FABs in ASCII form. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="297" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="971" bodyend="978"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a2d4b7df27f35926ab4a1377d5864aed8" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="403" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a84a692c3807a4e2ab439841c70b1f004" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1abd2e3d292645433cefc947725585f87a" kindref="member">FabType</ref></type>
        <definition>FabType amrex::FArrayBox::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <initializer>= <ref refid="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf37d08ae228a87dc6b265fd1019c97d" kindref="member">FabType::regular</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="407" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="407" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a8cb9b648353fe9b5fb90cdfccf5b0c89" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref></type>
        <definition>FABio::Format amrex::FArrayBox::format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <briefdescription>
<para>Format and ordering for all FAB output. This stuff exists solely to support reading old FABs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="413" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a9dd03f8360cfc2cfdf803298308f53dd" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref></type>
        <definition>FABio::Ordering amrex::FArrayBox::ordering</definition>
        <argsstring></argsstring>
        <name>ordering</name>
        <initializer>= <ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39a8db2674dc83889b0c41bf7a2de656e0b" kindref="member">FABio::FAB_NORMAL_ORDER</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="414" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a7b3c6612330474e7db6e4f6ff9d4f380" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> *</type>
        <definition>FABio * amrex::FArrayBox::fabio</definition>
        <argsstring></argsstring>
        <name>fabio</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> pointer describing our output format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="417" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1ab0b477e69a1fe773b7467810181a3056" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::do_initval</definition>
        <argsstring></argsstring>
        <name>do_initval</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>initial value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="420" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a6657471e6437a4acab5413ea8874ff39" prot="protected" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::FArrayBox::initval</definition>
        <argsstring></argsstring>
        <name>initval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="421" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1af56588e4621fc35eae763fcb44ad4633" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::init_snan</definition>
        <argsstring></argsstring>
        <name>init_snan</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="422" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="422" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1afc781bb81903fd65b313bcfb46d4aa14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>FArrayBox</name>
        <briefdescription>
<para>Construct an invalid FAB with no memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="205" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a374b94f1d571d67c7bc7025346824f1a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="207" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a78cb311711d0a1b9b479d66d71fa1edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const Box &amp;b, int ncomp, Arena *ar)</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a3c853d41aecaee21ed1f5ffab2ebed76" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const Box &amp;b, int ncomp=1, bool alloc=true, bool shared=false, Arena *ar=nullptr)</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Construct an initial FAB with the data space allocated but not inititialized. ncomp is the number of components (variables) at each data point in the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="216" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aa2977b85f283b49740400daed8ffe97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const FArrayBox &amp;rhs, MakeType make_type, int scomp, int ncomp)</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>make_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="222" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1afbb6de44f26acc8ae2fa06e16571922f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const Box &amp;b, int ncomp, Real const *p) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="224" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a46be1bc294541cf9d677f487baa07d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const Box &amp;b, int ncomp, Real *p) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="226" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ab9d3b69222db9fba7e76eefa32f4ce32" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Array4&lt; Real &gt; const &amp;a) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="229" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1acbc4049baf15df08ea1af17e3b084bce" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Array4&lt; Real &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="232" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a857d6be833fcf8cd638a28da1de97e36" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Array4&lt; Real const  &gt; const &amp;a) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1af82dd0e87633c1b097481174ec58dc78" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Array4&lt; Real const  &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ae3a0d38865100d93d3c203db57198fb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::~FArrayBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>~FArrayBox</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="242" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ae822ed6d1bc48190941617842d212243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(FArrayBox &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a862dcdbd4fbb34b292075f2c7bf44428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const FArrayBox &amp;)=delete</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a6f8accb8be245e6873219b15a933f431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::FArrayBox::operator=</definition>
        <argsstring>(const FArrayBox &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aa68151c4f96270d35a9cde2a4ff53fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::FArrayBox::operator=</definition>
        <argsstring>(FArrayBox &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1afb23955cc5c661e8f041ea1864c1b35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox &amp; amrex::FArrayBox::operator=</definition>
        <argsstring>(Real r) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>Real</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Set the fab to the value r. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="251" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="188" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a0950587ec6e53ece5805ffb5ab71cf60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::initVal</definition>
        <argsstring>() noexcept</argsstring>
        <name>initVal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="253" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="195" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a49c25c07e7176c493eb665b9e2e398a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_nan</definition>
        <argsstring>() const noexcept</argsstring>
        <name>contains_nan</name>
        <briefdescription>
<para>Are there any NaNs in the FAB? This may return false, even if the FAB contains NaNs, if the machine doesn&apos;t support the appropriate NaN testing functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="259" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="430" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a7a62cc8b6838504d75764f9dfb3bec64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::FArrayBox::contains_nan</definition>
        <argsstring>(const Box &amp;bx, int scomp, int ncomp) const noexcept</argsstring>
        <name>contains_nan</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="262" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="445" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a33bd0aad6c687d9207f7f7d64df00702" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_nan</definition>
        <argsstring>(IntVect &amp;where) const noexcept</argsstring>
        <name>contains_nan</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>These versions return the cell index (though not the component) of the first location of a NaN if there is one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="267" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1af50a85491d30e726465d81fd29b56790" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_nan</definition>
        <argsstring>(const Box &amp;bx, int scomp, int ncomp, IntVect &amp;where) const noexcept</argsstring>
        <name>contains_nan</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="269" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="480" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a528be1634802dbdf8bfd0f4874fa2b95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_inf</definition>
        <argsstring>() const noexcept</argsstring>
        <name>contains_inf</name>
        <briefdescription>
<para>Are there any Infs in the FAB? This may return false, even if the FAB contains Infs, if the machine doesn&apos;t support the appropriate Inf testing functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="275" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="509" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1abd3718223bf47554bbf03c303e0e0c12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::FArrayBox::contains_inf</definition>
        <argsstring>(const Box &amp;bx, int scomp, int ncomp) const noexcept</argsstring>
        <name>contains_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="278" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="524" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a3b32fddc97c624d7965f6a2ff1a133a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_inf</definition>
        <argsstring>(IntVect &amp;where) const noexcept</argsstring>
        <name>contains_inf</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>These versions return the cell index (though not the component) of the first location of an Inf if there is one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a96eabf866abf113295533d4ca7ab5700" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_inf</definition>
        <argsstring>(const Box &amp;bx, int scomp, int ncomp, IntVect &amp;where) const noexcept</argsstring>
        <name>contains_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="285" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="559" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ae5a4b9b9a64a4c1cfd534bb6eefc6b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::resize</definition>
        <argsstring>(const Box &amp;b, int N=1)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>For debugging purposes we hide <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> version and do some extra work. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="288" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a3e62ab0dcf6c751e94e34f25bcc3c50b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1abd2e3d292645433cefc947725585f87a" kindref="member">FabType</ref></type>
        <definition>FabType amrex::FArrayBox::getType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="291" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1abb6e149e86e4063464a54a87b6eb0a98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::writeOn</definition>
        <argsstring>(std::ostream &amp;of) const </argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>of</declname>
        </param>
        <briefdescription>
<para>Writes out the FAB in whatever format you&apos;ve set. The default format is ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="303" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a8b18916c1151e0d296dc8eb676b591ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::writeOn</definition>
        <argsstring>(std::ostream &amp;of, int comp, int num_comp=1) const </argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Write only selected range of components. comp specifies from which component (starting at 0) to write at each point in space. num_comp specifies how many data points to write out at each point is space <ndash/> it defaults to 1. It must be the case the comp &gt;= 0 &amp;&amp; num_comp &gt;= 1 &amp;&amp; (comp+num_comp) &lt;= <ref refid="classamrex_1_1BaseFab_1a7406ec91dc010602121f1492f2d3a748" kindref="member">nComp()</ref>. The FAB is written out in whatever format you&apos;ve set, with the default format being ASCII. The FAB that is written to disk will be an num_comp component FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="316" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="631" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a8a42f4fe7d3ad41e56175103deec42e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::readFrom</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Read FAB from istream. Format is as it was written out. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="321" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="641" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ac5f3bc40906e22d2e481fa87114b62f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FArrayBox::readFrom</definition>
        <argsstring>(std::istream &amp;is, int compIndex)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compIndex</declname>
        </param>
        <briefdescription>
<para>Read FAB from istream. Format is as it was written out. This creates a single component FAB with data from compIndex of the FAB from the istream. Returns the number of components available in the fab. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="329" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="651" bodyend="665"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a30357415a1823591985d8a6434d296c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::FArrayBox::skipFAB</definition>
        <argsstring>(std::istream &amp;is, int &amp;num_comp)</argsstring>
        <name>skipFAB</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Skip over the next FAB from the input stream. Return the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> defining the domain of the FAB and the number of components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="336" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="669" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aadcc71b9080373f0846157aa5955c78c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::skipFAB</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>skipFAB</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Skip over the next FAB from the input stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="340" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a6dd6c1696dd87f8345826bc2ca97cf56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::setFormat</definition>
        <argsstring>(FABio::Format fmt)</argsstring>
        <name>setFormat</name>
        <param>
          <type><ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref></type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> in the program. This is the preferred way to set the output format in &quot;new&quot; FABs. When desiging new programs, this should be the only function that needs to be called in order to set the format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="349" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="267" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aba9fe48668a79af0c5805d77472c467d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref></type>
        <definition>FABio::Format amrex::FArrayBox::getFormat</definition>
        <argsstring>()</argsstring>
        <name>getFormat</name>
        <briefdescription>
<para>Gets the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> set in the program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="352" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a52578eab1d0f7cc7547af989033e82b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::setOrdering</definition>
        <argsstring>(FABio::Ordering ordering)</argsstring>
        <name>setOrdering</name>
        <param>
          <type><ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref></type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref> for reading old FABs. It does NOT set the ordering for output. This is deprecated. It exists only to facilitate reading old FABs. When you&apos;re reading in an &quot;old&quot; FAB, you must set the Ordering, before attempting to read it in. This is because FABs written out in the &quot;old&quot; format weren&apos;t self-describing; i.e. information such as the Ordering was lost when the &quot;old&quot; FAB was written out. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="365" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="304" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aaa904e14fc1335783b62f47ad001348e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref></type>
        <definition>FABio::Ordering amrex::FArrayBox::getOrdering</definition>
        <argsstring>()</argsstring>
        <name>getOrdering</name>
        <briefdescription>
<para>Gets the <ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref> set in the program. This is deprecated. It does NOT do the right thing with the new FAB I/O format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="372" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="311" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a767556bba83027cac8eeecd67726aab8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::setPrecision</definition>
        <argsstring>(FABio::Precision precision)</argsstring>
        <name>setPrecision</name>
        <param>
          <type><ref refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" kindref="member">FABio::Precision</ref></type>
          <declname>precision</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" kindref="member">FABio::Precision</ref>. This is deprecated. It is not useful with the &quot;new&quot; FAB I/O format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="378" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a35de13164243364f3ed296772f0b750a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" kindref="member">FABio::Precision</ref></type>
        <definition>FABio::Precision amrex::FArrayBox::getPrecision</definition>
        <argsstring>()</argsstring>
        <name>getPrecision</name>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" kindref="member">FABio::Precision</ref>. This is deprecated. It is not useful with the &quot;new&quot; FAB I/O format. Always returns FABio::Float. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="385" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="324" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a67fb916342e7c929641dbde731b8aa1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> &amp;</type>
        <definition>const FABio &amp; amrex::FArrayBox::getFABio</definition>
        <argsstring>()</argsstring>
        <name>getFABio</name>
        <briefdescription>
<para>Returns reference to the <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> object used by the program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="388" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a7a5acc633fa80ec1cb999be2c4bbdc02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::setFABio</definition>
        <argsstring>(FABio *rd)</argsstring>
        <name>setFABio</name>
        <param>
          <type><ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> *</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
<para>Sets the <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> object used by the program. It is an error if the passed pointer rd is the null pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="394" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="246" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1adebebb841a716183dc9e48ee95a37aec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::set_do_initval</definition>
        <argsstring>(bool tf)</argsstring>
        <name>set_do_initval</name>
        <param>
          <type>bool</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="396" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="331" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1af073981013bb7c213dd103b9935f9809" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::get_do_initval</definition>
        <argsstring>()</argsstring>
        <name>get_do_initval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="397" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aca0e59c4e500ac53bacf12280c67f225" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::FArrayBox::set_initval</definition>
        <argsstring>(Real iv)</argsstring>
        <name>set_initval</name>
        <param>
          <type>Real</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="398" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="345" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aab5bd155e6cda0d5f6b61d1820ae5a8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::FArrayBox::get_initval</definition>
        <argsstring>()</argsstring>
        <name>get_initval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a35b1135bdf17ab4f4022cf60745ade37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>Initialize from <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> with &quot;fab&quot; prefix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="401" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="359" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a0e43c0beef959593d4253805a22b6abc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="402" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="459" bodyend="464"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Fortran Array of REALs. </para>    </briefdescription>
    <detaileddescription>
<para>Fortran Array <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>&apos;s (generally called FAB&apos;s) are objects constructed to emulate the FORTRAN array. Useful operations can be performed upon FAB&apos;s in C++, and they provide a convenient interface to FORTRAN when it is necessary to retreat into that language.</para><para><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> is derived from <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab&lt;Real&gt;</ref>. <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> adds additional useful capabilities which make sense for Real types, such as I/O and L**p norms.</para><para><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>&apos;s may be output in various formats (see <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> above).</para><para>The format and precision may be set in a file read by the <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> class by the &quot;fab.format&quot; variable. Allowed values are: ASCII 8BIT NATIVE NATIVE_32 IEEE32</para><para>FABs written using operator&lt;&lt; are always written in ASCII. FABS written using writOn use the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> specified with setFormat or the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> specified in the <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> file read by init. If the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> is not set explicitly by either of these two methods, then it defaults to NATIVE.</para><para>The C pre-processor macro AMREX_SPACEDIM must be defined to use this class. The internal precision of FARRAYBOX objects is set by defining either BL_USE_FLOAT or BL_USE_DOUBLE</para><para>This class does NOT provide a copy constructor or assignment operator, but it has a move constructor. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2151">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="2152" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2154">
        <label>amrex::EBFArrayBox</label>
        <link refid="classamrex_1_1EBFArrayBox"/>
        <childnode refid="2150" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2152">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
      </node>
      <node id="2153">
        <label>amrex::CutFab</label>
        <link refid="classamrex_1_1CutFab"/>
        <childnode refid="2150" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2150">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="2151" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2156">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="2157" relation="public-inheritance">
        </childnode>
        <childnode refid="2160" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="2163" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
      <node id="2159">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="2161">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="2161" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="2163">
        <label>Real</label>
      </node>
      <node id="2157">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="2158" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="2158">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="2159" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="2160">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="2161" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="2162" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="2162">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="2164">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="2155">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="2156" relation="public-inheritance">
        </childnode>
        <childnode refid="2164" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="2163" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="197" bodyend="423"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1ad9f38baae12166bf4265a51fcdba8841" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a856679a234221554d3479ce58bcafa00" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1afd142f7a5a7db7af8055581157e7df2c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e926f4b5c3640fbcf8a2233c683a6b7" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1abecedb61761ae70ded029c8b43322e48" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>addproduct</name></member>
      <member refid="structamrex_1_1DataAllocator_1adcabda73bbd0120b08dbb2cda22a6427" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>alloc</name></member>
      <member refid="structamrex_1_1DataAllocator_1a477a75a5d73137b29f1a6ddf31af40f7" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>arena</name></member>
      <member refid="classamrex_1_1BaseFab_1aa456605f5709d47be9474befe9d9e128" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a87f7cf83d52d37f3d3d8f5ebff16040a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a039630ee4496b6d7fd17020a78f4f899" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a4afe2a21e5f0306a9a93e841414ccfaa" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1ab18c6ddc18dd52531c64ab349ddb46fe" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a8c15ecf768daf7962f3414ae4218aae8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a06a5f585e5e6942146ce675c2ecf5ea4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1ada5eb01c33cee9af4b2a5b3a05712ec3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e470d7e72db0c3169e83e34ce4f657b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5d9786facded55bfce06cc443594cab" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a83d88e02757dac7e30b2ac7a13020b22" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa42c6cb505873cad1b9c9de64a20c407" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a53ab00ff398b5beb473bf85810189532" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a2f3151d06126f561f1e1bb90614fec65" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1afc214d0b4ff488adc6f9e2d2935b1719" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a7ed94eb9f8370777608d32c3adcb2cc6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ac3d993534dd6528e6a965d64906cf65a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a0d29e1227b0a3d2381b35cce869f9e5f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseFab_1aeba81b8b4aa7054af02788dc42c797c3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1abb84b4707e9d74caf8ad1ed348918ff7" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1a90d94d23b4c7ff81a86093956d38b332" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a21a8ed23adcc906fd3a3814f3e851f3c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1FArrayBox_1a528be1634802dbdf8bfd0f4874fa2b95" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1FArrayBox_1abd3718223bf47554bbf03c303e0e0c12" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1FArrayBox_1a3b32fddc97c624d7965f6a2ff1a133a3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1FArrayBox_1a96eabf866abf113295533d4ca7ab5700" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1FArrayBox_1a49c25c07e7176c493eb665b9e2e398a1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1FArrayBox_1a7a62cc8b6838504d75764f9dfb3bec64" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1FArrayBox_1a33bd0aad6c687d9207f7f7d64df00702" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1FArrayBox_1af50a85491d30e726465d81fd29b56790" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1BaseFab_1a5545cf0d50c4fb182b9936fa5a6a1fab" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a40063acf8c2d129f64ec2c4fe47f4dc1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a6e4885cd56e887cc91f925473a91cc09" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1afa7492f637831aaefb9a3e9ccfd9da78" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a32633316b16a82689c37b9afc7257e94" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a754743e8defd81b6584737ce1643a9bb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1ac38eb2d18e6b2f06711baf2a404161b2" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copyToMem</name></member>
      <member refid="structamrex_1_1DataAllocator_1a7efc193b557d263444d91cc90c7c7073" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>DataAllocator</name></member>
      <member refid="structamrex_1_1DataAllocator_1a1cbea797e47f9d7448b1f574beb24d8b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>DataAllocator</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b5f6bd26ae63d34e365dddfe1fa0991" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a726b1072e06cb71131cdc2a940d4f277" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a16b84cc11d180bc313f0a81cb1ac8731" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1a1843f322e192533110ca6472eef26910" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1aa890ab91fa97095ed0b15587c3f4120a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a135a00024a83310371611e9eb1636d75" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ab94465d1601f0e2516503f87c08fc270" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a7783f92753885f1760db6a197f835c26" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ac597fa0c8923f6d33308729f6180a092" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a74a5c8a01c940cb6f3f332f5484e3f31" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a99be10917e130f6fd29f3247351e0148" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a4908224865534fede607561a4e3e4d8f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1FArrayBox_1ab0b477e69a1fe773b7467810181a3056" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>do_initval</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e95d8cfaadfe53080ae0092b53202fb" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1a60bd1d06d367b740866572efd0130918" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a6305f1ef49f4565baa73c35c182a7ef7" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1aac55ecf639495e77e6248c70a8f29bbf" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1ae1dd825e77cdf5c698774cf03cfafa94" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a2aa4e1642137c9681ec5c11884b4e77d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a3845769bb072508c4e0566b55dddf8c7" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a9236f2f88feff79c1d50b9b830750f91" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1ac5a36d719054f74a00bfc52e10ec9918" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>elixir</name></member>
      <member refid="classamrex_1_1FArrayBox_1a7b3c6612330474e7db6e4f6ff9d4f380" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>fabio</name></member>
      <member refid="classamrex_1_1FArrayBox_1a1d09202fafedb82d79c005250c3cef2c" prot="private" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FABio</name></member>
      <member refid="classamrex_1_1FArrayBox_1afc781bb81903fd65b313bcfb46d4aa14" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a374b94f1d571d67c7bc7025346824f1a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a78cb311711d0a1b9b479d66d71fa1edf" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a3c853d41aecaee21ed1f5ffab2ebed76" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1aa2977b85f283b49740400daed8ffe97a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1afbb6de44f26acc8ae2fa06e16571922f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a46be1bc294541cf9d677f487baa07d68" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1ab9d3b69222db9fba7e76eefa32f4ce32" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1acbc4049baf15df08ea1af17e3b084bce" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a857d6be833fcf8cd638a28da1de97e36" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1af82dd0e87633c1b097481174ec58dc78" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1ae822ed6d1bc48190941617842d212243" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a862dcdbd4fbb34b292075f2c7bf44428" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a0e43c0beef959593d4253805a22b6abc" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FArrayBox_1a8cb9b648353fe9b5fb90cdfccf5b0c89" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>format</name></member>
      <member refid="structamrex_1_1DataAllocator_1a5fa328945c30133a9b9c7f93ccf6e78f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>free</name></member>
      <member refid="classamrex_1_1FArrayBox_1af073981013bb7c213dd103b9935f9809" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>get_do_initval</name></member>
      <member refid="classamrex_1_1FArrayBox_1aab5bd155e6cda0d5f6b61d1820ae5a8f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>get_initval</name></member>
      <member refid="classamrex_1_1FArrayBox_1a67fb916342e7c929641dbde731b8aa1b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getFABio</name></member>
      <member refid="classamrex_1_1FArrayBox_1aba9fe48668a79af0c5805d77472c467d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getFormat</name></member>
      <member refid="classamrex_1_1FArrayBox_1aaa904e14fc1335783b62f47ad001348e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getOrdering</name></member>
      <member refid="classamrex_1_1FArrayBox_1a35de13164243364f3ed296772f0b750a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getPrecision</name></member>
      <member refid="classamrex_1_1FArrayBox_1a3e62ab0dcf6c751e94e34f25bcc3c50b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getType</name></member>
      <member refid="classamrex_1_1BaseFab_1a0890deeffafc5605f4766c47cc975439" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1acdceecb3c2305bf9c42f5236c81b9907" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ae6cabd78f18cfc8f0d9544ef683cd640" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa9f484b4626de9d2f16380e768d6f3e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1FArrayBox_1af56588e4621fc35eae763fcb44ad4633" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>init_snan</name></member>
      <member refid="classamrex_1_1FArrayBox_1a35b1135bdf17ab4f4022cf60745ade37" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FArrayBox_1a2d4b7df27f35926ab4a1377d5864aed8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>initialized</name></member>
      <member refid="classamrex_1_1FArrayBox_1a6657471e6437a4acab5413ea8874ff39" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>initval</name></member>
      <member refid="classamrex_1_1FArrayBox_1a0950587ec6e53ece5805ffb5ab71cf60" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>initVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d377082253244d029a41f4d80e0fdf9" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1acccba64f5c6d3ce8d8ddf6e6f14061b1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a959d4c46c684e24b22cb1c7257f7da7c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1ab11964929d2da8a0c2a5bbf7cdbf10c8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d6db68c9ef28ef91234e66512faceb8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1a56b3de1c8cf4f5747c1219f411783d99" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3062d6b59da26a5ef2ab8900bd1e665" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1a53f3433e018b4fd627c40be110013159" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1a51f4b810782e5f9f63474adbd3f76f41" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1ad138d01fb5a57ad77306a3adbf8026cb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>loVect</name></member>
      <member refid="structamrex_1_1DataAllocator_1a901b7f1e68950afc823ebc10c093cb94" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1FArrayBox_1a84a692c3807a4e2ab439841c70b1f004" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>m_type</name></member>
      <member refid="classamrex_1_1BaseFab_1a66695e0608fe850a6c9d44b0e022b6ba" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1af4a8317171c537136ef82e4502e0d7d4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1a1993ea667fc5b620195bb42fe003cc1a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1aee32dcf282a28ad947aa119859ec6d9e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a554f518d10db9e4f7ba253396479b862" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a3664aa12489eadfbdadaf073849ff168" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a25e1017f1d46df8aace1afa61ad5a0e5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1accb8fba792ba3c928a08af36f6d723f0" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a7df22a3c052c547774b12ba80e37d8cf" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b0d67d423e3244b319821ee42763278" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a314333f79f6621b91e21537a878d56ee" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ad3f65f484419bf54c596f036415513b8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1af7b25a0151065df3cb1fa193d5ab447f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b9a1ab4ed5f83f25906871e1df38ee3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf8e3b4742be92554a0520ece9e570c9" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ae7bae9bb40d6f5d425e6e874536b8b37" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e8e7b3e7cdc9290b8662499b12c64eb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a2bc88f523cb4217ddc584a0f0ea71a14" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ea35b6f072f3fce2ef9dbc34d581bdc" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a740bcc1b9a90b5131e784844e7bcd238" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a713260a23faccae106757c7306ca3f4d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a70fae1e24dfdf66fb89239e506dd29a9" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1ab4985cae01df385507d1c5e375313ed5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a902540474252099c5e514b622db88d55" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a5e4e78adc9a9eda669d92917537489f4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a15fbb4b6143b5cd7f3c4d16ddbd7d890" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aaad34c23cb5769d8a4a39b81f4fafcbe" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a07c692f9742adc264321ffa336f19082" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a927888c348b5bfe43d772b294fdfde29" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1afd4f4db6029a2db4ab2c5ada4b3cd871" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a16a050f6b5efa284ced1545f1d08dcb6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ab76e032be803d6672fa1582e0ab186a2" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1afa39285f3d767bba5757841539f858a9" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a43f0ed693f7f5436621aaf9b27620c56" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1ac03d6fdd6bd658196becfefc5b3b93a8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a267006cc0717e9dfbcbd22afc1c89d8c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nBytesOwned</name></member>
      <member refid="classamrex_1_1BaseFab_1a7406ec91dc010602121f1492f2d3a748" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1af3ab7e9a7cb47a3eb41ba6a97ab2e798" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1af705b2c81f5c09e1da3fb68235a25b38" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1aa851b55fb6039e8f36c8240cff0ea83b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1ac91418da8436f87e146b9502ab97c003" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1ab28274e01596549362a13db99bfc2d0f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a024ef815d3aae1c71fc06bb626839e5b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ea3836a6832aa23196a2b34327dc60a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1ae8491cd2baa64b0c0f253b2487023d9a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf26c270066d314a52ccdbc5f61ea302" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BaseFab_1a99b1638f6702821a6b6e63cb860d938f" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nvar</name></member>
      <member refid="classamrex_1_1BaseFab_1a00567b9c2330aba34d69316077efa81b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1afda4a61030056c7cfa8e50030f83119a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a130423b85fe24394d3c49502c1a1cd35" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a5b68b86090865ca3b16f1b92e9ee797f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1abb59e43e55cd73187b3b2ef940fc5c38" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1ab52142915e868be900459e72c143ef0c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a7c05ed5ff6650388093fc1766c8207d6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1aec8fd8bbeb16e610841d26734d970da4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1aaaa7f060abb4bd7f312167d0a54211a2" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a41addea28e914e87385c7cccc36a323c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a11f12df0ff870ae8eed0cc3a57277925" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1ad791fe8d253e2a835b31e2da0aa7ce46" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1FArrayBox_1af0dbc00602c50f34664b6c6cb39033be" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1FArrayBox_1a6f8accb8be245e6873219b15a933f431" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FArrayBox_1aa68151c4f96270d35a9cde2a4ff53fc5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FArrayBox_1afb23955cc5c661e8f041ea1864c1b35c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; Real &gt;::"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3101a71fce4d1d50de1fca73ff4b0f4" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; Real &gt;::"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FArrayBox_1ad6e8fbbe92b476fd75bf5ace98418fa6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1FArrayBox_1a9dd03f8360cfc2cfdf803298308f53dd" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ordering</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1eeed2ada20a86fca2a39f39479e65a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2f3e2461a2c2f263371f7dba2072d655" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a7c3bd10c66be94a65e0c1a48c26be91e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ac580cdc45606d3173a778b218f3b81f6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5fe4dd46693e1c9725372571007c1ac" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a62992b09122ddd625b8ab95fc235442f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a39920efe0f245e4f98b71dd9f3bc22e3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a4407616f7c77aa9461345e18791804f5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a40c2e367dd3c247e4d7d1d56500ebad6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1acc3fa2566c4bf2de3e6f0773e3b0601b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1BaseFab_1aea7b9b15c8959be232fa8d0b14b2b507" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1BaseFab_1aa0817740f0638356f528493bcce9f998" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a3c04a8bad004cce7be5212f564183587" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a16713df951bd62e1c8c51937242948ce" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a3b23f6d29a0e53350deb85239416296b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acf3b50d012730dd3521fb2be517573b9" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1FArrayBox_1a8a42f4fe7d3ad41e56175103deec42e1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1FArrayBox_1ac5f3bc40906e22d2e481fa87114b62f4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1BaseFab_1a4390286fe2327bd5f0561a75ee14499b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>release</name></member>
      <member refid="classamrex_1_1FArrayBox_1ae5a4b9b9a64a4c1cfd534bb6eefc6b30" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1afac959463921393c96bd955a164ba836" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a21a04bd9674c0dac0edf9862284c3fec" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1FArrayBox_1adebebb841a716183dc9e48ee95a37aec" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>set_do_initval</name></member>
      <member refid="classamrex_1_1FArrayBox_1aca0e59c4e500ac53bacf12280c67f225" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>set_initval</name></member>
      <member refid="classamrex_1_1BaseFab_1a03513ca096ccb98cbfc04eed4ea4bf1f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1aede6afede165d8f14c5bedb035654c4a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a141ba4c0b87cbaf780261ba65ac4970a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1FArrayBox_1a7a5acc633fa80ec1cb999be2c4bbdc02" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setFABio</name></member>
      <member refid="classamrex_1_1FArrayBox_1a6dd6c1696dd87f8345826bc2ca97cf56" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setFormat</name></member>
      <member refid="classamrex_1_1FArrayBox_1a52578eab1d0f7cc7547af989033e82b6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setOrdering</name></member>
      <member refid="classamrex_1_1FArrayBox_1a767556bba83027cac8eeecd67726aab8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setPrecision</name></member>
      <member refid="classamrex_1_1BaseFab_1ab55c5cdbff39b6eb2074b4846c9efb2e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1af402572146dec8a5ee8fa286d64a921f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ae241c4705f0c6496df4a574810b1ffe0" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a9b2dec9facea006d0abc61d9b8f5f88e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ad7bc4827d074f13225637fb60b8f2ca9" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ad6b37436bb81f04c247a9485b8c7588f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1aff30e8e8e269729948759942fdb9af76" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a51f395aad812c9915cf00f2d558c0d94" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a4965748df55211a5a68c9765f6f9a12e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1ac574b5236fd0038cc245c5bf694892d6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa2583296d034c025f56af4b64d20aad" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e65169d29942cf3adde870d63a91834" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1add27f351ea3f7f75bf696d5940cacff1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1a1d29a05b0fd35a145529776f7a0f24bb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1a0deb30182f8b5babea5c6eed19e61083" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a9fb8e9b93b4a0d30444bd9d36763f040" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a2433222c078c64fcb8c01cab64c20566" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>size</name></member>
      <member refid="classamrex_1_1FArrayBox_1a30357415a1823591985d8a6434d296c1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>skipFAB</name></member>
      <member refid="classamrex_1_1FArrayBox_1aadcc71b9080373f0846157aa5955c78c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>skipFAB</name></member>
      <member refid="classamrex_1_1BaseFab_1a787a8e1e40a6a13728e44ccbf5a5ec5a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e30e4a2bf961e7ffd1f5293c9505630" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a454db75001aea1672b807616b0f2f9a2" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1af6a04a591d0036d83f4aa6ccbfa164c0" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1aa86e53b5d3afdae2606ab0be640bb022" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1aac8f37b7bba5334a86bf90b58fb062d8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FArrayBox_1abb6e149e86e4063464a54a87b6eb0a98" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1FArrayBox_1a8b18916c1151e0d296dc8eb676b591ce" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BaseFab_1a59bd9a7d965171339fc1bc82caff261c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1a87880711ecbed852b69d6a91e4eef3d4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>~BaseFab</name></member>
      <member refid="classamrex_1_1FArrayBox_1ae3a0d38865100d93d3c203db57198fb3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>~FArrayBox</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
