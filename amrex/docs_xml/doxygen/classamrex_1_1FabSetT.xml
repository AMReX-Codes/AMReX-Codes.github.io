<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1FabSetT" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabSetT</compoundname>
    <includes refid="AMReX__FabSet_8H" local="no">AMReX_FabSet.H</includes>
    <templateparamlist>
      <param>
        <type>typename MF</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1FabDataType" kindref="compound">FabDataType</ref>&lt; MF &gt;::<ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref></type>
        <definition>using amrex::FabSetT&lt; MF &gt;::value_type =  typename FabDataType&lt;MF&gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="50" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabSetT_1acd3ad7937f6bba0b23adf24f96d52f33" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1FabDataType" kindref="compound">FabDataType</ref>&lt; MF &gt;::fab_type</type>
        <definition>using amrex::FabSetT&lt; MF &gt;::FAB =  typename FabDataType&lt;MF&gt;::fab_type</definition>
        <argsstring></argsstring>
        <name>FAB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="51" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FabSetT_1a04d9b65884e6bbe0e494af350ee9fe70" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class FabSetIter</definition>
        <argsstring></argsstring>
        <name>FabSetIter</name>
        <param>
          <type><ref refid="classamrex_1_1FabSetIter" kindref="compound">FabSetIter</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="47" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabSetT_1a73a0f9bfd301cc69846f78fbbbec0527" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class FluxRegister</definition>
        <argsstring></argsstring>
        <name>FluxRegister</name>
        <param>
          <type><ref refid="classamrex_1_1FluxRegister" kindref="compound">FluxRegister</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="48" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabSetT_1a8b03f36aa484c3096470892346337619" prot="private" static="no" mutable="no">
        <type>MF</type>
        <definition>MF amrex::FabSetT&lt; MF &gt;::m_mf</definition>
        <argsstring></argsstring>
        <name>m_mf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="144" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabSetT_1aa9a230d3eb8b231296f22ab79f19837d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSetT&lt; MF &gt;::FabSetT</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>FabSetT</name>
        <briefdescription>
<para>The default constructor <ndash/> you must later call <ref refid="classamrex_1_1FabSetT_1aeca7df8daa048bc04da92efbc06f63d5" kindref="member">define()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a764097b02ec9ebbbd538b985beffc3bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSetT&lt; MF &gt;::FabSetT</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, int ncomp)</argsstring>
        <name>FabSetT</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Construct a FabSetT&lt;MF&gt; of specified number of components on the grids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="58" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1ae4c95843913a0e22f76f3ed13905cb53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSetT&lt; MF &gt;::~FabSetT</definition>
        <argsstring>()=default</argsstring>
        <name>~FabSetT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="60" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1afcbce0473a1b37b8c02866c26bbb048b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSetT&lt; MF &gt;::FabSetT</definition>
        <argsstring>(FabSetT&lt; MF &gt; &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FabSetT</name>
        <param>
          <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1aa7c034044bb072771c1c29a6c7b261d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSetT&lt; MF &gt;::FabSetT</definition>
        <argsstring>(const FabSetT&lt; MF &gt; &amp;rhs)=delete</argsstring>
        <name>FabSetT</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="64" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1ad6a034e24183a0757164954cfb6fd1b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt;MF&gt;&amp; amrex::FabSetT&lt; MF &gt;::operator=</definition>
        <argsstring>(const FabSetT&lt; MF &gt; &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="65" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a9e361db8584dca389f44089d08bdd240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt;MF&gt;&amp; amrex::FabSetT&lt; MF &gt;::operator=</definition>
        <argsstring>(FabSetT&lt; MF &gt; &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="66" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1aeca7df8daa048bc04da92efbc06f63d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::define</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, int ncomp)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Define a FabSetT&lt;MF&gt; constructed via default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="70" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a1c27985ab724a1cacaa41a9f4cc5fc25" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT_1acd3ad7937f6bba0b23adf24f96d52f33" kindref="member">FAB</ref> const  &amp;</type>
        <definition>FAB const&amp; amrex::FabSetT&lt; MF &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="72" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a3a15743fbc6bfe0f132e113d69b8bb3e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT_1acd3ad7937f6bba0b23adf24f96d52f33" kindref="member">FAB</ref> &amp;</type>
        <definition>FAB&amp; amrex::FabSetT&lt; MF &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="73" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1aea5322566f30964aed1c5c29deeb865e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT_1acd3ad7937f6bba0b23adf24f96d52f33" kindref="member">FAB</ref> const  &amp;</type>
        <definition>FAB const&amp; amrex::FabSetT&lt; MF &gt;::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="74" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1abc8e1ef1fb32bdc7892f1b8eed58d712" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT_1acd3ad7937f6bba0b23adf24f96d52f33" kindref="member">FAB</ref> &amp;</type>
        <definition>FAB&amp; amrex::FabSetT&lt; MF &gt;::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="75" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a0f61186e6e172be849e3061374e1a889" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt;value_type const&gt; amrex::FabSetT&lt; MF &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="77" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1ac7cfa3cf5935adf5b5dae35bd1205eeb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt;value_type &gt; amrex::FabSetT&lt; MF &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="78" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1ad30dbb21490b971fd35fc1f940a48c2a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt;value_type const&gt; amrex::FabSetT&lt; MF &gt;::array</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="79" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a27291157c97ac716012d1f3469b37484" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt;value_type &gt; amrex::FabSetT&lt; MF &gt;::array</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="80" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a0e4e0029ed5ff922b128b5e02b0f93e8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt;value_type const&gt; amrex::FabSetT&lt; MF &gt;::const_array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="81" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1ae1a064318dc76c3d8fe19511fb706bdf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt;value_type const&gt; amrex::FabSetT&lt; MF &gt;::const_array</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="82" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1abbd49ff8f0bac9bb8853d78c34855e92" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> const  &gt;</type>
        <definition>MultiArray4&lt;value_type const&gt; amrex::FabSetT&lt; MF &gt;::arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="84" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a6794fe7d234843b75b56f224f2492d99" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> &gt;</type>
        <definition>MultiArray4&lt;value_type &gt; amrex::FabSetT&lt; MF &gt;::arrays</definition>
        <argsstring>() noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="85" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a46811f4dbfb739f8bdb85b466e5256b2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; <ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref> const  &gt;</type>
        <definition>MultiArray4&lt;value_type const&gt; amrex::FabSetT&lt; MF &gt;::const_arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="86" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a713e5ea61895380c2c6c036297ecc865" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FabSetT&lt; MF &gt;::fabbox</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>fabbox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="88" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1ac701dad264a80003de6f61480b98a869" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabSetT&lt; MF &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a7d5164bf48c1d9aad40cf48e53d1f9b8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::FabSetT&lt; MF &gt;::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="92" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a4d7e5f67da4157aff9d446dad8c5271d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::FabSetT&lt; MF &gt;::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="94" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="94" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1aaf12adc6f28b696da9085672a5507a83" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>MF &amp;</type>
        <definition>MF&amp; amrex::FabSetT&lt; MF &gt;::multiFab</definition>
        <argsstring>() noexcept</argsstring>
        <name>multiFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="97" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a0dd0ab51c70e9efaada3883aab1b8b56" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>MF const  &amp;</type>
        <definition>MF const&amp; amrex::FabSetT&lt; MF &gt;::multiFab</definition>
        <argsstring>() const noexcept</argsstring>
        <name>multiFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="98" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a1b171b05c525c1833805b9c1e71f8368" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabSetT&lt; MF &gt;::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="100" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a4a723de952c4a193086c47d5f374356b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="102" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a2d2f6ad459f54ab22683f32d5b641d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt; MF &gt; &amp; amrex::FabSetT&lt; MF &gt;::copyFrom</definition>
        <argsstring>(const FabSetT&lt; MF &gt; &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>copyFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="104" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="170" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a8254fd4bee5e9d3453f700f51e62e9e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt; MF &gt; &amp; amrex::FabSetT&lt; MF &gt;::copyFrom</definition>
        <argsstring>(const MF &amp;src, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>copyFrom</name>
        <param>
          <type>const MF &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="106" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a2d88ae6162badc6e58949b21e959bc80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt; MF &gt; &amp; amrex::FabSetT&lt; MF &gt;::plusFrom</definition>
        <argsstring>(const FabSetT&lt; MF &gt; &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>plusFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="109" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="203" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a347f19dfd7611b563f7cc799023dc17a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt; MF &gt; &amp; amrex::FabSetT&lt; MF &gt;::plusFrom</definition>
        <argsstring>(const MF &amp;src, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>plusFrom</name>
        <param>
          <type>const MF &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="111" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="226" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1af97c472cac5a8e0e90b66f9999d49dca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::copyTo</definition>
        <argsstring>(MF &amp;dest, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>copyTo</name>
        <param>
          <type>MF &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="114" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a52afe3a40bffa4138f997dbf4428d634" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::plusTo</definition>
        <argsstring>(MF &amp;dest, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>plusTo</name>
        <param>
          <type>MF &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="117" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="245" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1ab5e8da6e6afc2500eda235e22a485dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::setVal</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="120" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="254" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1affc018df5ca039abaf4ffb0fd51e8619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Linear combination: this := a*this + b*src (FabSetT&lt;MF&gt;s must be commensurate). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="122" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="272" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a6ecf47a622303ab157f7e18a4b870205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt; MF &gt; &amp; amrex::FabSetT&lt; MF &gt;::linComb</definition>
        <argsstring>(value_type a, value_type b, const FabSetT&lt; MF &gt; &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>linComb</name>
        <param>
          <type><ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Linear combination: this := a*mfa + b*mfb. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="125" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="291" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a891c43771c03412e044bf7b807bfb85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt; MF &gt; &amp; amrex::FabSetT&lt; MF &gt;::linComb</definition>
        <argsstring>(value_type a, const MF &amp;mfa, int a_comp, value_type b, const MF &amp;mfb, int b_comp, int dcomp, int ncomp, int ngrow)</argsstring>
        <name>linComb</name>
        <param>
          <type><ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>mfa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" kindref="member">value_type</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>mfb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>b_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="129" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="316" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1aa6ffee464cd67617c540f751360e05c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::write</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Write (used for writing to checkpoint) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="135" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="368" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a36867dedd480c7d07877c1cc65aa40bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::read</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>read</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Read (used for reading from checkpoint) </para>
        </briefdescription>
        <detaileddescription>
<para>Local copy function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="138" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="379" bodyend="385"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FabSetT_1a26c68b445998a0f5d87f9cc19420c4e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSetT&lt; MF &gt;::Copy</definition>
        <argsstring>(FabSetT&lt; MF &gt; &amp;dst, const FabSetT&lt; MF &gt; &amp;src)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="141" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="389" bodyend="406"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A FabSet is a group of <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>&apos;s. The grouping is designed specifically to represent regions along the boundary of Box&apos;s, and are used to implement boundary conditions to discretized partial differential equations. </para>
    </briefdescription>
    <detaileddescription>
<para>A FabSet is an array of pointers to FABs. The standard FAB operators, however, have been modified to be more useful for maintaining boundary conditions for partial differential equations discretized on boxes. Under normal circumstances, a FAB will be created for each face of a box. For a group of boxes, a FabSet will be the group of FABs at a particular orientation (ie. the lo-i side of each grid in a list).</para>
<para>Since a FabSet FAB will likely be used to bound a grid box, <ref refid="classamrex_1_1FArrayBox_1ae32a072e143825062dac1ee2e9c24f79" kindref="member">FArrayBox::resize()</ref> operations are disallowed. Also, to preserve flexibility in applicable boundary scenarios, intersecting FABs in the FabSet are not guaranteed to contain identical data<ndash/>thus copy operations from a FabSet to any FAB-like structure may be order-dependent.</para>
<para>FabSets are used primarily as a data storage mechanism, and are manipulated by more sophisticated control classes. </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="46" bodyend="145"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabSetT_1a0f61186e6e172be849e3061374e1a889" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSetT_1ac7cfa3cf5935adf5b5dae35bd1205eeb" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSetT_1ad30dbb21490b971fd35fc1f940a48c2a" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSetT_1a27291157c97ac716012d1f3469b37484" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSetT_1abbd49ff8f0bac9bb8853d78c34855e92" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabSetT_1a6794fe7d234843b75b56f224f2492d99" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabSetT_1a7d5164bf48c1d9aad40cf48e53d1f9b8" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabSetT_1a4a723de952c4a193086c47d5f374356b" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabSetT_1a0e4e0029ed5ff922b128b5e02b0f93e8" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabSetT_1ae1a064318dc76c3d8fe19511fb706bdf" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabSetT_1a46811f4dbfb739f8bdb85b466e5256b2" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>const_arrays</name></member>
      <member refid="classamrex_1_1FabSetT_1a26c68b445998a0f5d87f9cc19420c4e1" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>Copy</name></member>
      <member refid="classamrex_1_1FabSetT_1a2d2f6ad459f54ab22683f32d5b641d75" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1FabSetT_1a8254fd4bee5e9d3453f700f51e62e9e8" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1FabSetT_1af97c472cac5a8e0e90b66f9999d49dca" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabSetT_1aeca7df8daa048bc04da92efbc06f63d5" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>define</name></member>
      <member refid="classamrex_1_1FabSetT_1a4d7e5f67da4157aff9d446dad8c5271d" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabSetT_1acd3ad7937f6bba0b23adf24f96d52f33" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>FAB</name></member>
      <member refid="classamrex_1_1FabSetT_1a713e5ea61895380c2c6c036297ecc865" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabSetT_1a04d9b65884e6bbe0e494af350ee9fe70" prot="private" virt="non-virtual"><scope>amrex::FabSetT</scope><name>FabSetIter</name></member>
      <member refid="classamrex_1_1FabSetT_1aa9a230d3eb8b231296f22ab79f19837d" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>FabSetT</name></member>
      <member refid="classamrex_1_1FabSetT_1a764097b02ec9ebbbd538b985beffc3bb" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>FabSetT</name></member>
      <member refid="classamrex_1_1FabSetT_1afcbce0473a1b37b8c02866c26bbb048b" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>FabSetT</name></member>
      <member refid="classamrex_1_1FabSetT_1aa7c034044bb072771c1c29a6c7b261d3" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>FabSetT</name></member>
      <member refid="classamrex_1_1FabSetT_1a73a0f9bfd301cc69846f78fbbbec0527" prot="private" virt="non-virtual"><scope>amrex::FabSetT</scope><name>FluxRegister</name></member>
      <member refid="classamrex_1_1FabSetT_1a6ecf47a622303ab157f7e18a4b870205" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>linComb</name></member>
      <member refid="classamrex_1_1FabSetT_1a891c43771c03412e044bf7b807bfb85e" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>linComb</name></member>
      <member refid="classamrex_1_1FabSetT_1a8b03f36aa484c3096470892346337619" prot="private" virt="non-virtual"><scope>amrex::FabSetT</scope><name>m_mf</name></member>
      <member refid="classamrex_1_1FabSetT_1aaf12adc6f28b696da9085672a5507a83" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>multiFab</name></member>
      <member refid="classamrex_1_1FabSetT_1a0dd0ab51c70e9efaada3883aab1b8b56" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>multiFab</name></member>
      <member refid="classamrex_1_1FabSetT_1a1b171b05c525c1833805b9c1e71f8368" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabSetT_1ad6a034e24183a0757164954cfb6fd1b3" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabSetT_1a9e361db8584dca389f44089d08bdd240" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabSetT_1a1c27985ab724a1cacaa41a9f4cc5fc25" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSetT_1a3a15743fbc6bfe0f132e113d69b8bb3e" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSetT_1aea5322566f30964aed1c5c29deeb865e" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSetT_1abc8e1ef1fb32bdc7892f1b8eed58d712" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSetT_1a2d88ae6162badc6e58949b21e959bc80" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1FabSetT_1a347f19dfd7611b563f7cc799023dc17a" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1FabSetT_1a52afe3a40bffa4138f997dbf4428d634" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>plusTo</name></member>
      <member refid="classamrex_1_1FabSetT_1a36867dedd480c7d07877c1cc65aa40bf" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>read</name></member>
      <member refid="classamrex_1_1FabSetT_1ab5e8da6e6afc2500eda235e22a485dda" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabSetT_1affc018df5ca039abaf4ffb0fd51e8619" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabSetT_1ac701dad264a80003de6f61480b98a869" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>size</name></member>
      <member refid="classamrex_1_1FabSetT_1ab235947bfbdf6abe588b53f05300b5b7" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FabSetT_1aa6ffee464cd67617c540f751360e05c2" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>write</name></member>
      <member refid="classamrex_1_1FabSetT_1ae4c95843913a0e22f76f3ed13905cb53" prot="public" virt="non-virtual"><scope>amrex::FabSetT</scope><name>~FabSetT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
