<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structamrex_1_1ForkJoin_1_1MFFork" kind="struct" language="C++" prot="private">
    <compoundname>amrex::ForkJoin::MFFork</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1ForkJoin_1_1MFFork_1af278943e6089937c826f0bd0967a264f" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        <definition>MultiFab* amrex::ForkJoin::MFFork::orig</definition>
        <argsstring></argsstring>
        <name>orig</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="155" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ForkJoin_1_1MFFork_1a922cc68b9dce362ee62f0d724dede442" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ForkJoin_1a72de18d1d16fadce31b830834ffff282" kindref="member">Strategy</ref></type>
        <definition>Strategy amrex::ForkJoin::MFFork::strategy</definition>
        <argsstring></argsstring>
        <name>strategy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="156" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ForkJoin_1_1MFFork_1adab1f2dcfd2d52eebf3c6727ef5e37d7" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ForkJoin_1a3acf0d91b32d1d08dbe32046028f1466" kindref="member">Intent</ref></type>
        <definition>Intent amrex::ForkJoin::MFFork::intent</definition>
        <argsstring></argsstring>
        <name>intent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="157" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ForkJoin_1_1MFFork_1aab173e1a49428a72e1099f8925dfeb56" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ForkJoin::MFFork::owner_task</definition>
        <argsstring></argsstring>
        <name>owner_task</name>
        <briefdescription>
<para>only used if strategy == single or duplicate </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="158" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ForkJoin_1_1MFFork_1ab30d7bacb605f55a7714f002a92f2cf6" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::ForkJoin::MFFork::ngrow</definition>
        <argsstring></argsstring>
        <name>ngrow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="159" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ForkJoin_1_1MFFork_1a10f36654d975cbc986561d7c1931a02b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1ForkJoin_1_1ComponentSet" kindref="compound">ComponentSet</ref> &gt;</type>
        <definition>Vector&lt;ComponentSet&gt; amrex::ForkJoin::MFFork::comp_split</definition>
        <argsstring></argsstring>
        <name>comp_split</name>
        <briefdescription>
<para>if strategy == split, how to split components to tasks </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="160" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ForkJoin_1_1MFFork_1a335de4835763f4875e6c6089f5e739c9" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>Vector&lt;MultiFab&gt; amrex::ForkJoin::MFFork::forked</definition>
        <argsstring></argsstring>
        <name>forked</name>
        <briefdescription>
<para>holds new multifab for each task in fork </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="161" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1ForkJoin_1_1MFFork_1a34adaed2dce7ad0a962488bee88e6589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ForkJoin::MFFork::MFFork</definition>
        <argsstring>()=default</argsstring>
        <name>MFFork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="163" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ForkJoin_1_1MFFork_1a963d59d69d1624a4fc0bc1806a6f8588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ForkJoin::MFFork::MFFork</definition>
        <argsstring>(const MFFork &amp;)=delete</argsstring>
        <name>MFFork</name>
        <param>
          <type>const <ref refid="structamrex_1_1ForkJoin_1_1MFFork" kindref="compound">MFFork</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="164" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ForkJoin_1_1MFFork_1ad06d1e92d8a2216c6a39393c6975f0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1ForkJoin_1_1MFFork" kindref="compound">MFFork</ref> &amp;</type>
        <definition>MFFork&amp; amrex::ForkJoin::MFFork::operator=</definition>
        <argsstring>(const MFFork &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structamrex_1_1ForkJoin_1_1MFFork" kindref="compound">MFFork</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="165" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ForkJoin_1_1MFFork_1a9f9fa0710f16b9dff7c3002b6b23744c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ForkJoin::MFFork::MFFork</definition>
        <argsstring>(MFFork &amp;&amp;)=default</argsstring>
        <name>MFFork</name>
        <param>
          <type><ref refid="structamrex_1_1ForkJoin_1_1MFFork" kindref="compound">MFFork</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="166" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ForkJoin_1_1MFFork_1a98a485f718830f05c4833b82e0749f2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1ForkJoin_1_1MFFork" kindref="compound">MFFork</ref> &amp;</type>
        <definition>MFFork&amp; amrex::ForkJoin::MFFork::operator=</definition>
        <argsstring>(MFFork &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structamrex_1_1ForkJoin_1_1MFFork" kindref="compound">MFFork</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="167" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ForkJoin_1_1MFFork_1a67f00ed8c48e03e4b18dcecaa19b14d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ForkJoin::MFFork::MFFork</definition>
        <argsstring>(MultiFab *omf, Strategy s, Intent i, int own, const IntVect &amp;ng, Vector&lt; ComponentSet &gt; cs)</argsstring>
        <name>MFFork</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>omf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ForkJoin_1a72de18d1d16fadce31b830834ffff282" kindref="member">Strategy</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ForkJoin_1a3acf0d91b32d1d08dbe32046028f1466" kindref="member">Intent</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>own</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1ForkJoin_1_1ComponentSet" kindref="compound">ComponentSet</ref> &gt;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="168" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ForkJoin_1_1MFFork_1a3d57d55dc4495341b7bd6de0ac9e4bd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ForkJoin::MFFork::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="173" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="173" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="57">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="58" relation="public-inheritance">
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="29" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="47">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="32" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="64" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>K</label>
      </node>
      <node id="48">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="5">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="5" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>T</label>
      </node>
      <node id="18">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="19" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="61">
        <label>Real</label>
      </node>
      <node id="23">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
      </node>
      <node id="72">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="73" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="59" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="11" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="12" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="60" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="5" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="15" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ForkJoin::MFFork</label>
        <link refid="structamrex_1_1ForkJoin_1_1MFFork"/>
        <childnode refid="2" relation="usage">
          <edgelabel>comp_split</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>ngrow</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>orig</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>forked</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="26">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="5" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="52" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>amrex::Vector&lt; amrex::MultiFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="43" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="43">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="44" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="56" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="54">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="12" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="5" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="26" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="34" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="66" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="34">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="35" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="70" relation="public-inheritance">
        </childnode>
      </node>
      <node id="62">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="3">
        <label>std::vector&lt; amrex::ForkJoin::ComponentSet, std::allocator&lt; amrex::ForkJoin::ComponentSet &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="25" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="8">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="75">
        <label>std::vector&lt; amrex::MultiFab, std::allocator&lt; amrex::MultiFab &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="41" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; amrex::ForkJoin::ComponentSet &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="26" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="15" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="22">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="23" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" line="154" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ForkJoin.H" bodystart="153" bodyend="174"/>
    <listofallmembers>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a10f36654d975cbc986561d7c1931a02b" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>comp_split</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a3d57d55dc4495341b7bd6de0ac9e4bd6" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>empty</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a335de4835763f4875e6c6089f5e739c9" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>forked</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1adab1f2dcfd2d52eebf3c6727ef5e37d7" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>intent</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a34adaed2dce7ad0a962488bee88e6589" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>MFFork</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a963d59d69d1624a4fc0bc1806a6f8588" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>MFFork</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a9f9fa0710f16b9dff7c3002b6b23744c" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>MFFork</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a67f00ed8c48e03e4b18dcecaa19b14d1" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>MFFork</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1ab30d7bacb605f55a7714f002a92f2cf6" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>ngrow</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1ad06d1e92d8a2216c6a39393c6975f0ed" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a98a485f718830f05c4833b82e0749f2e" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1af278943e6089937c826f0bd0967a264f" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>orig</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1aab173e1a49428a72e1099f8925dfeb56" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>owner_task</name></member>
      <member refid="structamrex_1_1ForkJoin_1_1MFFork_1a922cc68b9dce362ee62f0d724dede442" prot="public" virt="non-virtual"><scope>amrex::ForkJoin::MFFork</scope><name>strategy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
