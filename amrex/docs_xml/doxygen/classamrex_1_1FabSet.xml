<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1FabSet" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabSet</compoundname>
    <includes refid="AMReX__FabSet_8H" local="no">AMReX_FabSet.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FabSet_1a04d9b65884e6bbe0e494af350ee9fe70" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FabSetIter</definition>
        <argsstring></argsstring>
        <name>FabSetIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabSet_1a73a0f9bfd301cc69846f78fbbbec0527" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FluxRegister</definition>
        <argsstring></argsstring>
        <name>FluxRegister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabSet_1afa58a70c61ea7368f91116f22ccea876" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::FabSet::m_mf</definition>
        <argsstring></argsstring>
        <name>m_mf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="126" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabSet_1acf45d4c6544b5cf067de4b53c87e3a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::FabSet</definition>
        <argsstring>() noexcept</argsstring>
        <name>FabSet</name>
        <briefdescription>
<para>The default constructor <ndash/> you must later call <ref refid="classamrex_1_1FabSet_1aed21a9ab0931c16cfcd91b36f9f179c2" kindref="member">define()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a5462d217f9ec7d07c1759f26cde88be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::FabSet</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, int ncomp)</argsstring>
        <name>FabSet</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> of specified number of components on the grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ac79a8fcbd950fa941c9db2c7fa4e892b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::~FabSet</definition>
        <argsstring>()=default</argsstring>
        <name>~FabSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1aba4f91a1b74d90439746773600170fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::FabSet</definition>
        <argsstring>(FabSet &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FabSet</name>
        <param>
          <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae8ccac97d087013c98ef349c90737123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::FabSet</definition>
        <argsstring>(const FabSet &amp;rhs)=delete</argsstring>
        <name>FabSet</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a5f606dfdb767ad78b61c72a9da1c378f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet&amp; amrex::FabSet::operator=</definition>
        <argsstring>(const FabSet &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a320a46748e6a027a5fdf198a1ac1358d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet&amp; amrex::FabSet::operator=</definition>
        <argsstring>(FabSet &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1aed21a9ab0931c16cfcd91b36f9f179c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::define</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, int ncomp)</argsstring>
        <name>define</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Define a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> constructed via default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a96db28bb8b40c5221f52aec1c8c2babf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const  &amp;</type>
        <definition>FArrayBox const&amp; amrex::FabSet::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="62" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1aebd7c86b3d723170e78bddaafc4a14ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::FabSet::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a542164c14623603e9fbdf4ec7f11d264" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const  &amp;</type>
        <definition>FArrayBox const&amp; amrex::FabSet::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae8b26fa002bf13d1120e3653686153eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::FabSet::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a87a11660735965183c22d16e9e74fc2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt;</type>
        <definition>Array4&lt;Real const&gt; amrex::FabSet::array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a2778034c104c97f952e2e96254840d5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;</type>
        <definition>Array4&lt;Real &gt; amrex::FabSet::array</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a3ded933a4747d8c4fce82e5355e84cfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt;</type>
        <definition>Array4&lt;Real const&gt; amrex::FabSet::array</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1aeaaee9c7988bd6b37096fb1a8c153d05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;</type>
        <definition>Array4&lt;Real &gt; amrex::FabSet::array</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ab233c9f3558e8a3e1375fca1b161e021" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt;</type>
        <definition>Array4&lt;Real const&gt; amrex::FabSet::const_array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1add4a5c1c3336bd4f372356cc3459163e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt;</type>
        <definition>Array4&lt;Real const&gt; amrex::FabSet::const_array</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a00af168b5073955cfd6e80fe4dbb48c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::FabSet::fabbox</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>fabbox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ad5f0d12b67fb58b830a990a104cdf87d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabSet::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ad72c5a816c7b3f066c8ba018e45ffdd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray&amp; amrex::FabSet::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1acfec1cd59913d525883c868bdb6794bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::FabSet::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="80" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1acf7b80e8600bf44c00c6bf420536b69e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabSet::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a400f9bfe07b9e4a18bee1f6cf6b98b29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="85" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a2f119b545c70dc14f232664bc31df5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::copyFrom</definition>
        <argsstring>(const FabSet &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>copyFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="27" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1affeffcfe2649fbc28d92deae76916215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::copyFrom</definition>
        <argsstring>(const MultiFab &amp;src, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>copyFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1abb11e15ccfd9eb9cf7b9cfc75f4bd30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::plusFrom</definition>
        <argsstring>(const FabSet &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>plusFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="58" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a20ff927f81d91df3a565fb0b06de0ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::plusFrom</definition>
        <argsstring>(const MultiFab &amp;src, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>plusFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a8bd01f978f8aeb1183b108396e4cd732" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::copyTo</definition>
        <argsstring>(MultiFab &amp;dest, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>copyTo</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a481faf49fde211c6f5793947f4e84574" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::plusTo</definition>
        <argsstring>(MultiFab &amp;dest, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>plusTo</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a634eeba26a1426e7c29db10d476f266f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::setVal</definition>
        <argsstring>(Real val)</argsstring>
        <name>setVal</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="103" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="105" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a0d009b1309e07ed944160b4f737fbc2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::setVal</definition>
        <argsstring>(Real val, int comp, int num_comp)</argsstring>
        <name>setVal</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Linear combination: this := a*this + b*src (FabSets must be commensurate). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="122" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae4057548b7e1b8f66f5c340ec4c5f088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::linComb</definition>
        <argsstring>(Real a, Real b, const FabSet &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>linComb</name>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Linear combination: this := a*mfa + b*mfb. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="140" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a9a76863d5b17027b20d663cd2968c790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::linComb</definition>
        <argsstring>(Real a, const MultiFab &amp;mfa, int a_comp, Real b, const MultiFab &amp;mfb, int b_comp, int dcomp, int ncomp, int ngrow)</argsstring>
        <name>linComb</name>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mfa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_comp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mfb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>b_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="111" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="163" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a69dee5077a11284078760f620cf1fdd8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::write</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Write (used for writing to checkpoint) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="117" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="218" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ab5d92ff15c80180af8a7bc09bbb6c4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::read</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>read</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Read (used for reading from checkpoint) </para>        </briefdescription>
        <detaileddescription>
<para>Local copy function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="120" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="228" bodyend="234"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FabSet_1a469669c164630747b67a4c290884a5ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::Copy</definition>
        <argsstring>(FabSet &amp;dst, const FabSet &amp;src)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="123" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="237" bodyend="254"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> is a group of <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>&apos;s. The grouping is designed specifically to represent regions along the boundary of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>&apos;s, and are used to implement boundary conditions to discretized partial differential equations. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> is an array of pointers to FABs. The standard FAB operators, however, have been modified to be more useful for maintaining boundary conditions for partial differential equations discretized on boxes. Under normal circumstances, a FAB will be created for each face of a box. For a group of boxes, a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> will be the group of FABs at a particular orientation (ie. the lo-i side of each grid in a list).</para><para>Since a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> FAB will likely be used to bound a grid box, <ref refid="classamrex_1_1FArrayBox_1ae5a4b9b9a64a4c1cfd534bb6eefc6b30" kindref="member">FArrayBox::resize()</ref> operations are disallowed. Also, to preserve flexibility in applicable boundary scenarios, intersecting FABs in the <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> are not guaranteed to contain identical data<ndash/>thus copy operations from a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> to any FAB-like structure may be order-dependent.</para><para>FabSets are used primarily as a data storage mechanism, and are manipulated by more sophisticated control classes. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="1381">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1360">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1361" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1364">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1376">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1363">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1363" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1382">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1383" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1374">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="1375" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="1373">
        <label>std::vector&lt; char *, std::allocator&lt; char *&gt; &gt;</label>
      </node>
      <node id="1378">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="1375">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="1376" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="1365">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1366" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1361">
        <label>string</label>
      </node>
      <node id="1384">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="1363" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="1379">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="1372">
        <label>amrex::Vector&lt; char *&gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1373" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1383">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="1366">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1368">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1369" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1380">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1381" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1369">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1365" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1356">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="1357" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="1377">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1378" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1362">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1367">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1368" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1357">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="1358" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1358">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1359" relation="public-inheritance">
        </childnode>
        <childnode refid="1370" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="1372" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="1363" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="1374" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="1365" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="1377" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="1379" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="1380" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="1382" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="1384" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="1370">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1371" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1359">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1360" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1362" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1363" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1364" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1365" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1367" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
      <node id="1371">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="38" bodyend="127"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabSet_1a87a11660735965183c22d16e9e74fc2d" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSet_1a2778034c104c97f952e2e96254840d5e" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSet_1a3ded933a4747d8c4fce82e5355e84cfe" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSet_1aeaaee9c7988bd6b37096fb1a8c153d05" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSet_1ad72c5a816c7b3f066c8ba018e45ffdd1" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabSet_1a400f9bfe07b9e4a18bee1f6cf6b98b29" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabSet_1ab233c9f3558e8a3e1375fca1b161e021" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabSet_1add4a5c1c3336bd4f372356cc3459163e" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabSet_1a469669c164630747b67a4c290884a5ed" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>Copy</name></member>
      <member refid="classamrex_1_1FabSet_1a2f119b545c70dc14f232664bc31df5ef" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1FabSet_1affeffcfe2649fbc28d92deae76916215" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1FabSet_1a8bd01f978f8aeb1183b108396e4cd732" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabSet_1aed21a9ab0931c16cfcd91b36f9f179c2" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>define</name></member>
      <member refid="classamrex_1_1FabSet_1acfec1cd59913d525883c868bdb6794bb" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabSet_1a00af168b5073955cfd6e80fe4dbb48c2" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabSet_1acf45d4c6544b5cf067de4b53c87e3a3c" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSet</name></member>
      <member refid="classamrex_1_1FabSet_1a5462d217f9ec7d07c1759f26cde88be2" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSet</name></member>
      <member refid="classamrex_1_1FabSet_1aba4f91a1b74d90439746773600170fd3" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSet</name></member>
      <member refid="classamrex_1_1FabSet_1ae8ccac97d087013c98ef349c90737123" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSet</name></member>
      <member refid="classamrex_1_1FabSet_1a04d9b65884e6bbe0e494af350ee9fe70" prot="private" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSetIter</name></member>
      <member refid="classamrex_1_1FabSet_1a73a0f9bfd301cc69846f78fbbbec0527" prot="private" virt="non-virtual"><scope>amrex::FabSet</scope><name>FluxRegister</name></member>
      <member refid="classamrex_1_1FabSet_1ae4057548b7e1b8f66f5c340ec4c5f088" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>linComb</name></member>
      <member refid="classamrex_1_1FabSet_1a9a76863d5b17027b20d663cd2968c790" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>linComb</name></member>
      <member refid="classamrex_1_1FabSet_1afa58a70c61ea7368f91116f22ccea876" prot="private" virt="non-virtual"><scope>amrex::FabSet</scope><name>m_mf</name></member>
      <member refid="classamrex_1_1FabSet_1acf7b80e8600bf44c00c6bf420536b69e" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabSet_1a5f606dfdb767ad78b61c72a9da1c378f" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabSet_1a320a46748e6a027a5fdf198a1ac1358d" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabSet_1a96db28bb8b40c5221f52aec1c8c2babf" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSet_1aebd7c86b3d723170e78bddaafc4a14ea" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSet_1a542164c14623603e9fbdf4ec7f11d264" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSet_1ae8b26fa002bf13d1120e3653686153eb" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSet_1abb11e15ccfd9eb9cf7b9cfc75f4bd30d" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1FabSet_1a20ff927f81d91df3a565fb0b06de0ef1" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1FabSet_1a481faf49fde211c6f5793947f4e84574" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>plusTo</name></member>
      <member refid="classamrex_1_1FabSet_1ab5d92ff15c80180af8a7bc09bbb6c4b5" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>read</name></member>
      <member refid="classamrex_1_1FabSet_1a634eeba26a1426e7c29db10d476f266f" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabSet_1a0d009b1309e07ed944160b4f737fbc2b" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabSet_1ad5f0d12b67fb58b830a990a104cdf87d" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>size</name></member>
      <member refid="classamrex_1_1FabSet_1a69dee5077a11284078760f620cf1fdd8" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>write</name></member>
      <member refid="classamrex_1_1FabSet_1ac79a8fcbd950fa941c9db2c7fa4e892b" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>~FabSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
