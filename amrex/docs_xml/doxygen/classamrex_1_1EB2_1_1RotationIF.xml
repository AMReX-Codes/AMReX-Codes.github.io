<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1EB2_1_1RotationIF" kind="class" language="C++" prot="public">
    <compoundname>amrex::EB2::RotationIF</compoundname>
    <includes refid="AMReX__EB2__IF__Rotation_8H" local="no">AMReX_EB2_IF_Rotation.H</includes>
    <templateparamlist>
      <param>
        <type>class F</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" prot="protected" static="no" mutable="no">
        <type>F</type>
        <definition>F amrex::EB2::RotationIF&lt; F &gt;::m_f</definition>
        <argsstring></argsstring>
        <name>m_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="109" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1RotationIF_1ab51c69319d7d35dc43124c3692af67ee" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::EB2::RotationIF&lt; F &gt;::m_cos_angle</definition>
        <argsstring></argsstring>
        <name>m_cos_angle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="110" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1RotationIF_1a985a4f063595d3fa4506d2b014dff877" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::EB2::RotationIF&lt; F &gt;::m_sin_angle</definition>
        <argsstring></argsstring>
        <name>m_sin_angle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="111" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1RotationIF_1a2e57f52a7f9f0b9b64c98c2c0cb48fed" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EB2::RotationIF&lt; F &gt;::m_dir</definition>
        <argsstring></argsstring>
        <name>m_dir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="112" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1RotationIF_1ac3a7f6b643e785182e86b7b7a2c51f07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::RotationIF&lt; F &gt;::RotationIF</definition>
        <argsstring>(F &amp;&amp;a_f, Real angle, int dir)</argsstring>
        <name>RotationIF</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>a_f</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="19" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1RotationIF_1a4264d3bf59ed9ffe7fe680e1ce8389cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::RotationIF&lt; F &gt;::RotationIF</definition>
        <argsstring>(F const &amp;a_f, Real angle, int dir)</argsstring>
        <name>RotationIF</name>
        <param>
          <type>F const &amp;</type>
          <declname>a_f</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="25" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1RotationIF_1abf21723948891388f7be5aea67737816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::RotationIF&lt; F &gt;::RotationIF</definition>
        <argsstring>(const RotationIF &amp;rhs)=default</argsstring>
        <name>RotationIF</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="32" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1RotationIF_1a1d83a6489a3409450d5dac0e967aa4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::RotationIF&lt; F &gt;::RotationIF</definition>
        <argsstring>(RotationIF &amp;&amp;rhs)=default</argsstring>
        <name>RotationIF</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="33" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1RotationIF_1af238f5cf54c7ae1b0806dbe0ad69f7e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref> &amp;</type>
        <definition>RotationIF&amp; amrex::EB2::RotationIF&lt; F &gt;::operator=</definition>
        <argsstring>(const RotationIF &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="34" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1RotationIF_1a082ac57bb039fceb99b3e48c5346398e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref> &amp;</type>
        <definition>RotationIF&amp; amrex::EB2::RotationIF&lt; F &gt;::operator=</definition>
        <argsstring>(RotationIF &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="35" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1RotationIF_1a16396f5bbe7fdd5524e031d31017ea7a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::EB2::RotationIF&lt; F &gt;::operator()</definition>
        <argsstring>(const RealArray &amp;p) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceamrex_1aeb06fab72f85728954130adbe25c5397" kindref="member">RealArray</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="56" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="56" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1RotationIF_1abd036e398a58ad0aa6478cc372ac889e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>F</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structamrex_1_1EB2_1_1IsGPUable" kindref="compound">IsGPUable</ref>&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::EB2::RotationIF&lt; F &gt;::operator()</definition>
        <argsstring>(Real x, Real y, Real z) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="82" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="82" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>Real</label>
      </node>
      <node id="1">
        <label>amrex::EB2::RotationIF&lt; F &gt;</label>
        <link refid="classamrex_1_1EB2_1_1RotationIF"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_cos_angle</edgelabel>
          <edgelabel>m_sin_angle</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="15" bodyend="113"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1ab51c69319d7d35dc43124c3692af67ee" prot="protected" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>m_cos_angle</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1a2e57f52a7f9f0b9b64c98c2c0cb48fed" prot="protected" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>m_dir</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" prot="protected" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>m_f</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1a985a4f063595d3fa4506d2b014dff877" prot="protected" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>m_sin_angle</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1a16396f5bbe7fdd5524e031d31017ea7a" prot="public" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1abd036e398a58ad0aa6478cc372ac889e" prot="public" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1af238f5cf54c7ae1b0806dbe0ad69f7e6" prot="public" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1a082ac57bb039fceb99b3e48c5346398e" prot="public" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1ac3a7f6b643e785182e86b7b7a2c51f07" prot="public" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>RotationIF</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1a4264d3bf59ed9ffe7fe680e1ce8389cf" prot="public" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>RotationIF</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1abf21723948891388f7be5aea67737816" prot="public" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>RotationIF</name></member>
      <member refid="classamrex_1_1EB2_1_1RotationIF_1a1d83a6489a3409450d5dac0e967aa4c6" prot="public" virt="non-virtual"><scope>amrex::EB2::RotationIF</scope><name>RotationIF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
