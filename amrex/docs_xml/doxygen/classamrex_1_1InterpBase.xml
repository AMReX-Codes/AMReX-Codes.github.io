<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1InterpBase" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::InterpBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1Interpolater" prot="public" virt="non-virtual">amrex::Interpolater</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1MFInterpolater" prot="public" virt="non-virtual">amrex::MFInterpolater</derivedcompoundref>
    <includes refid="AMReX__InterpBase_8H" local="no">AMReX_InterpBase.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1InterpBase_1aee63caed578fc06fb37257394ac4a62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::InterpBase::InterpBase</definition>
        <argsstring>()=default</argsstring>
        <name>InterpBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="28" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1InterpBase_1a73cb181d9364c6005abfcfdb54037291" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::InterpBase::~InterpBase</definition>
        <argsstring>()=default</argsstring>
        <name>~InterpBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="29" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1InterpBase_1a021bb62c902497ccc17f9debb5fc10cc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::InterpBase::InterpBase</definition>
        <argsstring>(InterpBase const &amp;) noexcept=default</argsstring>
        <name>InterpBase</name>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="30" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1InterpBase_1a2f6b67e875b76f7bcaa9151a1c6de2a6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::InterpBase::InterpBase</definition>
        <argsstring>(InterpBase &amp;&amp;) noexcept=default</argsstring>
        <name>InterpBase</name>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="31" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1InterpBase_1a5753abe4eb1e3ac6d8747a0864533373" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> &amp;</type>
        <definition>InterpBase&amp; amrex::InterpBase::operator=</definition>
        <argsstring>(InterpBase const &amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="32" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1InterpBase_1a448200184ccdeced8fd7a609dd43fa71" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> &amp;</type>
        <definition>InterpBase&amp; amrex::InterpBase::operator=</definition>
        <argsstring>(InterpBase &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="33" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1InterpBase_1a7120153e965f22098f7cd888274f5c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>virtual Box amrex::InterpBase::CoarseBox</definition>
        <argsstring>(const Box &amp;fine, int ratio)=0</argsstring>
        <name>CoarseBox</name>
        <reimplementedby refid="classamrex_1_1MFPCInterp_1ae07225f758486680fd2a3d238f05dcdd">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1MFCellConsLinInterp_1a74654ff59b479f8515f47d0104c5d44c">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1MFCellConsLinMinmaxLimitInterp_1ad2fe69140374f5a86fe9435fa3a22c06">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1MFCellBilinear_1ad77a8408bcacf00baa43bffadf5c1830">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1MFNodeBilinear_1af5faae2a0ad3edc6147ac23b165d4345">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1NodeBilinear_1a12700b2249901dc280e6ab13e7c560f2">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellBilinear_1a445fff6a6e918e4b4a60392ecef5844c">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeLinear_1aeec138a1454f98de65aa6ec019a1cdc4">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellQuadratic_1ac42aae63c74e1e3dbacbde8f2f0d8a0a">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1PCInterp_1a4ab880728106de4887bc3f6fdedf03d8">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeQuartic_1a8c64516c8697291cf190a795a24b3a6e">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1FaceDivFree_1a29635f96be74793ea64f29d6348fc22e">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1FaceLinear_1ae6caa6fa65382bef97431b284967c081">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellQuartic_1a07d67a5c29adab0e7b35be11a0f2061b">CoarseBox</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns coarsened box given fine box and refinement ratio. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="43" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1InterpBase_1a684e90cd5708cc5746e653c6decc75d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>virtual Box amrex::InterpBase::CoarseBox</definition>
        <argsstring>(const Box &amp;fine, const IntVect &amp;ratio)=0</argsstring>
        <name>CoarseBox</name>
        <reimplementedby refid="classamrex_1_1MFPCInterp_1a7e5277dcb95a53227bef029654c23885">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1MFCellConsLinInterp_1a3efce6bc405fc34cd1b7e9607396a7a6">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1MFCellConsLinMinmaxLimitInterp_1a5f943556caa9c3b333032429b73de0ff">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1MFCellBilinear_1a534db7efe626f43b2e652b1779bd802d">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1MFNodeBilinear_1a5e99e1d0fae85f722c0c8a9345b48302">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1NodeBilinear_1ae2cd41e25c41c44dda1330f58f6a55e3">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellBilinear_1adcc32c2aaefbaa1bb23f0b87cbdd5265">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeLinear_1ac9afd317e78f1c6d5581c251a9afe819">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellQuadratic_1a29356c571502616f35a19405ce0ab31d">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1PCInterp_1acd50581dbe4a2e6a14d5351e6ffac7e8">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeQuartic_1a2b4f260bbcc5484ce23d59bd94d2dfe8">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1FaceDivFree_1ae934a7f49ee46587555e00c1bf7e1675">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1FaceLinear_1af8c208982ffa7f4b377b3d652e23e5ba">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellQuartic_1a2fea86a0fbe28663655935cee907d6bd">CoarseBox</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns coarsened box given fine box and refinement ratio. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="53" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1InterpBase_1ab2961b67ebd3fabbf32afe103267ad59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1InterpolaterBoxCoarsener" kindref="compound">InterpolaterBoxCoarsener</ref></type>
        <definition>InterpolaterBoxCoarsener amrex::InterpBase::BoxCoarsener</definition>
        <argsstring>(const IntVect &amp;ratio)</argsstring>
        <name>BoxCoarsener</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="55" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1InterpBase_1ad9523dae9903f59fc43bb7df17e2250e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt; int &gt; amrex::InterpBase::GetBCArray</definition>
        <argsstring>(const Vector&lt; BCRec &gt; &amp;bcr)</argsstring>
        <name>GetBCArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="57" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.cpp" bodystart="28" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>amrex::CellConservativeProtected</label>
        <link refid="classamrex_1_1CellConservativeProtected"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::InterpBase</label>
        <link refid="classamrex_1_1InterpBase"/>
      </node>
      <node id="8">
        <label>amrex::CellQuadratic</label>
        <link refid="classamrex_1_1CellQuadratic"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::FaceLinear</label>
        <link refid="classamrex_1_1FaceLinear"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::EBMFCellConsLinInterp</label>
        <link refid="classamrex_1_1EBMFCellConsLinInterp"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::NodeBilinear</label>
        <link refid="classamrex_1_1NodeBilinear"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::CellBilinear</label>
        <link refid="classamrex_1_1CellBilinear"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::MFNodeBilinear</label>
        <link refid="classamrex_1_1MFNodeBilinear"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Interpolater</label>
        <link refid="classamrex_1_1Interpolater"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::CellQuartic</label>
        <link refid="classamrex_1_1CellQuartic"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::MFInterpolater</label>
        <link refid="classamrex_1_1MFInterpolater"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::MFCellConsLinMinmaxLimitInterp</label>
        <link refid="classamrex_1_1MFCellConsLinMinmaxLimitInterp"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::EBCellConservativeLinear</label>
        <link refid="classamrex_1_1EBCellConservativeLinear"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>amrex::MFPCInterp</label>
        <link refid="classamrex_1_1MFPCInterp"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::CellConservativeLinear</label>
        <link refid="classamrex_1_1CellConservativeLinear"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::CellConservativeQuartic</label>
        <link refid="classamrex_1_1CellConservativeQuartic"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::PCInterp</label>
        <link refid="classamrex_1_1PCInterp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::MFCellBilinear</label>
        <link refid="classamrex_1_1MFCellBilinear"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::MFCellConsLinInterp</label>
        <link refid="classamrex_1_1MFCellConsLinInterp"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::FaceDivFree</label>
        <link refid="classamrex_1_1FaceDivFree"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpBase.H" bodystart="26" bodyend="58"/>
    <listofallmembers>
      <member refid="classamrex_1_1InterpBase_1ab2961b67ebd3fabbf32afe103267ad59" prot="public" virt="non-virtual"><scope>amrex::InterpBase</scope><name>BoxCoarsener</name></member>
      <member refid="classamrex_1_1InterpBase_1a7120153e965f22098f7cd888274f5c6b" prot="public" virt="pure-virtual"><scope>amrex::InterpBase</scope><name>CoarseBox</name></member>
      <member refid="classamrex_1_1InterpBase_1a684e90cd5708cc5746e653c6decc75d1" prot="public" virt="pure-virtual"><scope>amrex::InterpBase</scope><name>CoarseBox</name></member>
      <member refid="classamrex_1_1InterpBase_1ad9523dae9903f59fc43bb7df17e2250e" prot="public" virt="non-virtual"><scope>amrex::InterpBase</scope><name>GetBCArray</name></member>
      <member refid="classamrex_1_1InterpBase_1aee63caed578fc06fb37257394ac4a62d" prot="public" virt="non-virtual"><scope>amrex::InterpBase</scope><name>InterpBase</name></member>
      <member refid="classamrex_1_1InterpBase_1a021bb62c902497ccc17f9debb5fc10cc" prot="public" virt="non-virtual"><scope>amrex::InterpBase</scope><name>InterpBase</name></member>
      <member refid="classamrex_1_1InterpBase_1a2f6b67e875b76f7bcaa9151a1c6de2a6" prot="public" virt="non-virtual"><scope>amrex::InterpBase</scope><name>InterpBase</name></member>
      <member refid="classamrex_1_1InterpBase_1a5753abe4eb1e3ac6d8747a0864533373" prot="public" virt="non-virtual"><scope>amrex::InterpBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1InterpBase_1a448200184ccdeced8fd7a609dd43fa71" prot="public" virt="non-virtual"><scope>amrex::InterpBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1InterpBase_1a73cb181d9364c6005abfcfdb54037291" prot="public" virt="virtual"><scope>amrex::InterpBase</scope><name>~InterpBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
