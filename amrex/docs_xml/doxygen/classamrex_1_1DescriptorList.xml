<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1DescriptorList" kind="class" language="C++" prot="public">
    <compoundname>amrex::DescriptorList</compoundname>
    <includes refid="AMReX__StateDescriptor_8H" local="no">AMReX_StateDescriptor.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1DescriptorList_1adf6d6dc0b7328fa6527754931874f685" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;StateDescriptor&gt; &gt; amrex::DescriptorList::desc</definition>
        <argsstring></argsstring>
        <name>desc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="551" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="551" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1ae56ff511af67521a2eb697caac948e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DescriptorList::DescriptorList</definition>
        <argsstring>() noexcept</argsstring>
        <name>DescriptorList</name>
        <briefdescription>
<para>The constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="458" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="103" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1a9c7ebf877ff4a1aa5f1df6b370bc9584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DescriptorList::DescriptorList</definition>
        <argsstring>(const DescriptorList &amp;)=delete</argsstring>
        <name>DescriptorList</name>
        <param>
          <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1a154c1a2bd2b10dd537156b598e194e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
        <definition>DescriptorList&amp; amrex::DescriptorList::operator=</definition>
        <argsstring>(const DescriptorList &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1a11aff2179d4f179dba22b7703b4212cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DescriptorList::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Set the list to its default state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="466" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1a9facef73a0d5a831733696abfa55f1f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DescriptorList::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns number of elements in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="471" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1a848ff25f9f719b53243c93e78581bc0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DescriptorList::addDescriptor</definition>
        <argsstring>(int indx, IndexType typ, StateDescriptor::TimeCenter ttyp, int nextra, int num_comp, Interpolater *interp, bool extrap=false, bool store_in_checkpoint=true)</argsstring>
        <name>addDescriptor</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>indx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434" kindref="member">StateDescriptor::TimeCenter</ref></type>
          <declname>ttyp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nextra</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>store_in_checkpoint</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Adds new <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> at index indx to list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttyp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nextra</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrap</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_in_checkpoint</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="485" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="163" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1a4385d3bbdf3ae152ec830b25f4c080c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DescriptorList::resetComponentBCs</definition>
        <argsstring>(int indx, int comp, const BCRec &amp;bc, const StateDescriptor::BndryFunc &amp;func)</argsstring>
        <name>resetComponentBCs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">StateDescriptor::BndryFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Calls <ref refid="classamrex_1_1DescriptorList_1a4385d3bbdf3ae152ec830b25f4c080c3" kindref="member">resetComponentBCs()</ref> on <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> at index indx. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="502" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1aa172342761ee6080cff0e38a9b562ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DescriptorList::setComponent</definition>
        <argsstring>(int indx, int comp, const std::string &amp;nm, const BCRec &amp;bc, const StateDescriptor::BndryFunc &amp;func, Interpolater *interp=0, int max_map_start_comp=-1, int min_map_end_comp=-1)</argsstring>
        <name>setComponent</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">StateDescriptor::BndryFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_map_start_comp</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>min_map_end_comp</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Calls <ref refid="classamrex_1_1DescriptorList_1aa172342761ee6080cff0e38a9b562ac9" kindref="member">setComponent()</ref> on <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> at index indx. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_map_start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_map_end_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="519" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="128" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1ae3722e33647bb9bff3bf4edc89d77c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DescriptorList::setComponent</definition>
        <argsstring>(int indx, int comp, const Vector&lt; std::string &gt; &amp;nm, const Vector&lt; BCRec &gt; &amp;bc, const StateDescriptor::BndryFunc &amp;func, Interpolater *interp=0)</argsstring>
        <name>setComponent</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>nm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">StateDescriptor::BndryFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Calls <ref refid="classamrex_1_1DescriptorList_1aa172342761ee6080cff0e38a9b562ac9" kindref="member">setComponent()</ref> on <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> at index indx on group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="538" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="141" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DescriptorList_1a1038e632d124f54e8b5566787b4896a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> &amp;</type>
        <definition>const StateDescriptor &amp; amrex::DescriptorList::operator[]</definition>
        <argsstring>(int k) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> at index k. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="547" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="157" bodyend="160"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A List of StateDescriptors.</para><para>A container class for StateDescriptors. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="983">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::StateDescriptor &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::StateDescriptor &gt; &gt; &gt;</label>
      </node>
      <node id="982">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::StateDescriptor &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="983" relation="public-inheritance">
        </childnode>
      </node>
      <node id="981">
        <label>amrex::DescriptorList</label>
        <link refid="classamrex_1_1DescriptorList"/>
        <childnode refid="982" relation="usage">
          <edgelabel>desc</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="452" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="451" bodyend="552"/>
    <listofallmembers>
      <member refid="classamrex_1_1DescriptorList_1a848ff25f9f719b53243c93e78581bc0f" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>addDescriptor</name></member>
      <member refid="classamrex_1_1DescriptorList_1a11aff2179d4f179dba22b7703b4212cc" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>clear</name></member>
      <member refid="classamrex_1_1DescriptorList_1adf6d6dc0b7328fa6527754931874f685" prot="private" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>desc</name></member>
      <member refid="classamrex_1_1DescriptorList_1ae56ff511af67521a2eb697caac948e74" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>DescriptorList</name></member>
      <member refid="classamrex_1_1DescriptorList_1a9c7ebf877ff4a1aa5f1df6b370bc9584" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>DescriptorList</name></member>
      <member refid="classamrex_1_1DescriptorList_1a154c1a2bd2b10dd537156b598e194e18" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>operator=</name></member>
      <member refid="classamrex_1_1DescriptorList_1a1038e632d124f54e8b5566787b4896a8" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1DescriptorList_1a4385d3bbdf3ae152ec830b25f4c080c3" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>resetComponentBCs</name></member>
      <member refid="classamrex_1_1DescriptorList_1aa172342761ee6080cff0e38a9b562ac9" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>setComponent</name></member>
      <member refid="classamrex_1_1DescriptorList_1ae3722e33647bb9bff3bf4edc89d77c74" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>setComponent</name></member>
      <member refid="classamrex_1_1DescriptorList_1a9facef73a0d5a831733696abfa55f1f8" prot="public" virt="non-virtual"><scope>amrex::DescriptorList</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
