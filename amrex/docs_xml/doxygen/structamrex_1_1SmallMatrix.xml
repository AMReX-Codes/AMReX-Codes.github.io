<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1SmallMatrix" kind="struct" language="C++" prot="public">
    <compoundname>amrex::SmallMatrix</compoundname>
    <includes refid="AMReX__SmallMatrix_8H" local="no">AMReX_SmallMatrix.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NRows</declname>
        <defname>NRows</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NCols</declname>
        <defname>NCols</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1SmallMatrix_1ab642666a670d486c27b58500e80f1735" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="35" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1SmallMatrix_1a6ae6bf1c0093796221564bca8c43748a" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::reference_type =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="36" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1aa723f92cde2543e0d06ab68abe0cc4c8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::row_size</definition>
        <argsstring></argsstring>
        <name>row_size</name>
        <initializer>= NRows</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="37" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a2c41757180c169681e8b85b03c2c225d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::column_size</definition>
        <argsstring></argsstring>
        <name>column_size</name>
        <initializer>= NCols</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="38" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a08b99c6025cbef7e0ac6a59f015b011e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <definition>constexpr Order amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::ordering</definition>
        <argsstring></argsstring>
        <name>ordering</name>
        <initializer>= ORDER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="39" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a64cd778e8638aba24386a6805bf788e0" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::m_mat[NRows *NCols]</definition>
        <argsstring>[NRows *NCols]</argsstring>
        <name>m_mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="362" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="362" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1acd28361a7a1e4d4921e256e97363b2bb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::SmallMatrix</definition>
        <argsstring>()=default</argsstring>
        <name>SmallMatrix</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The data are uninitialized by default. If you want to initialize to zero, you can do <computeroutput><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt;T,NRows,NCols&gt; M{};</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="48" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aef87c411ead843f6b0b546bb51ff924f" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==1||NN==1, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::SmallMatrix</definition>
        <argsstring>(Ts... vs)</argsstring>
        <name>SmallMatrix</name>
        <param>
          <type>Ts...</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
<para>Constructs column- or row-vector. </para>
        </briefdescription>
        <detaileddescription>
<para>The data are initialized with the given variadic arguments. If the number of argument is less than the size of the vector, the rest of the vector is initialized to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="60" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a3ee301deea90308334084eb482b0fca2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::SmallMatrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; const &amp;init)</argsstring>
        <name>SmallMatrix</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Constructs <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> with nested std::initializer_list. </para>
        </briefdescription>
        <detaileddescription>
<para>The initializer list is assumed to be in row-major order, even when the ordering for the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object is colum-major. Below is an example of constructing a matrix with 2 rows and 3 columns. <verbatim>    SmallMatrix&lt;double,2,3&gt; M{{11., 12., 13.},
                              {21., 22., 23.}};
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="78" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="78" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a475270194c45cec8ac84dc6de15d1b40" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to the element at row i and column j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="95" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a125990d439d6f0ef961e18cc4296c787" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the element at row i and column j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="106" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a36ab4aac47914f38f02936961da201a1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator()</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="118" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a4cd011d5379b912b7f03f7dff9e6c5fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator()</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="126" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a6abb5ec9258324e3583b0a9008cc60a7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="134" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a606790294957fd9a55e71cbbeaefa15e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="142" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a08597531985ed32dcca4e27a6578f3a1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="152" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a5041aa0ba9a8e64842b17584c266a743" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="159" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a36f41d9f8c50a8ff80784daf2bf0f670" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="166" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a265915284f228dc752bdfb2168f6462d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="173" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a440bf54aa68819045fbd9c31462bfbbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::setVal</definition>
        <argsstring>(T val)</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all elements in the matrix to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="178" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a738057ffdb204b9dd26b83e449f1ae6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NCols, NRows, ORDER &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NCols,NRows,ORDER&gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::transpose</definition>
        <argsstring>() const</argsstring>
        <name>transpose</name>
        <briefdescription>
<para>Returns transposed matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="207" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="207" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a00901d9ec082e687706908e5922931a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::transposeInPlace</definition>
        <argsstring>()</argsstring>
        <name>transposeInPlace</name>
        <briefdescription>
<para>Transposes a square matrix in-place. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="222" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="222" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aa5542b6d7131442bb2bd842857d580be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::product</definition>
        <argsstring>() const</argsstring>
        <name>product</name>
        <briefdescription>
<para>Returns the product of all elements in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="234" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="234" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a5dff7f142f629a5e3da69b32bc32e6fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <briefdescription>
<para>Returns the sum of all elements in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="245" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="245" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a319bca015e4f1a6b2aeef1df64670fcd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::trace</definition>
        <argsstring>() const</argsstring>
        <name>trace</name>
        <briefdescription>
<para>Returns the trace of a square matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="257" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="257" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a17e8ec2edfcfce6298a5cbadda4a437d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator+=</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER &gt; const &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator += performing matrix addition as in (*this) += rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="267" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="267" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a19af0e4ba8e6fa1aead4c71a302ca923" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator-=</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER &gt; const &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator -= performing matrix subtraction as in (*this) -= rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="288" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="288" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aa37cfd841c6031182f649e5cbf71b776" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER&gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Unary minus operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="309" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1abad22c67871d558a4061a097206e6e34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::operator*=</definition>
        <argsstring>(T a)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator *= that scales this matrix in place by a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="317" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="317" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a97538e4afa4709b510ffa632dd5133b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::dot</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER &gt; const &amp;rhs) const</argsstring>
        <name>dot</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns the dot product of two vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="352" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="352" bodyend="359"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ae9ebd480258bf6bf3db7029cc680254a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
        <definition>static constexpr AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER&gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::Identity</definition>
        <argsstring>() noexcept</argsstring>
        <name>Identity</name>
        <briefdescription>
<para>Returns an identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="189" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a2e3049927b67b6e26dcf6d315db13136" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
        <definition>static constexpr AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER&gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;::Zero</definition>
        <argsstring>() noexcept</argsstring>
        <name>Zero</name>
        <briefdescription>
<para>Returns a matrix initialized with zeros. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="199" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="199" bodyend="202"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1af41420d770fe178cc48681cc5d584c35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;T,NRows,NCols,ORDER&gt; operator+</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER &gt; lhs, SmallMatrix&lt; T, NRows, NCols, ORDER &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary operator + returning the result of maxtrix addition, lhs+rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="278" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1ac175e67c19223babf3fa297c9d10b993" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;T,NRows,NCols,ORDER&gt; operator-</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER &gt; lhs, SmallMatrix&lt; T, NRows, NCols, ORDER &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary operator - returning the result of maxtrix subtraction, lhs-rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="299" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="299" bodyend="304"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1aa5d478fb107d418fd25b10780854fd4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;T,NRows,NCols,ORDER&gt; operator*</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER &gt; m, T a)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix and a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="328" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="328" bodyend="332"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1ad5840fc95513e12ab555dde9a7851586" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;T,NRows,NCols,ORDER&gt; operator*</definition>
        <argsstring>(T a, SmallMatrix&lt; T, NRows, NCols, ORDER &gt; m)</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER &gt;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of a scalar and a matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="337" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="337" bodyend="341"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1af55391bf1f9e35b23a1d46f168abc464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; U, N1, N3, Ord &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;U,N1,N3,Ord&gt; operator*</definition>
        <argsstring>(SmallMatrix&lt; U, N1, N2, Ord &gt; const &amp;lhs, SmallMatrix&lt; U, N2, N3, Ord &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; U, N1, N2, Ord &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; U, N2, N3, Ord &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns matrix product of two matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="347" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="368" bodyend="396"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Matrix class with compile-time size. </para>
    </briefdescription>
    <detaileddescription>
<para>The starting index for both rows and columns is always zero. Also note that column vectors and row vectors are special cases of a Matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix element data type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ORDER</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory layout order. <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref> (i.e., column-major) by default. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::SmallMatrix&lt; T, NRows, NCols, ORDER &gt;</label>
        <link refid="structamrex_1_1SmallMatrix"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_mat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="33" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="34" bodyend="363"/>
    <listofallmembers>
      <member refid="structamrex_1_1SmallMatrix_1a08597531985ed32dcca4e27a6578f3a1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>begin</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a36f41d9f8c50a8ff80784daf2bf0f670" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>begin</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a2c41757180c169681e8b85b03c2c225d" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>column_size</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a97538e4afa4709b510ffa632dd5133b9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>dot</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a5041aa0ba9a8e64842b17584c266a743" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>end</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a265915284f228dc752bdfb2168f6462d" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>end</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae9ebd480258bf6bf3db7029cc680254a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>Identity</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a64cd778e8638aba24386a6805bf788e0" prot="private" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>m_mat</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a475270194c45cec8ac84dc6de15d1b40" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a125990d439d6f0ef961e18cc4296c787" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a36ab4aac47914f38f02936961da201a1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a4cd011d5379b912b7f03f7dff9e6c5fa" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aa5d478fb107d418fd25b10780854fd4b" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ad5840fc95513e12ab555dde9a7851586" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1af55391bf1f9e35b23a1d46f168abc464" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1abad22c67871d558a4061a097206e6e34" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1af41420d770fe178cc48681cc5d584c35" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator+</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a17e8ec2edfcfce6298a5cbadda4a437d" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ac175e67c19223babf3fa297c9d10b993" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aa37cfd841c6031182f649e5cbf71b776" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a19af0e4ba8e6fa1aead4c71a302ca923" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a6abb5ec9258324e3583b0a9008cc60a7" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a606790294957fd9a55e71cbbeaefa15e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a08b99c6025cbef7e0ac6a59f015b011e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>ordering</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aa5542b6d7131442bb2bd842857d580be" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>product</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a6ae6bf1c0093796221564bca8c43748a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>reference_type</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aa723f92cde2543e0d06ab68abe0cc4c8" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>row_size</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a440bf54aa68819045fbd9c31462bfbbc" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>setVal</name></member>
      <member refid="structamrex_1_1SmallMatrix_1acd28361a7a1e4d4921e256e97363b2bb" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aef87c411ead843f6b0b546bb51ff924f" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a3ee301deea90308334084eb482b0fca2" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a5dff7f142f629a5e3da69b32bc32e6fd" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>sum</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a319bca015e4f1a6b2aeef1df64670fcd" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>trace</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a738057ffdb204b9dd26b83e449f1ae6f" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>transpose</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a00901d9ec082e687706908e5922931a2" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>transposeInPlace</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ab642666a670d486c27b58500e80f1735" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>value_type</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a2e3049927b67b6e26dcf6d315db13136" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
