<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1SmallMatrix" kind="struct" language="C++" prot="public">
    <compoundname>amrex::SmallMatrix</compoundname>
    <includes refid="AMReX__SmallMatrix_8H" local="no">AMReX_SmallMatrix.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>int</type>
        <declname>NRows</declname>
        <defname>NRows</defname>
      </param>
      <param>
        <type>int</type>
        <declname>NCols</declname>
        <defname>NCols</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
      <param>
        <type>int</type>
        <declname>StartIndex</declname>
        <defname>StartIndex</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1SmallMatrix_1ab0850c542b077a67c59dae912e0549d9" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::SmallMatrix::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="37" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1SmallMatrix_1ae54d9be19be0cf11747349876041d803" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::reference_type =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <qualifiedname>amrex::SmallMatrix::reference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="38" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="38" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a16884af63d24ace53c32c2b304f28cb1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::row_size</definition>
        <argsstring></argsstring>
        <name>row_size</name>
        <qualifiedname>amrex::SmallMatrix::row_size</qualifiedname>
        <initializer>= NRows</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="39" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1ad27953e4ba231ae72eee1d04bfcbad71" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::column_size</definition>
        <argsstring></argsstring>
        <name>column_size</name>
        <qualifiedname>amrex::SmallMatrix::column_size</qualifiedname>
        <initializer>= NCols</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="40" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a3a52e4625ed98c93b816e56a376e283a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <definition>constexpr Order amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::ordering</definition>
        <argsstring></argsstring>
        <name>ordering</name>
        <qualifiedname>amrex::SmallMatrix::ordering</qualifiedname>
        <initializer>= ORDER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="41" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a54c3d4215f2fdfccfcd326386572f1f2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::starting_index</definition>
        <argsstring></argsstring>
        <name>starting_index</name>
        <qualifiedname>amrex::SmallMatrix::starting_index</qualifiedname>
        <initializer>= StartIndex</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="42" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="42" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a32448f0826904fa7d77c008793cbc0f1" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::m_mat[NRows *NCols]</definition>
        <argsstring>[NRows *NCols]</argsstring>
        <name>m_mat</name>
        <qualifiedname>amrex::SmallMatrix::m_mat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="408" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="408" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a34d563a23b3567200219039bed2afb89" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>()=default</argsstring>
        <name>SmallMatrix</name>
        <qualifiedname>amrex::SmallMatrix::SmallMatrix</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The data are uninitialized by default. If you want to initialize to zero, you can do <computeroutput><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt;T,NRows,NCols&gt; M{};</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="51" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ae8f0758c96388a0bb1b2cfb389c1444f" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==1||NN==1, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>(Ts... vs)</argsstring>
        <name>SmallMatrix</name>
        <qualifiedname>amrex::SmallMatrix::SmallMatrix</qualifiedname>
        <param>
          <type>Ts...</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
<para>Constructs column- or row-vector. </para>
        </briefdescription>
        <detaileddescription>
<para>The data are initialized with the given variadic arguments. If the number of argument is less than the size of the vector, the rest of the vector is initialized to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="63" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a84eda12573c4539f33c4f0dc15df35b1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; T &gt; &gt; const &amp;init)</argsstring>
        <name>SmallMatrix</name>
        <qualifiedname>amrex::SmallMatrix::SmallMatrix</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; T &gt; &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Constructs <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> with nested std::initializer_list. </para>
        </briefdescription>
        <detaileddescription>
<para>The initializer list is assumed to be in row-major order, even when the ordering for the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object is colum-major. Below is an example of constructing a matrix with 2 rows and 3 columns. <programlisting filename=".cpp"><codeline><highlight class="normal">SmallMatrix&lt;double,2,3&gt;<sp/>M{{11.,<sp/>12.,<sp/>13.},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{21.,<sp/>22.,<sp/>23.}};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="81" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="81" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a46e9bfe0af34a5d28fe66069f2bcd4b6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T &amp;</type>
        <definition>__host__ __device__ const T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::SmallMatrix::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to the element at row i and column j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="98" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="98" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ace190f3e6fc72450fed3d30bf186c4c3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T &amp;</type>
        <definition>__host__ __device__ T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i, int j) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::SmallMatrix::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the element at row i and column j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="115" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="115" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a087f14af55ca0a7f41d538344fb1fb2e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ const T &amp;</type>
        <definition>__host__ __device__ const T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::SmallMatrix::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="133" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="133" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a02bb5f342e3c38cdbab0b462f65a0b2b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T &amp;</type>
        <definition>__host__ __device__ T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::SmallMatrix::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="146" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ad9e7ae4638428051d116ea0a9d1c8e60" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ const T &amp;</type>
        <definition>__host__ __device__ const T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::SmallMatrix::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="159" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="159" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a1ab1da13035682f8fb41ffddca830c01" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T &amp;</type>
        <definition>__host__ __device__ T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::SmallMatrix::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="172" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="172" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ae38230944df9f142ad8f9944c1cc6529" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::SmallMatrix::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="187" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a068f7e326d1f10b48803c3f28ae5270a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::SmallMatrix::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="194" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a7a41957efe024ff23058daafdecaee2e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::SmallMatrix::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="201" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a751813e95a762b0a812a06c2d45a5f71" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::SmallMatrix::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="208" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aad9ec93c4d479484b15037a50db13fe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>__host__ __device__ SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::setVal</definition>
        <argsstring>(T val)</argsstring>
        <name>setVal</name>
        <qualifiedname>amrex::SmallMatrix::setVal</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all elements in the matrix to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="213" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="213" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1af2bb6b2a2877664a689394e5f38fcd8a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NCols, NRows, ORDER, StartIndex &gt;</type>
        <definition>__host__ __device__ SmallMatrix&lt; T, NCols, NRows, ORDER, StartIndex &gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::transpose</definition>
        <argsstring>() const</argsstring>
        <name>transpose</name>
        <qualifiedname>amrex::SmallMatrix::transpose</qualifiedname>
        <briefdescription>
<para>Returns transposed matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="244" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="244" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aea23bea08425e0b9547e6ba07c7c4ece" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>__host__ __device__ SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::transposeInPlace</definition>
        <argsstring>()</argsstring>
        <name>transposeInPlace</name>
        <qualifiedname>amrex::SmallMatrix::transposeInPlace</qualifiedname>
        <briefdescription>
<para>Transposes a square matrix in-place. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="259" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="259" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a17491e0fd25a2e75e1568378d3df641e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::product</definition>
        <argsstring>() const</argsstring>
        <name>product</name>
        <qualifiedname>amrex::SmallMatrix::product</qualifiedname>
        <briefdescription>
<para>Returns the product of all elements in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="272" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="272" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aefb49e6e02e8f4bb0df7838e68234cf9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::SmallMatrix::sum</qualifiedname>
        <briefdescription>
<para>Returns the sum of all elements in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="283" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="283" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a9322fe4816b3831489f605466449c1b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::trace</definition>
        <argsstring>() const</argsstring>
        <name>trace</name>
        <qualifiedname>amrex::SmallMatrix::trace</qualifiedname>
        <briefdescription>
<para>Returns the trace of a square matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="295" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a6e60c8a74c226b712f8e94cf739dd31f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>__host__ __device__ SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator+=</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::SmallMatrix::operator+=</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator += performing matrix addition as in (*this) += rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="305" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="305" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a3f793ff591a97c1883c7f77a94235ce9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>__host__ __device__ SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator-=</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::SmallMatrix::operator-=</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator -= performing matrix subtraction as in (*this) -= rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="326" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="326" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aafeb6825947155f77218e8116d9093a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>__host__ __device__ SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::SmallMatrix::operator-</qualifiedname>
        <briefdescription>
<para>Unary minus operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="347" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a8b10a3505aab67c6c7587fc2f7d22fa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>__host__ __device__ SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator*=</definition>
        <argsstring>(T a)</argsstring>
        <name>operator*=</name>
        <qualifiedname>amrex::SmallMatrix::operator*=</qualifiedname>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator *= that scales this matrix in place by a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="355" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="355" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ada3eaa4aab88dde733f24b73954dfae1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::dot</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs) const</argsstring>
        <name>dot</name>
        <qualifiedname>amrex::SmallMatrix::dot</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns the dot product of two vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="390" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="390" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a997feb74890732d6cd717bfddfc554cf" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;(N&lt; NRows *NCols), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr T const &amp;</type>
        <definition>__host__ __device__ constexpr T const  &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <qualifiedname>amrex::SmallMatrix::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="401" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="401" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a1b190ed6ee5791bcaa8fc244c1f95fda" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;(N&lt; NRows *NCols), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr T &amp;</type>
        <definition>__host__ __device__ constexpr T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <qualifiedname>amrex::SmallMatrix::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="405" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="405" bodyend="405"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a81b984b88b86c8fb73373ca9ade02aee" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr __host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>static constexpr __host__ __device__ SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::Identity</definition>
        <argsstring>() noexcept</argsstring>
        <name>Identity</name>
        <qualifiedname>amrex::SmallMatrix::Identity</qualifiedname>
        <briefdescription>
<para>Returns an identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="224" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="224" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a5c425962e7338c912dad47c861187a1d" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr __host__ __device__ <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>static constexpr __host__ __device__ SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::Zero</definition>
        <argsstring>() noexcept</argsstring>
        <name>Zero</name>
        <qualifiedname>amrex::SmallMatrix::Zero</qualifiedname>
        <briefdescription>
<para>Returns a matrix initialized with zeros. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="236" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="236" bodyend="239"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1adff9083c0609d04bf3c1fb5a6cc0db4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>__host__ __device__ friend SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; operator+</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; lhs, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>amrex::SmallMatrix::operator+</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary operator + returning the result of maxtrix addition, lhs+rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="316" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="316" bodyend="321"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a2c7c289ab070ae26303253e161b3bdba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>__host__ __device__ friend SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; operator-</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; lhs, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::SmallMatrix::operator-</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary operator - returning the result of maxtrix subtraction, lhs-rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="337" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="337" bodyend="342"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a1f1efe177196901819180cd38a419c96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>__host__ __device__ friend SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; operator*</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; m, T a)</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::SmallMatrix::operator*</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix and a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="366" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="366" bodyend="370"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a9ffe7215b8c4f470f8baa3111ab12369" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>__host__ __device__ friend SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; operator*</definition>
        <argsstring>(T a, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; m)</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::SmallMatrix::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of a scalar and a matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="375" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="375" bodyend="379"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a9ff11d7db8679060cf879748039c0a6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>int</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
          </param>
          <param>
            <type>int</type>
            <declname>SI</declname>
            <defname>SI</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ friend decltype(auto)</type>
        <definition>__host__ __device__ friend decltype(auto) operator*</definition>
        <argsstring>(SmallMatrix&lt; U, N1, N2, Ord, SI &gt; const &amp;lhs, SmallMatrix&lt; V, N2, N3, Ord, SI &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::SmallMatrix::operator*</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; U, N1, N2, Ord, SI &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; V, N2, N3, Ord, SI &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns matrix product of two matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="385" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="414" bodyend="446"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Matrix class with compile-time size. </para>
    </briefdescription>
    <detaileddescription>
<para>Note that column vectors and row vectors are special cases of a Matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix element data type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ORDER</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory layout order. <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref> (i.e., column-major) by default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StartIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting index. Either 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;</label>
        <link refid="structamrex_1_1SmallMatrix"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_mat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="35" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="36" bodyend="409"/>
    <listofallmembers>
      <member refid="structamrex_1_1SmallMatrix_1ae38230944df9f142ad8f9944c1cc6529" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>begin</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a7a41957efe024ff23058daafdecaee2e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>begin</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ad27953e4ba231ae72eee1d04bfcbad71" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>column_size</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ada3eaa4aab88dde733f24b73954dfae1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>dot</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a068f7e326d1f10b48803c3f28ae5270a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>end</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a751813e95a762b0a812a06c2d45a5f71" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>end</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a997feb74890732d6cd717bfddfc554cf" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>get</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a1b190ed6ee5791bcaa8fc244c1f95fda" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>get</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a81b984b88b86c8fb73373ca9ade02aee" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>Identity</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a32448f0826904fa7d77c008793cbc0f1" prot="private" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>m_mat</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a46e9bfe0af34a5d28fe66069f2bcd4b6" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ace190f3e6fc72450fed3d30bf186c4c3" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a087f14af55ca0a7f41d538344fb1fb2e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a02bb5f342e3c38cdbab0b462f65a0b2b" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a1f1efe177196901819180cd38a419c96" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a9ffe7215b8c4f470f8baa3111ab12369" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a9ff11d7db8679060cf879748039c0a6a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a8b10a3505aab67c6c7587fc2f7d22fa8" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1adff9083c0609d04bf3c1fb5a6cc0db4d" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator+</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a6e60c8a74c226b712f8e94cf739dd31f" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a2c7c289ab070ae26303253e161b3bdba" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aafeb6825947155f77218e8116d9093a1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a3f793ff591a97c1883c7f77a94235ce9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ad9e7ae4638428051d116ea0a9d1c8e60" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a1ab1da13035682f8fb41ffddca830c01" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a3a52e4625ed98c93b816e56a376e283a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>ordering</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a17491e0fd25a2e75e1568378d3df641e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>product</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae54d9be19be0cf11747349876041d803" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>reference_type</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a16884af63d24ace53c32c2b304f28cb1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>row_size</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aad9ec93c4d479484b15037a50db13fe8" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>setVal</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a34d563a23b3567200219039bed2afb89" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae8f0758c96388a0bb1b2cfb389c1444f" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a84eda12573c4539f33c4f0dc15df35b1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a54c3d4215f2fdfccfcd326386572f1f2" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>starting_index</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aefb49e6e02e8f4bb0df7838e68234cf9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>sum</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a9322fe4816b3831489f605466449c1b2" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>trace</name></member>
      <member refid="structamrex_1_1SmallMatrix_1af2bb6b2a2877664a689394e5f38fcd8a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>transpose</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aea23bea08425e0b9547e6ba07c7c4ece" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>transposeInPlace</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ab0850c542b077a67c59dae912e0549d9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>value_type</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a5c425962e7338c912dad47c861187a1d" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
