<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1SmallMatrix" kind="struct" language="C++" prot="public">
    <compoundname>amrex::SmallMatrix</compoundname>
    <includes refid="AMReX__SmallMatrix_8H" local="no">AMReX_SmallMatrix.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NRows</declname>
        <defname>NRows</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NCols</declname>
        <defname>NCols</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>StartIndex</declname>
        <defname>StartIndex</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1SmallMatrix_1ab0850c542b077a67c59dae912e0549d9" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::SmallMatrix::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="37" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1SmallMatrix_1ae54d9be19be0cf11747349876041d803" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::reference_type =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <qualifiedname>amrex::SmallMatrix::reference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="38" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="38" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a16884af63d24ace53c32c2b304f28cb1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::row_size</definition>
        <argsstring></argsstring>
        <name>row_size</name>
        <qualifiedname>amrex::SmallMatrix::row_size</qualifiedname>
        <initializer>= NRows</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="39" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1ad27953e4ba231ae72eee1d04bfcbad71" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::column_size</definition>
        <argsstring></argsstring>
        <name>column_size</name>
        <qualifiedname>amrex::SmallMatrix::column_size</qualifiedname>
        <initializer>= NCols</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="40" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a3a52e4625ed98c93b816e56a376e283a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <definition>constexpr Order amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::ordering</definition>
        <argsstring></argsstring>
        <name>ordering</name>
        <qualifiedname>amrex::SmallMatrix::ordering</qualifiedname>
        <initializer>= ORDER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="41" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a54c3d4215f2fdfccfcd326386572f1f2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::starting_index</definition>
        <argsstring></argsstring>
        <name>starting_index</name>
        <qualifiedname>amrex::SmallMatrix::starting_index</qualifiedname>
        <initializer>= StartIndex</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="42" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="42" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a32448f0826904fa7d77c008793cbc0f1" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::m_mat[NRows *NCols]</definition>
        <argsstring>[NRows *NCols]</argsstring>
        <name>m_mat</name>
        <qualifiedname>amrex::SmallMatrix::m_mat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="408" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="408" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a6f14370b2601435187a47a8375623ae3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>()=default</argsstring>
        <name>SmallMatrix</name>
        <qualifiedname>amrex::SmallMatrix::SmallMatrix</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The data are uninitialized by default. If you want to initialize to zero, you can do <computeroutput><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt;T,NRows,NCols&gt; M{};</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="51" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a56ceb883ce9575204c49cb1d82da46d6" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==1||NN==1, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>(Ts... vs)</argsstring>
        <name>SmallMatrix</name>
        <qualifiedname>amrex::SmallMatrix::SmallMatrix</qualifiedname>
        <param>
          <type>Ts...</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
<para>Constructs column- or row-vector. </para>
        </briefdescription>
        <detaileddescription>
<para>The data are initialized with the given variadic arguments. If the number of argument is less than the size of the vector, the rest of the vector is initialized to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="63" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a80d608da788bbf86f795b6c56a9601e7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; T &gt; &gt; const &amp;init)</argsstring>
        <name>SmallMatrix</name>
        <qualifiedname>amrex::SmallMatrix::SmallMatrix</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; T &gt; &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Constructs <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> with nested std::initializer_list. </para>
        </briefdescription>
        <detaileddescription>
<para>The initializer list is assumed to be in row-major order, even when the ordering for the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object is colum-major. Below is an example of constructing a matrix with 2 rows and 3 columns. <verbatim>    SmallMatrix&lt;double,2,3&gt; M{{11., 12., 13.},
                              {21., 22., 23.}};
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="81" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="81" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a97b10a99d2099fe96ea4cb6c94338368" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::SmallMatrix::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to the element at row i and column j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="98" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="98" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ae8cf19f766b5abebe99a55b314ae2e60" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i, int j) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::SmallMatrix::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the element at row i and column j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="115" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="115" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a78b408ac92e9019e35a4bd8d88fbb464" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::SmallMatrix::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="133" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="133" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a0e67601aac2b7c21d6bfd790245f96e6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::SmallMatrix::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="146" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a543946c98e734066bb743ed2095b5c74" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::SmallMatrix::operator[]</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="159" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="159" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ae33359e7bce45d6a7bfea9bfee3220ad" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::SmallMatrix::operator[]</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="172" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="172" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ada1b49761d5fc4a79c5d9d80ee927a14" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T * amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::SmallMatrix::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="187" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a5d8d392ecc2e68adfe4b394b7d5e01a3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T * amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::SmallMatrix::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="194" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a8398cae8d3bb6595644f240d64146a2b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T * amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::SmallMatrix::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="201" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a95234e842783df676fae796ad40c3f78" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T * amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::SmallMatrix::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="208" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a1a330ef3f681fd66b508897d3ee70bf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::setVal</definition>
        <argsstring>(T val)</argsstring>
        <name>setVal</name>
        <qualifiedname>amrex::SmallMatrix::setVal</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all elements in the matrix to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="213" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="213" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a0c73c608edb26a114e5ae9cca9c6bae3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NCols, NRows, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NCols, NRows, ORDER, StartIndex &gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::transpose</definition>
        <argsstring>() const</argsstring>
        <name>transpose</name>
        <qualifiedname>amrex::SmallMatrix::transpose</qualifiedname>
        <briefdescription>
<para>Returns transposed matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="244" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="244" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aeaaa8ace7a3bbe1ef56e8c40eabf6ab9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::transposeInPlace</definition>
        <argsstring>()</argsstring>
        <name>transposeInPlace</name>
        <qualifiedname>amrex::SmallMatrix::transposeInPlace</qualifiedname>
        <briefdescription>
<para>Transposes a square matrix in-place. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="259" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="259" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ae33254284f8f44f03ffd88625068e60e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::product</definition>
        <argsstring>() const</argsstring>
        <name>product</name>
        <qualifiedname>amrex::SmallMatrix::product</qualifiedname>
        <briefdescription>
<para>Returns the product of all elements in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="272" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="272" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a965c223b68eff2a3d8063c2f017fcaf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::SmallMatrix::sum</qualifiedname>
        <briefdescription>
<para>Returns the sum of all elements in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="283" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="283" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aed77dbefaa3163a2dfbca65ceb9a3f61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::trace</definition>
        <argsstring>() const</argsstring>
        <name>trace</name>
        <qualifiedname>amrex::SmallMatrix::trace</qualifiedname>
        <briefdescription>
<para>Returns the trace of a square matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="295" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a48d630a38e8c69eeb62f7f2306e89d1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator+=</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::SmallMatrix::operator+=</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator += performing matrix addition as in (*this) += rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="305" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="305" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1af6f495a9c97bcce2516c236f5be80c9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator-=</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::SmallMatrix::operator-=</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator -= performing matrix subtraction as in (*this) -= rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="326" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="326" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a55210899a4167bcb0f1479fb8beab3bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::SmallMatrix::operator-</qualifiedname>
        <briefdescription>
<para>Unary minus operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="347" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a53b4e439496381edb96a3802e637d9d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator*=</definition>
        <argsstring>(T a)</argsstring>
        <name>operator*=</name>
        <qualifiedname>amrex::SmallMatrix::operator*=</qualifiedname>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator *= that scales this matrix in place by a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="355" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="355" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ab33b02d8b9779eb2d2058a44e521c6fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::dot</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs) const</argsstring>
        <name>dot</name>
        <qualifiedname>amrex::SmallMatrix::dot</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns the dot product of two vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="390" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="390" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a09f8139309166152b1aaf90cabceae50" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;(N&lt; NRows *NCols), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T const &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T const  &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <qualifiedname>amrex::SmallMatrix::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="401" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="401" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a3e7bda88a4d8c4f4ac0bf23284001227" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;(N&lt; NRows *NCols), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T &amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <qualifiedname>amrex::SmallMatrix::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="405" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="405" bodyend="405"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a94a920bfcd78097244322536cbfc63f7" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>static constexpr AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::Identity</definition>
        <argsstring>() noexcept</argsstring>
        <name>Identity</name>
        <qualifiedname>amrex::SmallMatrix::Identity</qualifiedname>
        <briefdescription>
<para>Returns an identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="224" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="224" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a9b8ca245e5931136082a2525d3e92c13" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>static constexpr AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::Zero</definition>
        <argsstring>() noexcept</argsstring>
        <name>Zero</name>
        <qualifiedname>amrex::SmallMatrix::Zero</qualifiedname>
        <briefdescription>
<para>Returns a matrix initialized with zeros. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="236" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="236" bodyend="239"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1abc0087c3fa31989aeddc4d3f7766f434" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; operator+</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; lhs, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>amrex::SmallMatrix::operator+</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary operator + returning the result of maxtrix addition, lhs+rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="316" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="316" bodyend="321"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a4c254cbfcfb9e13bce0e6ac9676be70d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; operator-</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; lhs, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::SmallMatrix::operator-</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary operator - returning the result of maxtrix subtraction, lhs-rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="337" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="337" bodyend="342"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1ae9608225e97fe6122467ada431fa11c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; operator*</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; m, T a)</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::SmallMatrix::operator*</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix and a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="366" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="366" bodyend="370"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a5c4abe7b58b6571ddf74f8923d3e285b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; operator*</definition>
        <argsstring>(T a, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; m)</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::SmallMatrix::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of a scalar and a matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="375" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="375" bodyend="379"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a6aaba5c05794507f7d50d95e973a71d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>SI</declname>
            <defname>SI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend decltype(auto)</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend decltype(auto) operator*</definition>
        <argsstring>(SmallMatrix&lt; U, N1, N2, Ord, SI &gt; const &amp;lhs, SmallMatrix&lt; V, N2, N3, Ord, SI &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::SmallMatrix::operator*</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; U, N1, N2, Ord, SI &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; V, N2, N3, Ord, SI &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns matrix product of two matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="385" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="414" bodyend="446"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Matrix class with compile-time size. </para>
    </briefdescription>
    <detaileddescription>
<para>Note that column vectors and row vectors are special cases of a Matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix element data type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ORDER</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory layout order. <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref> (i.e., column-major) by default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StartIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting index. Either 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;</label>
        <link refid="structamrex_1_1SmallMatrix"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_mat</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="35" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="36" bodyend="409"/>
    <listofallmembers>
      <member refid="structamrex_1_1SmallMatrix_1ada1b49761d5fc4a79c5d9d80ee927a14" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>begin</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a8398cae8d3bb6595644f240d64146a2b" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>begin</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ad27953e4ba231ae72eee1d04bfcbad71" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>column_size</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ab33b02d8b9779eb2d2058a44e521c6fb" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>dot</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a5d8d392ecc2e68adfe4b394b7d5e01a3" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>end</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a95234e842783df676fae796ad40c3f78" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>end</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a09f8139309166152b1aaf90cabceae50" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>get</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a3e7bda88a4d8c4f4ac0bf23284001227" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>get</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a94a920bfcd78097244322536cbfc63f7" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>Identity</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a32448f0826904fa7d77c008793cbc0f1" prot="private" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>m_mat</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a97b10a99d2099fe96ea4cb6c94338368" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae8cf19f766b5abebe99a55b314ae2e60" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a78b408ac92e9019e35a4bd8d88fbb464" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a0e67601aac2b7c21d6bfd790245f96e6" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae9608225e97fe6122467ada431fa11c8" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a5c4abe7b58b6571ddf74f8923d3e285b" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a6aaba5c05794507f7d50d95e973a71d8" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a53b4e439496381edb96a3802e637d9d9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1abc0087c3fa31989aeddc4d3f7766f434" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator+</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a48d630a38e8c69eeb62f7f2306e89d1b" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a4c254cbfcfb9e13bce0e6ac9676be70d" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a55210899a4167bcb0f1479fb8beab3bc" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-</name></member>
      <member refid="structamrex_1_1SmallMatrix_1af6f495a9c97bcce2516c236f5be80c9b" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a543946c98e734066bb743ed2095b5c74" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae33359e7bce45d6a7bfea9bfee3220ad" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a3a52e4625ed98c93b816e56a376e283a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>ordering</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae33254284f8f44f03ffd88625068e60e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>product</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae54d9be19be0cf11747349876041d803" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>reference_type</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a16884af63d24ace53c32c2b304f28cb1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>row_size</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a1a330ef3f681fd66b508897d3ee70bf1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>setVal</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a6f14370b2601435187a47a8375623ae3" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a56ceb883ce9575204c49cb1d82da46d6" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a80d608da788bbf86f795b6c56a9601e7" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a54c3d4215f2fdfccfcd326386572f1f2" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>starting_index</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a965c223b68eff2a3d8063c2f017fcaf8" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>sum</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aed77dbefaa3163a2dfbca65ceb9a3f61" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>trace</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a0c73c608edb26a114e5ae9cca9c6bae3" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>transpose</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aeaaa8ace7a3bbe1ef56e8c40eabf6ab9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>transposeInPlace</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ab0850c542b077a67c59dae912e0549d9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>value_type</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a9b8ca245e5931136082a2525d3e92c13" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
