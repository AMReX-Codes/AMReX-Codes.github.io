<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1SmallMatrix" kind="struct" language="C++" prot="public">
    <compoundname>amrex::SmallMatrix</compoundname>
    <includes refid="AMReX__SmallMatrix_8H" local="no">AMReX_SmallMatrix.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NRows</declname>
        <defname>NRows</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NCols</declname>
        <defname>NCols</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>StartIndex</declname>
        <defname>StartIndex</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1SmallMatrix_1ab0850c542b077a67c59dae912e0549d9" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="35" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1SmallMatrix_1ae54d9be19be0cf11747349876041d803" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::reference_type =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="36" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a16884af63d24ace53c32c2b304f28cb1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::row_size</definition>
        <argsstring></argsstring>
        <name>row_size</name>
        <initializer>= NRows</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="37" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1ad27953e4ba231ae72eee1d04bfcbad71" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::column_size</definition>
        <argsstring></argsstring>
        <name>column_size</name>
        <initializer>= NCols</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="38" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a3a52e4625ed98c93b816e56a376e283a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <definition>constexpr Order amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::ordering</definition>
        <argsstring></argsstring>
        <name>ordering</name>
        <initializer>= ORDER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="39" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a54c3d4215f2fdfccfcd326386572f1f2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::starting_index</definition>
        <argsstring></argsstring>
        <name>starting_index</name>
        <initializer>= StartIndex</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="40" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structamrex_1_1SmallMatrix_1a32448f0826904fa7d77c008793cbc0f1" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::m_mat[NRows *NCols]</definition>
        <argsstring>[NRows *NCols]</argsstring>
        <name>m_mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="392" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="392" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a53c9388736ce383236270a2ece8896b9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>()=default</argsstring>
        <name>SmallMatrix</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The data are uninitialized by default. If you want to initialize to zero, you can do <computeroutput><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt;T,NRows,NCols&gt; M{};</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="49" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aac1786e1b91da8c97b5d2c44c353aaa0" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==1||NN==1, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>(Ts... vs)</argsstring>
        <name>SmallMatrix</name>
        <param>
          <type>Ts...</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
<para>Constructs column- or row-vector. </para>
        </briefdescription>
        <detaileddescription>
<para>The data are initialized with the given variadic arguments. If the number of argument is less than the size of the vector, the rest of the vector is initialized to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="61" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ad1a209152dee33f6a0eb102d1ed4054f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::SmallMatrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; const &amp;init)</argsstring>
        <name>SmallMatrix</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Constructs <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> with nested std::initializer_list. </para>
        </briefdescription>
        <detaileddescription>
<para>The initializer list is assumed to be in row-major order, even when the ordering for the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object is colum-major. Below is an example of constructing a matrix with 2 rows and 3 columns. <verbatim>    SmallMatrix&lt;double,2,3&gt; M{{11., 12., 13.},
                              {21., 22., 23.}};
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="79" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="79" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a6d6d712a5179e75b822fa2cad792356e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i, int j) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to the element at row i and column j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="96" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="96" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a0436b98f6cac25bfdec364f77a29f479" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i, int j) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the element at row i and column j. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="112" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="112" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ad2b40de1bae7e060191100c515d9cad5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="129" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a74b7837da7a19f9d4b537db7d00e5622" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator()</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="141" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="141" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ab66ee98bfcfa7f68d2c03086788ae415" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a const reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="153" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="153" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1af3754969d8e86961a9e62b28fa0f9222" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(MM==1||NN==1), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to element i of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="165" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ad7f6f18d4d8b0b4c77b53c7bfafc2d31" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="179" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1af533cd98f5319af02e7726fd3686d87b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="186" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1adbdc2811f2067c74fdbf6e949aa919cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="193" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ae5a13282bd3098baac80cc37f92046b7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="200" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a6dc8c286788a1564e25f86055d83dbf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::setVal</definition>
        <argsstring>(T val)</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all elements in the matrix to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="205" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a042917a07326f4225516ce484c797ceb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NCols, NRows, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NCols,NRows,ORDER,StartIndex&gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::transpose</definition>
        <argsstring>() const</argsstring>
        <name>transpose</name>
        <briefdescription>
<para>Returns transposed matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="236" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="236" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1af802adb3d2bfdb7f2e482585689f3ef3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::transposeInPlace</definition>
        <argsstring>()</argsstring>
        <name>transposeInPlace</name>
        <briefdescription>
<para>Transposes a square matrix in-place. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="251" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="251" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ae33254284f8f44f03ffd88625068e60e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::product</definition>
        <argsstring>() const</argsstring>
        <name>product</name>
        <briefdescription>
<para>Returns the product of all elements in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="264" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="264" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a965c223b68eff2a3d8063c2f017fcaf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <briefdescription>
<para>Returns the sum of all elements in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="275" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="275" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aed77dbefaa3163a2dfbca65ceb9a3f61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::trace</definition>
        <argsstring>() const</argsstring>
        <name>trace</name>
        <briefdescription>
<para>Returns the trace of a square matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="287" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="287" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a3381d5a690ccd77b1e7a242c2af0bd90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator+=</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator += performing matrix addition as in (*this) += rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="297" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="297" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aefe682482ee8d09969247b461dae2b8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator-=</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator -= performing matrix subtraction as in (*this) -= rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="318" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="318" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a440bd04efb1a42c06c5ecd48e0fa4663" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Unary minus operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="339" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a4d6be7771c8e5c72fdb1fc4bcb8008b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt;&amp; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::operator*=</definition>
        <argsstring>(T a)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator *= that scales this matrix in place by a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="347" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="347" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1ab33b02d8b9779eb2d2058a44e521c6fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::dot</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs) const</argsstring>
        <name>dot</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns the dot product of two vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="382" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="382" bodyend="389"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1a1a26e204ba90af6ebd4a18fc977b79bf" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>MM</declname>
            <defname>MM</defname>
            <defval>NRows</defval>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>NN</declname>
            <defname>NN</defname>
            <defval>NCols</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; MM==NN, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>static constexpr AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::Identity</definition>
        <argsstring>() noexcept</argsstring>
        <name>Identity</name>
        <briefdescription>
<para>Returns an identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="216" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="216" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1SmallMatrix_1aa2fa60f0d549639766b0fcab4aa5688b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>static constexpr AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt; amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;::Zero</definition>
        <argsstring>() noexcept</argsstring>
        <name>Zero</name>
        <briefdescription>
<para>Returns a matrix initialized with zeros. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="228" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="228" bodyend="231"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1ab58bb94aaea1655bbf95611675a82483" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt; operator+</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; lhs, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary operator + returning the result of maxtrix addition, lhs+rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="308" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1af76f3665483bb8ae8284d50de5eb0746" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt; operator-</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; lhs, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Binary operator - returning the result of maxtrix subtraction, lhs-rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="329" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="329" bodyend="334"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a3c1f8c824e814e4c3d0c76f5ba63b71e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt; operator*</definition>
        <argsstring>(SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; m, T a)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix and a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="358" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="358" bodyend="362"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1aef26df2a90b4f241f64acab9b2bede7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;T,NRows,NCols,ORDER,StartIndex&gt; operator*</definition>
        <argsstring>(T a, SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt; m)</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; T, NRows, NCols, ORDER, StartIndex &gt;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of a scalar and a matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="367" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="367" bodyend="371"/>
      </memberdef>
      <memberdef kind="friend" id="structamrex_1_1SmallMatrix_1a580a62bf4e2dcedfec720db1dff7b288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N3</declname>
            <defname>N3</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>SI</declname>
            <defname>SI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> friend <ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; U, N1, N3, Ord, SI &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE friend SmallMatrix&lt;U,N1,N3,Ord,SI&gt; operator*</definition>
        <argsstring>(SmallMatrix&lt; U, N1, N2, Ord, SI &gt; const &amp;lhs, SmallMatrix&lt; U, N2, N3, Ord, SI &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; U, N1, N2, Ord, SI &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SmallMatrix" kindref="compound">SmallMatrix</ref>&lt; U, N2, N3, Ord, SI &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns matrix product of two matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="377" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="398" bodyend="427"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Matrix class with compile-time size. </para>
    </briefdescription>
    <detaileddescription>
<para>Note that column vectors and row vectors are special cases of a Matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix element data type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ORDER</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory layout order. <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref> (i.e., column-major) by default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StartIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting index. Either 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>amrex::SmallMatrix&lt; T, NRows, NCols, ORDER, StartIndex &gt;</label>
        <link refid="structamrex_1_1SmallMatrix"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_mat</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>T</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" line="33" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SmallMatrix.H" bodystart="34" bodyend="393"/>
    <listofallmembers>
      <member refid="structamrex_1_1SmallMatrix_1ad7f6f18d4d8b0b4c77b53c7bfafc2d31" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>begin</name></member>
      <member refid="structamrex_1_1SmallMatrix_1adbdc2811f2067c74fdbf6e949aa919cf" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>begin</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ad27953e4ba231ae72eee1d04bfcbad71" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>column_size</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ab33b02d8b9779eb2d2058a44e521c6fb" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>dot</name></member>
      <member refid="structamrex_1_1SmallMatrix_1af533cd98f5319af02e7726fd3686d87b" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>end</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae5a13282bd3098baac80cc37f92046b7" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>end</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a1a26e204ba90af6ebd4a18fc977b79bf" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>Identity</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a32448f0826904fa7d77c008793cbc0f1" prot="private" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>m_mat</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a6d6d712a5179e75b822fa2cad792356e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a0436b98f6cac25bfdec364f77a29f479" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ad2b40de1bae7e060191100c515d9cad5" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a74b7837da7a19f9d4b537db7d00e5622" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator()</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a3c1f8c824e814e4c3d0c76f5ba63b71e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aef26df2a90b4f241f64acab9b2bede7a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a580a62bf4e2dcedfec720db1dff7b288" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a4d6be7771c8e5c72fdb1fc4bcb8008b1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator*=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ab58bb94aaea1655bbf95611675a82483" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator+</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a3381d5a690ccd77b1e7a242c2af0bd90" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1af76f3665483bb8ae8284d50de5eb0746" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a440bd04efb1a42c06c5ecd48e0fa4663" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aefe682482ee8d09969247b461dae2b8f" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator-=</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ab66ee98bfcfa7f68d2c03086788ae415" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1SmallMatrix_1af3754969d8e86961a9e62b28fa0f9222" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a3a52e4625ed98c93b816e56a376e283a" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>ordering</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae33254284f8f44f03ffd88625068e60e" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>product</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ae54d9be19be0cf11747349876041d803" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>reference_type</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a16884af63d24ace53c32c2b304f28cb1" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>row_size</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a6dc8c286788a1564e25f86055d83dbf5" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>setVal</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a53c9388736ce383236270a2ece8896b9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aac1786e1b91da8c97b5d2c44c353aaa0" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ad1a209152dee33f6a0eb102d1ed4054f" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>SmallMatrix</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a54c3d4215f2fdfccfcd326386572f1f2" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>starting_index</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a965c223b68eff2a3d8063c2f017fcaf8" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>sum</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aed77dbefaa3163a2dfbca65ceb9a3f61" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>trace</name></member>
      <member refid="structamrex_1_1SmallMatrix_1a042917a07326f4225516ce484c797ceb" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>transpose</name></member>
      <member refid="structamrex_1_1SmallMatrix_1af802adb3d2bfdb7f2e482585689f3ef3" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>transposeInPlace</name></member>
      <member refid="structamrex_1_1SmallMatrix_1ab0850c542b077a67c59dae912e0549d9" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>value_type</name></member>
      <member refid="structamrex_1_1SmallMatrix_1aa2fa60f0d549639766b0fcab4aa5688b" prot="public" virt="non-virtual"><scope>amrex::SmallMatrix</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
