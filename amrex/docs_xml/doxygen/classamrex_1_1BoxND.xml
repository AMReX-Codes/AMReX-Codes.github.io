<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1BoxND" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxND</compoundname>
    <includes refid="AMReX__Box_8H" local="no">AMReX_Box.H</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1BoxND_1af5c898c7b3635a504124819032a025fe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BoxCommHelper</definition>
        <argsstring></argsstring>
        <name>BoxCommHelper</name>
        <qualifiedname>amrex::BoxND::BoxCommHelper</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxCommHelper" kindref="compound">BoxCommHelper</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="48" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1BoxND_1adccd37eeac931837d637545e8eba842e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1_1mpidatatypes_1ac230e5420cb456b06694f569b522c61b" kindref="member">MPI_Datatype</ref></type>
        <definition>MPI_Datatype ParallelDescriptor::Mpi_typemap</definition>
        <argsstring>()</argsstring>
        <name>ParallelDescriptor::Mpi_typemap</name>
        <qualifiedname>amrex::BoxND::Mpi_typemap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="47" column="57"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxND_1a0cc8b0304a0f5c4b663f348a3b50bedf" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>IntVectND&lt;dim&gt; amrex::BoxND&lt; dim &gt;::smallend</definition>
        <argsstring></argsstring>
        <name>smallend</name>
        <qualifiedname>amrex::BoxND::smallend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="858" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxND_1a822ca5acdd7847e703455af3b3cf9b05" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>IntVectND&lt;dim&gt; amrex::BoxND&lt; dim &gt;::bigend</definition>
        <argsstring></argsstring>
        <name>bigend</name>
        <qualifiedname>amrex::BoxND::bigend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="859" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxND_1a1f32aecec416cfb1cae97aa816745455" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; dim &gt;</type>
        <definition>IndexTypeND&lt;dim&gt; amrex::BoxND&lt; dim &gt;::btype</definition>
        <argsstring></argsstring>
        <name>btype</name>
        <qualifiedname>amrex::BoxND::btype</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="860" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="860" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxND_1ac01550fc83d9d8f331737c7611707439" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::BoxND&lt; dim &gt;::BoxND</definition>
        <argsstring>() noexcept</argsstring>
        <name>BoxND</name>
        <qualifiedname>amrex::BoxND::BoxND</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="57" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a1208fba312981408419f0bb7779d2ad2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::BoxND&lt; dim &gt;::BoxND</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;small, const IntVectND&lt; dim &gt; &amp;big) noexcept</argsstring>
        <name>BoxND</name>
        <qualifiedname>amrex::BoxND::BoxND</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>big</declname>
        </param>
        <briefdescription>
<para>Construct cell-centered type <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="64" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a4ff83f33da2d7e9294f880f3897d1634" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::BoxND&lt; dim &gt;::BoxND</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;small, const int *vec_len) noexcept</argsstring>
        <name>BoxND</name>
        <qualifiedname>amrex::BoxND::BoxND</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>vec_len</declname>
        </param>
        <briefdescription>
<para>Construct <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> with specified lengths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="71" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1af815cc676dfbfe611308dc759a3ba30e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::BoxND&lt; dim &gt;::BoxND</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;small, const IntVectND&lt; dim &gt; &amp;big, const IntVectND&lt; dim &gt; &amp;typ) noexcept</argsstring>
        <name>BoxND</name>
        <qualifiedname>amrex::BoxND::BoxND</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>big</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Construct <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> with given type. small and big are expected to be consistent with given type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="81" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a2819ff84cedf5d4dee4d1a6d4566a42f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::BoxND&lt; dim &gt;::BoxND</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;small, const IntVectND&lt; dim &gt; &amp;big, IndexTypeND&lt; dim &gt; t) noexcept</argsstring>
        <name>BoxND</name>
        <qualifiedname>amrex::BoxND::BoxND</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>big</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; dim &gt;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Construct dimension specific Boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="91" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1af7d448098d6600d65f33ed1e3762dcd3" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>Tdim</declname>
            <defname>Tdim</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=Tdim &amp;&amp;Tdim&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::BoxND&lt; dim &gt;::BoxND</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>BoxND</name>
        <qualifiedname>amrex::BoxND::BoxND</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="99" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1afce229aa5b1d8e2edd7c36846a5fdd41" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>__host__ __device__ const IntVectND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::smallEnd</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>smallEnd</name>
        <qualifiedname>amrex::BoxND::smallEnd</qualifiedname>
        <briefdescription>
<para>Get the smallend of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="108" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a86de9247c7ca58d1b3176ec0b062589c" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>const IntVectND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::smallEnd</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>smallEnd</name>
        <qualifiedname>amrex::BoxND::smallEnd</qualifiedname>
        <briefdescription>
<para>Get the smallend of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="111" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ad29dde03704de7e329cde6407ee9ce5d" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::BoxND&lt; dim &gt;::smallEnd</definition>
        <argsstring>(int dir) const &amp;noexcept</argsstring>
        <name>smallEnd</name>
        <qualifiedname>amrex::BoxND::smallEnd</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate of the low end in the given direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="115" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a15d27469302289c97b13558099bc67f3" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>__host__ __device__ const IntVectND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::bigEnd</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>bigEnd</name>
        <qualifiedname>amrex::BoxND::bigEnd</qualifiedname>
        <briefdescription>
<para>Get the bigend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="119" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aa1d6a64b04a30f3bb49f0d240dfaf7e6" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>const IntVectND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::bigEnd</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>bigEnd</name>
        <qualifiedname>amrex::BoxND::bigEnd</qualifiedname>
        <briefdescription>
<para>Get the bigend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="122" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a2c339336f08d9ab7d738cb806339892d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::BoxND&lt; dim &gt;::bigEnd</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>bigEnd</name>
        <qualifiedname>amrex::BoxND::bigEnd</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate of the high end in the given direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="126" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a9eebfcd8ac4307bd4bced22c350e00eb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IndexTypeND&lt; dim &gt; amrex::BoxND&lt; dim &gt;::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <qualifiedname>amrex::BoxND::ixType</qualifiedname>
        <briefdescription>
<para>Returns the indexing type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="130" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aa297b29a87e0ed684977dd3904cbcd8f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::BoxND&lt; dim &gt;::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <qualifiedname>amrex::BoxND::type</qualifiedname>
        <briefdescription>
<para>Returns the indexing type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="134" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aee0e6b25ddc78ce610799c1f47441fd5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3" kindref="member">IndexType::CellIndex</ref></type>
        <definition>__host__ __device__ IndexType::CellIndex amrex::BoxND&lt; dim &gt;::type</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>type</name>
        <qualifiedname>amrex::BoxND::type</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the indexing type in the specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="138" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a6cfdc72e5fa10f948f794fa16370dffb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::BoxND&lt; dim &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::BoxND::size</qualifiedname>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="142" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a62ffe8e69e7e23665dccb1a46912b35b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::BoxND&lt; dim &gt;::length</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length</name>
        <qualifiedname>amrex::BoxND::length</qualifiedname>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="149" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1af34451808e59f931b2b30a525b9f1410" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::BoxND&lt; dim &gt;::length</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>length</name>
        <qualifiedname>amrex::BoxND::length</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> in given direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="156" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a812d821fad69720dcabb5fd5a130b054" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>__host__ __device__ GpuArray&lt; int, 3 &gt; amrex::BoxND&lt; dim &gt;::length3d</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length3d</name>
        <qualifiedname>amrex::BoxND::length3d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="160" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a013023da3cd9303d779486fd71aab954" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>__host__ __device__ GpuArray&lt; int, 3 &gt; amrex::BoxND&lt; dim &gt;::loVect3d</definition>
        <argsstring>() const noexcept</argsstring>
        <name>loVect3d</name>
        <qualifiedname>amrex::BoxND::loVect3d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="167" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a5a49a2ce34316927c46683660b6a1561" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>__host__ __device__ GpuArray&lt; int, 3 &gt; amrex::BoxND&lt; dim &gt;::hiVect3d</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hiVect3d</name>
        <qualifiedname>amrex::BoxND::hiVect3d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="174" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a8fcc099012af3b795751c4a99624d688" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const int *</type>
        <definition>__host__ __device__ const int * amrex::BoxND&lt; dim &gt;::loVect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>loVect</name>
        <qualifiedname>amrex::BoxND::loVect</qualifiedname>
        <briefdescription>
<para>Returns a constant pointer the array of low end coordinates. Useful for calls to FORTRAN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="181" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a553e767feccca9f179a1e39f398f667b" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>__host__ __device__ const int *</type>
        <definition>__host__ __device__ const int * amrex::BoxND&lt; dim &gt;::loVect</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>loVect</name>
        <qualifiedname>amrex::BoxND::loVect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="183" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a17720a12797d0a4ff29f783c84ba4d40" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const int *</type>
        <definition>__host__ __device__ const int * amrex::BoxND&lt; dim &gt;::hiVect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>hiVect</name>
        <qualifiedname>amrex::BoxND::hiVect</qualifiedname>
        <briefdescription>
<para>Returns a constant pointer the array of high end coordinates. Useful for calls to FORTRAN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="186" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a041a937ac8fe3236a2dd800dabfac556" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>__host__ __device__ const int *</type>
        <definition>__host__ __device__ const int * amrex::BoxND&lt; dim &gt;::hiVect</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>hiVect</name>
        <qualifiedname>amrex::BoxND::hiVect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="188" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a6db41b8d80c837dc328326fb482a8996" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::BoxND&lt; dim &gt;::operator[]</definition>
        <argsstring>(Orientation face) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::BoxND::operator[]</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate normal to given face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="192" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a272f940786c20ed15ee72cd87590b0f7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::isEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isEmpty</name>
        <qualifiedname>amrex::BoxND::isEmpty</qualifiedname>
        <briefdescription>
<para>Checks if it is an empty <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="199" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1af2d153611f14a92a1f1d9284ec37809f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ok</name>
        <qualifiedname>amrex::BoxND::ok</qualifiedname>
        <briefdescription>
<para>Checks if it is a proper <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> (including a valid type). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="203" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a6b747f128404ea636457aa8525550b05" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::contains</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxND::contains</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is contained within <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="207" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a08750bbb1784222b9fb105a3b6902e13" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::contains</definition>
        <argsstring>(const Dim3 &amp;p) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxND::contains</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is contained within <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="214" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a49f4ea304c709fa482c323036c7ae4f5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::contains</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxND::contains</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is contained within <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="222" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a96b1b28e990604641c2f948d926cf809" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::contains</definition>
        <argsstring>(const BoxND &amp;b) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxND::contains</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is contained within <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. It is an error if the Boxes have different types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="231" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aa27354e6f2441f633e6e9204e2697885" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::strictly_contains</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) const noexcept</argsstring>
        <name>strictly_contains</name>
        <qualifiedname>amrex::BoxND::strictly_contains</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is strictly contained within <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="239" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aff3abb1aa71f2144ea447eb44e72d12d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::strictly_contains</definition>
        <argsstring>(const BoxND &amp;b) const noexcept</argsstring>
        <name>strictly_contains</name>
        <qualifiedname>amrex::BoxND::strictly_contains</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is strictly contained within <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. It is an error if the Boxes have different types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="248" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="248" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a9f39325f92aba2d0700d66a52a7f7a69" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::strictly_contains</definition>
        <argsstring>(const Dim3 &amp;p) const noexcept</argsstring>
        <name>strictly_contains</name>
        <qualifiedname>amrex::BoxND::strictly_contains</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is strictly contained within <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="257" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a2fcb1d8705ef696b1e1d3da0eeea306e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::strictly_contains</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>strictly_contains</name>
        <qualifiedname>amrex::BoxND::strictly_contains</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is strictly contained within <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="265" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ae9f20fec53f48c31f84e3a1972038456" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::intersects</definition>
        <argsstring>(const BoxND &amp;b) const noexcept</argsstring>
        <name>intersects</name>
        <qualifiedname>amrex::BoxND::intersects</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes have non-null intersections. It is an error if the Boxes have different types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="275" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a619e1d2a3496443945654f2a28200d65" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::sameSize</definition>
        <argsstring>(const BoxND &amp;b) const noexcept</argsstring>
        <name>sameSize</name>
        <qualifiedname>amrex::BoxND::sameSize</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true is Boxes same size, ie translates of each other,. It is an error if they have different types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="282" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a5c34b023d6c52e262ad988a6bc58ff6d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::sameType</definition>
        <argsstring>(const BoxND &amp;b) const noexcept</argsstring>
        <name>sameType</name>
        <qualifiedname>amrex::BoxND::sameType</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes have same type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="289" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1acd8160828e9e24b6cd9050b8230968f1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::operator==</definition>
        <argsstring>(const BoxND &amp;b) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::BoxND::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes are identical (including type). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="293" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a5cde1448999d323e54a75729286c3572" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::operator!=</definition>
        <argsstring>(const BoxND &amp;b) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::BoxND::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes differ (including type). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="297" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ae41ca56f09a5fe15226f745ef73880fc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::operator&lt;</definition>
        <argsstring>(const BoxND &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>amrex::BoxND::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="300" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="300" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a13c3c580450127e35fc0c24650b7a2e3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::operator&lt;=</definition>
        <argsstring>(const BoxND &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>amrex::BoxND::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="308" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1afd2285c1873f93b0e866e700cb6336a6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::operator&gt;</definition>
        <argsstring>(const BoxND &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>amrex::BoxND::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="312" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a5c11a54e4ae450bc386144c6b639b601" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::operator&gt;=</definition>
        <argsstring>(const BoxND &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>amrex::BoxND::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="316" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a4f785c68ac0eabbd4ea2d1d1f75e9a54" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::cellCentered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cellCentered</name>
        <qualifiedname>amrex::BoxND::cellCentered</qualifiedname>
        <briefdescription>
<para>Returns true if <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> is cell-centered in all indexing directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="322" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aa3ed4f7c38c0e94d35f6db83fb24cca5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxND&lt; dim &gt;::checkOverflow</definition>
        <argsstring>() const noexcept</argsstring>
        <name>checkOverflow</name>
        <qualifiedname>amrex::BoxND::checkOverflow</qualifiedname>
        <briefdescription>
<para>Assert that there are no int/Long overflows when calling length or numPts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="325" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="325" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a5a7273bc39d5a40bd004396852893761" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Long</type>
        <definition>__host__ __device__ Long amrex::BoxND&lt; dim &gt;::numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numPts</name>
        <qualifiedname>amrex::BoxND::numPts</qualifiedname>
        <briefdescription>
<para>Returns the number of points contained in the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="349" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="349" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a85bb30be59886111131624fff60c5e2c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ double</type>
        <definition>__host__ __device__ double amrex::BoxND&lt; dim &gt;::d_numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>d_numPts</name>
        <qualifiedname>amrex::BoxND::d_numPts</qualifiedname>
        <briefdescription>
<para>Returns the number of points contained in the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. This is intended for use only in diagnostic messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="369" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="369" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a428ae5614c1ec5e0a7d6b567a411dfc9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Long</type>
        <definition>__host__ __device__ Long amrex::BoxND&lt; dim &gt;::volume</definition>
        <argsstring>() const noexcept</argsstring>
        <name>volume</name>
        <qualifiedname>amrex::BoxND::volume</qualifiedname>
        <briefdescription>
<para>Return the volume, in indexing space, of region enclosed by this <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. This is identical to <ref refid="classamrex_1_1BoxND_1a5a7273bc39d5a40bd004396852893761" kindref="member">numPts()</ref> for CELL centered <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>; otherwise, <ref refid="classamrex_1_1BoxND_1a5a7273bc39d5a40bd004396852893761" kindref="member">numPts()</ref> &gt; <ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebca210ab9e731c9c36c2c38db15c28a8d1c" kindref="member">volume()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="387" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="387" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a9749f77abb673082fa762fa43a860fd3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::BoxND&lt; dim &gt;::longside</definition>
        <argsstring>(int &amp;dir) const noexcept</argsstring>
        <name>longside</name>
        <qualifiedname>amrex::BoxND::longside</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length of longest side. dir is modified to give direction with longest side: 0...dim-1. Ignores type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="404" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="404" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1abecad6ce760983a87642fb5b49b245e3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::BoxND&lt; dim &gt;::longside</definition>
        <argsstring>() const noexcept</argsstring>
        <name>longside</name>
        <qualifiedname>amrex::BoxND::longside</qualifiedname>
        <briefdescription>
<para>Returns length of longest side. Ignores type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="420" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a6c7dd24165021b580893f3f0d975e9ce" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::BoxND&lt; dim &gt;::shortside</definition>
        <argsstring>(int &amp;dir) const noexcept</argsstring>
        <name>shortside</name>
        <qualifiedname>amrex::BoxND::shortside</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length of shortest side. dir is modified to give direction with shortest side: 0...dim-1. Ignores type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="430" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="430" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a38f670e9836c808f97467933f176cf73" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::BoxND&lt; dim &gt;::shortside</definition>
        <argsstring>() const noexcept</argsstring>
        <name>shortside</name>
        <qualifiedname>amrex::BoxND::shortside</qualifiedname>
        <briefdescription>
<para>Returns length of shortest side. Ignores type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="446" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="446" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ab4131b1125a5f60696dbcf27f8ad5a6e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Long</type>
        <definition>__host__ __device__ Long amrex::BoxND&lt; dim &gt;::index</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;v) const noexcept</argsstring>
        <name>index</name>
        <qualifiedname>amrex::BoxND::index</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns offset of point from smallend; i.e. index(smallend) -&gt; 0, bigend would return <ref refid="classamrex_1_1BoxND_1a5a7273bc39d5a40bd004396852893761" kindref="member">numPts()</ref>-1. Is used in accessing <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="457" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1011" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a8733c8096732fa462718ea0f6b884391" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::BoxND&lt; dim &gt;::atOffset</definition>
        <argsstring>(Long offset) const noexcept</argsstring>
        <name>atOffset</name>
        <qualifiedname>amrex::BoxND::atOffset</qualifiedname>
        <param>
          <type>Long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Given the offset, compute IntVectND&lt;dim&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="461" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1027" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a2f5c4c35a7687a43b8d909ac1856d227" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>__host__ __device__ GpuArray&lt; int, 3 &gt; amrex::BoxND&lt; dim &gt;::atOffset3d</definition>
        <argsstring>(Long offset) const noexcept</argsstring>
        <name>atOffset3d</name>
        <qualifiedname>amrex::BoxND::atOffset3d</qualifiedname>
        <param>
          <type>Long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="465" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1054" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1afef648306d6004c40a650bd02e55e4a3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::setSmall</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;sm) noexcept</argsstring>
        <name>setSmall</name>
        <qualifiedname>amrex::BoxND::setSmall</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>sm</declname>
        </param>
        <briefdescription>
<para>Redefine the small end of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="469" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="469" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a7c5151fb19c641eff04bd0bc51cf985c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::setSmall</definition>
        <argsstring>(int dir, int sm_index) noexcept</argsstring>
        <name>setSmall</name>
        <qualifiedname>amrex::BoxND::setSmall</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sm_index</declname>
        </param>
        <briefdescription>
<para>Redefine the small end of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="473" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="473" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a37189359c2b214d4f52fc3af337ef18f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::setBig</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;bg) noexcept</argsstring>
        <name>setBig</name>
        <qualifiedname>amrex::BoxND::setBig</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>bg</declname>
        </param>
        <briefdescription>
<para>Redefine the big end of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="477" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="477" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a5d888f9eb853d812dfb6803bcec625c2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::setBig</definition>
        <argsstring>(int dir, int bg_index) noexcept</argsstring>
        <name>setBig</name>
        <qualifiedname>amrex::BoxND::setBig</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bg_index</declname>
        </param>
        <briefdescription>
<para>Redefine the big end of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="481" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="481" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ab02f3a6f43c5718cdb886dfb0f770aed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::setRange</definition>
        <argsstring>(int dir, int sm_index, int n_cells=1) noexcept</argsstring>
        <name>setRange</name>
        <qualifiedname>amrex::BoxND::setRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sm_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cells</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Set the entire range in a given direction, starting at sm_index with length n_cells. NOTE: This will yield an illegal <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> if n_cells &lt;= 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="489" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1064" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ab54213a613f3084b64b60c113a763032" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::setType</definition>
        <argsstring>(const IndexTypeND&lt; dim &gt; &amp;t) noexcept</argsstring>
        <name>setType</name>
        <qualifiedname>amrex::BoxND::setType</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; dim &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set indexing type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="495" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="495" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a727c4435a5b201da0db3eb322b01c944" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::shift</definition>
        <argsstring>(int dir, int nzones) noexcept</argsstring>
        <name>shift</name>
        <qualifiedname>amrex::BoxND::shift</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Shift this <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> nzones indexing positions in coordinate direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="499" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="499" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a42d3214fd9419772998173772c4e3ac8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::shift</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;iv) noexcept</argsstring>
        <name>shift</name>
        <qualifiedname>amrex::BoxND::shift</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to b.shift(0,iv[0]).shift(1,iv[1]) .... </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="503" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="503" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ac8afbbe4e3d500e622477be9c05d3fea" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::shiftHalf</definition>
        <argsstring>(int dir, int num_halfs) noexcept</argsstring>
        <name>shiftHalf</name>
        <qualifiedname>amrex::BoxND::shiftHalf</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_halfs</declname>
        </param>
        <briefdescription>
<para>This member shifts the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> by &quot;half&quot; indices, thereby converting the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> from type CELL to NODE and visa-versa. b.shiftHalf(0,1) shifts b to the right by 1/2 cells. b.shiftHalf(1,-3) shifts b in the -j direction by 3/2 cells. NOTE: If num_halfs is EVEN the shift is num_halfs/2 full zones and hence will not change the type. This is: b.shifthalf(4) == b.shift(2). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="515" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1158" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ad5e175aa147cd26dc98e5fcb3611f9ad" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::shiftHalf</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;iv) noexcept</argsstring>
        <name>shiftHalf</name>
        <qualifiedname>amrex::BoxND::shiftHalf</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to b.shiftHalf(0,iv[0]).shiftHalf(1,iv[1]) ... </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="519" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1183" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a6843416750d0aa9c00fc5f08ee0afacd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::convert</definition>
        <argsstring>(IndexTypeND&lt; dim &gt; typ) noexcept</argsstring>
        <name>convert</name>
        <qualifiedname>amrex::BoxND::convert</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1IndexTypeND" kindref="compound">IndexTypeND</ref>&lt; dim &gt;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> from the current type into the argument type. This may change the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> coordinates: type CELL -&gt; NODE : increase coordinate by one on high end type NODE -&gt; CELL : reduce coordinate by one on high end other type mappings make no change. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="529" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="930" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ad4d1edc6ea83887c1efa75ee23ca38ee" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::convert</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;typ) noexcept</argsstring>
        <name>convert</name>
        <qualifiedname>amrex::BoxND::convert</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> from the current type into the argument type. This may change the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> coordinates: type CELL -&gt; NODE : increase coordinate by one on high end type NODE -&gt; CELL : reduce coordinate by one on high end other type mappings make no change. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="539" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="917" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1af5e83228244e71a5e099bb8367068543" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::surroundingNodes</definition>
        <argsstring>() noexcept</argsstring>
        <name>surroundingNodes</name>
        <qualifiedname>amrex::BoxND::surroundingNodes</qualifiedname>
        <briefdescription>
<para>Convert to NODE type in all directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="543" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="964" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a849fdd26e6743b4d08c2f2ee6edd93e5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::surroundingNodes</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>surroundingNodes</name>
        <qualifiedname>amrex::BoxND::surroundingNodes</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Convert to NODE type in given direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="547" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="947" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a31aff3736f56c12eeb6a2a52a704f000" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::surroundingNodes</definition>
        <argsstring>(Direction d) noexcept</argsstring>
        <name>surroundingNodes</name>
        <qualifiedname>amrex::BoxND::surroundingNodes</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="550" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="550" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ac0333b5d5352b2a5b0eb75e668e64f3b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::enclosedCells</definition>
        <argsstring>() noexcept</argsstring>
        <name>enclosedCells</name>
        <qualifiedname>amrex::BoxND::enclosedCells</qualifiedname>
        <briefdescription>
<para>Convert to CELL type in all directions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="554" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="996" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a3aa16f77dc78b935e0e3cb30ddf33b12" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::enclosedCells</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>enclosedCells</name>
        <qualifiedname>amrex::BoxND::enclosedCells</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Convert to CELL type in given direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="558" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="979" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1adf94aac9a22393313d414cf50c069f8b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::enclosedCells</definition>
        <argsstring>(Direction d) noexcept</argsstring>
        <name>enclosedCells</name>
        <qualifiedname>amrex::BoxND::enclosedCells</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="561" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="561" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1af7ca811d83de554bf48727ad1af2ff2d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref></type>
        <definition>__host__ __device__ BoxND amrex::BoxND&lt; dim &gt;::operator&amp;</definition>
        <argsstring>(const BoxND &amp;rhs) const noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>amrex::BoxND::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> that is intersection of this <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> and argument. The Boxes MUST be of same type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="568" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="568" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a1c917b8a6c36289cc5be42b73b92deaf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::operator&amp;=</definition>
        <argsstring>(const BoxND &amp;rhs) noexcept</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>amrex::BoxND::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Intersect this <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> with its argument. The Boxes MUST be of the same type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="572" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="572" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a408b7b8be8d821838e171fe90cf39704" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::minBox</definition>
        <argsstring>(const BoxND &amp;b) noexcept</argsstring>
        <name>minBox</name>
        <qualifiedname>amrex::BoxND::minBox</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> to that of the minimum <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> containing both the original <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> and the argument. Both Boxes must have identical type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="586" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="586" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a52c05c4ce1d569c4bf4d5ce714b87f96" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::operator+=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;v) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::BoxND::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> (relative) by given IntVectND&lt;dim&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="596" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="596" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a8816f7708bdd0f652c282806b40a4fd8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref></type>
        <definition>__host__ __device__ BoxND amrex::BoxND&lt; dim &gt;::operator+</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;v) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>amrex::BoxND::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> (relative) by given IntVectND&lt;dim&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="600" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="600" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a2fb50959597b74d875ec5de97af87fbb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::operator-=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;v) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::BoxND::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> (relative) by given IntVectND&lt;dim&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="604" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="604" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a5ea75e262cd85476ae7d8c4cfd6f3c3f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref></type>
        <definition>__host__ __device__ BoxND amrex::BoxND&lt; dim &gt;::operator-</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;v) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::BoxND::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> (relative) by given IntVectND&lt;dim&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="608" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="608" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1af2bf27936d36cbd2ef2a54d120c995f1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref></type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; amrex::BoxND&lt; dim &gt;::chop</definition>
        <argsstring>(int dir, int chop_pnt) noexcept</argsstring>
        <name>chop</name>
        <qualifiedname>amrex::BoxND::chop</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>chop_pnt</declname>
        </param>
        <briefdescription>
<para>Chop the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> at the chop_pnt in the dir direction returns one <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>, modifies the object <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. The union of the two is the original <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. The modified <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> is the low end, the returned <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> is the high end. If type(dir) = CELL, the Boxes are disjoint with the chop_pnt included in the high end (new <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>). It is an ERROR if chop_pnt is the low end of the orig <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. If type(dir) = NODE, the chop_pnt is included in both Boxes but is the only point in common. It is also an error if the chop_pnt is an end node of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="623" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1121" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a146940a2fab021d83f1c8d59be0f947a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::grow</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>grow</name>
        <qualifiedname>amrex::BoxND::grow</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="630" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="630" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a0a4393c8036cc2cda1bf38cf107cef9e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::grow</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;v) noexcept</argsstring>
        <name>grow</name>
        <qualifiedname>amrex::BoxND::grow</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> in each direction by specified amount. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="634" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="634" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a8cac0d09b6642e5dbf1d251cb57fdff4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::grow</definition>
        <argsstring>(int idir, int n_cell) noexcept</argsstring>
        <name>grow</name>
        <qualifiedname>amrex::BoxND::grow</qualifiedname>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> on the low and high end by n_cell cells in direction idir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="641" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="641" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1abb8b15323c106a667a14fe8afcbb2898" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::grow</definition>
        <argsstring>(Direction d, int n_cell) noexcept</argsstring>
        <name>grow</name>
        <qualifiedname>amrex::BoxND::grow</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="644" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="644" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a90527fe9871f7818b6e4f98cb94e7623" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::growLo</definition>
        <argsstring>(int idir, int n_cell=1) noexcept</argsstring>
        <name>growLo</name>
        <qualifiedname>amrex::BoxND::growLo</qualifiedname>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> on the low end by n_cell cells in direction idir. NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> by that number of cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="651" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="651" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aa57812ccbe51427abbfb1bdd5bfc2a0c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::growLo</definition>
        <argsstring>(Direction d, int n_cell=1) noexcept</argsstring>
        <name>growLo</name>
        <qualifiedname>amrex::BoxND::growLo</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="654" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="654" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a9f0cb2ac6fc80a17a1ba64ead08eb067" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::growHi</definition>
        <argsstring>(int idir, int n_cell=1) noexcept</argsstring>
        <name>growHi</name>
        <qualifiedname>amrex::BoxND::growHi</qualifiedname>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> on the high end by n_cell cells in direction idir. NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> by that number of cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="662" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="662" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aa547ef3593c4f64630ce24b93ca52446" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::growHi</definition>
        <argsstring>(Direction d, int n_cell=1) noexcept</argsstring>
        <name>growHi</name>
        <qualifiedname>amrex::BoxND::growHi</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="665" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="665" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1af668509a3225e4be182ae97e7db0da43" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::grow</definition>
        <argsstring>(Orientation face, int n_cell=1) noexcept</argsstring>
        <name>grow</name>
        <qualifiedname>amrex::BoxND::grow</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow in the direction of the given face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="669" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="669" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aab9d80ca628ccd11bd8f176c0bed47a5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::refine</definition>
        <argsstring>(int ref_ratio) noexcept</argsstring>
        <name>refine</name>
        <qualifiedname>amrex::BoxND::refine</qualifiedname>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Refine <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="687" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="687" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a5ebb2cc7ac91f11844f0b09eb116677e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::refine</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;ref_ratio) noexcept</argsstring>
        <name>refine</name>
        <qualifiedname>amrex::BoxND::refine</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="699" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="867" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1aab6b3022bb8c9a24e1ecb87629bbdae8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::coarsen</definition>
        <argsstring>(int ref_ratio) noexcept</argsstring>
        <name>coarsen</name>
        <qualifiedname>amrex::BoxND::coarsen</qualifiedname>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> must contain the original <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="711" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ac8142df7dd39f9d79a552502e993d2c2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND&lt; dim &gt; &amp; amrex::BoxND&lt; dim &gt;::coarsen</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;ref_ratio) noexcept</argsstring>
        <name>coarsen</name>
        <qualifiedname>amrex::BoxND::coarsen</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> must contain the original <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="725" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="884" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ac280d493f780602af3defec4bbf6f718" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::BoxND&lt; dim &gt;::next</definition>
        <argsstring>(IntVectND&lt; dim &gt; &amp;) const noexcept</argsstring>
        <name>next</name>
        <qualifiedname>amrex::BoxND::next</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>Step through the rectangle. It is a runtime error to give a point not inside rectangle. Iteration may not be efficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="732" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1077" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a467c77fc1613fb828bac7f3e12587b5c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::isSquare</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isSquare</name>
        <qualifiedname>amrex::BoxND::isSquare</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="745" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1097" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a79c3456607ba4f3cb05b32fe5bcdf3fa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::coarsenable</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;refrat, const IntVectND&lt; dim &gt; &amp;min_width) const noexcept</argsstring>
        <name>coarsenable</name>
        <qualifiedname>amrex::BoxND::coarsenable</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>refrat</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>min_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="748" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="748" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a51973fdb8643ba2caae86e434e16c082" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::coarsenable</definition>
        <argsstring>(int refrat, int min_width=1) const noexcept</argsstring>
        <name>coarsenable</name>
        <qualifiedname>amrex::BoxND::coarsenable</qualifiedname>
        <param>
          <type>int</type>
          <declname>refrat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="761" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="761" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ada4f0de6e8b663798c1cf8d02a6b76b8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::BoxND&lt; dim &gt;::coarsenable</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;refrat, int min_width=1) const noexcept</argsstring>
        <name>coarsenable</name>
        <qualifiedname>amrex::BoxND::coarsenable</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>refrat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="766" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="766" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ac32c020e2a151d9cf7e95e34c04a7449" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::BoxND&lt; dim &gt;::normalize</definition>
        <argsstring>() noexcept</argsstring>
        <name>normalize</name>
        <qualifiedname>amrex::BoxND::normalize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="772" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="772" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a32736c2dd3f45b7234200fa3ec670a8d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> &amp;</type>
        <definition>__host__ __device__ BoxND &amp; amrex::BoxND&lt; dim &gt;::makeSlab</definition>
        <argsstring>(int direction, int slab_index) noexcept</argsstring>
        <name>makeSlab</name>
        <qualifiedname>amrex::BoxND::makeSlab</qualifiedname>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slab_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="782" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="782" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a74af9b5b4e59bd0fe14f57da88243584" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxIteratorND" kindref="compound">BoxIteratorND</ref>&lt; dim &gt;</type>
        <definition>BoxIteratorND&lt; dim &gt; amrex::BoxND&lt; dim &gt;::iterator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>iterator</name>
        <qualifiedname>amrex::BoxND::iterator</qualifiedname>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1BoxIteratorND" kindref="compound">BoxIteratorND</ref> that can be used to loop over the IntVects contained by the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref><sp/><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3a92eb5ffee6ae2fec3ad71c777531578f" kindref="member">b</ref>;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(<ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref><sp/>iv<sp/>:<sp/><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3a92eb5ffee6ae2fec3ad71c777531578f" kindref="member">b</ref>.<ref refid="classamrex_1_1BoxND_1a74af9b5b4e59bd0fe14f57da88243584" kindref="member">iterator</ref>())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>operations<sp/>involving<sp/>iv</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="800" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="800" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1ac71080a09ec9e3db4cbf2a2a194f3fa7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ BoxND&lt; new_dim &gt; amrex::BoxND&lt; dim &gt;::shrink</definition>
        <argsstring>() const noexcept</argsstring>
        <name>shrink</name>
        <qualifiedname>amrex::BoxND::shrink</qualifiedname>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> of dimension new_dim and assigns the first new_dim dimension of this <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="820" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="820" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a446a85085e263db26fee1c6a49fec7b6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ BoxND&lt; new_dim &gt; amrex::BoxND&lt; dim &gt;::expand</definition>
        <argsstring>() const noexcept</argsstring>
        <name>expand</name>
        <qualifiedname>amrex::BoxND::expand</qualifiedname>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> of size new_dim and assigns all values of this <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> to it and (small=0, big=0, typ=CELL) to the remaining elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="835" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="835" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a2f7e3068a790c73e6a681cd84cb38a95" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ BoxND&lt; new_dim &gt; amrex::BoxND&lt; dim &gt;::resize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>resize</name>
        <qualifiedname>amrex::BoxND::resize</qualifiedname>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> of size new_dim by either shrinking or expanding this <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="849" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="849" bodyend="855"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1BoxND_1acdb16786bb13e9a6a59dfb023545d528" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref></type>
        <definition>__host__ static __device__ BoxND amrex::BoxND&lt; dim &gt;::TheUnitBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheUnitBox</name>
        <qualifiedname>amrex::BoxND::TheUnitBox</qualifiedname>
        <briefdescription>
<para>This static member function returns a constant reference to an object of type <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> representing the unit <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> in dim-dimensional space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="740" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="740" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a79b5316fa59b49a588419958e4818e48" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr std::size_t</type>
        <definition>__host__ static __device__ constexpr std::size_t amrex::BoxND&lt; dim &gt;::ndims</definition>
        <argsstring>() noexcept</argsstring>
        <name>ndims</name>
        <qualifiedname>amrex::BoxND::ndims</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="805" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="805" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxND_1a2aefcc8356e460f634b2e38fca4ce2a8" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::BoxND&lt; dim &gt;::indims</definition>
        <argsstring>() noexcept</argsstring>
        <name>indims</name>
        <qualifiedname>amrex::BoxND::indims</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="810" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="810" bodyend="812"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A Rectangular Domain on an Integer Lattice. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref> is an abstraction for defining discrete regions of dim indexing space. Boxes have an IndexType, which defines <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3a1f9d32418f4279a931e3f65f092f9439" kindref="member">IndexType::CELL</ref> or <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3ad501679fc1b23174fe28a86d24d2e1e2" kindref="member">IndexType::NODE</ref> based points for each direction and a low and high INTVECT which defines the lower and upper corners of the <ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>. Boxes can exist in positive and negative indexing space.</para>
<para>Box is a dimension dependent alias to BoxND&lt;AMREX_SPACEDIM&gt;, so AMREX_SPACEDIM must be defined as either 1, 2, or 3 when compiling. </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="46" bodyend="861"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxND_1a8733c8096732fa462718ea0f6b884391" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>atOffset</name></member>
      <member refid="classamrex_1_1BoxND_1a2f5c4c35a7687a43b8d909ac1856d227" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>atOffset3d</name></member>
      <member refid="classamrex_1_1BoxND_1a822ca5acdd7847e703455af3b3cf9b05" prot="private" virt="non-virtual"><scope>amrex::BoxND</scope><name>bigend</name></member>
      <member refid="classamrex_1_1BoxND_1a15d27469302289c97b13558099bc67f3" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BoxND_1aa1d6a64b04a30f3bb49f0d240dfaf7e6" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BoxND_1a2c339336f08d9ab7d738cb806339892d" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BoxND_1af5c898c7b3635a504124819032a025fe" prot="private" virt="non-virtual"><scope>amrex::BoxND</scope><name>BoxCommHelper</name></member>
      <member refid="classamrex_1_1BoxND_1ac01550fc83d9d8f331737c7611707439" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>BoxND</name></member>
      <member refid="classamrex_1_1BoxND_1a1208fba312981408419f0bb7779d2ad2" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>BoxND</name></member>
      <member refid="classamrex_1_1BoxND_1a4ff83f33da2d7e9294f880f3897d1634" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>BoxND</name></member>
      <member refid="classamrex_1_1BoxND_1af815cc676dfbfe611308dc759a3ba30e" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>BoxND</name></member>
      <member refid="classamrex_1_1BoxND_1a2819ff84cedf5d4dee4d1a6d4566a42f" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>BoxND</name></member>
      <member refid="classamrex_1_1BoxND_1af7d448098d6600d65f33ed1e3762dcd3" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>BoxND</name></member>
      <member refid="classamrex_1_1BoxND_1a1f32aecec416cfb1cae97aa816745455" prot="private" virt="non-virtual"><scope>amrex::BoxND</scope><name>btype</name></member>
      <member refid="classamrex_1_1BoxND_1a4f785c68ac0eabbd4ea2d1d1f75e9a54" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>cellCentered</name></member>
      <member refid="classamrex_1_1BoxND_1aa3ed4f7c38c0e94d35f6db83fb24cca5" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>checkOverflow</name></member>
      <member refid="classamrex_1_1BoxND_1af2bf27936d36cbd2ef2a54d120c995f1" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>chop</name></member>
      <member refid="classamrex_1_1BoxND_1aab6b3022bb8c9a24e1ecb87629bbdae8" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxND_1ac8142df7dd39f9d79a552502e993d2c2" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxND_1a79c3456607ba4f3cb05b32fe5bcdf3fa" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxND_1a51973fdb8643ba2caae86e434e16c082" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxND_1ada4f0de6e8b663798c1cf8d02a6b76b8" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxND_1a6b747f128404ea636457aa8525550b05" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxND_1a08750bbb1784222b9fb105a3b6902e13" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxND_1a49f4ea304c709fa482c323036c7ae4f5" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxND_1a96b1b28e990604641c2f948d926cf809" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxND_1a6843416750d0aa9c00fc5f08ee0afacd" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxND_1ad4d1edc6ea83887c1efa75ee23ca38ee" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxND_1a85bb30be59886111131624fff60c5e2c" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>d_numPts</name></member>
      <member refid="classamrex_1_1BoxND_1ac0333b5d5352b2a5b0eb75e668e64f3b" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxND_1a3aa16f77dc78b935e0e3cb30ddf33b12" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxND_1adf94aac9a22393313d414cf50c069f8b" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxND_1a446a85085e263db26fee1c6a49fec7b6" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>expand</name></member>
      <member refid="classamrex_1_1BoxND_1a146940a2fab021d83f1c8d59be0f947a" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxND_1a0a4393c8036cc2cda1bf38cf107cef9e" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxND_1a8cac0d09b6642e5dbf1d251cb57fdff4" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxND_1abb8b15323c106a667a14fe8afcbb2898" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxND_1af668509a3225e4be182ae97e7db0da43" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxND_1a9f0cb2ac6fc80a17a1ba64ead08eb067" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>growHi</name></member>
      <member refid="classamrex_1_1BoxND_1aa547ef3593c4f64630ce24b93ca52446" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>growHi</name></member>
      <member refid="classamrex_1_1BoxND_1a90527fe9871f7818b6e4f98cb94e7623" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>growLo</name></member>
      <member refid="classamrex_1_1BoxND_1aa57812ccbe51427abbfb1bdd5bfc2a0c" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>growLo</name></member>
      <member refid="classamrex_1_1BoxND_1a17720a12797d0a4ff29f783c84ba4d40" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BoxND_1a041a937ac8fe3236a2dd800dabfac556" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BoxND_1a5a49a2ce34316927c46683660b6a1561" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>hiVect3d</name></member>
      <member refid="classamrex_1_1BoxND_1ab4131b1125a5f60696dbcf27f8ad5a6e" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>index</name></member>
      <member refid="classamrex_1_1BoxND_1a2aefcc8356e460f634b2e38fca4ce2a8" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>indims</name></member>
      <member refid="classamrex_1_1BoxND_1ae9f20fec53f48c31f84e3a1972038456" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>intersects</name></member>
      <member refid="classamrex_1_1BoxND_1a272f940786c20ed15ee72cd87590b0f7" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>isEmpty</name></member>
      <member refid="classamrex_1_1BoxND_1a467c77fc1613fb828bac7f3e12587b5c" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>isSquare</name></member>
      <member refid="classamrex_1_1BoxND_1a74af9b5b4e59bd0fe14f57da88243584" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>iterator</name></member>
      <member refid="classamrex_1_1BoxND_1a9eebfcd8ac4307bd4bced22c350e00eb" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>ixType</name></member>
      <member refid="classamrex_1_1BoxND_1a62ffe8e69e7e23665dccb1a46912b35b" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>length</name></member>
      <member refid="classamrex_1_1BoxND_1af34451808e59f931b2b30a525b9f1410" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>length</name></member>
      <member refid="classamrex_1_1BoxND_1a812d821fad69720dcabb5fd5a130b054" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>length3d</name></member>
      <member refid="classamrex_1_1BoxND_1a9749f77abb673082fa762fa43a860fd3" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>longside</name></member>
      <member refid="classamrex_1_1BoxND_1abecad6ce760983a87642fb5b49b245e3" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>longside</name></member>
      <member refid="classamrex_1_1BoxND_1a8fcc099012af3b795751c4a99624d688" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>loVect</name></member>
      <member refid="classamrex_1_1BoxND_1a553e767feccca9f179a1e39f398f667b" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>loVect</name></member>
      <member refid="classamrex_1_1BoxND_1a013023da3cd9303d779486fd71aab954" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>loVect3d</name></member>
      <member refid="classamrex_1_1BoxND_1a32736c2dd3f45b7234200fa3ec670a8d" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>makeSlab</name></member>
      <member refid="classamrex_1_1BoxND_1a408b7b8be8d821838e171fe90cf39704" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>minBox</name></member>
      <member refid="classamrex_1_1BoxND_1a79b5316fa59b49a588419958e4818e48" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>ndims</name></member>
      <member refid="classamrex_1_1BoxND_1ac280d493f780602af3defec4bbf6f718" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>next</name></member>
      <member refid="classamrex_1_1BoxND_1ac32c020e2a151d9cf7e95e34c04a7449" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>normalize</name></member>
      <member refid="classamrex_1_1BoxND_1a5a7273bc39d5a40bd004396852893761" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BoxND_1af2d153611f14a92a1f1d9284ec37809f" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxND_1a5cde1448999d323e54a75729286c3572" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxND_1af7ca811d83de554bf48727ad1af2ff2d" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator&amp;</name></member>
      <member refid="classamrex_1_1BoxND_1a1c917b8a6c36289cc5be42b73b92deaf" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator&amp;=</name></member>
      <member refid="classamrex_1_1BoxND_1a8816f7708bdd0f652c282806b40a4fd8" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator+</name></member>
      <member refid="classamrex_1_1BoxND_1a52c05c4ce1d569c4bf4d5ce714b87f96" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BoxND_1a5ea75e262cd85476ae7d8c4cfd6f3c3f" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator-</name></member>
      <member refid="classamrex_1_1BoxND_1a2fb50959597b74d875ec5de97af87fbb" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BoxND_1ae41ca56f09a5fe15226f745ef73880fc" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1BoxND_1a13c3c580450127e35fc0c24650b7a2e3" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1BoxND_1acd8160828e9e24b6cd9050b8230968f1" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxND_1afd2285c1873f93b0e866e700cb6336a6" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1BoxND_1a5c11a54e4ae450bc386144c6b639b601" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1BoxND_1a6db41b8d80c837dc328326fb482a8996" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BoxND_1adccd37eeac931837d637545e8eba842e" prot="private" virt="non-virtual"><scope>amrex::BoxND</scope><name>ParallelDescriptor::Mpi_typemap</name></member>
      <member refid="classamrex_1_1BoxND_1aab9d80ca628ccd11bd8f176c0bed47a5" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxND_1a5ebb2cc7ac91f11844f0b09eb116677e" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxND_1a2f7e3068a790c73e6a681cd84cb38a95" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>resize</name></member>
      <member refid="classamrex_1_1BoxND_1a619e1d2a3496443945654f2a28200d65" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>sameSize</name></member>
      <member refid="classamrex_1_1BoxND_1a5c34b023d6c52e262ad988a6bc58ff6d" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>sameType</name></member>
      <member refid="classamrex_1_1BoxND_1a37189359c2b214d4f52fc3af337ef18f" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>setBig</name></member>
      <member refid="classamrex_1_1BoxND_1a5d888f9eb853d812dfb6803bcec625c2" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>setBig</name></member>
      <member refid="classamrex_1_1BoxND_1ab02f3a6f43c5718cdb886dfb0f770aed" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>setRange</name></member>
      <member refid="classamrex_1_1BoxND_1afef648306d6004c40a650bd02e55e4a3" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>setSmall</name></member>
      <member refid="classamrex_1_1BoxND_1a7c5151fb19c641eff04bd0bc51cf985c" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>setSmall</name></member>
      <member refid="classamrex_1_1BoxND_1ab54213a613f3084b64b60c113a763032" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>setType</name></member>
      <member refid="classamrex_1_1BoxND_1a727c4435a5b201da0db3eb322b01c944" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxND_1a42d3214fd9419772998173772c4e3ac8" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxND_1ac8afbbe4e3d500e622477be9c05d3fea" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BoxND_1ad5e175aa147cd26dc98e5fcb3611f9ad" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BoxND_1a6c7dd24165021b580893f3f0d975e9ce" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>shortside</name></member>
      <member refid="classamrex_1_1BoxND_1a38f670e9836c808f97467933f176cf73" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>shortside</name></member>
      <member refid="classamrex_1_1BoxND_1ac71080a09ec9e3db4cbf2a2a194f3fa7" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>shrink</name></member>
      <member refid="classamrex_1_1BoxND_1a6cfdc72e5fa10f948f794fa16370dffb" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>size</name></member>
      <member refid="classamrex_1_1BoxND_1afce229aa5b1d8e2edd7c36846a5fdd41" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BoxND_1a86de9247c7ca58d1b3176ec0b062589c" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BoxND_1ad29dde03704de7e329cde6407ee9ce5d" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BoxND_1a0cc8b0304a0f5c4b663f348a3b50bedf" prot="private" virt="non-virtual"><scope>amrex::BoxND</scope><name>smallend</name></member>
      <member refid="classamrex_1_1BoxND_1aa27354e6f2441f633e6e9204e2697885" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>strictly_contains</name></member>
      <member refid="classamrex_1_1BoxND_1aff3abb1aa71f2144ea447eb44e72d12d" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>strictly_contains</name></member>
      <member refid="classamrex_1_1BoxND_1a9f39325f92aba2d0700d66a52a7f7a69" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>strictly_contains</name></member>
      <member refid="classamrex_1_1BoxND_1a2fcb1d8705ef696b1e1d3da0eeea306e" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>strictly_contains</name></member>
      <member refid="classamrex_1_1BoxND_1af5e83228244e71a5e099bb8367068543" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxND_1a849fdd26e6743b4d08c2f2ee6edd93e5" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxND_1a31aff3736f56c12eeb6a2a52a704f000" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxND_1acdb16786bb13e9a6a59dfb023545d528" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>TheUnitBox</name></member>
      <member refid="classamrex_1_1BoxND_1aa297b29a87e0ed684977dd3904cbcd8f" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>type</name></member>
      <member refid="classamrex_1_1BoxND_1aee0e6b25ddc78ce610799c1f47441fd5" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>type</name></member>
      <member refid="classamrex_1_1BoxND_1a428ae5614c1ec5e0a7d6b567a411dfc9" prot="public" virt="non-virtual"><scope>amrex::BoxND</scope><name>volume</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
