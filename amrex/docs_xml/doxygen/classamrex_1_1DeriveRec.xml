<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1DeriveRec" kind="class" language="C++" prot="public">
    <compoundname>amrex::DeriveRec</compoundname>
    <includes refid="AMReX__Derive_8H" local="no">AMReX_Derive.H</includes>
    <innerclass refid="structamrex_1_1DeriveRec_1_1StateRange" prot="protected">amrex::DeriveRec::StateRange</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" prot="public" static="no">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref>(*</type>
        <definition>typedef Box(* amrex::DeriveRec::DeriveBoxMap) (const Box &amp;)</definition>
        <argsstring>)(const Box &amp;)</argsstring>
        <name>DeriveBoxMap</name>
        <briefdescription>
<para>A pointer to function taking and returning a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="114" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1DeriveRec_1a955d7a4da11a875f2d5129baf943397c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class DeriveList</definition>
        <argsstring></argsstring>
        <name>DeriveList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="106" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a77433a32f069c939a91530330272b36d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::DeriveRec::derive_name</definition>
        <argsstring></argsstring>
        <name>derive_name</name>
        <briefdescription>
<para>Name of derived quantity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="296" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1afef1822a23261763c6da7cc5dbe644b5" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::DeriveRec::variable_names</definition>
        <argsstring></argsstring>
        <name>variable_names</name>
        <briefdescription>
<para>Names of derived variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="299" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a9d57d46fa6d94f5e72b31c5a00cc92bd" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::DeriveRec::der_type</definition>
        <argsstring></argsstring>
        <name>der_type</name>
        <briefdescription>
<para>Type of derived quantity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="302" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a37c756f3c98d63ce682589e6abf3a6c4" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DeriveRec::n_derive</definition>
        <argsstring></argsstring>
        <name>n_derive</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of components in derived quantity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="305" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a10804ba5e49805dde6c9343a0998b475" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" kindref="member">DeriveFunc</ref></type>
        <definition>DeriveFunc amrex::DeriveRec::func</definition>
        <argsstring></argsstring>
        <name>func</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Function that computes derived quantity from state variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="308" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a540136f9f500bb35628b3e034161bd51" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" kindref="member">DeriveFunc3D</ref></type>
        <definition>DeriveFunc3D amrex::DeriveRec::func_3d</definition>
        <argsstring></argsstring>
        <name>func_3d</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="309" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1af68c5991f26f4c0642a77d0c03009f3e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a83e8cbe20f4d807987849da5431ba2c5" kindref="member">DeriveFuncFab</ref></type>
        <definition>DeriveFuncFab amrex::DeriveRec::func_fab</definition>
        <argsstring></argsstring>
        <name>func_fab</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="310" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1aa07835dc9dafb5110f5bfebf9291e72b" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
        <definition>Interpolater* amrex::DeriveRec::mapper</definition>
        <argsstring></argsstring>
        <name>mapper</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> for mapping crse grid derived data to finer levels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="313" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1adbe5143a11f68ea45e237f5d650ba69f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveBoxMap</ref></type>
        <definition>DeriveBoxMap amrex::DeriveRec::bx_map</definition>
        <argsstring></argsstring>
        <name>bx_map</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> mapper that specifies constituent region given derived region. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="316" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a2cc67c5168b67d6772586e58d5e2c5a3" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DeriveRec::n_state</definition>
        <argsstring></argsstring>
        <name>n_state</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total number of state variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="319" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a5dd47ecd89eca47c1a2da2a3cee0675f" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DeriveRec::nsr</definition>
        <argsstring></argsstring>
        <name>nsr</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of state ranges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="322" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1aef8dca7a34e2c3e59d330ad5de2c35dc" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1DeriveRec_1_1StateRange" kindref="compound">StateRange</ref> *</type>
        <definition>StateRange* amrex::DeriveRec::rng</definition>
        <argsstring></argsstring>
        <name>rng</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>List of state data subranges required to derive given quantity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="325" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a222aca825f0b80bc8de5522d155ba0e7" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>int* amrex::DeriveRec::bcr</definition>
        <argsstring></argsstring>
        <name>bcr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Array of bndry types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="328" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DeriveRec_1a34c2f0068a7832ca670a0476cea011fc" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>int* amrex::DeriveRec::bcr3D</definition>
        <argsstring></argsstring>
        <name>bcr3D</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="329" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a84376910b355f3a4b74220bbdf410328" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::DeriveRec::TheSameBox</definition>
        <argsstring>(const Box &amp;box) noexcept</argsstring>
        <name>TheSameBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="10" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a59d040ff4854528efd7602005560d853" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::DeriveRec::GrowBoxByOne</definition>
        <argsstring>(const Box &amp;box) noexcept</argsstring>
        <name>GrowBoxByOne</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="118" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a3efcbfca10808d1a81e899f4d3448501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveRec::~DeriveRec</definition>
        <argsstring>()</argsstring>
        <name>~DeriveRec</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="123" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="134" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a1a14b155268a2e05884a92114d66eaa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::DeriveRec::name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>name</name>
        <briefdescription>
<para>The name of the derived type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="128" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a390fb97e437dd3b2fc3b5be48804dd0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::DeriveRec::variableName</definition>
        <argsstring>(int comp) const noexcept</argsstring>
        <name>variableName</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>The names of components. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="329" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a075d81d0087a3500119f6ec6e69574eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::DeriveRec::deriveType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>deriveType</name>
        <briefdescription>
<para>The <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> of the derived type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="140" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a4cc703ca266623995fc8245ddd618ce3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" kindref="member">DeriveFunc</ref></type>
        <definition>DeriveFunc amrex::DeriveRec::derFunc</definition>
        <argsstring>() const noexcept</argsstring>
        <name>derFunc</name>
        <briefdescription>
<para>The DeriveFunc used to calculate the derived type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="145" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a186034c4106bb55fd756738441b7837d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" kindref="member">DeriveFunc3D</ref></type>
        <definition>DeriveFunc3D amrex::DeriveRec::derFunc3D</definition>
        <argsstring>() const noexcept</argsstring>
        <name>derFunc3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="146" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1afa3147e8805d601735e2dead142e4a2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a83e8cbe20f4d807987849da5431ba2c5" kindref="member">DeriveFuncFab</ref></type>
        <definition>DeriveFuncFab amrex::DeriveRec::derFuncFab</definition>
        <argsstring>() const noexcept</argsstring>
        <name>derFuncFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a868b4aa862ad58a0658f5213c654ef14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveBoxMap</ref></type>
        <definition>DeriveRec::DeriveBoxMap amrex::DeriveRec::boxMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxMap</name>
        <briefdescription>
<para>Maps state data box to derived data box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="152" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1ae417e01165f1eb3090a6fc864e3969d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
        <definition>Interpolater * amrex::DeriveRec::interp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>interp</name>
        <briefdescription>
<para>Type of interpolater to use in computing derived type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a25e0f9ede414df537ec2a017dc936afd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DeriveRec::numDerive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numDerive</name>
        <briefdescription>
<para>Number of components in the derived type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1ae3ef04ba562b5538b6248daba20c6f44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DeriveRec::numRange</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numRange</name>
        <briefdescription>
<para>Number of different chunks of state data needed for derived type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="167" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a0a07b4ad438414db0b1c0aa86c0556dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DeriveRec::numState</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numState</name>
        <briefdescription>
<para>Total number of state variables needed for derived type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="172" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1acabaee4740a8465dc4362f4374f0e244" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int * amrex::DeriveRec::getBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBC</name>
        <briefdescription>
<para>The boundary conditions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a4a7a159ef9c9f44bea0e5ed912473b69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int * amrex::DeriveRec::getBC3D</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBC3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="178" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a2f2f5266239ba77171d507d0e86f4ca3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveRec::getRange</definition>
        <argsstring>(int k, int &amp;state_indx, int &amp;src_comp, int &amp;num_comp) const</argsstring>
        <name>getRange</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Sets state_indx, src_comp and num_comp for the kth range (or chunk) of state data components needed to calculate the derived quantity. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_indx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="190" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="259" bodyend="272"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a82b0cadb1bc331f9bb36b978099f6ab4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveRec::DeriveRec</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveFunc der_func, DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>DeriveRec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" kindref="member">DeriveFunc</ref></type>
          <declname>der_func</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>der_func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="206" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="22" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1afc74087b8363e852738cf27e10512912" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveRec::DeriveRec</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveFunc3D der_func_3d, DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>DeriveRec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" kindref="member">DeriveFunc3D</ref></type>
          <declname>der_func_3d</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="38" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a53ce84a7ba50c91b93e67a04543f4df5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveRec::DeriveRec</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveFuncFab der_func_fab, DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>DeriveRec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a83e8cbe20f4d807987849da5431ba2c5" kindref="member">DeriveFuncFab</ref></type>
          <declname>der_func_fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="220" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="54" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a5c6f223cccc0bb6eea5c5b86fec74a99" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveRec::DeriveRec</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveRec::DeriveBoxMap box_map)</argsstring>
        <name>DeriveRec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveRec::DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <briefdescription>
<para>Constructor without a Fortran function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="236" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="71" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a17637cbd52ab9a728832f697254a0282" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveRec::DeriveRec</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, Vector&lt; std::string &gt; &amp;var_names, DeriveFunc der_func, DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>DeriveRec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>var_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" kindref="member">DeriveFunc</ref></type>
          <declname>der_func</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var_names</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>der_func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="252" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="83" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1aa830bf761084d34d74c81ca8c82740d9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveRec::DeriveRec</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, Vector&lt; std::string &gt; &amp;var_names, DeriveFunc3D der_func_3d, DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>DeriveRec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>var_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" kindref="member">DeriveFunc3D</ref></type>
          <declname>der_func_3d</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="260" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="100" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a0dd88fcca899b3ffa87f82a4be03b1c7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveRec::DeriveRec</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, Vector&lt; std::string &gt; &amp;var_names, DeriveFuncFab der_func_fab, DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>DeriveRec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>var_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a83e8cbe20f4d807987849da5431ba2c5" kindref="member">DeriveFuncFab</ref></type>
          <declname>der_func_fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="268" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="117" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a609c0ed6af2fb9c008782ee94de65db9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveRec::addRange</definition>
        <argsstring>(const DescriptorList &amp;d_list, int state_indx, int src_comp, int num_comp)</argsstring>
        <name>addRange</name>
        <param>
          <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
          <declname>d_list</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="276" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="226" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1a3b07b7cec32b864ae58f09942234421e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveRec::buildBC</definition>
        <argsstring>(const DescriptorList &amp;d_list)</argsstring>
        <name>buildBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
          <declname>d_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="281" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="275" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveRec_1af66abf3e0352de5d8f79dbdde22ef22c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveRec::buildBC3D</definition>
        <argsstring>(const DescriptorList &amp;d_list)</argsstring>
        <name>buildBC3D</name>
        <param>
          <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
          <declname>d_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="282" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="299" bodyend="325"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Derived Type Record. </para>    </briefdescription>
    <detaileddescription>
<para>Computes quantities derived from state data.</para><para><ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> is designed to compute quantities which can be derived from the state data contained in <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> and its derivatives. Some examples might be kinetic energy, vorticity, concentration gradients ... </para>    </detaileddescription>
    <collaborationgraph>
      <node id="977">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="977" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="979">
        <label>amrex::DeriveRec::StateRange</label>
        <link refid="structamrex_1_1DeriveRec_1_1StateRange"/>
        <childnode refid="979" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="973">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="975">
        <label>string</label>
      </node>
      <node id="974">
        <label>amrex::Interpolater</label>
        <link refid="classamrex_1_1Interpolater"/>
      </node>
      <node id="971">
        <label>amrex::DeriveRec</label>
        <link refid="classamrex_1_1DeriveRec"/>
        <childnode refid="972" relation="usage">
          <edgelabel>variable_names</edgelabel>
        </childnode>
        <childnode refid="974" relation="usage">
          <edgelabel>mapper</edgelabel>
        </childnode>
        <childnode refid="975" relation="usage">
          <edgelabel>derive_name</edgelabel>
        </childnode>
        <childnode refid="976" relation="usage">
          <edgelabel>bx_map</edgelabel>
          <edgelabel>func_fab</edgelabel>
        </childnode>
        <childnode refid="979" relation="usage">
          <edgelabel>rng</edgelabel>
        </childnode>
        <childnode refid="978" relation="usage">
          <edgelabel>der_type</edgelabel>
        </childnode>
      </node>
      <node id="976">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="977" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="978" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="978">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="972">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="973" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="104" bodyend="330"/>
    <listofallmembers>
      <member refid="classamrex_1_1DeriveRec_1a609c0ed6af2fb9c008782ee94de65db9" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>addRange</name></member>
      <member refid="classamrex_1_1DeriveRec_1a222aca825f0b80bc8de5522d155ba0e7" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>bcr</name></member>
      <member refid="classamrex_1_1DeriveRec_1a34c2f0068a7832ca670a0476cea011fc" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>bcr3D</name></member>
      <member refid="classamrex_1_1DeriveRec_1a868b4aa862ad58a0658f5213c654ef14" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>boxMap</name></member>
      <member refid="classamrex_1_1DeriveRec_1a3b07b7cec32b864ae58f09942234421e" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>buildBC</name></member>
      <member refid="classamrex_1_1DeriveRec_1af66abf3e0352de5d8f79dbdde22ef22c" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>buildBC3D</name></member>
      <member refid="classamrex_1_1DeriveRec_1adbe5143a11f68ea45e237f5d650ba69f" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>bx_map</name></member>
      <member refid="classamrex_1_1DeriveRec_1a9d57d46fa6d94f5e72b31c5a00cc92bd" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>der_type</name></member>
      <member refid="classamrex_1_1DeriveRec_1a4cc703ca266623995fc8245ddd618ce3" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>derFunc</name></member>
      <member refid="classamrex_1_1DeriveRec_1a186034c4106bb55fd756738441b7837d" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>derFunc3D</name></member>
      <member refid="classamrex_1_1DeriveRec_1afa3147e8805d601735e2dead142e4a2f" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>derFuncFab</name></member>
      <member refid="classamrex_1_1DeriveRec_1a77433a32f069c939a91530330272b36d" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>derive_name</name></member>
      <member refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveBoxMap</name></member>
      <member refid="classamrex_1_1DeriveRec_1a955d7a4da11a875f2d5129baf943397c" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveList</name></member>
      <member refid="classamrex_1_1DeriveRec_1a82b0cadb1bc331f9bb36b978099f6ab4" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveRec</name></member>
      <member refid="classamrex_1_1DeriveRec_1afc74087b8363e852738cf27e10512912" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveRec</name></member>
      <member refid="classamrex_1_1DeriveRec_1a53ce84a7ba50c91b93e67a04543f4df5" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveRec</name></member>
      <member refid="classamrex_1_1DeriveRec_1a5c6f223cccc0bb6eea5c5b86fec74a99" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveRec</name></member>
      <member refid="classamrex_1_1DeriveRec_1a17637cbd52ab9a728832f697254a0282" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveRec</name></member>
      <member refid="classamrex_1_1DeriveRec_1aa830bf761084d34d74c81ca8c82740d9" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveRec</name></member>
      <member refid="classamrex_1_1DeriveRec_1a0dd88fcca899b3ffa87f82a4be03b1c7" prot="protected" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>DeriveRec</name></member>
      <member refid="classamrex_1_1DeriveRec_1a075d81d0087a3500119f6ec6e69574eb" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>deriveType</name></member>
      <member refid="classamrex_1_1DeriveRec_1a10804ba5e49805dde6c9343a0998b475" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>func</name></member>
      <member refid="classamrex_1_1DeriveRec_1a540136f9f500bb35628b3e034161bd51" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>func_3d</name></member>
      <member refid="classamrex_1_1DeriveRec_1af68c5991f26f4c0642a77d0c03009f3e" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>func_fab</name></member>
      <member refid="classamrex_1_1DeriveRec_1acabaee4740a8465dc4362f4374f0e244" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>getBC</name></member>
      <member refid="classamrex_1_1DeriveRec_1a4a7a159ef9c9f44bea0e5ed912473b69" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>getBC3D</name></member>
      <member refid="classamrex_1_1DeriveRec_1a2f2f5266239ba77171d507d0e86f4ca3" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>getRange</name></member>
      <member refid="classamrex_1_1DeriveRec_1a59d040ff4854528efd7602005560d853" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>GrowBoxByOne</name></member>
      <member refid="classamrex_1_1DeriveRec_1ae417e01165f1eb3090a6fc864e3969d3" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>interp</name></member>
      <member refid="classamrex_1_1DeriveRec_1aa07835dc9dafb5110f5bfebf9291e72b" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>mapper</name></member>
      <member refid="classamrex_1_1DeriveRec_1a37c756f3c98d63ce682589e6abf3a6c4" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>n_derive</name></member>
      <member refid="classamrex_1_1DeriveRec_1a2cc67c5168b67d6772586e58d5e2c5a3" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>n_state</name></member>
      <member refid="classamrex_1_1DeriveRec_1a1a14b155268a2e05884a92114d66eaa7" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>name</name></member>
      <member refid="classamrex_1_1DeriveRec_1a5dd47ecd89eca47c1a2da2a3cee0675f" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>nsr</name></member>
      <member refid="classamrex_1_1DeriveRec_1a25e0f9ede414df537ec2a017dc936afd" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>numDerive</name></member>
      <member refid="classamrex_1_1DeriveRec_1ae3ef04ba562b5538b6248daba20c6f44" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>numRange</name></member>
      <member refid="classamrex_1_1DeriveRec_1a0a07b4ad438414db0b1c0aa86c0556dc" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>numState</name></member>
      <member refid="classamrex_1_1DeriveRec_1aef8dca7a34e2c3e59d330ad5de2c35dc" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>rng</name></member>
      <member refid="classamrex_1_1DeriveRec_1a84376910b355f3a4b74220bbdf410328" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>TheSameBox</name></member>
      <member refid="classamrex_1_1DeriveRec_1afef1822a23261763c6da7cc5dbe644b5" prot="private" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>variable_names</name></member>
      <member refid="classamrex_1_1DeriveRec_1a390fb97e437dd3b2fc3b5be48804dd0d" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>variableName</name></member>
      <member refid="classamrex_1_1DeriveRec_1a3efcbfca10808d1a81e899f4d3448501" prot="public" virt="non-virtual"><scope>amrex::DeriveRec</scope><name>~DeriveRec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
