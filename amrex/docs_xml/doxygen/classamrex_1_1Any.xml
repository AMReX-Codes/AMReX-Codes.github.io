<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1Any" kind="class" language="C++" prot="public">
    <compoundname>amrex::Any</compoundname>
    <includes refid="AMReX__Any_8H" local="no">AMReX_Any.H</includes>
    <innerclass refid="structamrex_1_1Any_1_1innards" prot="private">amrex::Any::innards</innerclass>
    <innerclass refid="structamrex_1_1Any_1_1innards__base" prot="private">amrex::Any::innards_base</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1Any_1_1innards__base" kindref="compound">innards_base</ref> &gt;</type>
        <definition>std::unique_ptr&lt;innards_base&gt; amrex::Any::m_ptr</definition>
        <argsstring></argsstring>
        <name>m_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="82" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Any_1a00e47f5c0aef72a9483c3cc6c9cc4e12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Any::Any</definition>
        <argsstring>()</argsstring>
        <name>Any</name>
        <briefdescription>
<para>Default constructor. By default it stores an int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="20" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1a75f911e1b2a254db4b6626bf98fa1923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Any::~Any</definition>
        <argsstring>()=default</argsstring>
        <name>~Any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1afc3bc0660243e8d8719884a2f81a2a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Any::Any</definition>
        <argsstring>(Any const &amp;rhs)=delete</argsstring>
        <name>Any</name>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="26" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1ac04132048490ddd59eb7312eb33856e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
        <definition>Any&amp; amrex::Any::operator=</definition>
        <argsstring>(Any const &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="27" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1aff8ca6a4b83b6cef467c7899d658aa47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Any::Any</definition>
        <argsstring>(Any &amp;&amp;rhs)=default</argsstring>
        <name>Any</name>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="29" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1ad23c5ad12e1baae2943f5e4dc707aac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
        <definition>Any&amp; amrex::Any::operator=</definition>
        <argsstring>(Any &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="30" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1abbcaad293ac7cfef89396c60034c02ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>amrex::Any::Any</definition>
        <argsstring>(MF &amp;&amp;mf)</argsstring>
        <name>Any</name>
        <param>
          <type>MF &amp;&amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
<para>Constructs by moving the given object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="34" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1a7f6a6f9344ee02404ec221b6b010ec30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Any::operator=</definition>
        <argsstring>(MF &amp;&amp;mf)</argsstring>
        <name>operator=</name>
        <param>
          <type>MF &amp;&amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
<para>Assigns by moving the given object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="40" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1ad3ea6134bfd9b5a51d9ad381e548cb19" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::type_info &amp;</type>
        <definition>const std::type_info&amp; amrex::Any::Type</definition>
        <argsstring>() const</argsstring>
        <name>Type</name>
        <briefdescription>
<para>Returns the contained type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="45" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1ab3b0861ff49959fd1103921dc291b918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
        </templateparamlist>
        <type>MF &amp;</type>
        <definition>MF&amp; amrex::Any::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>Returns a reference to the contained object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="51" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1a743acfa69c626f0a2f66fda4830312dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
        </templateparamlist>
        <type>MF const  &amp;</type>
        <definition>MF const&amp; amrex::Any::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
<para>Returns a const reference to the contained object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="55" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Any_1a6756f5c90f3bab7334449702da7ae003" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::Any::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="58" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="58" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class is similar to std::any. However, <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> is for storing move-only types (e.g., <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref>), whereas std::any is for copy constructible types. An object of this class is non-copyable. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>std::unique_ptr&lt; amrex::Any::innards_base &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::Any</label>
        <link refid="classamrex_1_1Any"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_ptr</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Any::innards_base</label>
        <link refid="structamrex_1_1Any_1_1innards__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H" bodystart="15" bodyend="83"/>
    <listofallmembers>
      <member refid="classamrex_1_1Any_1a00e47f5c0aef72a9483c3cc6c9cc4e12" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>Any</name></member>
      <member refid="classamrex_1_1Any_1afc3bc0660243e8d8719884a2f81a2a3a" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>Any</name></member>
      <member refid="classamrex_1_1Any_1aff8ca6a4b83b6cef467c7899d658aa47" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>Any</name></member>
      <member refid="classamrex_1_1Any_1abbcaad293ac7cfef89396c60034c02ff" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>Any</name></member>
      <member refid="classamrex_1_1Any_1ab3b0861ff49959fd1103921dc291b918" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>get</name></member>
      <member refid="classamrex_1_1Any_1a743acfa69c626f0a2f66fda4830312dc" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>get</name></member>
      <member refid="classamrex_1_1Any_1a6756f5c90f3bab7334449702da7ae003" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>is</name></member>
      <member refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" prot="private" virt="non-virtual"><scope>amrex::Any</scope><name>m_ptr</name></member>
      <member refid="classamrex_1_1Any_1ac04132048490ddd59eb7312eb33856e4" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Any_1ad23c5ad12e1baae2943f5e4dc707aac5" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Any_1a7f6a6f9344ee02404ec221b6b010ec30" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Any_1ad3ea6134bfd9b5a51d9ad381e548cb19" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>Type</name></member>
      <member refid="classamrex_1_1Any_1a75f911e1b2a254db4b6626bf98fa1923" prot="public" virt="non-virtual"><scope>amrex::Any</scope><name>~Any</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
