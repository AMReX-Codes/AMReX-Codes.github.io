<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1MLCellABecLap" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::MLCellABecLap</compoundname>
    <basecompoundref refid="classamrex_1_1MLCellLinOp" prot="public" virt="non-virtual">amrex::MLCellLinOp</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1MLABecLaplacian" prot="public" virt="non-virtual">amrex::MLABecLaplacian</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1MLALaplacian" prot="public" virt="non-virtual">amrex::MLALaplacian</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1MLEBABecLap" prot="public" virt="non-virtual">amrex::MLEBABecLap</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1MLPoisson" prot="public" virt="non-virtual">amrex::MLPoisson</derivedcompoundref>
    <includes refid="AMReX__MLCellABecLap_8H" local="no">AMReX_MLCellABecLap.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1MLCellABecLap_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLMG</definition>
        <argsstring></argsstring>
        <name>MLMG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="13" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLCellABecLap_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLCGSolver</definition>
        <argsstring></argsstring>
        <name>MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a4645fe35e39e5f36fe87938a48ea9641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellABecLap::MLCellABecLap</definition>
        <argsstring>()</argsstring>
        <name>MLCellABecLap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.cpp" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1aaa11148ef1cc3386414a3b3d02f9a4b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLCellABecLap::~MLCellABecLap</definition>
        <argsstring>()</argsstring>
        <name>~MLCellABecLap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.cpp" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1aff6a0f1c81880c9e944e725098d73a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellABecLap::MLCellABecLap</definition>
        <argsstring>(const MLCellABecLap &amp;)=delete</argsstring>
        <name>MLCellABecLap</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCellABecLap" kindref="compound">MLCellABecLap</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a13b727caa58ea6b165dcc414b6c14bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellABecLap::MLCellABecLap</definition>
        <argsstring>(MLCellABecLap &amp;&amp;)=delete</argsstring>
        <name>MLCellABecLap</name>
        <param>
          <type><ref refid="classamrex_1_1MLCellABecLap" kindref="compound">MLCellABecLap</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a7fd4867774038467f97cfac185e235ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCellABecLap" kindref="compound">MLCellABecLap</ref> &amp;</type>
        <definition>MLCellABecLap&amp; amrex::MLCellABecLap::operator=</definition>
        <argsstring>(const MLCellABecLap &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCellABecLap" kindref="compound">MLCellABecLap</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1ac72a224155e09fd10918b66384ccdb81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCellABecLap" kindref="compound">MLCellABecLap</ref> &amp;</type>
        <definition>MLCellABecLap&amp; amrex::MLCellABecLap::operator=</definition>
        <argsstring>(MLCellABecLap &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLCellABecLap" kindref="compound">MLCellABecLap</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a93dbbb7204ba78212d8891ab72cb8491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellABecLap::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="24" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.cpp" bodystart="18" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1adb891ed98442838db52ab71e703ff752" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLCellABecLap::needsUpdate</definition>
        <argsstring>() const override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a0073d05770099d89c87a60e25ab3cc47">needsUpdate</reimplements>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1acf27ddd13356c7c675ec2527d8e80223">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a07b60f41a959afec82a27d5c356b9f7c">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1aff624fcffcf28c0cb516cfbc58a29247">needsUpdate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1aa107a7270bd64cf582e25812c5e5cbab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellABecLap::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a6de98ea7f86803972368acd05180431d">update</reimplements>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a7e612906bd561e6b5db7ce47ea0e7d14">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a869e2f4f990e7cb411847fd27ad0daf4">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a92541ea02dfd6fbbe75711a57be748fd">update</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a7d6d2646e9f6afaf7ed70bf0c86fa762" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellABecLap::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a142ae4b8e4c68254e81516b5c8e00f4d">prepareForSolve</reimplements>
        <reimplementedby refid="classamrex_1_1MLPoisson_1ae640f7b961f96991b1510f316e512cd5">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1ad0614934d429a1dec25baadcebf6b88c">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a627779ad059394a0bd2b3bede177e12a">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a6591c6b5827c394fe13e119f33ac3fbc">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ac5b58dbd133f156387504e220e53148b">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.cpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a913212b62872ccbdfaf19880d8114073" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellABecLap::getFluxes</definition>
        <argsstring>(const Vector&lt; Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &gt; &amp;a_flux, const Vector&lt; MultiFab * &gt; &amp;a_sol, Location a_loc) const finaloverride</argsstring>
        <name>getFluxes</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ae6a653e83929e0f2c41482551c10b4e8">getFluxes</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.cpp" bodystart="40" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a7c4aeebd8ef17280170ed19e619f076a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLCellABecLap::getAScalar</definition>
        <argsstring>() const =0</argsstring>
        <name>getAScalar</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1ae8939cd7659e3a5b56a221984f5f4311">getAScalar</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a20fba62052c3c638ebf2f12c8fa2a64c">getAScalar</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a7f59b09e1131f3dcd72e9c74be5634b4">getAScalar</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ac93a87b6b156bc091561d0f7a318acf6">getAScalar</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a0e67dc87e4b048beb5f44d38b3ccebfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLCellABecLap::getBScalar</definition>
        <argsstring>() const =0</argsstring>
        <name>getBScalar</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1abf6607f3a2a9d8f6767d7d55fc88b687">getBScalar</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a229826c3b43520c2f79d2a7575eeddb2">getBScalar</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a6e100349c3387d415f75281d10bfa0d9">getBScalar</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a18a96b9239f30621aa700a73b03c08a8">getBScalar</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1a066785981b2814b49cd7ccc98ff01831" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *</type>
        <definition>virtual MultiFab const* amrex::MLCellABecLap::getACoeffs</definition>
        <argsstring>(int amrlev, int mglev) const =0</argsstring>
        <name>getACoeffs</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1ad96d519fbf995da0e1fcd313b9ae6611">getACoeffs</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a4bcf2d55af62463c21db00d74e9b8d18">getACoeffs</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a4b9b75ed0ddc0a3ecdf84e8e63154ada">getACoeffs</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1aaeda180448796f412b16283ed8aabf19">getACoeffs</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellABecLap_1aacb5d55dc92f8d82e56fa0636c9d5a3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt;</type>
        <definition>virtual Array&lt;MultiFab const*,AMREX_SPACEDIM&gt; amrex::MLCellABecLap::getBCoeffs</definition>
        <argsstring>(int amrlev, int mglev) const =0</argsstring>
        <name>getBCoeffs</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1a28c556ae5ffef498213e0b49a24d2b9f">getBCoeffs</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a6b2808e6540be827ff660180c0be8d68">getBCoeffs</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a231b5a037694a8fa75aff6e5ee526f8c">getBCoeffs</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a51e08a16e2bcf0fcfafd15b6ca8f8526">getBCoeffs</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="44" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4460">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="4459" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4463">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="4462" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4461">
        <label>amrex::MLALaplacian</label>
        <link refid="classamrex_1_1MLALaplacian"/>
        <childnode refid="4456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4464">
        <label>amrex::MLPoisson</label>
        <link refid="classamrex_1_1MLPoisson"/>
        <childnode refid="4456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4459">
        <label>amrex::MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacian"/>
        <childnode refid="4456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4462">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="4456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4458">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="4456">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4457" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4457">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="4458" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4498">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="4480">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="4481" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="4483">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="4476">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4476" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4473">
        <label>Real</label>
      </node>
      <node id="4499">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4500" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4505">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="4493">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="4474">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4475" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4475">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="4484">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4485" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4481">
        <label>string</label>
      </node>
      <node id="4501">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="4476" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="4495">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="4511">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4512" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4512">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4494">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4495" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4468">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4469" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4471">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="4496">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="4516">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="4470">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4471" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4507">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4508" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4472">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="4472" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="4473" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="4509">
        <label>amrex::Vector&lt; amrex::YAFluxRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4510" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4502">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4503" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4510">
        <label>std::vector&lt; amrex::YAFluxRegister, std::allocator&lt; amrex::YAFluxRegister &gt; &gt;</label>
      </node>
      <node id="4500">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="4485">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="4490">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="4476" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="4491" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="4515">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4516" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4467">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="4468" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="4470" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="4472" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="4474" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="4476" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="4477" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="4484" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="4502" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="4504" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc</edgelabel>
        </childnode>
        <childnode refid="4467" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="4506" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="4514">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4504">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4505" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4488">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="4489" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="4497">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4498" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4506">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="4518">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt; &gt;</label>
      </node>
      <node id="4465">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4466" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4491">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="4489">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="4484" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="4492">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4493" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4482">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="4486">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="4487" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="4488" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="4513">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4477">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="4478" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4508">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="4466">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="4467" relation="public-inheritance">
        </childnode>
        <childnode refid="4507" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="4509" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="4511" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="4513" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="4515" relation="usage">
          <edgelabel>m_crse_sol_br</edgelabel>
          <edgelabel>m_crse_cor_br</edgelabel>
        </childnode>
        <childnode refid="4517" relation="usage">
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_cor</edgelabel>
        </childnode>
      </node>
      <node id="4478">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="4479" relation="public-inheritance">
        </childnode>
        <childnode refid="4476" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="4484" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="4492" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="4494" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="4496" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="4497" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="4499" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="4501" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="4487">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="4517">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4479">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4480" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="4482" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="4476" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="4483" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="4484" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="4486" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="4490" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="4503">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="4469">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="10" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" bodystart="8" bodyend="53"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a62ea55fae7824c00b3237cf57616dd1d" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a90ee76f9285ff47a5a5130447134b3bf" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af750016d817d62fec79c71777ec48b36" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1adfefa1b34d6988c4bf97957616b61c8f" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a622b7c2ecc46a6b476aba4fb470f3dcf" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae56dfc1030a8066132a2cb67334b1aaa" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a7537000b838b1009188ad927ce91616c" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aead98967987fb3826008fc69f3270247" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ac3037ce3c60a5c1a0ccb07dc5ab67197" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a93dbbb7204ba78212d8891ab72cb8491" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a34a85d0cc1fc408ad4dc4b3509cb9917" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a984719ccb019be3050750f57138557b0" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af360736b1a452aa605ea48a8b2489615" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5137ff000c6f8940f4b07a28f3bf9375" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a6f2e4279fbe6ebbea1e903fb0aafc745" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a066785981b2814b49cd7ccc98ff01831" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7c4aeebd8ef17280170ed19e619f076a" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aacb5d55dc92f8d82e56fa0636c9d5a3e" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a0e67dc87e4b048beb5f44d38b3ccebfe" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7c1c62615a265e25a92ce37b3b287933" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a913212b62872ccbdfaf19880d8114073" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad2419e6b4d384edbd5695daca078e310" prot="public" virt="virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLCellABecLap</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a0044458b3dd79241c2b74483b70cb7e7" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa6ff4935f1246d7c94ac38dc65c25d7d" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1adf2694988cc929cdd82d3cd2dbb7b0e6" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa8d6ef9e77180f9076ef5cb83f48bb50" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a994a31a96c02e31fc58c4bad8ddf0150" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a20a2d5349510243c481d2b6ce1992f5c" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a60785819fb0c997419c7ee7b007e4bb3" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab8f93178ea3f02ba63da966de7796970" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a871355473b2744ad7dd29d691e72e9ee" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aae58b75937a141dc599d98b034be7f3c" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aeabff149eec600743faac7295cd509d2" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9d6cdade5abfabf340b180cba282c3c1" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af7504eedbd467f1237874cbc10dd6d39" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2ffd8d47358983d3c013b8012eeb1b8e" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6249249666804079176507b88626a72c" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1af58f71c827253ca415f218f6cf77f1fb" prot="protected" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acb33b0d3e94547e5e0529af6c1cb3d68" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1af7992c664d65948c99e3661e6d23a646" prot="public" virt="pure-virtual"><scope>amrex::MLCellABecLap</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a4645fe35e39e5f36fe87938a48ea9641" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aff6a0f1c81880c9e944e725098d73a7c" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a13b727caa58ea6b165dcc414b6c14bae" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acc45e2dedbc266cc717ffc2239727486" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acba5508d208bbb531ce2fe45042b4f6f" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4bb69639aa4cb08113d6d8273fca03ae" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>MLMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9f6145ef119707fa7ce4fd43542d1c24" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1adb891ed98442838db52ab71e703ff752" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a92b49ce3cd6f8877018a284c9a05663b" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3e0f34318790ba3e087ecf8b870dd12f" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7fd4867774038467f97cfac185e235ac" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ac72a224155e09fd10918b66384ccdb81" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a87fd042ed7a3004a39f75564f24264ca" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLCellABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4be43b4a29bd4f7092aa870804870ae2" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLCellABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLCellABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLCellABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7d6d2646e9f6afaf7ed70bf0c86fa762" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae233eeb511516448492f38fe53fa9cd9" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a30135624482a762f12f6e66a5b3b10ce" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aa95312f91d2baeeba018a231d162ad9a" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aa3a81a04971b2edce1cb836ebaad4b87" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a5a8012e233f7f198d99be52e18a30f1a" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ac54e10e50b8b0a19c1424d5a7c311003" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aa107a7270bd64cf582e25812c5e5cbab" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a7a111e0594b82aca829a78f2bb4ccc0c" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aa3f690703577da48606105e0a58838f3" prot="public" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLCellABecLap</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a33b01ffee4faf80cdfbe14f6f7d8a6e9" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aaa11148ef1cc3386414a3b3d02f9a4b2" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>~MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4d46c85e7e43e5231e19607a868d3d0f" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>~MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLCellABecLap</scope><name>~MLLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
