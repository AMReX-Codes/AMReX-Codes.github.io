<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacedetail" kind="namespace" language="C++">
    <compoundname>detail</compoundname>
    <innerclass refid="structdetail_1_1CellAdd" prot="public">detail::CellAdd</innerclass>
    <innerclass refid="structdetail_1_1CellAtomicAdd" prot="public">detail::CellAtomicAdd</innerclass>
    <innerclass refid="structdetail_1_1CellStore" prot="public">detail::CellStore</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedetail_1a57582f00e55a4d632cb774c1c04b8e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fbv_copy</definition>
        <argsstring>(Vector&lt; TagT &gt; const &amp;tags)</argsstring>
        <name>fbv_copy</name>
        <param>
          <type>Vector&lt; TagT &gt; const &amp;</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="855" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="855" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4def0c69cbfeefb0009f37c24cbbcc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagType</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::ParallelFor_doit</definition>
        <argsstring>(Vector&lt; TagType &gt; const &amp;tags, F &amp;&amp;f)</argsstring>
        <name>ParallelFor_doit</name>
        <param>
          <type>Vector&lt; TagType &gt; const &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="52" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4474764501cff795101f401872450637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab</definition>
        <argsstring>(Vector&lt; Array4CopyTag&lt; T &gt; &gt; const &amp;copy_tags, int scomp, int dcomp, int ncomp, F &amp;&amp;f)</argsstring>
        <name>fab_to_fab</name>
        <param>
          <type>Vector&lt; <ref refid="structArray4CopyTag" kindref="compound">Array4CopyTag</ref>&lt; T &gt; &gt; const &amp;</type>
          <declname>copy_tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="212" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="212" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a66b0c8870cc9dc6234689a081ca63417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab</definition>
        <argsstring>(Vector&lt; Array4CopyTag&lt; T &gt; &gt; const &amp;copy_tags, int scomp, int dcomp, int ncomp, F &amp;&amp;f, Vector&lt; Array4&lt; int &gt; &gt; const &amp;masks)</argsstring>
        <name>fab_to_fab</name>
        <param>
          <type>Vector&lt; <ref refid="structArray4CopyTag" kindref="compound">Array4CopyTag</ref>&lt; T &gt; &gt; const &amp;</type>
          <declname>copy_tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Vector&lt; Array4&lt; int &gt; &gt; const &amp;</type>
          <declname>masks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="233" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="233" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a248bfa92a0cb4c6fe46a666ad9c5967c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsStoreAtomic" kindref="compound">amrex::IsStoreAtomic</ref>&lt; T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab_atomic_cpy</definition>
        <argsstring>(Vector&lt; Array4CopyTag&lt; T &gt; &gt; const &amp;copy_tags, int scomp, int dcomp, int ncomp, Vector&lt; Array4&lt; int &gt; &gt; const &amp;)</argsstring>
        <name>fab_to_fab_atomic_cpy</name>
        <param>
          <type>Vector&lt; <ref refid="structArray4CopyTag" kindref="compound">Array4CopyTag</ref>&lt; T &gt; &gt; const &amp;</type>
          <declname>copy_tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Vector&lt; Array4&lt; int &gt; &gt; const &amp;</type>
          <defname>masks</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="328" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="328" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ace19f6aab53a4ee453afa3fc66ba33ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; amrex::HasAtomicAdd&lt; T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab_atomic_add</definition>
        <argsstring>(Vector&lt; Array4CopyTag&lt; T &gt; &gt; const &amp;copy_tags, int scomp, int dcomp, int ncomp, Vector&lt; Array4&lt; int &gt; &gt; const &amp;)</argsstring>
        <name>fab_to_fab_atomic_add</name>
        <param>
          <type>Vector&lt; <ref refid="structArray4CopyTag" kindref="compound">Array4CopyTag</ref>&lt; T &gt; &gt; const &amp;</type>
          <declname>copy_tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Vector&lt; Array4&lt; int &gt; &gt; const &amp;</type>
          <defname>masks</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="344" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="344" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0fa3d037e44a1dbda0ab9b7362a2d9c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Vector&lt; Box &gt;</type>
        <definition>Vector&lt;Box&gt; detail::getBoundaryBoxes</definition>
        <argsstring>(const Box &amp;box, const int ncells)</argsstring>
        <name>getBoundaryBoxes</name>
        <param>
          <type>const Box &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncells</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" line="7" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" bodystart="7" bodyend="45"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="853" column="16"/>
  </compounddef>
</doxygen>
