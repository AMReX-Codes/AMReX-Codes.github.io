<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacedetail" kind="namespace" language="C++">
    <compoundname>detail</compoundname>
    <innerclass refid="structdetail_1_1CellAdd" prot="public">detail::CellAdd</innerclass>
    <innerclass refid="structdetail_1_1CellAtomicAdd" prot="public">detail::CellAtomicAdd</innerclass>
    <innerclass refid="structdetail_1_1CellStore" prot="public">detail::CellStore</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacedetail_1a57582f00e55a4d632cb774c1c04b8e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fbv_copy</definition>
        <argsstring>(Vector&lt; TagT &gt; const &amp;tags)</argsstring>
        <name>fbv_copy</name>
        <qualifiedname>detail::fbv_copy</qualifiedname>
        <param>
          <type>Vector&lt; TagT &gt; const &amp;</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="959" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="959" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a6fd0b0eaa86bb8985f5471f13b76ce44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T0</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab</definition>
        <argsstring>(Vector&lt; Array4CopyTag&lt; T0, T1 &gt; &gt; const &amp;copy_tags, int scomp, int dcomp, int ncomp, F &amp;&amp;f)</argsstring>
        <name>fab_to_fab</name>
        <qualifiedname>detail::fab_to_fab</qualifiedname>
        <param>
          <type>Vector&lt; Array4CopyTag&lt; T0, T1 &gt; &gt; const &amp;</type>
          <declname>copy_tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="53" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4911ef8e41bbca2cb9b4ce07b44eb3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagType</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab_store</definition>
        <argsstring>(Vector&lt; TagType &gt; const &amp;tags, int scomp, int dcomp, int ncomp, F &amp;&amp;f)</argsstring>
        <name>fab_to_fab_store</name>
        <qualifiedname>detail::fab_to_fab_store</qualifiedname>
        <param>
          <type>Vector&lt; TagType &gt; const &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="73" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ab1db4d5802fd2e04eeedeaea6be66a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagType</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab_other</definition>
        <argsstring>(Vector&lt; TagType &gt; const &amp;tags, int scomp, int dcomp, int ncomp, F &amp;&amp;f)</argsstring>
        <name>fab_to_fab_other</name>
        <qualifiedname>detail::fab_to_fab_other</qualifiedname>
        <param>
          <type>Vector&lt; TagType &gt; const &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="90" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a64fb439cf906e12eddb15e737070a293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T0</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab</definition>
        <argsstring>(Vector&lt; Array4CopyTag&lt; T0, T1 &gt; &gt; const &amp;copy_tags, int scomp, int dcomp, int ncomp, F &amp;&amp;f, Vector&lt; Array4Tag&lt; int &gt; &gt; const &amp;masks)</argsstring>
        <name>fab_to_fab</name>
        <qualifiedname>detail::fab_to_fab</qualifiedname>
        <param>
          <type>Vector&lt; Array4CopyTag&lt; T0, T1 &gt; &gt; const &amp;</type>
          <declname>copy_tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Vector&lt; Array4Tag&lt; int &gt; &gt; const &amp;</type>
          <declname>masks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="156" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="156" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1afc1b915037c4dab142f1df60d412713e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsStoreAtomic" kindref="compound">amrex::IsStoreAtomic</ref>&lt; T0 &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab_atomic_cpy</definition>
        <argsstring>(Vector&lt; Array4CopyTag&lt; T0, T1 &gt; &gt; const &amp;copy_tags, int scomp, int dcomp, int ncomp, Vector&lt; Array4Tag&lt; int &gt; &gt; const &amp;)</argsstring>
        <name>fab_to_fab_atomic_cpy</name>
        <qualifiedname>detail::fab_to_fab_atomic_cpy</qualifiedname>
        <param>
          <type>Vector&lt; Array4CopyTag&lt; T0, T1 &gt; &gt; const &amp;</type>
          <declname>copy_tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Vector&lt; Array4Tag&lt; int &gt; &gt; const &amp;</type>
          <defname>masks</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="182" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ab1edc85caabaea9ac0a3b1e5cf851f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T0</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1HasAtomicAdd" kindref="compound">amrex::HasAtomicAdd</ref>&lt; T0 &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::fab_to_fab_atomic_add</definition>
        <argsstring>(Vector&lt; Array4CopyTag&lt; T0, T1 &gt; &gt; const &amp;copy_tags, int scomp, int dcomp, int ncomp, Vector&lt; Array4Tag&lt; int &gt; &gt; const &amp;)</argsstring>
        <name>fab_to_fab_atomic_add</name>
        <qualifiedname>detail::fab_to_fab_atomic_add</qualifiedname>
        <param>
          <type>Vector&lt; Array4CopyTag&lt; T0, T1 &gt; &gt; const &amp;</type>
          <declname>copy_tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Vector&lt; Array4Tag&lt; int &gt; &gt; const &amp;</type>
          <defname>masks</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" line="200" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FBI.H" bodystart="200" bodyend="204"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayCommI.H" line="957" column="1"/>
  </compounddef>
</doxygen>
