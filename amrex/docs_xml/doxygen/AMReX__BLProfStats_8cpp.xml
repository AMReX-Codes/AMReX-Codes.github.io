<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__BLProfStats_8cpp" kind="file" language="C++">
    <compoundname>AMReX_BLProfStats.cpp</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">map</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">limits</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">set</includes>
    <includes local="no">sys/time.h</includes>
    <includes refid="AMReX__BLProfStats_8H" local="no">AMReX_BLProfStats.H</includes>
    <includes refid="AMReX__RegionsProfStats_8H" local="no">AMReX_RegionsProfStats.H</includes>
    <includes refid="AMReX__Utility_8H" local="no">AMReX_Utility.H</includes>
    <includes refid="AMReX__IntVect_8H" local="no">AMReX_IntVect.H</includes>
    <includes refid="AMReX__Box_8H" local="no">AMReX_Box.H</includes>
    <includes refid="AMReX__FArrayBox_8H" local="no">AMReX_FArrayBox.H</includes>
    <includes refid="AMReX__ParallelDescriptor_8H" local="no">AMReX_ParallelDescriptor.H</includes>
    <includes refid="AMReX__BLProfUtilities_8H" local="no">AMReX_BLProfUtilities.H</includes>
    <incdepgraph>
      <node id="51148">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51086" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51107" relation="include">
        </childnode>
      </node>
      <node id="51116">
        <label>functional</label>
      </node>
      <node id="51094">
        <label>iomanip</label>
      </node>
      <node id="51145">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51134" relation="include">
        </childnode>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51090" relation="include">
        </childnode>
        <childnode refid="51124" relation="include">
        </childnode>
        <childnode refid="51131" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
      </node>
      <node id="51138">
        <label>AMReX_BoxIterator.H</label>
        <link refid="AMReX__BoxIterator_8H"/>
        <childnode refid="51104" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
      </node>
      <node id="51093">
        <label>limits</label>
      </node>
      <node id="51098">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
      </node>
      <node id="51177">
        <label>AMReX_CudaContainers.H</label>
        <link refid="AMReX__CudaContainers_8H"/>
        <childnode refid="51155" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51175" relation="include">
        </childnode>
      </node>
      <node id="51121">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="51103" relation="include">
        </childnode>
        <childnode refid="51122" relation="include">
        </childnode>
        <childnode refid="51123" relation="include">
        </childnode>
        <childnode refid="51107" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51124" relation="include">
        </childnode>
        <childnode refid="51125" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51126" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
      </node>
      <node id="51165">
        <label>AMReX_GpuUtility.H</label>
        <link refid="AMReX__GpuUtility_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
        <childnode refid="51162" relation="include">
        </childnode>
        <childnode refid="51100" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51126" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51105" relation="include">
        </childnode>
      </node>
      <node id="51181">
        <label>cstdint</label>
      </node>
      <node id="51190">
        <label>AMReX_FabArrayBase.H</label>
        <link refid="AMReX__FabArrayBase_8H"/>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51145" relation="include">
        </childnode>
        <childnode refid="51146" relation="include">
        </childnode>
        <childnode refid="51147" relation="include">
        </childnode>
        <childnode refid="51191" relation="include">
        </childnode>
        <childnode refid="51189" relation="include">
        </childnode>
        <childnode refid="51176" relation="include">
        </childnode>
        <childnode refid="51133" relation="include">
        </childnode>
        <childnode refid="51157" relation="include">
        </childnode>
      </node>
      <node id="51146">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51134" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51112" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51147" relation="include">
        </childnode>
      </node>
      <node id="51166">
        <label>AMReX_Functional.H</label>
        <link refid="AMReX__Functional_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
      </node>
      <node id="51102">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="51103" relation="include">
        </childnode>
        <childnode refid="51104" relation="include">
        </childnode>
        <childnode refid="51105" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51106" relation="include">
        </childnode>
        <childnode refid="51092" relation="include">
        </childnode>
        <childnode refid="51107" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51120" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51100" relation="include">
        </childnode>
        <childnode refid="51113" relation="include">
        </childnode>
      </node>
      <node id="51197">
        <label>stdlib.h</label>
      </node>
      <node id="51112">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51107" relation="include">
        </childnode>
        <childnode refid="51114" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51116" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51084" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51110" relation="include">
        </childnode>
      </node>
      <node id="51139">
        <label>AMReX_MakeType.H</label>
        <link refid="AMReX__MakeType_8H"/>
      </node>
      <node id="51171">
        <label>AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
      </node>
      <node id="51159">
        <label>AMReX_GpuError.H</label>
        <link refid="AMReX__GpuError_8H"/>
        <childnode refid="51140" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
      </node>
      <node id="51119">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="51092" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
      </node>
      <node id="51176">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="51111" relation="include">
        </childnode>
        <childnode refid="51086" relation="include">
        </childnode>
        <childnode refid="51094" relation="include">
        </childnode>
        <childnode refid="51112" relation="include">
        </childnode>
        <childnode refid="51148" relation="include">
        </childnode>
        <childnode refid="51147" relation="include">
        </childnode>
      </node>
      <node id="51105">
        <label>cmath</label>
      </node>
      <node id="51188">
        <label>cassert</label>
      </node>
      <node id="51196">
        <label>AMReX_RegionsProfStats.H</label>
        <link refid="AMReX__RegionsProfStats_8H"/>
        <childnode refid="51097" relation="include">
        </childnode>
        <childnode refid="51098" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51127" relation="include">
        </childnode>
        <childnode refid="51084" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51086" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51090" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51150" relation="include">
        </childnode>
        <childnode refid="51111" relation="include">
        </childnode>
        <childnode refid="51197" relation="include">
        </childnode>
      </node>
      <node id="51115">
        <label>stdexcept</label>
      </node>
      <node id="51155">
        <label>numeric</label>
      </node>
      <node id="51167">
        <label>AMReX_Tuple.H</label>
        <link refid="AMReX__Tuple_8H"/>
        <childnode refid="51109" relation="include">
        </childnode>
        <childnode refid="51168" relation="include">
        </childnode>
        <childnode refid="51116" relation="include">
        </childnode>
        <childnode refid="51129" relation="include">
        </childnode>
        <childnode refid="51088" relation="include">
        </childnode>
        <childnode refid="51161" relation="include">
        </childnode>
        <childnode refid="51169" relation="include">
        </childnode>
        <childnode refid="51166" relation="include">
        </childnode>
        <childnode refid="51113" relation="include">
        </childnode>
      </node>
      <node id="51131">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="51103" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51124" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
      </node>
      <node id="51128">
        <label>AMReX_BaseFab.H</label>
        <link refid="AMReX__BaseFab_8H"/>
        <childnode refid="51105" relation="include">
        </childnode>
        <childnode refid="51104" relation="include">
        </childnode>
        <childnode refid="51092" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51106" relation="include">
        </childnode>
        <childnode refid="51109" relation="include">
        </childnode>
        <childnode refid="51129" relation="include">
        </childnode>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51100" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51130" relation="include">
        </childnode>
        <childnode refid="51131" relation="include">
        </childnode>
        <childnode refid="51132" relation="include">
        </childnode>
        <childnode refid="51135" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51098" relation="include">
        </childnode>
        <childnode refid="51138" relation="include">
        </childnode>
        <childnode refid="51139" relation="include">
        </childnode>
        <childnode refid="51140" relation="include">
        </childnode>
        <childnode refid="51156" relation="include">
        </childnode>
        <childnode refid="51157" relation="include">
        </childnode>
      </node>
      <node id="51087">
        <label>string</label>
      </node>
      <node id="51175">
        <label>AMReX_CudaAllocators.H</label>
        <link refid="AMReX__CudaAllocators_8H"/>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51176" relation="include">
        </childnode>
        <childnode refid="51133" relation="include">
        </childnode>
        <childnode refid="51162" relation="include">
        </childnode>
      </node>
      <node id="51130">
        <label>AMReX_Loop.H</label>
        <link refid="AMReX__Loop_8H"/>
        <childnode refid="51121" relation="include">
        </childnode>
      </node>
      <node id="51089">
        <label>map</label>
      </node>
      <node id="51180">
        <label>AMReX_MultiFab.H</label>
        <link refid="AMReX__MultiFab_8H"/>
        <childnode refid="51181" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51127" relation="include">
        </childnode>
        <childnode refid="51182" relation="include">
        </childnode>
        <childnode refid="51195" relation="include">
        </childnode>
        <childnode refid="51189" relation="include">
        </childnode>
      </node>
      <node id="51137">
        <label>unordered_set</label>
      </node>
      <node id="51194">
        <label>AMReX_FabArrayCommI.H</label>
        <link refid="AMReX__FabArrayCommI_8H"/>
      </node>
      <node id="51169">
        <label>AMReX_IndexSequence.H</label>
        <link refid="AMReX__IndexSequence_8H"/>
        <childnode refid="51088" relation="include">
        </childnode>
      </node>
      <node id="51193">
        <label>AMReX_LayoutData.H</label>
        <link refid="AMReX__LayoutData_8H"/>
        <childnode refid="51190" relation="include">
        </childnode>
        <childnode refid="51192" relation="include">
        </childnode>
      </node>
      <node id="51156">
        <label>AMReX_Reduce.H</label>
        <link refid="AMReX__Reduce_8H"/>
        <childnode refid="51157" relation="include">
        </childnode>
        <childnode refid="51133" relation="include">
        </childnode>
      </node>
      <node id="51086">
        <label>fstream</label>
      </node>
      <node id="51184">
        <label>AMReX_Geometry.H</label>
        <link refid="AMReX__Geometry_8H"/>
        <childnode refid="51103" relation="include">
        </childnode>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51185" relation="include">
        </childnode>
        <childnode refid="51147" relation="include">
        </childnode>
        <childnode refid="51186" relation="include">
        </childnode>
        <childnode refid="51189" relation="include">
        </childnode>
      </node>
      <node id="51083">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfStats.cpp</label>
        <link refid="AMReX_BLProfStats.cpp"/>
        <childnode refid="51084" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51086" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51088" relation="include">
        </childnode>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51090" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51092" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51094" relation="include">
        </childnode>
        <childnode refid="51095" relation="include">
        </childnode>
        <childnode refid="51096" relation="include">
        </childnode>
        <childnode refid="51097" relation="include">
        </childnode>
        <childnode refid="51196" relation="include">
        </childnode>
        <childnode refid="51140" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51127" relation="include">
        </childnode>
        <childnode refid="51147" relation="include">
        </childnode>
        <childnode refid="51198" relation="include">
        </childnode>
      </node>
      <node id="51192">
        <label>AMReX_MFIter.H</label>
        <link refid="AMReX__MFIter_8H"/>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51133" relation="include">
        </childnode>
        <childnode refid="51190" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51127" relation="include">
        </childnode>
        <childnode refid="51186" relation="include">
        </childnode>
        <childnode refid="51157" relation="include">
        </childnode>
      </node>
      <node id="51123">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="51099" relation="include">
        </childnode>
      </node>
      <node id="51186">
        <label>AMReX_RealBox.H</label>
        <link refid="AMReX__RealBox_8H"/>
        <childnode refid="51103" relation="include">
        </childnode>
        <childnode refid="51109" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51187" relation="include">
        </childnode>
      </node>
      <node id="51108">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="51109" relation="include">
        </childnode>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51088" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51111" relation="include">
        </childnode>
        <childnode refid="51084" relation="include">
        </childnode>
        <childnode refid="51112" relation="include">
        </childnode>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
      </node>
      <node id="51164">
        <label>AMReX_GpuReduce.H</label>
        <link refid="AMReX__GpuReduce_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
        <childnode refid="51165" relation="include">
        </childnode>
        <childnode refid="51166" relation="include">
        </childnode>
      </node>
      <node id="51101">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="51199">
        <label>AMReX_CommProfStats.H</label>
        <link refid="AMReX__CommProfStats_8H"/>
        <childnode refid="51097" relation="include">
        </childnode>
        <childnode refid="51098" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51127" relation="include">
        </childnode>
        <childnode refid="51180" relation="include">
        </childnode>
        <childnode refid="51084" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51086" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51090" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51150" relation="include">
        </childnode>
        <childnode refid="51111" relation="include">
        </childnode>
        <childnode refid="51197" relation="include">
        </childnode>
      </node>
      <node id="51191">
        <label>AMReX_ParallelReduce.H</label>
        <link refid="AMReX__ParallelReduce_8H"/>
        <childnode refid="51112" relation="include">
        </childnode>
        <childnode refid="51147" relation="include">
        </childnode>
        <childnode refid="51176" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51129" relation="include">
        </childnode>
      </node>
      <node id="51100">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="51158">
        <label>AMReX_GpuLaunch.H</label>
        <link refid="AMReX__GpuLaunch_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
        <childnode refid="51159" relation="include">
        </childnode>
        <childnode refid="51160" relation="include">
        </childnode>
        <childnode refid="51162" relation="include">
        </childnode>
        <childnode refid="51163" relation="include">
        </childnode>
        <childnode refid="51164" relation="include">
        </childnode>
        <childnode refid="51167" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51130" relation="include">
        </childnode>
        <childnode refid="51100" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51161" relation="include">
        </childnode>
        <childnode refid="51134" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51092" relation="include">
        </childnode>
        <childnode refid="51088" relation="include">
        </childnode>
        <childnode refid="51170" relation="include">
        </childnode>
        <childnode refid="51171" relation="include">
        </childnode>
      </node>
      <node id="51142">
        <label>sys/types.h</label>
      </node>
      <node id="51189">
        <label>AMReX_Periodicity.H</label>
        <link refid="AMReX__Periodicity_8H"/>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
      </node>
      <node id="51154">
        <label>typeinfo</label>
      </node>
      <node id="51084">
        <label>cstdio</label>
      </node>
      <node id="51161">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="51129" relation="include">
        </childnode>
        <childnode refid="51100" relation="include">
        </childnode>
      </node>
      <node id="51117">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
      </node>
      <node id="51168">
        <label>tuple</label>
      </node>
      <node id="51149">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="51150" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51088" relation="include">
        </childnode>
        <childnode refid="51111" relation="include">
        </childnode>
        <childnode refid="51084" relation="include">
        </childnode>
        <childnode refid="51104" relation="include">
        </childnode>
        <childnode refid="51151" relation="include">
        </childnode>
        <childnode refid="51152" relation="include">
        </childnode>
        <childnode refid="51153" relation="include">
        </childnode>
      </node>
      <node id="51143">
        <label>unistd.h</label>
      </node>
      <node id="51150">
        <label>stack</label>
      </node>
      <node id="51091">
        <label>vector</label>
      </node>
      <node id="51179">
        <label>AMReX_FabFactory.H</label>
        <link refid="AMReX__FabFactory_8H"/>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51176" relation="include">
        </childnode>
        <childnode refid="51139" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51133" relation="include">
        </childnode>
      </node>
      <node id="51118">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="51112" relation="include">
        </childnode>
      </node>
      <node id="51113">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="51088">
        <label>utility</label>
      </node>
      <node id="51109">
        <label>array</label>
      </node>
      <node id="51182">
        <label>AMReX_FabArray.H</label>
        <link refid="AMReX__FabArray_8H"/>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51173" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51088" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51092" relation="include">
        </childnode>
        <childnode refid="51095" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51112" relation="include">
        </childnode>
        <childnode refid="51145" relation="include">
        </childnode>
        <childnode refid="51183" relation="include">
        </childnode>
        <childnode refid="51179" relation="include">
        </childnode>
        <childnode refid="51146" relation="include">
        </childnode>
        <childnode refid="51184" relation="include">
        </childnode>
        <childnode refid="51147" relation="include">
        </childnode>
        <childnode refid="51140" relation="include">
        </childnode>
        <childnode refid="51107" relation="include">
        </childnode>
        <childnode refid="51098" relation="include">
        </childnode>
        <childnode refid="51189" relation="include">
        </childnode>
        <childnode refid="51176" relation="include">
        </childnode>
        <childnode refid="51190" relation="include">
        </childnode>
        <childnode refid="51192" relation="include">
        </childnode>
        <childnode refid="51139" relation="include">
        </childnode>
        <childnode refid="51161" relation="include">
        </childnode>
        <childnode refid="51193" relation="include">
        </childnode>
        <childnode refid="51128" relation="include">
        </childnode>
        <childnode refid="51157" relation="include">
        </childnode>
        <childnode refid="51194" relation="include">
        </childnode>
      </node>
      <node id="51127">
        <label>AMReX_FArrayBox.H</label>
        <link refid="AMReX__FArrayBox_8H"/>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51128" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51179" relation="include">
        </childnode>
        <childnode refid="51105" relation="include">
        </childnode>
      </node>
      <node id="51111">
        <label>sstream</label>
      </node>
      <node id="51195">
        <label>AMReX_FabArrayUtility.H</label>
        <link refid="AMReX__FabArrayUtility_8H"/>
        <childnode refid="51182" relation="include">
        </childnode>
        <childnode refid="51193" relation="include">
        </childnode>
        <childnode refid="51176" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
      </node>
      <node id="51114">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="51115" relation="include">
        </childnode>
      </node>
      <node id="51097">
        <label>AMReX_BLProfStats.H</label>
        <link refid="AMReX__BLProfStats_8H"/>
        <childnode refid="51098" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51127" relation="include">
        </childnode>
        <childnode refid="51180" relation="include">
        </childnode>
        <childnode refid="51084" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51086" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51095" relation="include">
        </childnode>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51111" relation="include">
        </childnode>
      </node>
      <node id="51122">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="51092" relation="include">
        </childnode>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51100" relation="include">
        </childnode>
        <childnode refid="51120" relation="include">
        </childnode>
      </node>
      <node id="51160">
        <label>AMReX_GpuRange.H</label>
        <link refid="AMReX__GpuRange_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
        <childnode refid="51159" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51161" relation="include">
        </childnode>
      </node>
      <node id="51147">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="51107" relation="include">
        </childnode>
        <childnode refid="51148" relation="include">
        </childnode>
        <childnode refid="51149" relation="include">
        </childnode>
        <childnode refid="51098" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51154" relation="include">
        </childnode>
        <childnode refid="51092" relation="include">
        </childnode>
        <childnode refid="51116" relation="include">
        </childnode>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51155" relation="include">
        </childnode>
      </node>
      <node id="51140">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="51104" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51089" relation="include">
        </childnode>
        <childnode refid="51141" relation="include">
        </childnode>
        <childnode refid="51129" relation="include">
        </childnode>
        <childnode refid="51142" relation="include">
        </childnode>
        <childnode refid="51143" relation="include">
        </childnode>
        <childnode refid="51144" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51145" relation="include">
        </childnode>
        <childnode refid="51146" relation="include">
        </childnode>
        <childnode refid="51147" relation="include">
        </childnode>
      </node>
      <node id="51133">
        <label>AMReX_Arena.H</label>
        <link refid="AMReX__Arena_8H"/>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51134" relation="include">
        </childnode>
        <childnode refid="51104" relation="include">
        </childnode>
      </node>
      <node id="51125">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="51103" relation="include">
        </childnode>
        <childnode refid="51118" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51113" relation="include">
        </childnode>
      </node>
      <node id="51120">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
      </node>
      <node id="51144">
        <label>sys/wait.h</label>
      </node>
      <node id="51103">
        <label>iosfwd</label>
      </node>
      <node id="51104">
        <label>cstdlib</label>
      </node>
      <node id="51153">
        <label>cfenv</label>
      </node>
      <node id="51096">
        <label>sys/time.h</label>
      </node>
      <node id="51085">
        <label>iostream</label>
      </node>
      <node id="51124">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="51103" relation="include">
        </childnode>
        <childnode refid="51107" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
      </node>
      <node id="51126">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="51102" relation="include">
        </childnode>
      </node>
      <node id="51134">
        <label>cstddef</label>
      </node>
      <node id="51090">
        <label>unordered_map</label>
      </node>
      <node id="51183">
        <label>AMReX_BoxDomain.H</label>
        <link refid="AMReX__BoxDomain_8H"/>
        <childnode refid="51103" relation="include">
        </childnode>
        <childnode refid="51124" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
        <childnode refid="51131" relation="include">
        </childnode>
      </node>
      <node id="51157">
        <label>AMReX_Gpu.H</label>
        <link refid="AMReX__Gpu_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
        <childnode refid="51158" relation="include">
        </childnode>
        <childnode refid="51159" relation="include">
        </childnode>
        <childnode refid="51165" relation="include">
        </childnode>
        <childnode refid="51162" relation="include">
        </childnode>
        <childnode refid="51172" relation="include">
        </childnode>
        <childnode refid="51174" relation="include">
        </childnode>
        <childnode refid="51163" relation="include">
        </childnode>
        <childnode refid="51160" relation="include">
        </childnode>
        <childnode refid="51164" relation="include">
        </childnode>
        <childnode refid="51175" relation="include">
        </childnode>
        <childnode refid="51177" relation="include">
        </childnode>
        <childnode refid="51178" relation="include">
        </childnode>
      </node>
      <node id="51106">
        <label>climits</label>
      </node>
      <node id="51178">
        <label>AMReX_CudaGraph.H</label>
        <link refid="AMReX__CudaGraph_8H"/>
      </node>
      <node id="51136">
        <label>mutex</label>
      </node>
      <node id="51141">
        <label>chrono</label>
      </node>
      <node id="51170">
        <label>AMReX_GpuLaunchMacrosC.H</label>
        <link refid="AMReX__GpuLaunchMacrosC_8H"/>
      </node>
      <node id="51152">
        <label>csignal</label>
      </node>
      <node id="51135">
        <label>AMReX_CArena.H</label>
        <link refid="AMReX__CArena_8H"/>
        <childnode refid="51134" relation="include">
        </childnode>
        <childnode refid="51095" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51136" relation="include">
        </childnode>
        <childnode refid="51137" relation="include">
        </childnode>
        <childnode refid="51116" relation="include">
        </childnode>
        <childnode refid="51133" relation="include">
        </childnode>
      </node>
      <node id="51129">
        <label>type_traits</label>
      </node>
      <node id="51095">
        <label>set</label>
      </node>
      <node id="51132">
        <label>AMReX_BArena.H</label>
        <link refid="AMReX__BArena_8H"/>
        <childnode refid="51133" relation="include">
        </childnode>
      </node>
      <node id="51107">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="51174">
        <label>AMReX_GpuElixir.H</label>
        <link refid="AMReX__GpuElixir_8H"/>
        <childnode refid="51133" relation="include">
        </childnode>
      </node>
      <node id="51092">
        <label>algorithm</label>
      </node>
      <node id="51162">
        <label>AMReX_GpuDevice.H</label>
        <link refid="AMReX__GpuDevice_8H"/>
        <childnode refid="51104" relation="include">
        </childnode>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51109" relation="include">
        </childnode>
        <childnode refid="51112" relation="include">
        </childnode>
        <childnode refid="51140" relation="include">
        </childnode>
        <childnode refid="51159" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
      </node>
      <node id="51151">
        <label>execinfo.h</label>
      </node>
      <node id="51173">
        <label>cstring</label>
      </node>
      <node id="51198">
        <label>AMReX_BLProfUtilities.H</label>
        <link refid="AMReX__BLProfUtilities_8H"/>
        <childnode refid="51087" relation="include">
        </childnode>
        <childnode refid="51173" relation="include">
        </childnode>
        <childnode refid="51154" relation="include">
        </childnode>
        <childnode refid="51097" relation="include">
        </childnode>
        <childnode refid="51199" relation="include">
        </childnode>
        <childnode refid="51196" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
      </node>
      <node id="51187">
        <label>AMReX_RealVect.H</label>
        <link refid="AMReX__RealVect_8H"/>
        <childnode refid="51134" relation="include">
        </childnode>
        <childnode refid="51104" relation="include">
        </childnode>
        <childnode refid="51173" relation="include">
        </childnode>
        <childnode refid="51085" relation="include">
        </childnode>
        <childnode refid="51105" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51101" relation="include">
        </childnode>
        <childnode refid="51091" relation="include">
        </childnode>
        <childnode refid="51188" relation="include">
        </childnode>
        <childnode refid="51102" relation="include">
        </childnode>
      </node>
      <node id="51185">
        <label>AMReX_CoordSys.H</label>
        <link refid="AMReX__CoordSys_8H"/>
        <childnode refid="51093" relation="include">
        </childnode>
        <childnode refid="51112" relation="include">
        </childnode>
        <childnode refid="51099" relation="include">
        </childnode>
        <childnode refid="51108" relation="include">
        </childnode>
        <childnode refid="51119" relation="include">
        </childnode>
        <childnode refid="51121" relation="include">
        </childnode>
      </node>
      <node id="51110">
        <label>memory</label>
      </node>
      <node id="51172">
        <label>AMReX_GpuAsyncArray.H</label>
        <link refid="AMReX__GpuAsyncArray_8H"/>
        <childnode refid="51134" relation="include">
        </childnode>
        <childnode refid="51173" relation="include">
        </childnode>
        <childnode refid="51104" relation="include">
        </childnode>
        <childnode refid="51110" relation="include">
        </childnode>
        <childnode refid="51133" relation="include">
        </childnode>
        <childnode refid="51161" relation="include">
        </childnode>
        <childnode refid="51162" relation="include">
        </childnode>
      </node>
      <node id="51163">
        <label>AMReX_GpuMemory.H</label>
        <link refid="AMReX__GpuMemory_8H"/>
        <childnode refid="51113" relation="include">
        </childnode>
        <childnode refid="51117" relation="include">
        </childnode>
        <childnode refid="51162" relation="include">
        </childnode>
        <childnode refid="51161" relation="include">
        </childnode>
        <childnode refid="51133" relation="include">
        </childnode>
        <childnode refid="51104" relation="include">
        </childnode>
      </node>
      <node id="51099">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="51100" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="AMReX__BLProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" prot="public" static="no">
        <name>SHOWVAL</name>
        <param><defname>val</defname></param>
        <initializer>{ cout &lt;&lt; #val &lt;&lt; &quot; = &quot; &lt;&lt; val &lt;&lt; endl; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfStats.cpp" line="44" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfStats.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="AMReX__BLProfStats_8cpp_1a02b76a92a17338752cdd29335caaa60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SanitizeName</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>SanitizeName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfStats.cpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__BLProfStats_8cpp_1aec13bc900b9336b534cdd5ff46e4097b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintTimeRangeList</definition>
        <argsstring>(const std::list&lt; RegionsProfStats::TimeRange &gt; &amp;trList)</argsstring>
        <name>PrintTimeRangeList</name>
        <param>
          <type>const std::list&lt; RegionsProfStats::TimeRange &gt; &amp;</type>
          <declname>trList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfStats.cpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__BLProfStats_8cpp_1a673d2c2249f1892a0115a095a5761239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BLProfStats::TimeRange &amp;tr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structBLProfStats_1_1TimeRange" kindref="compound">BLProfStats::TimeRange</ref> &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfStats.cpp" line="344" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfStats.cpp" bodystart="344" bodyend="348"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>BLProfStats.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::endl;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::flush;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::ifstream;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::map;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unordered_map;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unordered_multimap;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::pair;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLProfStats_8H" kindref="compound">AMReX_BLProfStats.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__RegionsProfStats_8H" kindref="compound">AMReX_RegionsProfStats.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Utility_8H" kindref="compound">AMReX_Utility.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__IntVect_8H" kindref="compound">AMReX_IntVect.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Box_8H" kindref="compound">AMReX_Box.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__FArrayBox_8H" kindref="compound">AMReX_FArrayBox.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParallelDescriptor_8H" kindref="compound">AMReX_ParallelDescriptor.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLProfUtilities_8H" kindref="compound">AMReX_BLProfUtilities.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHOWVAL(val)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/>#val<sp/>&lt;&lt;<sp/>&quot;<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/>endl;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1acca0fea9f472ea1fdb67cbebe9b93d5c" kindref="member">BLProfStats::verbose</ref>(-1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1aff3df1b96b0cf4e527d31f366b51649e" kindref="member">BLProfStats::blProfVersion</ref>(-1);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">BLProfStats::dataNProcs</ref>(-1);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a00064a0f00714d740472a32d08596019" kindref="member">BLProfStats::nOutFiles</ref>(-1);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">std::string<sp/><ref refid="classBLProfStats_1a599d00f7afc5dc348ba84e2ad4ab3bb2" kindref="member">BLProfStats::dirName</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a71e8f90f882541f319f641623c1d760f" kindref="member">BLProfStats::bInitDataBlocks</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">std::map&lt;std::string,<sp/>int&gt;<sp/><ref refid="classBLProfStats_1a78868d7cea3662827ca187695cb06bf7" kindref="member">BLProfStats::blpDataFileNames</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">Real<sp/><ref refid="classBLProfStats_1aa9cbfb5bc0b3ad413e06060864eed0f8" kindref="member">BLProfStats::gPercent</ref>(0.10);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::ifstream *&gt;</ref><sp/><ref refid="classBLProfStats_1a0eabcbf58e2437da683f110ef496c902" kindref="member">BLProfStats::blpDataStreams</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a6d09cb193d457f12d89dad062aaf37bc" kindref="member">BLProfStats::bTimeRangeInitialized</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespaceamrex_1a41265e28034440c2aaa8fb38d3cd38c5" kindref="member">SanitizeName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aee4cc89e337e42259b850eafbad65cb1" kindref="member">PrintTimeRangeList</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;RegionsProfStats::TimeRange&gt;<sp/>&amp;trList);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a393accb69353384e42f45a34cb386180" kindref="member">amrex::FileSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aaae16c4ac3245574456ee8dc48c261be" kindref="member">amrex::MakeFuncPctTimesMF</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfStats::FuncStat&gt;</ref><sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;blpFNames,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataNProcs);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1abf61acca5a480f47841ff87d3fc31536" kindref="member">amrex::CollectMProfStats</ref>(std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfStats::FuncStat&gt;</ref><sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;fNames,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a171596246077e8bb3d38d0e3a513c481" kindref="member">amrex::GraphTopPct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfStats::FuncStat&gt;</ref><sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;fNames,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataNProcs,<sp/>Real<sp/>gPercent);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1aad8d3f466a14930a16c027402790d39e" kindref="member">BLProfStats::AddPiece</ref>(std::list&lt;TimeRange&gt;<sp/>&amp;addToHere,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeRange<sp/>&amp;pieceToAdd)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>add<sp/>the<sp/>new<sp/>piece,<sp/>sort,<sp/>then<sp/>remove<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>addToHere.push_back(pieceToAdd);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>addToHere.sort(<ref refid="structBLProfStats_1_1TimeRangeCompare" kindref="compound">BLProfStats::TimeRangeCompare</ref>());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::list&lt;TimeRange&gt;::iterator<sp/>it,<sp/>itnext;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>std::list&lt;std::list&lt;TimeRange&gt;::iterator&gt;<sp/>overlaps;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>addToHere.begin();<sp/>it<sp/>!=<sp/>addToHere.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>itnext<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>++itnext;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(itnext<sp/>!=<sp/>addToHere.end())<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeRange<sp/>&amp;tRange<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeRange<sp/>&amp;tRangeNext<sp/>=<sp/>*itnext;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tRange.stopTime<sp/>&gt;=<sp/>tRangeNext.startTime)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tRangeNext.startTime<sp/>=<sp/>tRange.startTime;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tRangeNext.stopTime<sp/><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(tRange.stopTime,<sp/>tRangeNext.stopTime);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>overlaps.push_back(it);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>std::list&lt;std::list&lt;TimeRange&gt;::iterator<sp/>&gt;::iterator<sp/>oit;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(oit<sp/>=<sp/>overlaps.begin();<sp/>oit<sp/>!=<sp/>overlaps.end();<sp/>++oit)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>addToHere.erase(*oit);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">std::list&lt;BLProfStats::TimeRange&gt;<sp/><ref refid="classBLProfStats_1a286eebba7a2e37000c01614ea347b24c" kindref="member">BLProfStats::RangeIntersection</ref>(</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;TimeRange&gt;<sp/>&amp;rangeList,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeRange<sp/>&amp;pieceToIntersect)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>std::list&lt;TimeRange&gt;<sp/>intersectList,<sp/>intersectListComp;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>intersectList.push_back(pieceToIntersect);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>intersectListComp.push_back(pieceToIntersect);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::list&lt;TimeRange&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>rangeList.begin();<sp/>it<sp/>!=<sp/>rangeList.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>RemovePiece(intersectListComp,<sp/>*it);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>intersectListComp.begin();<sp/>it<sp/>!=<sp/>intersectListComp.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>RemovePiece(intersectList,<sp/>*it);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersectList;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a9302c49868eb5145be9fbb6d9d3d6b2f" kindref="member">BLProfStats::RemovePiece</ref>(std::list&lt;TimeRange&gt;<sp/>&amp;removeFromHere,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeRange<sp/>&amp;pieceToRemove)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>piecesRemoved(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>std::list&lt;TimeRange&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>std::list&lt;std::list&lt;TimeRange&gt;::iterator&gt;<sp/>eraseThese;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>removeFromHere.begin();<sp/>it<sp/>!=<sp/>removeFromHere.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeRange<sp/>&amp;tRangeFrom<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bothLow(pieceToRemove.stopTime<sp/><sp/>&lt;<sp/>tRangeFrom.startTime);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>loInRange((pieceToRemove.startTime<sp/>&gt;<sp/>tRangeFrom.startTime)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pieceToRemove.startTime<sp/>&lt;<sp/>tRangeFrom.stopTime));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hiInRange((pieceToRemove.stopTime<sp/><sp/>&gt;<sp/>tRangeFrom.startTime)<sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pieceToRemove.stopTime<sp/><sp/>&lt;<sp/>tRangeFrom.stopTime));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex__eb2__2d__moudle_1a785195001f47b510759ddc0c97e458d5" kindref="member">covered</ref>((pieceToRemove.startTime<sp/>&lt;=<sp/>tRangeFrom.startTime)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pieceToRemove.stopTime<sp/><sp/>&gt;=<sp/>tRangeFrom.stopTime));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bothHigh(pieceToRemove.startTime<sp/>&gt;<sp/>tRangeFrom.stopTime);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Warning!<sp/>covered<sp/>test<sp/>may<sp/>require<sp/>an<sp/>epsilon<sp/>in<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>implementations.<sp/>Works<sp/>fine<sp/>now<sp/>given<sp/>fixed<sp/>nature<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>presently<sp/>used<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>there<sp/>are<sp/>six<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bothLow)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>loInRange<sp/>&amp;&amp;<sp/>hiInRange)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>remove<sp/>low<sp/>end<sp/>piece</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tRangeFrom.startTime<sp/>=<sp/>pieceToRemove.stopTime;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>piecesRemoved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(loInRange<sp/>&amp;&amp;<sp/>hiInRange)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>remove<sp/>middle<sp/>piece</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removeFromHere.insert(it,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeRange(tRangeFrom.startTime,<sp/>pieceToRemove.startTime));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tRangeFrom.startTime<sp/>=<sp/>pieceToRemove.stopTime;<sp/><sp/></highlight><highlight class="comment">//<sp/>reuse<sp/>this<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>piecesRemoved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(loInRange<sp/>&amp;&amp;<sp/>!<sp/>hiInRange)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>remove<sp/>high<sp/>end<sp/>piece</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tRangeFrom.stopTime<sp/>=<sp/>pieceToRemove.startTime;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>piecesRemoved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(covered)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>remove<sp/>the<sp/>whole<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eraseThese.push_back(it);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>piecesRemoved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bothHigh)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::list&lt;std::list&lt;TimeRange&gt;::iterator<sp/>&gt;::iterator<sp/>eit;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(eit<sp/>=<sp/>eraseThese.begin();<sp/>eit<sp/>!=<sp/>eraseThese.end();<sp/>++eit)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>removeFromHere.erase(*eit);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>piecesRemoved;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="classBLProfStats_1ae3e98ce74ad3d01e423149655526d44c" kindref="member">BLProfStats::BLProfStats</ref>()<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>maxRNumber<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>currentProc<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>minRegionTime<sp/>=<sp/><sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;Real&gt;::max</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>maxRegionTime<sp/>=<sp/>-<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;Real&gt;::max</ref>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>bDefaultInclude<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>currentDataBlock<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="classBLProfStats_1a78a439d9e62c00492ada16e9466c068d" kindref="member">BLProfStats::~BLProfStats</ref>()<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a2365248fa0b77e322ec051d9e1073f15" kindref="member">BLProfStats::AddRegionName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;rname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rnumber)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>regionNames.insert(std::pair&lt;std::string,<sp/>int&gt;(rname,<sp/>rnumber));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>regionNumbers.insert(std::pair&lt;int,<sp/>std::string&gt;(rnumber,<sp/>rname));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>maxRNumber<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(maxRNumber,<sp/>rnumber);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">std::set&lt;int&gt;<sp/><ref refid="classBLProfStats_1a727443269bcefa8b233a831ed76a0d02" kindref="member">BLProfStats::WhichRegions</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc,<sp/>Real<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;<sp/>whichRegions;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proc<sp/>&lt;<sp/>0<sp/>||<sp/>proc<sp/>&gt;=<sp/>regionTimeRanges.size())<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>whichRegions;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;TimeRange&gt;</ref><sp/>&gt;<sp/>&amp;rtr<sp/>=<sp/>regionTimeRanges[proc];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rnum(0);<sp/>rnum<sp/>&lt;<sp/>rtr.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++rnum)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range(0);<sp/>range<sp/>&lt;<sp/>rtr[rnum].<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++range)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeRange<sp/>&amp;tr<sp/>=<sp/>rtr[rnum][range];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tr.Contains(t))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whichRegions.insert(rnum);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>whichRegions;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1adee7586f1673d8f37da0f0b69c25fd62" kindref="member">BLProfStats::MakeFilterFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ffname)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>filterFile(ffname.c_str(),<sp/>std::ios::out<sp/>|<sp/>std::ios::trunc);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>filterFile.good())<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>BLProfStats::MakeFilterFile:<sp/><sp/>cannot<sp/>open<sp/>file:<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ffname<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>filterFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;__IncludeAll__&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>filterFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;//__IncludeNone__&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>std::string&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>regionNumbers.begin();<sp/>it<sp/>!=<sp/>regionNumbers.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filterFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>filterFile.close();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1aa386bd7cfe5d670537ff28fc6abd818a" kindref="member">BLProfStats::SetFilter</ref>(<ref refid="classBLProfStats_1ababb4629f7a4f662fdd590b9e857f2f4" kindref="member">BLProfStats::FilterStatus</ref><sp/>fs,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ffname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rnumber)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fs<sp/>==<sp/>BLProfStats::FilterStatus::ON)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>includeSet.insert(rnumber);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fs<sp/>==<sp/><ref refid="AMReX__TagBox_8cpp_1abc1eab952af4119e0dd12a9cd006daa3" kindref="member">BLProfStats::FilterStatus::OFF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>excludeSet.insert(rnumber);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1aa386bd7cfe5d670537ff28fc6abd818a" kindref="member">BLProfStats::SetFilter</ref>(<ref refid="classBLProfStats_1ababb4629f7a4f662fdd590b9e857f2f4" kindref="member">BLProfStats::FilterStatus</ref><sp/>fs)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fs<sp/>==<sp/>BLProfStats::FilterStatus::INCLUDEALL)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>bDefaultInclude<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fs<sp/>==<sp/>BLProfStats::FilterStatus::INCLUDENONE)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>bDefaultInclude<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>BLProfStats::SetFilter(fs):<sp/><sp/>bad<sp/>fs:<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fs<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a863b8a020da35bf11daf6c34ea5b55a0" kindref="member">BLProfStats::SetFilterTimeRanges</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::list&lt;TimeRange&gt;<sp/>&gt;<sp/>&amp;ftr)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>filterTimeRanges<sp/>=<sp/>ftr;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a07e2bf128ca1e78559870ef621c6738c" kindref="member">BLProfStats::InitFilterTimeRanges</ref>()<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;BLProfStats::InitFilterTimeRanges()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>includeSet<sp/><sp/>excludeSet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>filterTimeRanges.resize(dataNProcs);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>filterTimeRanges.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>filterTimeRanges[p].clear();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bDefaultInclude)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>include<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>filterTimeRanges.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filterTimeRanges[p].push_back(TimeRange(minRegionTime,<sp/>maxRegionTime));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>include<sp/>none</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>iit;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iit<sp/>=<sp/>includeSet.begin();<sp/>iit<sp/>!=<sp/>includeSet.end();<sp/>++iit)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regNum(*iit);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>regionTimeRanges.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r<sp/>&lt;<sp/>regionTimeRanges[p][regNum].size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeRange<sp/>&amp;trange<sp/>=<sp/>regionTimeRanges[p][regNum][r];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;_here<sp/>include:<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>trange<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddPiece(filterTimeRanges[p],<sp/>trange);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iit<sp/>=<sp/>excludeSet.begin();<sp/>iit<sp/>!=<sp/>excludeSet.end();<sp/>++iit)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regNum(*iit);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>regionTimeRanges.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r<sp/>&lt;<sp/>regionTimeRanges[p][regNum].size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeRange<sp/>&amp;trange<sp/>=<sp/>regionTimeRanges[p][regNum][r];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;_here<sp/>exclude:<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>trange<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RemovePiece(filterTimeRanges[p],<sp/>trange);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>bTimeRangeInitialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">BLProfStats::InTimeRange</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc,<sp/>Real<sp/>calltime)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(<sp/>!<sp/>bTimeRangeInitialized)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filterTimeRanges.empty())<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count(0);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count++<sp/>&lt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>BLProfStats::InTimeRange:<sp/><sp/>init<sp/>true<sp/>but<sp/>range<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>std::list&lt;TimeRange&gt;::iterator<sp/>iit;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iit<sp/>=<sp/>filterTimeRanges[proc].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();<sp/>iit<sp/>!=<sp/>filterTimeRanges[proc].end();<sp/>++iit)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeRange<sp/>&amp;trange<sp/>=<sp/>(*iit);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(trange.startTime<sp/>&lt;=<sp/>calltime<sp/>&amp;&amp;<sp/>trange.stopTime<sp/>&gt;=<sp/>calltime)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">std::ostream<sp/>&amp;<ref refid="namespaceamrex_1ab1b1f90152c1c5636d634b475056389e" kindref="member">operator&lt;&lt; </ref>(std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBLProfStats_1_1TimeRange" kindref="compound">BLProfStats::TimeRange</ref><sp/>&amp;tr)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tr.<ref refid="structBLProfStats_1_1TimeRange_1acc1a0426cbe4ab8ec7294472aacc285e" kindref="member">startTime</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tr.<ref refid="structBLProfStats_1_1TimeRange_1a69fd0fb94f6216e039668dd5280a9bb0" kindref="member">stopTime</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a90d25f083cc1467c695b5bc6793a86b0" kindref="member">BLProfStats::AddFunctionName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fname)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>std::size_t<sp/>found;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>std::string<sp/>fnameNQ(fname.substr(1,<sp/>fname.length()<sp/>-<sp/>2));<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>remove<sp/>quotes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((found<sp/>=<sp/>fnameNQ.find(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>std::string::npos)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>replace<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>fnameNQ.replace(found,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>blpFNames.push_back(fnameNQ);</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a34dbaa29f765d4ff500930aca6900d45" kindref="member">BLProfStats::InitBLProfDataBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seekpos)</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>streamindex;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/><sp/>blpDataFileNames.find(filename);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/>blpDataFileNames.end())<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>streamindex<sp/>=<sp/>blpDataFileNames.size();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>blpDataFileNames.insert(std::pair&lt;std::string,<sp/>int&gt;(filename,<sp/>streamindex));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>streamindex<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bInitDataBlocks)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>currentProc<sp/>=<sp/>proc;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>blpDataBlocks.push_back(BLPDataBlock(proc,<sp/>filename,<sp/>seekpos,<sp/>streamindex));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>currentDataBlock<sp/>=<sp/>blpDataBlocks.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a8d64e6e8f6ee3fe3f22896536ca5e05a" kindref="member">BLProfStats::OpenAllStreams</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;dirname)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;BLProfStats::OpenAllStreams&quot;</highlight><highlight class="normal">,<sp/>blpsopenallstreams);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>blpDataStreams.resize(blpDataFileNames.size());</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsIndex(0);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>blpDataFileNames.begin();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>blpDataFileNames.end();<sp/>++it)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>fullFileName(dirname<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>it-&gt;first);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>blpDataStreams[dsIndex]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::ifstream(fullFileName.c_str());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>++dsIndex;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(blpsopenallstreams);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a7b427cef2051f4d0bd82f8ecfd172d93" kindref="member">BLProfStats::CloseAllStreams</ref>()<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;BLProfStats::CloseAllStreams&quot;</highlight><highlight class="normal">,<sp/>blpsclosellstreams);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>blpDataStreams.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>blpDataStreams[i]-&gt;close();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>blpDataStreams[i];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(blpsclosellstreams);</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a9e8341b111020e68b25b6ac7e884de18" kindref="member">BLProfStats::CheckData</ref>()<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncs(blpFNames.size());</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSizeNC(nFuncs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSizeTT(nFuncs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Real));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dataSizeNC<sp/>+<sp/>dataSizeTT);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>long&gt;<sp/>maxSeekPerFile;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>blpDataBlocks.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>BLPDataBlock<sp/>&amp;dBlock<sp/>=<sp/>blpDataBlocks[idb];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dbSP(dBlock.seekpos);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>fullFileName(dirName<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>dBlock.fileName);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSeekPerFile[fullFileName]<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(maxSeekPerFile[fullFileName],<sp/>dbSP);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bad(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>diff(-1);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>long&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>maxSeekPerFile.begin();<sp/>it<sp/>!=<sp/>maxSeekPerFile.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>it-&gt;second<sp/>+<sp/>dataSize<sp/>-<sp/><ref refid="namespaceamrex_1a393accb69353384e42f45a34cb386180" kindref="member">FileSize</ref>(it-&gt;first);<sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(diff<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bad<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;fName<sp/>maxSeek<sp/>fSize<sp/>diff<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1a393accb69353384e42f45a34cb386180" kindref="member">FileSize</ref>(it-&gt;first)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diff<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bad)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>BLProfStats::CheckData:<sp/><sp/>data<sp/>and<sp/>file<sp/>size<sp/>mismatch.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">BLProfStats::ReadBlock</ref>(BLPDataBlock<sp/>&amp;dBlock)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFuncs(blpFNames.size());</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.nCalls.size()<sp/>!=<sp/>nFuncs)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.nCalls.resize(nFuncs);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.totalTime.size()<sp/>!=<sp/>nFuncs)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.totalTime.resize(nFuncs);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>std::string<sp/>fullFileName(dirName<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>dBlock.fileName);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>instr(fullFileName.c_str());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSizeNC(nFuncs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSizeTT(nFuncs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Real));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>instr.seekg(dBlock.seekpos);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>instr.read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.nCalls.dataPtr()),<sp/>dataSizeNC);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>instr.read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.totalTime.dataPtr()),<sp/>dataSizeTT);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(instr.fail())<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;********<sp/>Error::ReadBlock:<sp/><sp/>instr<sp/>failed:<sp/>fsize<sp/>seekpos<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1a393accb69353384e42f45a34cb386180" kindref="member">FileSize</ref>(fullFileName)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>instr.tellg()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>instr.close();</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a9689a1779e9f7008ced946ab6ff8fa41" kindref="member">BLProfStats::ReadBlockNoOpen</ref>(BLPDataBlock<sp/>&amp;dBlock)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;not<sp/>implemented<sp/>yet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">BLProfStats::ClearBlock</ref>(BLPDataBlock<sp/>&amp;dBlock)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>dBlock.nCalls.clear();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref>().<ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">swap</ref>(dBlock.nCalls);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>dBlock.totalTime.clear();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref>().<ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">swap</ref>(dBlock.totalTime);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1ac538df4b2ca012677d2f4c63a7a17eb6" kindref="member">BLProfStats::CollectFuncStats</ref>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;FuncStat&gt;</ref><sp/>&gt;<sp/>&amp;funcStats)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>funcStats.resize(blpFNames.size());<sp/><sp/></highlight><highlight class="comment">//<sp/>[fnum][proc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>funcStats.size();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>funcStats[n].resize(dataNProcs);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>blpDataBlocks.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>BLPDataBlock<sp/>&amp;dBlock<sp/>=<sp/>blpDataBlocks[idb];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadBlock(dBlock);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;nc<sp/>=<sp/>dBlock.nCalls;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>&amp;tt<sp/>=<sp/>dBlock.totalTime;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnum(0);<sp/>fnum<sp/>&lt;<sp/>blpFNames.size();<sp/>++fnum)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FuncStat<sp/>&amp;fs<sp/>=<sp/>funcStats[fnum][dBlock.proc];</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fs.nCalls<sp/>=<sp/>nc[fnum];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fs.totalTime<sp/>=<sp/>tt[fnum];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearBlock(dBlock);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBLProfStats_1a122f7a15129ff8ed33a877f5115d083f" kindref="member">BLProfStats::WriteSummary</ref>(std::ostream<sp/>&amp;ios,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bwriteavg,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>graphTopPct)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;FuncStat&gt;</ref><sp/>&gt;<sp/>funcStats;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>CollectFuncStats(funcStats);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>Real<sp/>calcRunTime(calcEndTime);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>BLProfiler::SetRunTime(calcRunTime);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>mProfStats;<sp/><sp/></highlight><highlight class="comment">//<sp/>[fname,<sp/>pstats]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1abf61acca5a480f47841ff87d3fc31536" kindref="member">CollectMProfStats</ref>(mProfStats,<sp/>funcStats,<sp/>blpFNames,<sp/>calcRunTime,<sp/>whichProc);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(graphTopPct)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a171596246077e8bb3d38d0e3a513c481" kindref="member">GraphTopPct</ref>(mProfStats,<sp/>funcStats,<sp/>blpFNames,<sp/>calcRunTime,<sp/>dataNProcs,<sp/>gPercent);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_TRACE_PROFILING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1aaae16c4ac3245574456ee8dc48c261be" kindref="member">MakeFuncPctTimesMF</ref>(funcStats,<sp/>blpFNames,<sp/>mProfStats,<sp/>calcRunTime,<sp/>dataNProcs);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;<sp/>fnameNumbers;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>vCallStatsAllOneProc;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeAvg(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>writeInclusive(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>BLProfilerUtils::WriteStats(ios,<sp/>mProfStats,<sp/>fnameNumbers,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vCallStatsAllOneProc,<sp/>writeAvg,<sp/>writeInclusive);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfStats.cpp"/>
  </compounddef>
</doxygen>
