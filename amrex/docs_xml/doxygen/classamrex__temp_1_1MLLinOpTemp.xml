<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex__temp_1_1MLLinOpTemp" kind="class" language="C++" prot="public">
    <compoundname>amrex_temp::MLLinOpTemp</compoundname>
    <basecompoundref refid="classamrex_1_1MLLinOp" prot="public" virt="non-virtual">amrex::MLLinOp</basecompoundref>
    <includes refid="AMReX__MLLinOp__temp_8H" local="no">AMReX_MLLinOp_temp.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex__temp_1_1MLLinOpTemp_1a41a60bbc82f9f1dc18bdba79b51d4db0" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">amrex::Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref>, 3 &gt;</type>
        <definition>using amrex_temp::MLLinOpTemp::Container =  amrex::Array&lt;amrex::MultiFab,3&gt;</definition>
        <argsstring></argsstring>
        <name>Container</name>
        <briefdescription>
<para>In this example, there are 3 edge based MultiFabs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="17" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1ac2b799a86c400c927ca109155895b4e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex_temp::MLLinOpTemp::MLLinOpTemp</definition>
        <argsstring>()</argsstring>
        <name>MLLinOpTemp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="19" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a54612704b2db4ad1eebd3902fa58ba32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual amrex_temp::MLLinOpTemp::~MLLinOpTemp</definition>
        <argsstring>()</argsstring>
        <name>~MLLinOpTemp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="21" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1ac9e10710e85adcfa11142c374413aa7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex_temp::MLLinOpTemp::MLLinOpTemp</definition>
        <argsstring>(const MLLinOpTemp &amp;)=delete</argsstring>
        <name>MLLinOpTemp</name>
        <param>
          <type>const <ref refid="classamrex__temp_1_1MLLinOpTemp" kindref="compound">MLLinOpTemp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="23" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a5f7ebfac589ebd6b52b46c8419750cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex_temp::MLLinOpTemp::MLLinOpTemp</definition>
        <argsstring>(MLLinOpTemp &amp;&amp;)=delete</argsstring>
        <name>MLLinOpTemp</name>
        <param>
          <type><ref refid="classamrex__temp_1_1MLLinOpTemp" kindref="compound">MLLinOpTemp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a1e360436849191201c67834411ddffcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex__temp_1_1MLLinOpTemp" kindref="compound">MLLinOpTemp</ref> &amp;</type>
        <definition>MLLinOpTemp&amp; amrex_temp::MLLinOpTemp::operator=</definition>
        <argsstring>(const MLLinOpTemp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex__temp_1_1MLLinOpTemp" kindref="compound">MLLinOpTemp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="25" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1aa71460da65ff812fc93bd6859ad48981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex__temp_1_1MLLinOpTemp" kindref="compound">MLLinOpTemp</ref> &amp;</type>
        <definition>MLLinOpTemp&amp; amrex_temp::MLLinOpTemp::operator=</definition>
        <argsstring>(MLLinOpTemp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex__temp_1_1MLLinOpTemp" kindref="compound">MLLinOpTemp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="26" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a7592d241f40ad4a89f923078ca5e3c00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex_temp::MLLinOpTemp::MLLinOpTemp</definition>
        <argsstring>(const amrex::Vector&lt; amrex::Geometry &gt; &amp;a_geom, const amrex::Vector&lt; amrex::BoxArray &gt; &amp;a_grids, const amrex::Vector&lt; amrex::DistributionMapping &gt; &amp;a_dmap, const amrex::LPInfo &amp;a_info=amrex::LPInfo(), const amrex::Vector&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>MLLinOpTemp</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">amrex::BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">amrex::DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">amrex::LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">amrex::LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">amrex::FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">amrex::FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="28" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1ab8b61d429176a153302373f8c80c9c13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_temp::MLLinOpTemp::define</definition>
        <argsstring>(const amrex::Vector&lt; amrex::Geometry &gt; &amp;a_geom, const amrex::Vector&lt; amrex::BoxArray &gt; &amp;a_grids, const amrex::Vector&lt; amrex::DistributionMapping &gt; &amp;a_dmap, const amrex::LPInfo &amp;a_info=amrex::LPInfo(), const amrex::Vector&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">amrex::BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">amrex::DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">amrex::LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">amrex::LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">amrex::FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">amrex::FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="37" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="37" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a75cb44a29909aa245fc41da536a69775" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" kindref="member">amrex::BottomSolver</ref></type>
        <definition>virtual amrex::BottomSolver amrex_temp::MLLinOpTemp::getDefaultBottomSolver</definition>
        <argsstring>() const override</argsstring>
        <name>getDefaultBottomSolver</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b">getDefaultBottomSolver</reimplements>
        <briefdescription>
<para>Return the default solver at the bottom of MG cycles. By default, MLLinOp uses a BiCGStab solver implemented in AMReX::MLCGSolver. However, it only supports a single MultiFab. Since our data type is different, we use a smoother instead. In the future we can try to generalize MLCGSolver. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="53" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a983f8f4c9e12cc6da2ff0cfeb0129b38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref></type>
        <definition>virtual amrex::Any amrex_temp::MLLinOpTemp::AnyMake</definition>
        <argsstring>(int amrlev, int mglev, amrex::IntVect const &amp;ng) const override</argsstring>
        <name>AnyMake</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ad40e38b311ffc4f58f39b1ada8619294">AnyMake</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Make data container (e.g., MultiFabs stored in Any) for given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level. Note that the lowest level is always 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level. Note that mglev+1 is one level coarser than mglev. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="64" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="64" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1abe1f030de398704261c228eaaa8f6943" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref></type>
        <definition>virtual amrex::Any amrex_temp::MLLinOpTemp::AnyMakeCoarseMG</definition>
        <argsstring>(int amrlev, int mglev, amrex::IntVect const &amp;ng) const override</argsstring>
        <name>AnyMakeCoarseMG</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a4e8d808ba57a2331615f1e256cf85e4e">AnyMakeCoarseMG</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Make data container with coarsened BoxArray and DistributionMapping of the give MG level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level. Note that the lowest level is always 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level. The coarser level is mglev+1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="85" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="85" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1ab6c24334926ec7f7329f94c362f6bc5d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref></type>
        <definition>virtual amrex::Any amrex_temp::MLLinOpTemp::AnyMakeCoarseAmr</definition>
        <argsstring>(int famrlev, amrex::IntVect const &amp;ng) const override</argsstring>
        <name>AnyMakeCoarseAmr</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a9f7fcc41c14f77079d509e5eb85cbfe9">AnyMakeCoarseAmr</reimplements>
        <param>
          <type>int</type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Make data container with coarsened BoxArray and DistributionMapping of the given AMR level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>famrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level. The coarser AMR level is famrlev-1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="105" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="105" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a158eb5a2983b02171137df48df4b8ed9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref></type>
        <definition>virtual amrex::Any amrex_temp::MLLinOpTemp::AnyMakeAlias</definition>
        <argsstring>(amrex::Any const &amp;a) const override</argsstring>
        <name>AnyMakeAlias</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a768ff0c44cdf30e07b0c9ddb0a30ffef">AnyMakeAlias</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Make an alias of the given Any without deepcopying. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>an Any object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="123" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="123" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a751cc742613140af9bb0a023f6505a4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref></type>
        <definition>virtual amrex::IntVect amrex_temp::MLLinOpTemp::AnyGrowVect</definition>
        <argsstring>(amrex::Any const &amp;a) const override</argsstring>
        <name>AnyGrowVect</name>
        <reimplements refid="classamrex_1_1MLLinOp_1aca0a26169b857efbc1bd1e424e787886">AnyGrowVect</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Retuen the number of ghost cells in the given Any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>an Any object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="136" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a77b0cc8dd4bcadbad869465e6faebf23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyCopy</definition>
        <argsstring>(amrex::Any &amp;dst, amrex::Any const &amp;src, amrex::IntVect const &amp;ng) const override</argsstring>
        <name>AnyCopy</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a0bcab258419204e22344e10166971f25">AnyCopy</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Copy data from source Any to destination Any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination Any. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source Any. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells included in the operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="149" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="149" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1ae6f9908fe5ae9dc23f2aeb2c88310dd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyAdd</definition>
        <argsstring>(amrex::Any &amp;dst, amrex::Any const &amp;src, amrex::IntVect const &amp;ng) const override</argsstring>
        <name>AnyAdd</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a798b4eaeb4638b01352daba1ce7a5e44">AnyAdd</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Add data from source Any to destination Any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination Any. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source Any. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells included in the operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="165" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1abeb4b960dcd100be602581072784292c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnySetToZero</definition>
        <argsstring>(amrex::Any &amp;a) const override</argsstring>
        <name>AnySetToZero</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a8cd14b1829a52c3f9eedfc975274242d">AnySetToZero</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Set the given Any to zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>an Any object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="179" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="179" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1afb0c384afc863fe5196db3f79fdab669" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnySetBndryToZero</definition>
        <argsstring>(amrex::Any &amp;a) const override</argsstring>
        <name>AnySetBndryToZero</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ad28403dda85895d123abdaf36365cf29">AnySetBndryToZero</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Set boundary (i.e., ghost cells) the given Any to zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>an Any object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="192" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="192" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a72f511d2ea81051a7429d342d4bd2277" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyParallelCopy</definition>
        <argsstring>(amrex::Any &amp;dst, amrex::Any const &amp;src, amrex::IntVect const &amp;src_nghost, amrex::IntVect const &amp;dst_nghost, amrex::Periodicity const &amp;period=amrex::Periodicity::NonPeriodic()) const override</argsstring>
        <name>AnyParallelCopy</name>
        <reimplements refid="classamrex_1_1MLLinOp_1acfd9e2b3acdcd9494d321c020b6ce98f">AnyParallelCopy</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> const &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> const &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">amrex::Periodicity</ref> const &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">amrex::Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>ParallelCopy from source Any ot destination Any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination Any. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source Any. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells in the source included in the operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells in the destination included in the operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodicity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="224" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="224" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a86f199a4c79aec7951dd2df979d8f8d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>amrex::Real</type>
        <definition>virtual amrex::Real amrex_temp::MLLinOpTemp::AnyNormInf</definition>
        <argsstring>(amrex::Any &amp;a) const override</argsstring>
        <name>AnyNormInf</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a47701945960629a5fab242da32add560">AnyNormInf</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Return the infinity norm of the given Any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>an Any object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="243" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="243" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a94ae8f1860c2181aecda4e989685ff1a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>amrex::Real</type>
        <definition>virtual amrex::Real amrex_temp::MLLinOpTemp::AnyNormInfMask</definition>
        <argsstring>(int amrlev, amrex::Any const &amp;a, bool local) const override</argsstring>
        <name>AnyNormInfMask</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a64f4ec813a013e966d0d9d8fb87cdbb5">AnyNormInfMask</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>Return the infinity norm of the masked region of the given Any. </para>
        </briefdescription>
        <detaileddescription>
<para>For a composite solve with multiple AMR levels, the region covered by finer AMR levels are not included in the operation.</para>
<para>\parame amrlev AMR level. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>an Any object. \parame local determines if the reduction is local (i.e., no MPI communication) or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="265" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="265" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1aab95bd2cce19cdb0aa9b7a2d3529971d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnySolutionResidual</definition>
        <argsstring>(int amrlev, amrex::Any &amp;resid, amrex::Any &amp;x, amrex::Any const &amp;b, amrex::Any const *crse_bcdata=nullptr) override</argsstring>
        <name>AnySolutionResidual</name>
        <reimplements refid="classamrex_1_1MLLinOp_1acd3c616a0a54d9367a924b3779108f8b">AnySolutionResidual</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute residual of the original form, r = b - Ax. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the solution x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the RHS b </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_bcdata</parametername>
</parameternamelist>
<parameterdescription>
<para>provides Dirichlet BC at AMR coarse/fine interface. It&apos;s a nullptr for single level solve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="283" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="283" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1aa317bc0fc53929cb24484a7e4b5ebbf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyCorrectionResidual</definition>
        <argsstring>(int amrlev, int mglev, amrex::Any &amp;resid, amrex::Any &amp;x, const amrex::Any &amp;b, MLLinOp::BCMode bc_mode, const amrex::Any *crse_bcdata=nullptr) override</argsstring>
        <name>AnyCorrectionResidual</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>MLLinOp::BCMode</type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute residual of the residual correction form, r = b - Ax. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>residual of the residual correction form. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the correction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the RHS for the residual correction form (i.e., the residual of the original form. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>is either Homogeneous or Inhomogeneous. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_bcdata</parametername>
</parameternamelist>
<parameterdescription>
<para>provides inhomogenous Dirichlet BC at AMR coarse/fine interface. It&apos;s ignored for homogeneous Dirichlet BC. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="301" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="301" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a3ebc058ff69e971128ba0295e5a8968c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyReflux</definition>
        <argsstring>(int crse_amrlev, amrex::Any &amp;res, const amrex::Any &amp;crse_sol, const amrex::Any &amp;crse_rhs, amrex::Any &amp;fine_res, amrex::Any &amp;fine_sol, const amrex::Any &amp;fine_rhs) override</argsstring>
        <name>AnyReflux</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a316bc42d433c2d77a6110ac5632324f6">AnyReflux</reimplements>
        <param>
          <type>int</type>
          <declname>crse_amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine_res</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
<para>Reflux. </para>
        </briefdescription>
        <detaileddescription>
<para>This modifies the coarse level residual at the coarse/fine interface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse_amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse AMR level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level residual. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level x. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level b. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_res</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level residual. This may not be needed depending on the coarse/fine stencil. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level x. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level b. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="322" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="322" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a27bbbe363b028cf1083493615db6bb64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyAvgDownResAmr</definition>
        <argsstring>(int clev, amrex::Any &amp;cres, amrex::Any const &amp;fres) const override</argsstring>
        <name>AnyAvgDownResAmr</name>
        <reimplements refid="classamrex_1_1MLLinOp_1abea292e743cd597afb9543a76261990b">AnyAvgDownResAmr</reimplements>
        <param>
          <type>int</type>
          <declname>clev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>cres</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>fres</declname>
        </param>
        <briefdescription>
<para>Average down residual from fine to coarse AMR level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse ARR level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cres</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level residual. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fres</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level residual. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="338" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="338" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1adef89de45ee6a9225f2908b93b0f8182" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyAvgDownResMG</definition>
        <argsstring>(int clev, amrex::Any &amp;cres, amrex::Any const &amp;fres) const override</argsstring>
        <name>AnyAvgDownResMG</name>
        <reimplements refid="classamrex_1_1MLLinOp_1afbe1037430dd65ce6f5f90ff47fa3abf">AnyAvgDownResMG</reimplements>
        <param>
          <type>int</type>
          <declname>clev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>cres</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> const &amp;</type>
          <declname>fres</declname>
        </param>
        <briefdescription>
<para>Average down residual from fine to coarse MG level. </para>
        </briefdescription>
        <detaileddescription>
<para>This is only needed for MG F-cycle, and we don&apos;t need to implement this for V-cycle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse MG level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cres</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level residual. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fres</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level residual. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="355" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="355" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a4a01e4b7965f666bc840bf2619083f8a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnySmooth</definition>
        <argsstring>(int amrlev, int mglev, amrex::Any &amp;sol, const amrex::Any &amp;rhs, bool skip_fillboundary=false) const override</argsstring>
        <name>AnySmooth</name>
        <reimplements refid="classamrex_1_1MLLinOp_1af6f520cd860d3be048f5bf04a219aa85">AnySmooth</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Smooth the given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level. Note that the lowest level is always 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level. Note that mglev+1 is one level coarser than mglev. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>b </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip_fillboundary</parametername>
</parameternamelist>
<parameterdescription>
<para>a flag for if we need to fill ghost cells in this function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="370" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="370" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1aa54b9e9ee9067c70503cbd3f33cadfaa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyRestriction</definition>
        <argsstring>(int amrlev, int cmglev, amrex::Any &amp;crse, amrex::Any &amp;fine) const override</argsstring>
        <name>AnyRestriction</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ae135c931d3ceb31f1d21f06253e73658">AnyRestriction</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
<para>Restriction from fine to coarse MG level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse MG level. The fine MG level is cmglev-1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine data. This is not const&amp; because we may need to fill its ghost cells. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="385" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="385" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1ad0aa77a6b8f70e07fc4a0c404639714d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyInterpolationMG</definition>
        <argsstring>(int amrlev, int fmglev, amrex::Any &amp;fine, const amrex::Any &amp;crse) const override</argsstring>
        <name>AnyInterpolationMG</name>
        <reimplements refid="classamrex_1_1MLLinOp_1adbdf9aaf1ccc800c62487b24f336b502">AnyInterpolationMG</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
<para>Add interpolated coarse data onto the fine MG level. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that it&apos;s an ADD operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level. The coarse MG level is fmglev+1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse MG level data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="401" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="401" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a5a150b34eca280af42f2532e246c9457" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyInterpAssignMG</definition>
        <argsstring>(int amrlev, int fmglev, amrex::Any &amp;fine, amrex::Any &amp;crse) const override</argsstring>
        <name>AnyInterpAssignMG</name>
        <reimplements refid="classamrex_1_1MLLinOp_1aebb9d5705330c057bdb1bd8800a6f430">AnyInterpAssignMG</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
<para>Assign (i.e., copy) interpolated coarse data onto the fine MG level. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that it&apos;s an ASSIGN operation. This is used in MG F-cycle, and does not need to be implemented for V-cycle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level. The coarse MG level is fmglev+1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse MG level data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="418" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="418" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a645d14435020ae3e48d1af3cc01fc004" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyInterpolationAmr</definition>
        <argsstring>(int famrlev, amrex::Any &amp;fine, const amrex::Any &amp;crse, amrex::IntVect const &amp;) const override</argsstring>
        <name>AnyInterpolationAmr</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ac0a74a280b8321de86dbf25297ed95ef">AnyInterpolationAmr</reimplements>
        <param>
          <type>int</type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Interpolate data from coarse to fine AMR level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>famrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine AMR level. The coarse AMR level is famrlev-1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>data on fine AMR level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>data on coarse AMR level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="431" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="431" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a09f00880ccef6be45584ea0c1cd3ed66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyAverageDownSolutionRHS</definition>
        <argsstring>(int camrlev, amrex::Any &amp;crse_sol, amrex::Any &amp;crse_rhs, const amrex::Any &amp;fine_sol, const amrex::Any &amp;fine_rhs) override</argsstring>
        <name>AnyAverageDownSolutionRHS</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a7053d4e8db13b9bc6aa1505228e42b82">AnyAverageDownSolutionRHS</reimplements>
        <param>
          <type>int</type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
<para>Average down x and b from fine to coarse AMR level. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called before V-cycle to make data on AMR levels consistent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse AMR level. The fine level is camrlev+1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>x on coarse level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>b on coarse level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>x on fine level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>b on fine level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="450" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="450" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1ac44d0d0ad9e98fd7cc8d718111c70de9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::AnyAverageDownAndSync</definition>
        <argsstring>(amrex::Vector&lt; amrex::Any &gt; &amp;sol) const override</argsstring>
        <name>AnyAverageDownAndSync</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a19f2a99b89fdb222ff2c006c3e623625">AnyAverageDownAndSync</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1Any" kindref="compound">amrex::Any</ref> &gt; &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
<para>Average down and synchronize AMR data. </para>
        </briefdescription>
        <detaileddescription>
<para>Synchronize the data on each level. That is the nodal data in the same MultiFab needs to be synchronized. This function also needs to average down the data from fine to coarse AMR levels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>data on all AMR levels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="467" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="467" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classamrex__temp_1_1MLLinOpTemp_1a1ed54df7b2361419471f1650c90a4ef1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex_temp::MLLinOpTemp::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683">prepareForSolve</reimplements>
        <briefdescription>
<para>Prepare the solver for MG cycle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="477" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="477" bodyend="480"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex_temp::MLLinOpTemp</label>
        <link refid="classamrex__temp_1_1MLLinOpTemp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="64">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="65" relation="public-inheritance">
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="36" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="54">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="70" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>K</label>
      </node>
      <node id="55">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="12">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="12" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="25">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="26" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex_temp::MLLinOpTemp</label>
        <link refid="classamrex__temp_1_1MLLinOpTemp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="9">
        <label>Real</label>
      </node>
      <node id="30">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="61" relation="public-inheritance">
        </childnode>
      </node>
      <node id="78">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="79" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="66" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="12" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="83">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="18" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="19" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="67" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
      <node id="57">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="12" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="22" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="33">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="12" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="59" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="50" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>std::unique_ptr&lt; amrex::MLLinOp::CommContainer &gt;</label>
        <childnode refid="87" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="50">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="51" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="63" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="8" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="80">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
      </node>
      <node id="61">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="46" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="88" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="19" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="12" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="41" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="72" relation="public-inheritance">
        </childnode>
      </node>
      <node id="88">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="51">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="27" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>amrex::MLLinOp::CommContainer</label>
        <link refid="structamrex_1_1MLLinOp_1_1CommContainer"/>
      </node>
      <node id="39">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="41">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="42" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="31">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="32" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="85">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="15">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="47">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="48" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="33" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="22" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="81">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="30" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_temp.H" bodystart="11" bodyend="481"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1ae6f9908fe5ae9dc23f2aeb2c88310dd3" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyAdd</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1ac44d0d0ad9e98fd7cc8d718111c70de9" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyAverageDownAndSync</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a09f00880ccef6be45584ea0c1cd3ed66" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyAverageDownSolutionRHS</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a27bbbe363b028cf1083493615db6bb64" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyAvgDownResAmr</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1adef89de45ee6a9225f2908b93b0f8182" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyAvgDownResMG</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a77b0cc8dd4bcadbad869465e6faebf23" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyCopy</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1aa317bc0fc53929cb24484a7e4b5ebbf9" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyCorrectionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0a60ca7809271135f39ea4294f3890ca" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyCorrectionResidual</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a751cc742613140af9bb0a023f6505a4f" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyGrowVect</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a5a150b34eca280af42f2532e246c9457" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyInterpAssignMG</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a645d14435020ae3e48d1af3cc01fc004" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyInterpolationAmr</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1ad0aa77a6b8f70e07fc4a0c404639714d" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyInterpolationMG</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a983f8f4c9e12cc6da2ff0cfeb0129b38" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyMake</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a158eb5a2983b02171137df48df4b8ed9" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyMakeAlias</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1ab6c24334926ec7f7329f94c362f6bc5d" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyMakeCoarseAmr</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1abe1f030de398704261c228eaaa8f6943" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyMakeCoarseMG</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a86f199a4c79aec7951dd2df979d8f8d5" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyNormInf</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a94ae8f1860c2181aecda4e989685ff1a" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyNormInfMask</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a72f511d2ea81051a7429d342d4bd2277" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyParallelCopy</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a3ebc058ff69e971128ba0295e5a8968c" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyReflux</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1aa54b9e9ee9067c70503cbd3f33cadfaa" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnyRestriction</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1afb0c384afc863fe5196db3f79fdab669" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnySetBndryToZero</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1abeb4b960dcd100be602581072784292c" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnySetToZero</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a4a01e4b7965f666bc840bf2619083f8a" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnySmooth</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1aab95bd2cce19cdb0aa9b7a2d3529971d" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>AnySolutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a268158a66466e7fec51ef1240689b687" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6f31b79968da09d7a713f6581fe8e3dd" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8e31761ce1106732dd8db8e72894d1bd" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a15c57a1dbcd04052f52b9ca0701d603d" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9b5321e037b2534811f295b767c58398" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a91cf65a68d76e83272098df8829e0dca" prot="private" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1af37726771c106055867bf88ade1f65d7" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae3dae2320c8c9e64274e8d41131187dc" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dfae9fa431aefebde79a4d5aff2ac5e" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab6f46c05df22dbda4d2da6e198f98344" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>compGrad</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a41a60bbc82f9f1dc18bdba79b51d4db0" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>Container</name></member>
      <member refid="classamrex_1_1MLLinOp_1aff1b5ba7a45c7e320550f99f88984301" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1cc4a740107bec84bb7bac80b4a34f53" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>correctionResidual</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1ab8b61d429176a153302373f8c80c9c13" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa0ba245918a01db26fdc8289b4e4ed29" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex_temp::MLLinOpTemp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae772fff45d8190c7c2c694931858b834" prot="private" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9288d1d0123d4e3d8097fd568a706a15" prot="private" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9437bf41a67df3f776428c41f284a022" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa429808b0b8d8a9efcf3380620f6263a" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad16cb6cbf7bcb78cc0d0af59611ae00a" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>get_d1</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a75cb44a29909aa245fc41da536a69775" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a16bfe483ac9088f65f81d12166adecb4" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac495d1d722cbb68c31af46b2e860fa9f" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a525b102eb592e2b44a864c62e64e9566" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1aea3bbedd2e663d88f153e88ce06a59c3" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOp_1a21d5ab7f7712cf681083ed6763399132" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d7b1e0e21fd61d71bbe342df0f1a5d4" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4910f22e3c63b572ef364cdf8177e392" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4b2636d8115debeeefa38b4b34186ecc" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac313a2de49bd67c23fad23d5c4045e70" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af0793198f529f4474139fa9366b2e1aa" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac055c06cab956b521c8b66bed595ef79" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLLinOp_1a250ef9650a08f752045410345cd3a408" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae5110978eac9ec01689bec96866ad8d5" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLLinOp_1af8de1257ddde2a40a49011ef34d68100" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLLinOp_1abdb84e18739d3e95d406166acb56a9a3" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7ef6c8434223ac6e052359cd4f27fbe6" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a94066c5e255464485d5af0d1f174e1c2" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec9b82494ef69731d10e9b293b64fdd8" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1af653a69980f01d30f178caede72b3843" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac31926ba837b440475e0715a8fa4b87b" prot="protected" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ce310367908f9f10842859e92c5fd3d" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a63aaab910ae5e9c6bd653804eb1c8148" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>MFNormInf</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>MLLinOp</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1ac2b799a86c400c927ca109155895b4e0" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>MLLinOpTemp</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1ac9e10710e85adcfa11142c374413aa7c" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>MLLinOpTemp</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a5f7ebfac589ebd6b52b46c8419750cc9" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>MLLinOpTemp</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a7592d241f40ad4a89f923078ca5e3c00" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>MLLinOpTemp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a210b4c125747c6a4a6f171dcff941579" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a86207e36440100ba012296cb95b51713" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>normalize</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a1e360436849191201c67834411ddffcc" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>operator=</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1aa71460da65ff812fc93bd6859ad48981" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex_temp::MLLinOpTemp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex_temp::MLLinOpTemp</scope><name>operator=</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a1ed54df7b2361419471f1650c90a4ef1" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab1f098dbddd9ad2068278fc3a51a7b56" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>remapNeighborhoods</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae80c21d0f29e6878cf478dfeef8dd4f2" prot="protected" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLLinOp_1afd006e1aba81687f29e30e7a26bcba04" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1af32f494664d6666bdd94d92998f4b5f0" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a04008d16768c19836e3ea78add024630" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLLinOp_1af39026c5bf9ff3a7826a8804526ba9a9" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a10c2c2bf1622b6359e830155d7b5352c" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1a638713cd5f8bf8cb703eca1ed94da5dc" prot="protected" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9d05943073d4f01c9a6d03c2ec9f0602" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1a01c4cbbbf82530a8d3523d07ad3a9e9f" prot="protected" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af73a5461ea6c841bc1293a1c0a9d91a3" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a806af8f6ea146fdf513e1cc82305c822" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLLinOp_1adeb9c046c943c797ebe796a72ad0c895" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>~MLLinOp</name></member>
      <member refid="classamrex__temp_1_1MLLinOpTemp_1a54612704b2db4ad1eebd3902fa58ba32" prot="public" virt="virtual"><scope>amrex_temp::MLLinOpTemp</scope><name>~MLLinOpTemp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
