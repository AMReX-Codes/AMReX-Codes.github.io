<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1DefaultFabFactory" kind="class" language="C++" prot="public">
    <compoundname>amrex::DefaultFabFactory</compoundname>
    <basecompoundref refid="classamrex_1_1FabFactory" prot="public" virt="non-virtual">amrex::FabFactory&lt; FAB &gt;</basecompoundref>
    <includes refid="AMReX__FabFactory_8H" local="no">AMReX_FabFactory.H</includes>
    <templateparamlist>
      <param>
        <type>class FAB</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DefaultFabFactory_1adcada128006a2a097c27cd25a68831f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> FAB *</type>
        <definition>AMREX_NODISCARD FAB* amrex::DefaultFabFactory&lt; FAB &gt;::create</definition>
        <argsstring>(const Box &amp;box, int ncomps, const FabInfo &amp;info, int) const override</argsstring>
        <name>create</name>
        <reimplements refid="classamrex_1_1FabFactory_1a4e0a2fbf35fdcdd902e490e196f6c114">create</reimplements>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomps</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabInfo" kindref="compound">FabInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="79" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DefaultFabFactory_1ad08ff5875385741fbb51f4acf49b091c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> FAB *</type>
        <definition>AMREX_NODISCARD FAB* amrex::DefaultFabFactory&lt; FAB &gt;::create_alias</definition>
        <argsstring>(FAB const &amp;rhs, int scomp, int ncomp) const override</argsstring>
        <name>create_alias</name>
        <reimplements refid="classamrex_1_1FabFactory_1a1bd32f3a086db8bbe58333cf02e72db9">create_alias</reimplements>
        <param>
          <type>FAB const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="85" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DefaultFabFactory_1a44cfd162206571bec18df510351c1e9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::DefaultFabFactory&lt; FAB &gt;::destroy</definition>
        <argsstring>(FAB *fab) const override</argsstring>
        <name>destroy</name>
        <reimplements refid="classamrex_1_1FabFactory_1a62e57972e3054a6f7ed1cdb9c0426c09">destroy</reimplements>
        <param>
          <type>FAB *</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DefaultFabFactory_1a8710f2a169d293fb6b0059fb10637b25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="AMReX__Extension_8H_1a8cfb0291f150c6676f99a0b6c4578717" kindref="member">AMREX_NODISCARD</ref> <ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt; *</type>
        <definition>AMREX_NODISCARD DefaultFabFactory&lt;FAB&gt;* amrex::DefaultFabFactory&lt; FAB &gt;::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classamrex_1_1FabFactory_1a52360a49a6595822520416ba2fa3b9c0">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="96" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="96" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::FabFactory&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="1">
        <label>amrex::DefaultFabFactory&lt; FAB &gt;</label>
        <link refid="classamrex_1_1DefaultFabFactory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>amrex::FabFactory&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="1">
        <label>amrex::DefaultFabFactory&lt; FAB &gt;</label>
        <link refid="classamrex_1_1DefaultFabFactory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="76" bodyend="99"/>
    <listofallmembers>
      <member refid="classamrex_1_1DefaultFabFactory_1a8710f2a169d293fb6b0059fb10637b25" prot="public" virt="virtual"><scope>amrex::DefaultFabFactory</scope><name>clone</name></member>
      <member refid="classamrex_1_1DefaultFabFactory_1adcada128006a2a097c27cd25a68831f6" prot="public" virt="virtual"><scope>amrex::DefaultFabFactory</scope><name>create</name></member>
      <member refid="classamrex_1_1DefaultFabFactory_1ad08ff5875385741fbb51f4acf49b091c" prot="public" virt="virtual"><scope>amrex::DefaultFabFactory</scope><name>create_alias</name></member>
      <member refid="classamrex_1_1DefaultFabFactory_1a44cfd162206571bec18df510351c1e9b" prot="public" virt="virtual"><scope>amrex::DefaultFabFactory</scope><name>destroy</name></member>
      <member refid="classamrex_1_1FabFactory_1ab88cda55dded29e88d2aeaf84f2d5e83" prot="public" virt="non-virtual"><scope>amrex::DefaultFabFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1a438a3209840b7fc84705b81ce82cc944" prot="public" virt="non-virtual"><scope>amrex::DefaultFabFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1acff7aece531c1605a9261be791916493" prot="public" virt="non-virtual"><scope>amrex::DefaultFabFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1a60945306ed69d287f22245f05ed65858" prot="public" virt="virtual"><scope>amrex::DefaultFabFactory</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1FabFactory_1a8a4fa9cec9df6cf5b6214d76da14b099" prot="public" virt="non-virtual"><scope>amrex::DefaultFabFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabFactory_1a3a03a3b8e7241403a630cc320728b3c1" prot="public" virt="non-virtual"><scope>amrex::DefaultFabFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabFactory_1a0d7f240eb5eb5b366024b09539d7ce87" prot="public" virt="virtual"><scope>amrex::DefaultFabFactory</scope><name>~FabFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
