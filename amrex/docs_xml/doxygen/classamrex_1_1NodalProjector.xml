<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1NodalProjector" kind="class" language="C++" prot="public">
    <compoundname>amrex::NodalProjector</compoundname>
    <includes refid="AMReX__NodalProjector_8H" local="no">AMReX_NodalProjector.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a4de350ac4761929f8d6eecfe5f742d33" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::NodalProjector::m_ok</definition>
        <argsstring></argsstring>
        <name>m_ok</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a661a067bd39807885fc3156d3bc615c7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::NodalProjector::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a4507bd63adcaaafc274f0950d8469e7a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::NodalProjector::m_bottom_verbose</definition>
        <argsstring></argsstring>
        <name>m_bottom_verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a2ed6a8a90ac6e8540641fa5b42f9d59d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::NodalProjector::m_bottom_solver</definition>
        <argsstring></argsstring>
        <name>m_bottom_solver</name>
        <initializer>= &quot;bicgcg&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a2d7dce6e33d913c30c535c2492267a56" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::NodalProjector::m_maxiter</definition>
        <argsstring></argsstring>
        <name>m_maxiter</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a4540d8d83391a5475050e0ba65613ff2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::NodalProjector::m_bottom_maxiter</definition>
        <argsstring></argsstring>
        <name>m_bottom_maxiter</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="112" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1ae2ce4370dc66b447e5fa1d6c513c0d83" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::NodalProjector::m_rtol</definition>
        <argsstring></argsstring>
        <name>m_rtol</name>
        <initializer>= 1.0e-11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a6fe677862e3491b4b83efcac8a3a78eb" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::NodalProjector::m_atol</definition>
        <argsstring></argsstring>
        <name>m_atol</name>
        <initializer>= 1.0e-14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1aa79c547ac22751782fe0537306dfad56" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::NodalProjector::m_bottom_rtol</definition>
        <argsstring></argsstring>
        <name>m_bottom_rtol</name>
        <initializer>= 1.0e-4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a8cd6549c3987cff4c59fe8cd919a0363" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::NodalProjector::m_bottom_atol</definition>
        <argsstring></argsstring>
        <name>m_bottom_atol</name>
        <initializer>= -1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="116" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1abcc4dcca05854b3f4f292faaacf953fa" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt;Geometry&gt; amrex::NodalProjector::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="118" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a8e597f480701ede1befff90a915e66a4" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt;</type>
        <definition>Vector&lt;BoxArray&gt; amrex::NodalProjector::m_grids</definition>
        <argsstring></argsstring>
        <name>m_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a13357a20bc5fce87a43d02bd944b8c8f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt;</type>
        <definition>Vector&lt;DistributionMapping&gt; amrex::NodalProjector::m_dmap</definition>
        <argsstring></argsstring>
        <name>m_dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a26630d1eb1ed4c8375e6e598d36652f3" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref></type>
        <definition>LPInfo amrex::NodalProjector::m_lpinfo</definition>
        <argsstring></argsstring>
        <name>m_lpinfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a8841a3d92d33e963007ed24bc5310d92" prot="private" static="no" mutable="no">
        <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;LinOpBCType,AMREX_SPACEDIM&gt; amrex::NodalProjector::m_bc_lo</definition>
        <argsstring></argsstring>
        <name>m_bc_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a9629028ba382b2d9b32852f1ac88c982" prot="private" static="no" mutable="no">
        <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;LinOpBCType,AMREX_SPACEDIM&gt; amrex::NodalProjector::m_bc_hi</definition>
        <argsstring></argsstring>
        <name>m_bc_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a39eed78c45f84de5d683ef80c68a9616" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt; std::unique_ptr&lt; MultiFab &gt; &gt; amrex::NodalProjector::m_fluxes</definition>
        <argsstring></argsstring>
        <name>m_fluxes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a6866f79b0878c4052a476b5a3658bfa5" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt; std::unique_ptr&lt; MultiFab &gt; &gt; amrex::NodalProjector::m_phi</definition>
        <argsstring></argsstring>
        <name>m_phi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="135" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a28ec8053f421512e31fdd2e18a6f91b2" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt; std::unique_ptr&lt; MultiFab &gt; &gt; amrex::NodalProjector::m_rhs</definition>
        <argsstring></argsstring>
        <name>m_rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a8569a7370d2045a394d3a084e502bd51" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MLNodeLaplacian &gt; amrex::NodalProjector::m_matrix</definition>
        <argsstring></argsstring>
        <name>m_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="139" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a494282b614cd2422de9bdb479bf40f88" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MLMG &gt; amrex::NodalProjector::m_solver</definition>
        <argsstring></argsstring>
        <name>m_solver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="142" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1ae6e76253c9361a7a29bf2875e37eaebe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::NodalProjector::NodalProjector</definition>
        <argsstring>()</argsstring>
        <name>NodalProjector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="18" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a9dc758fc30f51785d62644ea29b04fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::NodalProjector::NodalProjector</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt; a_bc_lo, std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt; a_bc_hi, const LPInfo &amp;a_lpinfo)</argsstring>
        <name>NodalProjector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_lo</declname>
        </param>
        <param>
          <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_hi</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_lpinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a6b8c8bf171b049b47e3bd63b0554d088" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::NodalProjector::NodalProjector</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt; a_bc_lo, std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt; a_bc_hi)</argsstring>
        <name>NodalProjector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_lo</declname>
        </param>
        <param>
          <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a280e9bf34813b58634328656a6aff10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt; a_bc_lo, std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt; a_bc_hi, const LPInfo &amp;a_lpinfo)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_lo</declname>
        </param>
        <param>
          <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_hi</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_lpinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="34" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a63a8e6fd315da8665a77aac4a6f74caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::project</definition>
        <argsstring>(const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_vel, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_sigma, const amrex::Vector&lt; amrex::MultiFab * &gt; a_S_cc={}, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_S_nd={})</argsstring>
        <name>project</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
          <declname>a_S_cc</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_nd</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="149" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1af07c6a7cbdd2b26096f4274f1110cfba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::project2</definition>
        <argsstring>(const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_vel, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_alpha, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_beta, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_rhs)</argsstring>
        <name>project2</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_beta</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="228" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1aec6781e79ae0cd7083834da01558c7d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; const MultiFab* &gt; amrex::NodalProjector::getPhi</definition>
        <argsstring>() const </argsstring>
        <name>getPhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="80" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a6231be537c09b6babbe997e90e99f1bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; const MultiFab* &gt; amrex::NodalProjector::getGradPhi</definition>
        <argsstring>() const </argsstring>
        <name>getGradPhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1aaf0ee20d8f578821d845bb6c7e3b476c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::computeRHS</definition>
        <argsstring>(const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_rhs, const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_vel, const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_S_cc={}, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_S_nd={})</argsstring>
        <name>computeRHS</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_cc</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_nd</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="392" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1acf6d0e992085108bb771b3342b9f2bd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setVerbose</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a6af39fe31bdd4211a93d53fceea118b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setBottomVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setBottomVerbose</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="90" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a1ef0420c6227c44c9a9c2e413042e6e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setBottomSolver</definition>
        <argsstring>(std::string b) noexcept</argsstring>
        <name>setBottomSolver</name>
        <param>
          <type>std::string</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1aea486563b5d25517a83f02f16dd18471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setMaxIter</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>setMaxIter</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="94" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a12fa14863647477310d786a5a65ef4c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setBottomMaxIter</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>setBottomMaxIter</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1af1440b70add9111d72b526caa454fd15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setTolerance</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setTolerance</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="96" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1ab9db55516efe748ac98cf531735a45ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setToleranceAbs</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setToleranceAbs</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1acdeb3a6c651eae48451ceba323805668" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setBottomTolerance</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setBottomTolerance</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="98" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a17469e59560a3296bc419d74bf57b68e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setBottomToleranceAbs</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setBottomToleranceAbs</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="99" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a42c19270cc056e06a13c190bf01a00b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::readParameters</definition>
        <argsstring>()</argsstring>
        <name>readParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="144" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="298" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a09e3fe505727d0cec4c6e41648e39121" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::printInfo</definition>
        <argsstring>()</argsstring>
        <name>printInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="426" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a0e8bac5ed9898402bd8af7190b5383d8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="148" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="318" bodyend="385"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5870">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="5866">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5867" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5863">
        <label>amrex::NodalProjector</label>
        <link refid="classamrex_1_1NodalProjector"/>
        <childnode refid="5864" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="5866" relation="usage">
          <edgelabel>m_rhs</edgelabel>
          <edgelabel>m_phi</edgelabel>
          <edgelabel>m_fluxes</edgelabel>
        </childnode>
        <childnode refid="5868" relation="usage">
          <edgelabel>m_bottom_solver</edgelabel>
        </childnode>
        <childnode refid="5869" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="5871" relation="usage">
          <edgelabel>m_lpinfo</edgelabel>
        </childnode>
        <childnode refid="5872" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="5874" relation="usage">
          <edgelabel>m_bottom_atol</edgelabel>
          <edgelabel>m_bottom_rtol</edgelabel>
          <edgelabel>m_atol</edgelabel>
          <edgelabel>m_rtol</edgelabel>
        </childnode>
      </node>
      <node id="5874">
        <label>Real</label>
      </node>
      <node id="5873">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="5864">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5865" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5868">
        <label>string</label>
      </node>
      <node id="5869">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5870" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5865">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
      </node>
      <node id="5867">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="5871">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="5872">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5873" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="13" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="12" bodyend="150"/>
    <listofallmembers>
      <member refid="classamrex_1_1NodalProjector_1aaf0ee20d8f578821d845bb6c7e3b476c" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>computeRHS</name></member>
      <member refid="classamrex_1_1NodalProjector_1a280e9bf34813b58634328656a6aff10c" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>define</name></member>
      <member refid="classamrex_1_1NodalProjector_1a6231be537c09b6babbe997e90e99f1bf" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>getGradPhi</name></member>
      <member refid="classamrex_1_1NodalProjector_1aec6781e79ae0cd7083834da01558c7d8" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>getPhi</name></member>
      <member refid="classamrex_1_1NodalProjector_1a6fe677862e3491b4b83efcac8a3a78eb" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_atol</name></member>
      <member refid="classamrex_1_1NodalProjector_1a9629028ba382b2d9b32852f1ac88c982" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bc_hi</name></member>
      <member refid="classamrex_1_1NodalProjector_1a8841a3d92d33e963007ed24bc5310d92" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bc_lo</name></member>
      <member refid="classamrex_1_1NodalProjector_1a8cd6549c3987cff4c59fe8cd919a0363" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bottom_atol</name></member>
      <member refid="classamrex_1_1NodalProjector_1a4540d8d83391a5475050e0ba65613ff2" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bottom_maxiter</name></member>
      <member refid="classamrex_1_1NodalProjector_1aa79c547ac22751782fe0537306dfad56" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bottom_rtol</name></member>
      <member refid="classamrex_1_1NodalProjector_1a2ed6a8a90ac6e8540641fa5b42f9d59d" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bottom_solver</name></member>
      <member refid="classamrex_1_1NodalProjector_1a4507bd63adcaaafc274f0950d8469e7a" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bottom_verbose</name></member>
      <member refid="classamrex_1_1NodalProjector_1a13357a20bc5fce87a43d02bd944b8c8f" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1NodalProjector_1a39eed78c45f84de5d683ef80c68a9616" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_fluxes</name></member>
      <member refid="classamrex_1_1NodalProjector_1abcc4dcca05854b3f4f292faaacf953fa" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1NodalProjector_1a8e597f480701ede1befff90a915e66a4" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1NodalProjector_1a26630d1eb1ed4c8375e6e598d36652f3" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_lpinfo</name></member>
      <member refid="classamrex_1_1NodalProjector_1a8569a7370d2045a394d3a084e502bd51" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_matrix</name></member>
      <member refid="classamrex_1_1NodalProjector_1a2d7dce6e33d913c30c535c2492267a56" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_maxiter</name></member>
      <member refid="classamrex_1_1NodalProjector_1a4de350ac4761929f8d6eecfe5f742d33" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_ok</name></member>
      <member refid="classamrex_1_1NodalProjector_1a6866f79b0878c4052a476b5a3658bfa5" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_phi</name></member>
      <member refid="classamrex_1_1NodalProjector_1a28ec8053f421512e31fdd2e18a6f91b2" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_rhs</name></member>
      <member refid="classamrex_1_1NodalProjector_1ae2ce4370dc66b447e5fa1d6c513c0d83" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_rtol</name></member>
      <member refid="classamrex_1_1NodalProjector_1a494282b614cd2422de9bdb479bf40f88" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_solver</name></member>
      <member refid="classamrex_1_1NodalProjector_1a661a067bd39807885fc3156d3bc615c7" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1NodalProjector_1ae6e76253c9361a7a29bf2875e37eaebe" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>NodalProjector</name></member>
      <member refid="classamrex_1_1NodalProjector_1a9dc758fc30f51785d62644ea29b04fac" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>NodalProjector</name></member>
      <member refid="classamrex_1_1NodalProjector_1a6b8c8bf171b049b47e3bd63b0554d088" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>NodalProjector</name></member>
      <member refid="classamrex_1_1NodalProjector_1a09e3fe505727d0cec4c6e41648e39121" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>printInfo</name></member>
      <member refid="classamrex_1_1NodalProjector_1a63a8e6fd315da8665a77aac4a6f74caa" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>project</name></member>
      <member refid="classamrex_1_1NodalProjector_1af07c6a7cbdd2b26096f4274f1110cfba" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>project2</name></member>
      <member refid="classamrex_1_1NodalProjector_1a42c19270cc056e06a13c190bf01a00b8" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>readParameters</name></member>
      <member refid="classamrex_1_1NodalProjector_1a12fa14863647477310d786a5a65ef4c4" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setBottomMaxIter</name></member>
      <member refid="classamrex_1_1NodalProjector_1a1ef0420c6227c44c9a9c2e413042e6e1" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setBottomSolver</name></member>
      <member refid="classamrex_1_1NodalProjector_1acdeb3a6c651eae48451ceba323805668" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setBottomTolerance</name></member>
      <member refid="classamrex_1_1NodalProjector_1a17469e59560a3296bc419d74bf57b68e" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setBottomToleranceAbs</name></member>
      <member refid="classamrex_1_1NodalProjector_1a6af39fe31bdd4211a93d53fceea118b7" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setBottomVerbose</name></member>
      <member refid="classamrex_1_1NodalProjector_1aea486563b5d25517a83f02f16dd18471" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setMaxIter</name></member>
      <member refid="classamrex_1_1NodalProjector_1af1440b70add9111d72b526caa454fd15" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setTolerance</name></member>
      <member refid="classamrex_1_1NodalProjector_1ab9db55516efe748ac98cf531735a45ae" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setToleranceAbs</name></member>
      <member refid="classamrex_1_1NodalProjector_1a0e8bac5ed9898402bd8af7190b5383d8" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setup</name></member>
      <member refid="classamrex_1_1NodalProjector_1acf6d0e992085108bb771b3342b9f2bd3" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setVerbose</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
