<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1NodalProjector" kind="class" language="C++" prot="public">
    <compoundname>amrex::NodalProjector</compoundname>
    <includes refid="AMReX__NodalProjector_8H" local="no">AMReX_NodalProjector.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1adfd770c61ff025d9e8505723ba8993a1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::NodalProjector::m_has_rhs</definition>
        <argsstring></argsstring>
        <name>m_has_rhs</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="121" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1ae36badefaa5dfc92c8ad26d3c5b9d768" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::NodalProjector::m_has_alpha</definition>
        <argsstring></argsstring>
        <name>m_has_alpha</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="122" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a496b8f37a8e5a63f972729ebfac31dc5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::NodalProjector::m_need_bcs</definition>
        <argsstring></argsstring>
        <name>m_need_bcs</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="123" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a661a067bd39807885fc3156d3bc615c7" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::NodalProjector::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="126" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1abcc4dcca05854b3f4f292faaacf953fa" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt;Geometry&gt; amrex::NodalProjector::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="129" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a69afbcc4b70d3ba64c8795b42ec72feb" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
        <definition>Vector&lt;amrex::MultiFab*&gt; amrex::NodalProjector::m_vel</definition>
        <argsstring></argsstring>
        <name>m_vel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="137" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a851b289c8dd90712779c0a7794e1a22c" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt;</type>
        <definition>Vector&lt;amrex::MultiFab&gt; amrex::NodalProjector::m_fluxes</definition>
        <argsstring></argsstring>
        <name>m_fluxes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="138" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a846ef1b0aef929394274abd16e58914f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
        <definition>Vector&lt;const amrex::MultiFab*&gt; amrex::NodalProjector::m_alpha</definition>
        <argsstring></argsstring>
        <name>m_alpha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="139" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1abff874e793044767f52c7ba5b4146b69" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
        <definition>Vector&lt;amrex::MultiFab*&gt; amrex::NodalProjector::m_S_cc</definition>
        <argsstring></argsstring>
        <name>m_S_cc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="140" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a7d95eade2d0ab950f500d2bea33cf609" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
        <definition>Vector&lt;const amrex::MultiFab*&gt; amrex::NodalProjector::m_sigma</definition>
        <argsstring></argsstring>
        <name>m_sigma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="141" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1ab6df622354fcfbb346a56831d645eef2" prot="private" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real amrex::NodalProjector::m_const_sigma</definition>
        <argsstring></argsstring>
        <name>m_const_sigma</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="142" column="37" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1aae5b9e3a41a0cb8f9c9d9ec211bf5d80" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt;</type>
        <definition>Vector&lt;amrex::MultiFab&gt; amrex::NodalProjector::m_phi</definition>
        <argsstring></argsstring>
        <name>m_phi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="145" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a90bb7af02ab3b261aa5742b1c4346a7a" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt;</type>
        <definition>Vector&lt;amrex::MultiFab&gt; amrex::NodalProjector::m_rhs</definition>
        <argsstring></argsstring>
        <name>m_rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="146" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1ae820ecc88926118f8af21c1e91f498be" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
        <definition>Vector&lt;const amrex::MultiFab*&gt; amrex::NodalProjector::m_S_nd</definition>
        <argsstring></argsstring>
        <name>m_S_nd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="147" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a9262678045a7d04c4c2442ba89dbad97" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MLNodeLaplacian &gt; amrex::NodalProjector::m_linop</definition>
        <argsstring></argsstring>
        <name>m_linop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="150" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1adde550b593c215c62b83b2d24888e67d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MLMG &gt; amrex::NodalProjector::m_mlmg</definition>
        <argsstring></argsstring>
        <name>m_mlmg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="153" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a8841a3d92d33e963007ed24bc5310d92" prot="private" static="no" mutable="no">
        <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;LinOpBCType,AMREX_SPACEDIM&gt; amrex::NodalProjector::m_bc_lo</definition>
        <argsstring></argsstring>
        <name>m_bc_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="156" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a9629028ba382b2d9b32852f1ac88c982" prot="private" static="no" mutable="no">
        <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;LinOpBCType,AMREX_SPACEDIM&gt; amrex::NodalProjector::m_bc_hi</definition>
        <argsstring></argsstring>
        <name>m_bc_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="157" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a04468cb5062d59658fb98c8659379951" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::NodalProjector::m_ref_ratio</definition>
        <argsstring></argsstring>
        <name>m_ref_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="160" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1aaa6bab80e6653cb2c6ef8d78eea0064e" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::NodalProjector::m_fine_grids</definition>
        <argsstring></argsstring>
        <name>m_fine_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="161" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1ac798252d43a7cfe43d4f62e0f3367f01" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        <definition>MultiFab* amrex::NodalProjector::m_sync_resid_crse</definition>
        <argsstring></argsstring>
        <name>m_sync_resid_crse</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="162" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NodalProjector_1a40caa5ae6ae3956aa0f25b37c825f354" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        <definition>MultiFab* amrex::NodalProjector::m_sync_resid_fine</definition>
        <argsstring></argsstring>
        <name>m_sync_resid_fine</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="163" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a53072cc9425269b990cef344a198e2d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::NodalProjector::NodalProjector</definition>
        <argsstring>(const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_vel, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_sigma, const Vector&lt; Geometry &gt; &amp;a_geom, const LPInfo &amp;a_lpinfo, const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_S_cc={}, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_S_nd={})</argsstring>
        <name>NodalProjector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_lpinfo</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_cc</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_nd</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="54" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="15" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a4a19684749f6340e4d3bbe0fc30cbce5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::NodalProjector::NodalProjector</definition>
        <argsstring>(const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_vel, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_sigma, const Vector&lt; Geometry &gt; &amp;a_geom, const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_S_cc={}, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_S_nd={})</argsstring>
        <name>NodalProjector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_cc</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_nd</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="61" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a4ea85e14731732c7507d8badceae7f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::NodalProjector::NodalProjector</definition>
        <argsstring>(const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_vel, const amrex::Real a_const_sigma, const Vector&lt; Geometry &gt; &amp;a_geom, const LPInfo &amp;a_lpinfo, const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_S_cc={}, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_S_nd={})</argsstring>
        <name>NodalProjector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>a_const_sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_lpinfo</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_cc</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_nd</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="69" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="30" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1ae8b5184497a90403993acecabda0baea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::project</definition>
        <argsstring>(amrex::Real a_rtol=Real(1.0e-11), amrex::Real a_atol=Real(1.0e-14))</argsstring>
        <name>project</name>
        <param>
          <type>amrex::Real</type>
          <declname>a_rtol</declname>
          <defval>Real(1.0e-11)</defval>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>a_atol</declname>
          <defval>Real(1.0e-14)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="76" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a0953dc52f5a1bada7ca572b8204433f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::project</definition>
        <argsstring>(const Vector&lt; amrex::MultiFab * &gt; &amp;a_phi, amrex::Real a_rtol=Real(1.0e-11), amrex::Real a_atol=Real(1.0e-14))</argsstring>
        <name>project</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_phi</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>a_rtol</declname>
          <defval>Real(1.0e-11)</defval>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>a_atol</declname>
          <defval>Real(1.0e-14)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="77" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a14ffe4a8ba58aeec47d5c94baec63ab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; MultiFab* &gt; amrex::NodalProjector::getGradPhi</definition>
        <argsstring>()</argsstring>
        <name>getGradPhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="80" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a090526966c6971c2ad57aa64eaa0d975" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; const MultiFab* &gt; amrex::NodalProjector::getGradPhiConst</definition>
        <argsstring>() const</argsstring>
        <name>getGradPhiConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="81" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a95235b814e4a08c61cd9efc76d0f6309" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; MultiFab* &gt; amrex::NodalProjector::getPhi</definition>
        <argsstring>()</argsstring>
        <name>getPhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="82" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a5b850f548a5941900edb5c45c1e2d875" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; const MultiFab* &gt; amrex::NodalProjector::getPhiConst</definition>
        <argsstring>() const</argsstring>
        <name>getPhiConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="83" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1aaf0ee20d8f578821d845bb6c7e3b476c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::computeRHS</definition>
        <argsstring>(const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_rhs, const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_vel, const amrex::Vector&lt; amrex::MultiFab * &gt; &amp;a_S_cc={}, const amrex::Vector&lt; const amrex::MultiFab * &gt; &amp;a_S_nd={})</argsstring>
        <name>computeRHS</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_cc</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt; &amp;</type>
          <declname>a_S_nd</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="352" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a63cb597416b0ca3a818883c1a087d507" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setAlpha</definition>
        <argsstring>(const amrex::Vector&lt; const amrex::MultiFab * &gt; a_alpha)</argsstring>
        <name>setAlpha</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
          <declname>a_alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="90" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a8de8b45e00a388bf3c42b3a60623658e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setCustomRHS</definition>
        <argsstring>(const amrex::Vector&lt; const amrex::MultiFab * &gt; a_rhs)</argsstring>
        <name>setCustomRHS</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="92" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="227" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1acf6d0e992085108bb771b3342b9f2bd3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="96" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1ac0cd0325de83d09a9df891002e1cb05c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setDomainBC</definition>
        <argsstring>(std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt; a_bc_lo, std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt; a_bc_hi)</argsstring>
        <name>setDomainBC</name>
        <param>
          <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_lo</declname>
        </param>
        <param>
          <type>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="100" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="217" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1aff308ccaf74926d2a4b1e222827e0da6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &amp;</type>
        <definition>MLNodeLaplacian&amp; amrex::NodalProjector::getLinOp</definition>
        <argsstring>() noexcept</argsstring>
        <name>getLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="105" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a2b5f697ec3e33875a8784dc463ad4d6b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> &amp;</type>
        <definition>MLMG&amp; amrex::NodalProjector::getMLMG</definition>
        <argsstring>() noexcept</argsstring>
        <name>getMLMG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="106" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1ac5ae757f5053c5ac26f577040937463e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setSyncResidualFine</definition>
        <argsstring>(MultiFab *a_sync_resid_fine)</argsstring>
        <name>setSyncResidualFine</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>a_sync_resid_fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="109" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1ac3a256c91c49535c1aba0bbf9e26d7d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setSyncResidualCrse</definition>
        <argsstring>(MultiFab *a_sync_resid_crse, IntVect a_ref_ratio, BoxArray a_fine_grids)</argsstring>
        <name>setSyncResidualCrse</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>a_sync_resid_crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
          <declname>a_ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
          <declname>a_fine_grids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="110" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="110" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1ab6cbf6dd4255ec2962b31fbd4f28c752" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setOptions</definition>
        <argsstring>()</argsstring>
        <name>setOptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="115" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="142" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a206546491b52e979c3ac0e5574dc671e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::setCoarseBoundaryVelocityForSync</definition>
        <argsstring>()</argsstring>
        <name>setCoarseBoundaryVelocityForSync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="116" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="438" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a23ce7fe70a5802e864f014d41e749c88" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::computeSyncResidual</definition>
        <argsstring>()</argsstring>
        <name>computeSyncResidual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="117" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="399" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a0ffd6b9d9cccf9d8f2d4ba671ed0e559" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::averageDown</definition>
        <argsstring>(const amrex::Vector&lt; amrex::MultiFab * &gt; a_var)</argsstring>
        <name>averageDown</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
          <declname>a_var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="118" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="495" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a9ddd5a26176c300c6191ebc8a4c4f2ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::define</definition>
        <argsstring>(LPInfo const &amp;a_lpinfo)</argsstring>
        <name>define</name>
        <param>
          <type><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> const &amp;</type>
          <declname>a_lpinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="119" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="45" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NodalProjector_1a09e3fe505727d0cec4c6e41648e39121" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NodalProjector::printInfo</definition>
        <argsstring>()</argsstring>
        <name>printInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="165" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="386" bodyend="395"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="69">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="70" relation="public-inheritance">
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="41" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="59">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="44" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="74">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="75" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::unique_ptr&lt; amrex::MLNodeLaplacian &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="118">
        <label>amrex::Vector&lt; double &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="61">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>K</label>
      </node>
      <node id="60">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="5">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="5" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>T</label>
      </node>
      <node id="30">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="31" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="113">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="114" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="19" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="1">
        <label>amrex::NodalProjector</label>
        <link refid="classamrex_1_1NodalProjector"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_vel</edgelabel>
          <edgelabel>m_S_cc</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_ref_ratio</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_linop</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_sync_resid_crse</edgelabel>
          <edgelabel>m_sync_resid_fine</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>m_mlmg</edgelabel>
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>m_alpha</edgelabel>
          <edgelabel>m_sigma</edgelabel>
          <edgelabel>m_S_nd</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>m_rhs</edgelabel>
          <edgelabel>m_phi</edgelabel>
          <edgelabel>m_fluxes</edgelabel>
        </childnode>
        <childnode refid="122" relation="usage">
          <edgelabel>m_bc_hi</edgelabel>
          <edgelabel>m_bc_lo</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_fine_grids</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_const_sigma</edgelabel>
        </childnode>
        <childnode refid="123" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>Real</label>
      </node>
      <node id="124">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="66" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="84" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="71" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="107">
        <label>amrex::MLMG</label>
        <link refid="classamrex_1_1MLMG"/>
        <childnode refid="108" relation="usage">
          <edgelabel>rescor</edgelabel>
          <edgelabel>res</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>ns_linop</edgelabel>
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>m_iter_fine_resnorm0</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>sol</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>fine_mask</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_niters_cg</edgelabel>
        </childnode>
        <childnode refid="113" relation="usage">
          <edgelabel>scratch</edgelabel>
          <edgelabel>sol_raii</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>volinv</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>rhs</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>ns_mlmg</edgelabel>
        </childnode>
        <childnode refid="117" relation="usage">
          <edgelabel>ns_rhs</edgelabel>
          <edgelabel>ns_sol</edgelabel>
        </childnode>
        <childnode refid="118" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="104" relation="usage">
          <edgelabel>cor</edgelabel>
          <edgelabel>cor_hold</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>linop</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>bottom_reltol</edgelabel>
          <edgelabel>bottom_abstol</edgelabel>
          <edgelabel>m_final_resnorm0</edgelabel>
          <edgelabel>m_rhsnorm0</edgelabel>
          <edgelabel>m_init_resnorm0</edgelabel>
        </childnode>
      </node>
      <node id="109">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="23" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="84">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="24" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="72" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
      <node id="62">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="5" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="117">
        <label>std::unique_ptr&lt; amrex::MultiFab &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="27" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>nghost</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_bottom_dot_mask</edgelabel>
          <edgelabel>m_coarse_dot_mask</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_nd_fine_mask</edgelabel>
          <edgelabel>m_cc_fine_mask</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>m_owner_mask</edgelabel>
          <edgelabel>m_dirichlet_mask</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>m_has_fine_bndry</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="100">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="5" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>amrex::Vector&lt; amrex::MultiFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="54">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="55" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>std::unique_ptr&lt; amrex::MLLinOp::CommContainer &gt;</label>
        <childnode refid="92" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="103">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="56" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="68" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="99">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="14" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="104">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="105" relation="public-inheritance">
        </childnode>
      </node>
      <node id="85">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="86" relation="public-inheritance">
        </childnode>
      </node>
      <node id="122">
        <label>std::array&lt; LinOpBCType, AMREX_SPACEDIM &gt;</label>
      </node>
      <node id="89">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="90" relation="public-inheritance">
        </childnode>
      </node>
      <node id="114">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="51" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="10" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="109" relation="public-inheritance">
        </childnode>
      </node>
      <node id="98">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="99" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="24" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="5" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::MLNodeLaplacian</label>
        <link refid="classamrex_1_1MLNodeLaplacian"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="100" relation="usage">
          <edgelabel>m_sigma</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>m_s0_norm0</edgelabel>
        </childnode>
        <childnode refid="104" relation="usage">
          <edgelabel>m_stencil</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_normalization_threshold</edgelabel>
          <edgelabel>m_const_sigma</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="88" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="26" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="38" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="46" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="77" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; amrex::MultiFab *, std::allocator&lt; amrex::MultiFab * &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="56">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="106">
        <label>std::unique_ptr&lt; amrex::MLMG &gt;</label>
        <childnode refid="107" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="32" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>amrex::MLLinOp::CommContainer</label>
        <link refid="structamrex_1_1MLLinOp_1_1CommContainer"/>
      </node>
      <node id="121">
        <label>std::vector&lt; const amrex::MultiFab *, std::allocator&lt; const amrex::MultiFab * &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="46">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="47" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
      </node>
      <node id="73">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="96">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
      <node id="119">
        <label>std::vector&lt; double, std::allocator&lt; double &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="37" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="90">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="111">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="95">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="116">
        <label>std::vector&lt; amrex::MultiFab, std::allocator&lt; amrex::MultiFab &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="53" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="120">
        <label>amrex::Vector&lt; const amrex::MultiFab * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="110">
        <label>std::unique_ptr&lt; amrex::MLLinOp &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="123">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="124" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="20" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="38" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="27" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>snghost</edgelabel>
          <edgelabel>dnghost</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="103" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; amrex::MultiFab * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="86">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="35" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="49" bodyend="166"/>
    <listofallmembers>
      <member refid="classamrex_1_1NodalProjector_1a0ffd6b9d9cccf9d8f2d4ba671ed0e559" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>averageDown</name></member>
      <member refid="classamrex_1_1NodalProjector_1aaf0ee20d8f578821d845bb6c7e3b476c" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>computeRHS</name></member>
      <member refid="classamrex_1_1NodalProjector_1a23ce7fe70a5802e864f014d41e749c88" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>computeSyncResidual</name></member>
      <member refid="classamrex_1_1NodalProjector_1a9ddd5a26176c300c6191ebc8a4c4f2ed" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>define</name></member>
      <member refid="classamrex_1_1NodalProjector_1a14ffe4a8ba58aeec47d5c94baec63ab5" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>getGradPhi</name></member>
      <member refid="classamrex_1_1NodalProjector_1a090526966c6971c2ad57aa64eaa0d975" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>getGradPhiConst</name></member>
      <member refid="classamrex_1_1NodalProjector_1aff308ccaf74926d2a4b1e222827e0da6" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>getLinOp</name></member>
      <member refid="classamrex_1_1NodalProjector_1a2b5f697ec3e33875a8784dc463ad4d6b" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>getMLMG</name></member>
      <member refid="classamrex_1_1NodalProjector_1a95235b814e4a08c61cd9efc76d0f6309" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>getPhi</name></member>
      <member refid="classamrex_1_1NodalProjector_1a5b850f548a5941900edb5c45c1e2d875" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>getPhiConst</name></member>
      <member refid="classamrex_1_1NodalProjector_1a846ef1b0aef929394274abd16e58914f" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_alpha</name></member>
      <member refid="classamrex_1_1NodalProjector_1a9629028ba382b2d9b32852f1ac88c982" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bc_hi</name></member>
      <member refid="classamrex_1_1NodalProjector_1a8841a3d92d33e963007ed24bc5310d92" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_bc_lo</name></member>
      <member refid="classamrex_1_1NodalProjector_1ab6df622354fcfbb346a56831d645eef2" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_const_sigma</name></member>
      <member refid="classamrex_1_1NodalProjector_1aaa6bab80e6653cb2c6ef8d78eea0064e" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_fine_grids</name></member>
      <member refid="classamrex_1_1NodalProjector_1a851b289c8dd90712779c0a7794e1a22c" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_fluxes</name></member>
      <member refid="classamrex_1_1NodalProjector_1abcc4dcca05854b3f4f292faaacf953fa" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1NodalProjector_1ae36badefaa5dfc92c8ad26d3c5b9d768" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_has_alpha</name></member>
      <member refid="classamrex_1_1NodalProjector_1adfd770c61ff025d9e8505723ba8993a1" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_has_rhs</name></member>
      <member refid="classamrex_1_1NodalProjector_1a9262678045a7d04c4c2442ba89dbad97" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_linop</name></member>
      <member refid="classamrex_1_1NodalProjector_1adde550b593c215c62b83b2d24888e67d" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_mlmg</name></member>
      <member refid="classamrex_1_1NodalProjector_1a496b8f37a8e5a63f972729ebfac31dc5" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_need_bcs</name></member>
      <member refid="classamrex_1_1NodalProjector_1aae5b9e3a41a0cb8f9c9d9ec211bf5d80" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_phi</name></member>
      <member refid="classamrex_1_1NodalProjector_1a04468cb5062d59658fb98c8659379951" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_ref_ratio</name></member>
      <member refid="classamrex_1_1NodalProjector_1a90bb7af02ab3b261aa5742b1c4346a7a" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_rhs</name></member>
      <member refid="classamrex_1_1NodalProjector_1abff874e793044767f52c7ba5b4146b69" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_S_cc</name></member>
      <member refid="classamrex_1_1NodalProjector_1ae820ecc88926118f8af21c1e91f498be" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_S_nd</name></member>
      <member refid="classamrex_1_1NodalProjector_1a7d95eade2d0ab950f500d2bea33cf609" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_sigma</name></member>
      <member refid="classamrex_1_1NodalProjector_1ac798252d43a7cfe43d4f62e0f3367f01" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_sync_resid_crse</name></member>
      <member refid="classamrex_1_1NodalProjector_1a40caa5ae6ae3956aa0f25b37c825f354" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_sync_resid_fine</name></member>
      <member refid="classamrex_1_1NodalProjector_1a69afbcc4b70d3ba64c8795b42ec72feb" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_vel</name></member>
      <member refid="classamrex_1_1NodalProjector_1a661a067bd39807885fc3156d3bc615c7" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1NodalProjector_1a53072cc9425269b990cef344a198e2d5" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>NodalProjector</name></member>
      <member refid="classamrex_1_1NodalProjector_1a4a19684749f6340e4d3bbe0fc30cbce5" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>NodalProjector</name></member>
      <member refid="classamrex_1_1NodalProjector_1a4ea85e14731732c7507d8badceae7f34" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>NodalProjector</name></member>
      <member refid="classamrex_1_1NodalProjector_1a09e3fe505727d0cec4c6e41648e39121" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>printInfo</name></member>
      <member refid="classamrex_1_1NodalProjector_1ae8b5184497a90403993acecabda0baea" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>project</name></member>
      <member refid="classamrex_1_1NodalProjector_1a0953dc52f5a1bada7ca572b8204433f4" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>project</name></member>
      <member refid="classamrex_1_1NodalProjector_1a63cb597416b0ca3a818883c1a087d507" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setAlpha</name></member>
      <member refid="classamrex_1_1NodalProjector_1a206546491b52e979c3ac0e5574dc671e" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setCoarseBoundaryVelocityForSync</name></member>
      <member refid="classamrex_1_1NodalProjector_1a8de8b45e00a388bf3c42b3a60623658e" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setCustomRHS</name></member>
      <member refid="classamrex_1_1NodalProjector_1ac0cd0325de83d09a9df891002e1cb05c" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1NodalProjector_1ab6cbf6dd4255ec2962b31fbd4f28c752" prot="private" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setOptions</name></member>
      <member refid="classamrex_1_1NodalProjector_1ac3a256c91c49535c1aba0bbf9e26d7d7" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setSyncResidualCrse</name></member>
      <member refid="classamrex_1_1NodalProjector_1ac5ae757f5053c5ac26f577040937463e" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setSyncResidualFine</name></member>
      <member refid="classamrex_1_1NodalProjector_1acf6d0e992085108bb771b3342b9f2bd3" prot="public" virt="non-virtual"><scope>amrex::NodalProjector</scope><name>setVerbose</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
