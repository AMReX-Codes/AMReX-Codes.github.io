<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MultiCutFab" kind="class" language="C++" prot="public">
    <compoundname>amrex::MultiCutFab</compoundname>
    <includes refid="AMReX__MultiCutFab_8H" local="no">AMReX_MultiCutFab.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MultiCutFab_1aa57d6c13b3ffbf9dcc2bf1d3c3496852" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref> &gt;</type>
        <definition>FabArray&lt;CutFab&gt; amrex::MultiCutFab::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="145" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MultiCutFab_1acf458e03eaefec6d963a0b0e3b0453da" prot="private" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &gt; *</type>
        <definition>const FabArray&lt;EBCellFlagFab&gt;* amrex::MultiCutFab::m_cellflags</definition>
        <argsstring></argsstring>
        <name>m_cellflags</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="146" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a6e72abb71404d338b7ddc2570277c430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiCutFab::MultiCutFab</definition>
        <argsstring>()</argsstring>
        <name>MultiCutFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="84" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1aaaef2d8067b4e79d9e8b222d82fffe3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiCutFab::MultiCutFab</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, int ncomp, int ngrow, const FabArray&lt; EBCellFlagFab &gt; &amp;cellflags)</argsstring>
        <name>MultiCutFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &gt; &amp;</type>
          <declname>cellflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="86" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1ab4e7bba2a1d004437f5175e6fba94282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiCutFab::~MultiCutFab</definition>
        <argsstring>()</argsstring>
        <name>~MultiCutFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="89" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a791ee981722de3ea8241d09f96653a33" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiCutFab::MultiCutFab</definition>
        <argsstring>(MultiCutFab &amp;&amp;rhs) noexcept=default</argsstring>
        <name>MultiCutFab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="91" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a13683ad147676d968ba83b1c7a1ce09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiCutFab::MultiCutFab</definition>
        <argsstring>(const MultiCutFab &amp;rhs)=delete</argsstring>
        <name>MultiCutFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="93" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a933d522f37c305e1517c6b3b09248254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>MultiCutFab&amp; amrex::MultiCutFab::operator=</definition>
        <argsstring>(const MultiCutFab &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="94" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a5d048b1c459102c5f3f038147a171ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
        <definition>MultiCutFab&amp; amrex::MultiCutFab::operator=</definition>
        <argsstring>(MultiCutFab &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="95" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1aa7ea55e7f0a58e0f3b37dd08b3a337eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiCutFab::define</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, int ncomp, int ngrow, const FabArray&lt; EBCellFlagFab &gt; &amp;cellflags)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &gt; &amp;</type>
          <declname>cellflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="97" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a316297dac1bb8a86d2c72da43db652a6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref> &amp;</type>
        <definition>const CutFab &amp; amrex::MultiCutFab::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="100" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1ade6f739eb789f2d3dc684a193be94971" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref> &amp;</type>
        <definition>CutFab &amp; amrex::MultiCutFab::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="101" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a261c9bcb22ccc62bedbbdcb84cf53578" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref> &amp;</type>
        <definition>const CutFab &amp; amrex::MultiCutFab::operator[]</definition>
        <argsstring>(int global_box_index) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>global_box_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="103" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1ad40ab7b9d5f3dde32c3d973c3cbc4384" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref> &amp;</type>
        <definition>CutFab &amp; amrex::MultiCutFab::operator[]</definition>
        <argsstring>(int global_box_index) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>global_box_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="104" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a28cf664d141809833e9e86d0da19f71c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;</type>
        <definition>Array4&lt; Real &gt; amrex::MultiCutFab::array</definition>
        <argsstring>(const MFIter &amp;mfi) noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="106" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a5dfa78cdf782516029bdcb3be0c25697" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt;</type>
        <definition>Array4&lt; Real const  &gt; amrex::MultiCutFab::array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="107" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a50cae7c9c3be8c1acf784e0b2aa823f8" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt;</type>
        <definition>Array4&lt; Real const  &gt; amrex::MultiCutFab::const_array</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="108" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a8247facc39c504861942259c9eb47a4e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; Real &gt;</type>
        <definition>MultiArray4&lt;Real&gt; amrex::MultiCutFab::arrays</definition>
        <argsstring>() noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="110" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1ad209570c8a7ce2a214d69239d83dce86" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; Real const  &gt;</type>
        <definition>MultiArray4&lt;Real const&gt; amrex::MultiCutFab::arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="114" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1acd7c79790014731621fb8aa68af655b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MultiArray4" kindref="compound">MultiArray4</ref>&lt; Real const  &gt;</type>
        <definition>MultiArray4&lt;Real const&gt; amrex::MultiCutFab::const_arrays</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_arrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="118" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1ad4fed4196dbde22c7aec7fa98b16b859" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiCutFab::ok</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>ok</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Is it OK to call operator[] with this <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref>? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="123" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1ad5b50a9590b3c7b01ec2100343d981c3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiCutFab::ok</definition>
        <argsstring>(int global_box_index) const noexcept</argsstring>
        <name>ok</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>global_box_index</declname>
        </param>
        <briefdescription>
<para>Is it OK to call operator[] with this global box index? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="126" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a22eb86768e17886d036bc065094ce343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiCutFab::setVal</definition>
        <argsstring>(Real val)</argsstring>
        <name>setVal</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="128" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="130" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a16717da298c94c764eaa8f309fc1a4aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref> &gt; &amp;</type>
        <definition>FabArray&lt;CutFab&gt;&amp; amrex::MultiCutFab::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="130" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a033e611a5f48e7d975d4e5485d89e742" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref> &gt; &amp;</type>
        <definition>const FabArray&lt;CutFab&gt;&amp; amrex::MultiCutFab::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="131" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a4392470ed6648f18f0dbd5b986ff204c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::MultiCutFab::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="133" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a399e380fa767dede8285ab80c9237e77" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::MultiCutFab::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="134" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a3b4fcaf2fed76d9722c8a476ce1a5ce8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MultiCutFab::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="135" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1ae8d90e43fe323739131b52c834c46dd7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MultiCutFab::nGrow</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nGrow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="136" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1a212f1455dd8018d3cd773107db0df62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiCutFab::ParallelCopy</definition>
        <argsstring>(const MultiCutFab &amp;src, int scomp, int dcomp, int ncomp, int sng, int dng, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiCutFab" kindref="compound">MultiCutFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="138" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiCutFab_1ac5f3026221c3cafbcb0e19f6583cfd9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::MultiCutFab::ToMultiFab</definition>
        <argsstring>(Real regular_value, Real covered_value) const</argsstring>
        <name>ToMultiFab</name>
        <param>
          <type>Real</type>
          <declname>regular_value</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>covered_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="141" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.cpp" bodystart="155" bodyend="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="69">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="34" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="51">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="17">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>K</label>
      </node>
      <node id="18">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="66">
        <label>std::vector&lt; amrex::CutFab * &gt;</label>
        <childnode refid="67" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>Real</label>
      </node>
      <node id="52">
        <label>std::unique_ptr&lt; amrex::PCData&lt; amrex::EBCellFlagFab &gt; &gt;</label>
      </node>
      <node id="47">
        <label>std::unique_ptr&lt; amrex::FBData&lt; amrex::EBCellFlagFab &gt; &gt;</label>
      </node>
      <node id="27">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>amrex::EBCellFlagFab::NumCells</label>
        <link refid="structamrex_1_1EBCellFlagFab_1_1NumCells"/>
      </node>
      <node id="57">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="49">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="50" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="4">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="51" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MultiCutFab</label>
        <link refid="classamrex_1_1MultiCutFab"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_cellflags</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="39" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="22">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="9" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>std::unique_ptr&lt; amrex::PCData&lt; amrex::CutFab &gt; &gt;</label>
      </node>
      <node id="16">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="12">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; amrex::EBCellFlagFab &gt; &gt;</label>
      </node>
      <node id="67">
        <label>amrex::CutFab</label>
        <link refid="classamrex_1_1CutFab"/>
        <childnode refid="68" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>std::unique_ptr&lt; amrex::FBData&lt; amrex::CutFab &gt; &gt;</label>
      </node>
      <node id="73">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; amrex::CutFab &gt; &gt;</label>
      </node>
      <node id="42">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="34" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
      </node>
      <node id="28">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="9" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; amrex::EBCellFlagFab &gt; &gt;</label>
      </node>
      <node id="45">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="29">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="30" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; amrex::CutFab &gt; &gt;</label>
      </node>
      <node id="37">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="13">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>amrex::FabArray&lt; amrex::CutFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>std::map&lt; amrex::Box, amrex::EBCellFlagFab::NumCells &gt;</label>
        <childnode refid="62" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="30">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="31" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="70">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="58">
        <label>std::vector&lt; amrex::EBCellFlagFab * &gt;</label>
        <childnode refid="59" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="39">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="36">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="37" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="21" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="59">
        <label>amrex::EBCellFlagFab</label>
        <link refid="classamrex_1_1EBCellFlagFab"/>
        <childnode refid="60" relation="public-inheritance">
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_typemap</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="10">
        <label>amrex::BoxIndexer</label>
        <link refid="structamrex_1_1BoxIndexer"/>
      </node>
      <node id="60">
        <label>amrex::BaseFab&lt; EBCellFlag &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="22" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="34">
        <label>std::string</label>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_MultiCutFab.H" bodystart="81" bodyend="147"/>
    <listofallmembers>
      <member refid="classamrex_1_1MultiCutFab_1a28cf664d141809833e9e86d0da19f71c" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>array</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a5dfa78cdf782516029bdcb3be0c25697" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>array</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a8247facc39c504861942259c9eb47a4e" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>arrays</name></member>
      <member refid="classamrex_1_1MultiCutFab_1ad209570c8a7ce2a214d69239d83dce86" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>arrays</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a4392470ed6648f18f0dbd5b986ff204c" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a50cae7c9c3be8c1acf784e0b2aa823f8" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1MultiCutFab_1acd7c79790014731621fb8aa68af655b5" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>const_arrays</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a16717da298c94c764eaa8f309fc1a4aa" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>data</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a033e611a5f48e7d975d4e5485d89e742" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>data</name></member>
      <member refid="classamrex_1_1MultiCutFab_1aa7ea55e7f0a58e0f3b37dd08b3a337eb" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>define</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a399e380fa767dede8285ab80c9237e77" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1MultiCutFab_1acf458e03eaefec6d963a0b0e3b0453da" prot="private" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>m_cellflags</name></member>
      <member refid="classamrex_1_1MultiCutFab_1aa57d6c13b3ffbf9dcc2bf1d3c3496852" prot="private" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>m_data</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a6e72abb71404d338b7ddc2570277c430" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>MultiCutFab</name></member>
      <member refid="classamrex_1_1MultiCutFab_1aaaef2d8067b4e79d9e8b222d82fffe3f" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>MultiCutFab</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a791ee981722de3ea8241d09f96653a33" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>MultiCutFab</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a13683ad147676d968ba83b1c7a1ce09b" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>MultiCutFab</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a3b4fcaf2fed76d9722c8a476ce1a5ce8" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>nComp</name></member>
      <member refid="classamrex_1_1MultiCutFab_1ae8d90e43fe323739131b52c834c46dd7" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1MultiCutFab_1ad4fed4196dbde22c7aec7fa98b16b859" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>ok</name></member>
      <member refid="classamrex_1_1MultiCutFab_1ad5b50a9590b3c7b01ec2100343d981c3" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>ok</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a933d522f37c305e1517c6b3b09248254" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a5d048b1c459102c5f3f038147a171ecb" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a316297dac1bb8a86d2c72da43db652a6" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1MultiCutFab_1ade6f739eb789f2d3dc684a193be94971" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a261c9bcb22ccc62bedbbdcb84cf53578" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1MultiCutFab_1ad40ab7b9d5f3dde32c3d973c3cbc4384" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a212f1455dd8018d3cd773107db0df62d" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1MultiCutFab_1a22eb86768e17886d036bc065094ce343" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1MultiCutFab_1ac5f3026221c3cafbcb0e19f6583cfd9d" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>ToMultiFab</name></member>
      <member refid="classamrex_1_1MultiCutFab_1ab4e7bba2a1d004437f5175e6fba94282" prot="public" virt="non-virtual"><scope>amrex::MultiCutFab</scope><name>~MultiCutFab</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
