<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__MLMG_8cpp" kind="file" language="C++">
    <compoundname>AMReX_MLMG.cpp</compoundname>
    <includes refid="AMReX__MLMG_8H" local="no">AMReX_MLMG.H</includes>
    <includes refid="AMReX__MultiFabUtil_8H" local="no">AMReX_MultiFabUtil.H</includes>
    <includes refid="AMReX__VisMF_8H" local="no">AMReX_VisMF.H</includes>
    <includes refid="AMReX__BC__TYPES_8H" local="no">AMReX_BC_TYPES.H</includes>
    <includes refid="AMReX__MLMG__F_8H" local="no">AMReX_MLMG_F.H</includes>
    <includes refid="AMReX__MLMG__K_8H" local="no">AMReX_MLMG_K.H</includes>
    <includes refid="AMReX__MLABecLaplacian_8H" local="no">AMReX_MLABecLaplacian.H</includes>
    <incdepgraph>
      <node id="57480">
        <label>AMReX_MLMG_3D_K.H</label>
        <link refid="AMReX__MLMG__3D__K_8H"/>
      </node>
      <node id="57477">
        <label>AMReX_MLMG_F.H</label>
        <link refid="AMReX__MLMG__F_8H"/>
        <childnode refid="57478" relation="include">
        </childnode>
      </node>
      <node id="57413">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57414" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57357" relation="include">
        </childnode>
      </node>
      <node id="57438">
        <label>iomanip</label>
      </node>
      <node id="57361">
        <label>functional</label>
      </node>
      <node id="57409">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57395" relation="include">
        </childnode>
        <childnode refid="57404" relation="include">
        </childnode>
        <childnode refid="57410" relation="include">
        </childnode>
        <childnode refid="57386" relation="include">
        </childnode>
        <childnode refid="57392" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
      </node>
      <node id="57401">
        <label>AMReX_BoxIterator.H</label>
        <link refid="AMReX__BoxIterator_8H"/>
        <childnode refid="57381" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
        <childnode refid="57380" relation="include">
        </childnode>
      </node>
      <node id="57383">
        <label>limits</label>
      </node>
      <node id="57400">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
      </node>
      <node id="57458">
        <label>AMReX_YAFluxRegister.H</label>
        <link refid="AMReX__YAFluxRegister_8H"/>
        <childnode refid="57352" relation="include">
        </childnode>
        <childnode refid="57459" relation="include">
        </childnode>
        <childnode refid="57444" relation="include">
        </childnode>
        <childnode refid="57375" relation="include">
        </childnode>
      </node>
      <node id="57439">
        <label>AMReX_CudaContainers.H</label>
        <link refid="AMReX__CudaContainers_8H"/>
        <childnode refid="57421" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57436" relation="include">
        </childnode>
      </node>
      <node id="57367">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57369" relation="include">
        </childnode>
        <childnode refid="57379" relation="include">
        </childnode>
        <childnode refid="57357" relation="include">
        </childnode>
        <childnode refid="57380" relation="include">
        </childnode>
        <childnode refid="57386" relation="include">
        </childnode>
        <childnode refid="57387" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57388" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
      </node>
      <node id="57430">
        <label>AMReX_GpuUtility.H</label>
        <link refid="AMReX__GpuUtility_8H"/>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
        <childnode refid="57427" relation="include">
        </childnode>
        <childnode refid="57371" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57388" relation="include">
        </childnode>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57382" relation="include">
        </childnode>
      </node>
      <node id="57353">
        <label>cstdint</label>
      </node>
      <node id="57450">
        <label>AMReX_FabArrayBase.H</label>
        <link refid="AMReX__FabArrayBase_8H"/>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57409" relation="include">
        </childnode>
        <childnode refid="57411" relation="include">
        </childnode>
        <childnode refid="57412" relation="include">
        </childnode>
        <childnode refid="57451" relation="include">
        </childnode>
        <childnode refid="57449" relation="include">
        </childnode>
        <childnode refid="57437" relation="include">
        </childnode>
        <childnode refid="57394" relation="include">
        </childnode>
        <childnode refid="57422" relation="include">
        </childnode>
      </node>
      <node id="57411">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="57404" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57395" relation="include">
        </childnode>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57355" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57412" relation="include">
        </childnode>
      </node>
      <node id="57474">
        <label>AMReX_MLCGSolver.H</label>
        <link refid="AMReX__MLCGSolver_8H"/>
        <childnode refid="57382" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57352" relation="include">
        </childnode>
        <childnode refid="57350" relation="include">
        </childnode>
      </node>
      <node id="57380">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57381" relation="include">
        </childnode>
        <childnode refid="57382" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
        <childnode refid="57384" relation="include">
        </childnode>
        <childnode refid="57370" relation="include">
        </childnode>
        <childnode refid="57357" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57372" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57371" relation="include">
        </childnode>
        <childnode refid="57356" relation="include">
        </childnode>
      </node>
      <node id="57470">
        <label>AMReX_VisMF.H</label>
        <link refid="AMReX__VisMF_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57414" relation="include">
        </childnode>
        <childnode refid="57471" relation="include">
        </childnode>
        <childnode refid="57472" relation="include">
        </childnode>
        <childnode refid="57376" relation="include">
        </childnode>
        <childnode refid="57353" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57442" relation="include">
        </childnode>
        <childnode refid="57366" relation="include">
        </childnode>
        <childnode refid="57473" relation="include">
        </childnode>
      </node>
      <node id="57350">
        <label>AMReX_MLLinOp.H</label>
        <link refid="AMReX__MLLinOp_8H"/>
        <childnode refid="57351" relation="include">
        </childnode>
        <childnode refid="57352" relation="include">
        </childnode>
        <childnode refid="57444" relation="include">
        </childnode>
        <childnode refid="57456" relation="include">
        </childnode>
        <childnode refid="57458" relation="include">
        </childnode>
        <childnode refid="57461" relation="include">
        </childnode>
        <childnode refid="57470" relation="include">
        </childnode>
      </node>
      <node id="57355">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57357" relation="include">
        </childnode>
        <childnode refid="57358" relation="include">
        </childnode>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57361" relation="include">
        </childnode>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57363" relation="include">
        </childnode>
        <childnode refid="57364" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
      </node>
      <node id="57402">
        <label>AMReX_MakeType.H</label>
        <link refid="AMReX__MakeType_8H"/>
      </node>
      <node id="57429">
        <label>AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
      </node>
      <node id="57424">
        <label>AMReX_GpuError.H</label>
        <link refid="AMReX__GpuError_8H"/>
        <childnode refid="57403" relation="include">
        </childnode>
        <childnode refid="57362" relation="include">
        </childnode>
      </node>
      <node id="57349">
        <label>AMReX_MLMG.H</label>
        <link refid="AMReX__MLMG_8H"/>
        <childnode refid="57350" relation="include">
        </childnode>
        <childnode refid="57459" relation="include">
        </childnode>
        <childnode refid="57474" relation="include">
        </childnode>
      </node>
      <node id="57385">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="57370" relation="include">
        </childnode>
        <childnode refid="57364" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
      </node>
      <node id="57437">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="57377" relation="include">
        </childnode>
        <childnode refid="57414" relation="include">
        </childnode>
        <childnode refid="57438" relation="include">
        </childnode>
        <childnode refid="57355" relation="include">
        </childnode>
        <childnode refid="57413" relation="include">
        </childnode>
        <childnode refid="57412" relation="include">
        </childnode>
      </node>
      <node id="57382">
        <label>cmath</label>
      </node>
      <node id="57448">
        <label>cassert</label>
      </node>
      <node id="57359">
        <label>stdexcept</label>
      </node>
      <node id="57421">
        <label>numeric</label>
      </node>
      <node id="57483">
        <label>AMReX_MLCellLinOp.H</label>
        <link refid="AMReX__MLCellLinOp_8H"/>
        <childnode refid="57350" relation="include">
        </childnode>
      </node>
      <node id="57461">
        <label>AMReX_MLMGBndry.H</label>
        <link refid="AMReX__MLMGBndry_8H"/>
        <childnode refid="57462" relation="include">
        </childnode>
        <childnode refid="57469" relation="include">
        </childnode>
      </node>
      <node id="57478">
        <label>AMReX_BLFort.H</label>
        <link refid="AMReX__BLFort_8H"/>
        <childnode refid="57379" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
      </node>
      <node id="57392">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57380" relation="include">
        </childnode>
        <childnode refid="57386" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
      </node>
      <node id="57482">
        <label>AMReX_MLCellABecLap.H</label>
        <link refid="AMReX__MLCellABecLap_8H"/>
        <childnode refid="57483" relation="include">
        </childnode>
      </node>
      <node id="57389">
        <label>AMReX_BaseFab.H</label>
        <link refid="AMReX__BaseFab_8H"/>
        <childnode refid="57382" relation="include">
        </childnode>
        <childnode refid="57381" relation="include">
        </childnode>
        <childnode refid="57370" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
        <childnode refid="57384" relation="include">
        </childnode>
        <childnode refid="57375" relation="include">
        </childnode>
        <childnode refid="57390" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57371" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57391" relation="include">
        </childnode>
        <childnode refid="57392" relation="include">
        </childnode>
        <childnode refid="57393" relation="include">
        </childnode>
        <childnode refid="57396" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57400" relation="include">
        </childnode>
        <childnode refid="57401" relation="include">
        </childnode>
        <childnode refid="57402" relation="include">
        </childnode>
        <childnode refid="57403" relation="include">
        </childnode>
        <childnode refid="57422" relation="include">
        </childnode>
      </node>
      <node id="57362">
        <label>string</label>
      </node>
      <node id="57436">
        <label>AMReX_CudaAllocators.H</label>
        <link refid="AMReX__CudaAllocators_8H"/>
        <childnode refid="57404" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
        <childnode refid="57437" relation="include">
        </childnode>
        <childnode refid="57394" relation="include">
        </childnode>
        <childnode refid="57427" relation="include">
        </childnode>
      </node>
      <node id="57391">
        <label>AMReX_Loop.H</label>
        <link refid="AMReX__Loop_8H"/>
        <childnode refid="57367" relation="include">
        </childnode>
      </node>
      <node id="57404">
        <label>map</label>
      </node>
      <node id="57352">
        <label>AMReX_MultiFab.H</label>
        <link refid="AMReX__MultiFab_8H"/>
        <childnode refid="57353" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57366" relation="include">
        </childnode>
        <childnode refid="57442" relation="include">
        </childnode>
        <childnode refid="57455" relation="include">
        </childnode>
        <childnode refid="57449" relation="include">
        </childnode>
      </node>
      <node id="57399">
        <label>unordered_set</label>
      </node>
      <node id="57466">
        <label>AMReX_BndryData.H</label>
        <link refid="AMReX__BndryData_8H"/>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57409" relation="include">
        </childnode>
        <childnode refid="57366" relation="include">
        </childnode>
        <childnode refid="57387" relation="include">
        </childnode>
        <childnode refid="57456" relation="include">
        </childnode>
        <childnode refid="57467" relation="include">
        </childnode>
        <childnode refid="57465" relation="include">
        </childnode>
        <childnode refid="57444" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57453" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57404" relation="include">
        </childnode>
      </node>
      <node id="57454">
        <label>AMReX_FabArrayCommI.H</label>
        <link refid="AMReX__FabArrayCommI_8H"/>
      </node>
      <node id="57453">
        <label>AMReX_LayoutData.H</label>
        <link refid="AMReX__LayoutData_8H"/>
        <childnode refid="57450" relation="include">
        </childnode>
        <childnode refid="57452" relation="include">
        </childnode>
      </node>
      <node id="57414">
        <label>fstream</label>
      </node>
      <node id="57444">
        <label>AMReX_Geometry.H</label>
        <link refid="AMReX__Geometry_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57404" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57445" relation="include">
        </childnode>
        <childnode refid="57412" relation="include">
        </childnode>
        <childnode refid="57446" relation="include">
        </childnode>
        <childnode refid="57449" relation="include">
        </childnode>
      </node>
      <node id="57452">
        <label>AMReX_MFIter.H</label>
        <link refid="AMReX__MFIter_8H"/>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57394" relation="include">
        </childnode>
        <childnode refid="57450" relation="include">
        </childnode>
        <childnode refid="57380" relation="include">
        </childnode>
        <childnode refid="57366" relation="include">
        </childnode>
        <childnode refid="57446" relation="include">
        </childnode>
        <childnode refid="57422" relation="include">
        </childnode>
      </node>
      <node id="57348">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp</label>
        <link refid="AMReX_MLMG.cpp"/>
        <childnode refid="57349" relation="include">
        </childnode>
        <childnode refid="57475" relation="include">
        </childnode>
        <childnode refid="57470" relation="include">
        </childnode>
        <childnode refid="57464" relation="include">
        </childnode>
        <childnode refid="57477" relation="include">
        </childnode>
        <childnode refid="57479" relation="include">
        </childnode>
        <childnode refid="57481" relation="include">
        </childnode>
      </node>
      <node id="57465">
        <label>AMReX_BoundCond.H</label>
        <link refid="AMReX__BoundCond_8H"/>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57356" relation="include">
        </childnode>
      </node>
      <node id="57379">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="57373" relation="include">
        </childnode>
      </node>
      <node id="57462">
        <label>AMReX_InterpBndryData.H</label>
        <link refid="AMReX__InterpBndryData_8H"/>
        <childnode refid="57409" relation="include">
        </childnode>
        <childnode refid="57366" relation="include">
        </childnode>
        <childnode refid="57387" relation="include">
        </childnode>
        <childnode refid="57463" relation="include">
        </childnode>
        <childnode refid="57444" relation="include">
        </childnode>
        <childnode refid="57465" relation="include">
        </childnode>
        <childnode refid="57466" relation="include">
        </childnode>
      </node>
      <node id="57446">
        <label>AMReX_RealBox.H</label>
        <link refid="AMReX__RealBox_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57375" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57447" relation="include">
        </childnode>
      </node>
      <node id="57374">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="57375" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57376" relation="include">
        </childnode>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57377" relation="include">
        </childnode>
        <childnode refid="57363" relation="include">
        </childnode>
        <childnode refid="57355" relation="include">
        </childnode>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
      </node>
      <node id="57435">
        <label>AMReX_GpuReduce.H</label>
        <link refid="AMReX__GpuReduce_8H"/>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
        <childnode refid="57403" relation="include">
        </childnode>
      </node>
      <node id="57351">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="57475">
        <label>AMReX_MultiFabUtil.H</label>
        <link refid="AMReX__MultiFabUtil_8H"/>
        <childnode refid="57476" relation="include">
        </childnode>
        <childnode refid="57352" relation="include">
        </childnode>
        <childnode refid="57459" relation="include">
        </childnode>
        <childnode refid="57453" relation="include">
        </childnode>
        <childnode refid="57452" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
      </node>
      <node id="57459">
        <label>AMReX_iMultiFab.H</label>
        <link refid="AMReX__iMultiFab_8H"/>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57460" relation="include">
        </childnode>
        <childnode refid="57442" relation="include">
        </childnode>
        <childnode refid="57455" relation="include">
        </childnode>
        <childnode refid="57444" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
      </node>
      <node id="57451">
        <label>AMReX_ParallelReduce.H</label>
        <link refid="AMReX__ParallelReduce_8H"/>
        <childnode refid="57355" relation="include">
        </childnode>
        <childnode refid="57412" relation="include">
        </childnode>
        <childnode refid="57437" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57390" relation="include">
        </childnode>
      </node>
      <node id="57371">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="57423">
        <label>AMReX_GpuLaunch.H</label>
        <link refid="AMReX__GpuLaunch_8H"/>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
        <childnode refid="57424" relation="include">
        </childnode>
        <childnode refid="57425" relation="include">
        </childnode>
        <childnode refid="57427" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57391" relation="include">
        </childnode>
        <childnode refid="57371" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57426" relation="include">
        </childnode>
        <childnode refid="57395" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
        <childnode refid="57370" relation="include">
        </childnode>
        <childnode refid="57428" relation="include">
        </childnode>
        <childnode refid="57429" relation="include">
        </childnode>
      </node>
      <node id="57406">
        <label>sys/types.h</label>
      </node>
      <node id="57449">
        <label>AMReX_Periodicity.H</label>
        <link refid="AMReX__Periodicity_8H"/>
        <childnode refid="57380" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57364" relation="include">
        </childnode>
      </node>
      <node id="57420">
        <label>typeinfo</label>
      </node>
      <node id="57363">
        <label>cstdio</label>
      </node>
      <node id="57463">
        <label>AMReX_BCRec.H</label>
        <link refid="AMReX__BCRec_8H"/>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57464" relation="include">
        </childnode>
      </node>
      <node id="57426">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="57390" relation="include">
        </childnode>
        <childnode refid="57371" relation="include">
        </childnode>
      </node>
      <node id="57378">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="57356" relation="include">
        </childnode>
      </node>
      <node id="57472">
        <label>future</label>
      </node>
      <node id="57464">
        <label>AMReX_BC_TYPES.H</label>
        <link refid="AMReX__BC__TYPES_8H"/>
      </node>
      <node id="57457">
        <label>AMReX_FabSet.H</label>
        <link refid="AMReX__FabSet_8H"/>
        <childnode refid="57352" relation="include">
        </childnode>
        <childnode refid="57444" relation="include">
        </childnode>
      </node>
      <node id="57415">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="57416" relation="include">
        </childnode>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57376" relation="include">
        </childnode>
        <childnode refid="57377" relation="include">
        </childnode>
        <childnode refid="57363" relation="include">
        </childnode>
        <childnode refid="57381" relation="include">
        </childnode>
        <childnode refid="57417" relation="include">
        </childnode>
        <childnode refid="57418" relation="include">
        </childnode>
        <childnode refid="57419" relation="include">
        </childnode>
      </node>
      <node id="57407">
        <label>unistd.h</label>
      </node>
      <node id="57416">
        <label>stack</label>
      </node>
      <node id="57364">
        <label>vector</label>
      </node>
      <node id="57441">
        <label>AMReX_FabFactory.H</label>
        <link refid="AMReX__FabFactory_8H"/>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57437" relation="include">
        </childnode>
        <childnode refid="57402" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57394" relation="include">
        </childnode>
      </node>
      <node id="57354">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="57355" relation="include">
        </childnode>
      </node>
      <node id="57356">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="57376">
        <label>utility</label>
      </node>
      <node id="57375">
        <label>array</label>
      </node>
      <node id="57442">
        <label>AMReX_FabArray.H</label>
        <link refid="AMReX__FabArray_8H"/>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57432" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
        <childnode refid="57404" relation="include">
        </childnode>
        <childnode refid="57376" relation="include">
        </childnode>
        <childnode refid="57364" relation="include">
        </childnode>
        <childnode refid="57370" relation="include">
        </childnode>
        <childnode refid="57397" relation="include">
        </childnode>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57355" relation="include">
        </childnode>
        <childnode refid="57409" relation="include">
        </childnode>
        <childnode refid="57443" relation="include">
        </childnode>
        <childnode refid="57441" relation="include">
        </childnode>
        <childnode refid="57411" relation="include">
        </childnode>
        <childnode refid="57444" relation="include">
        </childnode>
        <childnode refid="57412" relation="include">
        </childnode>
        <childnode refid="57403" relation="include">
        </childnode>
        <childnode refid="57357" relation="include">
        </childnode>
        <childnode refid="57400" relation="include">
        </childnode>
        <childnode refid="57449" relation="include">
        </childnode>
        <childnode refid="57437" relation="include">
        </childnode>
        <childnode refid="57450" relation="include">
        </childnode>
        <childnode refid="57452" relation="include">
        </childnode>
        <childnode refid="57402" relation="include">
        </childnode>
        <childnode refid="57426" relation="include">
        </childnode>
        <childnode refid="57453" relation="include">
        </childnode>
        <childnode refid="57389" relation="include">
        </childnode>
        <childnode refid="57422" relation="include">
        </childnode>
        <childnode refid="57454" relation="include">
        </childnode>
      </node>
      <node id="57366">
        <label>AMReX_FArrayBox.H</label>
        <link refid="AMReX__FArrayBox_8H"/>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57389" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
        <childnode refid="57441" relation="include">
        </childnode>
        <childnode refid="57382" relation="include">
        </childnode>
      </node>
      <node id="57377">
        <label>sstream</label>
      </node>
      <node id="57455">
        <label>AMReX_FabArrayUtility.H</label>
        <link refid="AMReX__FabArrayUtility_8H"/>
        <childnode refid="57442" relation="include">
        </childnode>
        <childnode refid="57453" relation="include">
        </childnode>
        <childnode refid="57437" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
      </node>
      <node id="57476">
        <label>AMReX_BaseFabUtility.H</label>
        <link refid="AMReX__BaseFabUtility_8H"/>
        <childnode refid="57389" relation="include">
        </childnode>
      </node>
      <node id="57358">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="57359" relation="include">
        </childnode>
      </node>
      <node id="57369">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="57370" relation="include">
        </childnode>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57371" relation="include">
        </childnode>
        <childnode refid="57372" relation="include">
        </childnode>
      </node>
      <node id="57425">
        <label>AMReX_GpuRange.H</label>
        <link refid="AMReX__GpuRange_8H"/>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
        <childnode refid="57424" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57426" relation="include">
        </childnode>
      </node>
      <node id="57412">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="57357" relation="include">
        </childnode>
        <childnode refid="57413" relation="include">
        </childnode>
        <childnode refid="57415" relation="include">
        </childnode>
        <childnode refid="57400" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57364" relation="include">
        </childnode>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57420" relation="include">
        </childnode>
        <childnode refid="57370" relation="include">
        </childnode>
        <childnode refid="57361" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
        <childnode refid="57421" relation="include">
        </childnode>
      </node>
      <node id="57403">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="57381" relation="include">
        </childnode>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57362" relation="include">
        </childnode>
        <childnode refid="57404" relation="include">
        </childnode>
        <childnode refid="57405" relation="include">
        </childnode>
        <childnode refid="57390" relation="include">
        </childnode>
        <childnode refid="57406" relation="include">
        </childnode>
        <childnode refid="57407" relation="include">
        </childnode>
        <childnode refid="57408" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57409" relation="include">
        </childnode>
        <childnode refid="57411" relation="include">
        </childnode>
        <childnode refid="57412" relation="include">
        </childnode>
      </node>
      <node id="57394">
        <label>AMReX_Arena.H</label>
        <link refid="AMReX__Arena_8H"/>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57395" relation="include">
        </childnode>
        <childnode refid="57381" relation="include">
        </childnode>
      </node>
      <node id="57387">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
        <childnode refid="57356" relation="include">
        </childnode>
      </node>
      <node id="57372">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
      </node>
      <node id="57408">
        <label>sys/wait.h</label>
      </node>
      <node id="57368">
        <label>iosfwd</label>
      </node>
      <node id="57381">
        <label>cstdlib</label>
      </node>
      <node id="57419">
        <label>cfenv</label>
      </node>
      <node id="57360">
        <label>iostream</label>
      </node>
      <node id="57386">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57357" relation="include">
        </childnode>
        <childnode refid="57380" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
      </node>
      <node id="57456">
        <label>AMReX_BndryRegister.H</label>
        <link refid="AMReX__BndryRegister_8H"/>
        <childnode refid="57409" relation="include">
        </childnode>
        <childnode refid="57457" relation="include">
        </childnode>
      </node>
      <node id="57388">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="57380" relation="include">
        </childnode>
      </node>
      <node id="57395">
        <label>cstddef</label>
      </node>
      <node id="57479">
        <label>AMReX_MLMG_K.H</label>
        <link refid="AMReX__MLMG__K_8H"/>
        <childnode refid="57366" relation="include">
        </childnode>
        <childnode refid="57480" relation="include">
        </childnode>
      </node>
      <node id="57410">
        <label>unordered_map</label>
      </node>
      <node id="57443">
        <label>AMReX_BoxDomain.H</label>
        <link refid="AMReX__BoxDomain_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57386" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57380" relation="include">
        </childnode>
        <childnode refid="57392" relation="include">
        </childnode>
      </node>
      <node id="57422">
        <label>AMReX_Gpu.H</label>
        <link refid="AMReX__Gpu_8H"/>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
        <childnode refid="57423" relation="include">
        </childnode>
        <childnode refid="57424" relation="include">
        </childnode>
        <childnode refid="57430" relation="include">
        </childnode>
        <childnode refid="57427" relation="include">
        </childnode>
        <childnode refid="57431" relation="include">
        </childnode>
        <childnode refid="57433" relation="include">
        </childnode>
        <childnode refid="57434" relation="include">
        </childnode>
        <childnode refid="57425" relation="include">
        </childnode>
        <childnode refid="57435" relation="include">
        </childnode>
        <childnode refid="57436" relation="include">
        </childnode>
        <childnode refid="57439" relation="include">
        </childnode>
        <childnode refid="57440" relation="include">
        </childnode>
      </node>
      <node id="57384">
        <label>climits</label>
      </node>
      <node id="57460">
        <label>AMReX_IArrayBox.H</label>
        <link refid="AMReX__IArrayBox_8H"/>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57389" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
      </node>
      <node id="57481">
        <label>AMReX_MLABecLaplacian.H</label>
        <link refid="AMReX__MLABecLaplacian_8H"/>
        <childnode refid="57482" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57383" relation="include">
        </childnode>
      </node>
      <node id="57440">
        <label>AMReX_CudaGraph.H</label>
        <link refid="AMReX__CudaGraph_8H"/>
      </node>
      <node id="57398">
        <label>mutex</label>
      </node>
      <node id="57405">
        <label>chrono</label>
      </node>
      <node id="57428">
        <label>AMReX_GpuLaunchMacrosC.H</label>
        <link refid="AMReX__GpuLaunchMacrosC_8H"/>
      </node>
      <node id="57418">
        <label>csignal</label>
      </node>
      <node id="57467">
        <label>AMReX_MultiMask.H</label>
        <link refid="AMReX__MultiMask_8H"/>
        <childnode refid="57468" relation="include">
        </childnode>
        <childnode refid="57442" relation="include">
        </childnode>
        <childnode refid="57444" relation="include">
        </childnode>
      </node>
      <node id="57471">
        <label>thread</label>
      </node>
      <node id="57468">
        <label>AMReX_Mask.H</label>
        <link refid="AMReX__Mask_8H"/>
        <childnode refid="57389" relation="include">
        </childnode>
        <childnode refid="57366" relation="include">
        </childnode>
      </node>
      <node id="57396">
        <label>AMReX_CArena.H</label>
        <link refid="AMReX__CArena_8H"/>
        <childnode refid="57395" relation="include">
        </childnode>
        <childnode refid="57397" relation="include">
        </childnode>
        <childnode refid="57364" relation="include">
        </childnode>
        <childnode refid="57398" relation="include">
        </childnode>
        <childnode refid="57399" relation="include">
        </childnode>
        <childnode refid="57361" relation="include">
        </childnode>
        <childnode refid="57394" relation="include">
        </childnode>
      </node>
      <node id="57390">
        <label>type_traits</label>
      </node>
      <node id="57397">
        <label>set</label>
      </node>
      <node id="57393">
        <label>AMReX_BArena.H</label>
        <link refid="AMReX__BArena_8H"/>
        <childnode refid="57394" relation="include">
        </childnode>
      </node>
      <node id="57357">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="57473">
        <label>AMReX_FabConv.H</label>
        <link refid="AMReX__FabConv_8H"/>
        <childnode refid="57368" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57354" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
      </node>
      <node id="57433">
        <label>AMReX_GpuElixir.H</label>
        <link refid="AMReX__GpuElixir_8H"/>
        <childnode refid="57394" relation="include">
        </childnode>
      </node>
      <node id="57370">
        <label>algorithm</label>
      </node>
      <node id="57427">
        <label>AMReX_GpuDevice.H</label>
        <link refid="AMReX__GpuDevice_8H"/>
        <childnode refid="57381" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57375" relation="include">
        </childnode>
        <childnode refid="57355" relation="include">
        </childnode>
        <childnode refid="57403" relation="include">
        </childnode>
        <childnode refid="57424" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
      </node>
      <node id="57469">
        <label>AMReX_LO_BCTYPES.H</label>
        <link refid="AMReX__LO__BCTYPES_8H"/>
      </node>
      <node id="57417">
        <label>execinfo.h</label>
      </node>
      <node id="57432">
        <label>cstring</label>
      </node>
      <node id="57447">
        <label>AMReX_RealVect.H</label>
        <link refid="AMReX__RealVect_8H"/>
        <childnode refid="57395" relation="include">
        </childnode>
        <childnode refid="57381" relation="include">
        </childnode>
        <childnode refid="57432" relation="include">
        </childnode>
        <childnode refid="57360" relation="include">
        </childnode>
        <childnode refid="57382" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57351" relation="include">
        </childnode>
        <childnode refid="57364" relation="include">
        </childnode>
        <childnode refid="57448" relation="include">
        </childnode>
        <childnode refid="57380" relation="include">
        </childnode>
      </node>
      <node id="57445">
        <label>AMReX_CoordSys.H</label>
        <link refid="AMReX__CoordSys_8H"/>
        <childnode refid="57383" relation="include">
        </childnode>
        <childnode refid="57355" relation="include">
        </childnode>
        <childnode refid="57373" relation="include">
        </childnode>
        <childnode refid="57374" relation="include">
        </childnode>
        <childnode refid="57385" relation="include">
        </childnode>
        <childnode refid="57367" relation="include">
        </childnode>
      </node>
      <node id="57365">
        <label>memory</label>
      </node>
      <node id="57431">
        <label>AMReX_GpuAsyncArray.H</label>
        <link refid="AMReX__GpuAsyncArray_8H"/>
        <childnode refid="57395" relation="include">
        </childnode>
        <childnode refid="57432" relation="include">
        </childnode>
        <childnode refid="57381" relation="include">
        </childnode>
        <childnode refid="57365" relation="include">
        </childnode>
        <childnode refid="57394" relation="include">
        </childnode>
        <childnode refid="57426" relation="include">
        </childnode>
        <childnode refid="57427" relation="include">
        </childnode>
      </node>
      <node id="57434">
        <label>AMReX_GpuMemory.H</label>
        <link refid="AMReX__GpuMemory_8H"/>
        <childnode refid="57356" relation="include">
        </childnode>
        <childnode refid="57378" relation="include">
        </childnode>
        <childnode refid="57427" relation="include">
        </childnode>
        <childnode refid="57426" relation="include">
        </childnode>
        <childnode refid="57394" relation="include">
        </childnode>
        <childnode refid="57381" relation="include">
        </childnode>
      </node>
      <node id="57373">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="57371" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__MLMG_8H" kindref="compound">AMReX_MLMG.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__MultiFabUtil_8H" kindref="compound">AMReX_MultiFabUtil.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__VisMF_8H" kindref="compound">AMReX_VisMF.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BC__TYPES_8H" kindref="compound">AMReX_BC_TYPES.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__MLMG__F_8H" kindref="compound">AMReX_MLMG_F.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__MLMG__K_8H" kindref="compound">AMReX_MLMG_K.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__MLABecLaplacian_8H" kindref="compound">AMReX_MLABecLaplacian.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_PETSC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;petscksp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__PETSc_8H" kindref="compound">AMReX_PETSc.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__EBFArrayBox_8H" kindref="compound">AMReX_EBFArrayBox.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__EBFabFactory_8H" kindref="compound">AMReX_EBFabFactory.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__EBMultiFabUtil_8H" kindref="compound">AMReX_EBMultiFabUtil.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__MLEBABecLap_8H" kindref="compound">AMReX_MLEBABecLap.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sol:<sp/>full<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rhs:<sp/>rhs<sp/>of<sp/>the<sp/>original<sp/>equation<sp/>L(sol)<sp/>=<sp/>rhs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>res:<sp/>rhs<sp/>of<sp/>the<sp/>residual<sp/>equation<sp/>L(cor)<sp/>=<sp/>res</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>usually<sp/>res<sp/>is<sp/>the<sp/>result<sp/>of<sp/>rhs-L(sol),<sp/>but<sp/>is<sp/>the<sp/>result<sp/>of<sp/>res-L(cor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cor/cor_hold:<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rescor:<sp/>res<sp/>-<sp/>L(cor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>x<sp/>and<sp/>b<sp/>as<sp/>in<sp/>L(x)<sp/>=<sp/>b.<sp/><sp/>Here<sp/>x<sp/>could<sp/>be<sp/>either<sp/>sol<sp/>or<sp/>cor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BCMode:<sp/>Inhomogeneous<sp/>for<sp/>original<sp/>equation,<sp/>Homogeneous<sp/>for<sp/>residual<sp/>equation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LinOp<sp/>functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>solutionresidual()<sp/><sp/>:<sp/>rhs<sp/>-<sp/>L(sol),<sp/>sol.FillBoundary()<sp/>will<sp/>be<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BC<sp/>data<sp/>can<sp/>be<sp/>optionally<sp/>provided.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>correctionResidual():<sp/>res<sp/>-<sp/>L(cor),<sp/>cor.FillBoundary()<sp/>will<sp/>be<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>There<sp/>are<sp/>BC<sp/>modes:<sp/>Homogeneous<sp/>and<sp/>Inhomogeneous.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>Inhomogeneous,<sp/>BC<sp/>data<sp/>can<sp/>be<sp/>optionally<sp/>provided.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>reflux()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Given<sp/>sol<sp/>on<sp/>crse<sp/>and<sp/>fine<sp/>AMR<sp/>levels,<sp/>reflux<sp/>coarse<sp/>res<sp/>at<sp/>crse/fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>smooth()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>L(cor)<sp/>=<sp/>res.<sp/>cor.FillBoundary()<sp/>will<sp/>be<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a4d80ba0f675a1b751f35d66d04253dd6" kindref="member">MLMG::MLMG</ref><sp/>(MLLinOp&amp;<sp/>a_lp)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>linop(a_lp),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>namrlevs(a_lp.NAMRLevels()),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>finest_amr_lev(a_lp.NAMRLevels()-1)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a12c3c0793a39356963dd1824588b7593" kindref="member">MLMG::~MLMG</ref><sp/>()</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">Real</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a6060de4980b23d73b67610a39565af75" kindref="member">MLMG::solve</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>a_sol,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab<sp/>const*&gt;&amp;<sp/>a_rhs,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>a_tol_rel,<sp/>Real<sp/>a_tol_abs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>checkpoint_file)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::solve()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkpoint_file<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a52cbdeb167834e42f778f74b3047938d" kindref="member">checkPoint</ref>(a_sol,<sp/>a_rhs,<sp/>a_tol_rel,<sp/>a_tol_abs,<sp/>checkpoint_file);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a7a1920d61156abc05a60135aefe8bc67" kindref="member">BottomSolver::Default</ref>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a7c1c62615a265e25a92ce37b3b287933" kindref="member">getDefaultBottomSolver</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a9d87b5177c778e77c47e29f2b536cd1b" kindref="member">BottomSolver::hypre</ref>)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mo<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" kindref="member">getMaxOrder</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" kindref="member">setMaxOrder</ref>(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(3,mo));<sp/><sp/></highlight><highlight class="comment">//<sp/>maxorder<sp/>=<sp/>4<sp/>not<sp/>supported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_nsolve<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" kindref="member">m_parent</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>solve_start_time<sp/>=<sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>composite_norminf;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a996893d07fc4ae7a2efb074a010c1041" kindref="member">prepareForSolve</ref>(a_sol,<sp/>a_rhs);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a6e3b238696c2c79000390a6a98f7b9e9" kindref="member">computeMLResidual</ref>(<ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>resnorm0<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1aa86c7015c1ee9cfde217cef76c1a55a5" kindref="member">MLResNormInf</ref>(<ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>,<sp/>local);<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>rhsnorm0<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a2f0fcfb202fff08a11c25408b72dd505" kindref="member">MLRhsNormInf</ref>(local);<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_nsolve)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParallelAllReduce::Max&lt;Real&gt;({resnorm0,<sp/>rhsnorm0},<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Initial<sp/>rhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhsnorm0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Initial<sp/>residual<sp/>(resid0)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>resnorm0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>max_norm;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>norm_name;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a383d3320ac67af7ea304a3fad4c53ff6" kindref="member">always_use_bnorm</ref><sp/>or<sp/>rhsnorm0<sp/>&gt;=<sp/>resnorm0)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bnorm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_norm<sp/>=<sp/>rhsnorm0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;resid0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_norm<sp/>=<sp/>resnorm0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real<sp/>res_target<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(a_tol_abs,<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(a_tol_rel,1.e-16)*max_norm);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_nsolve<sp/>&amp;&amp;<sp/>resnorm0<sp/>&lt;=<sp/>res_target)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>composite_norminf<sp/>=<sp/>resnorm0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>No<sp/>iterations<sp/>needed\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>iter_start_time<sp/>=<sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>niters<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a16a61c9fe1782c8afde4a096b564fb90" kindref="member">do_fixed_number_of_iters</ref><sp/>?<sp/><ref refid="classamrex_1_1MLMG_1a16a61c9fe1782c8afde4a096b564fb90" kindref="member">do_fixed_number_of_iters</ref><sp/>:<sp/><ref refid="classamrex_1_1MLMG_1ae4f94ee42b8da24efdafd34b023e2457" kindref="member">max_iters</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;<sp/>iter<sp/>&lt;<sp/>niters;<sp/>++iter)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a97f2d0353ab1bbb9e4db171de41e2501" kindref="member">oneIter</ref>(iter);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>convergence<sp/>on<sp/>the<sp/>fine<sp/>amr<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1af609ac426f564d969f87201e8189eaf1" kindref="member">computeResidual</ref>(<ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_nsolve)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>fine_norminf<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a3ee68a8bba6178a55d1ca183be3f6fb3" kindref="member">ResNormInf</ref>(<ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>composite_norminf<sp/>=<sp/>fine_norminf;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Iteration<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(3)<sp/>&lt;&lt;<sp/>iter+1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Fine<sp/>resid/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>norm_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fine_norminf/max_norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fine_converged<sp/>=<sp/>(fine_norminf<sp/>&lt;=<sp/>res_target);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref><sp/>==<sp/>1<sp/>and<sp/>fine_converged)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fine_converged)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finest<sp/>level<sp/>is<sp/>converged,<sp/>but<sp/>we<sp/>still<sp/>need<sp/>to<sp/>test<sp/>the<sp/>coarse<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a6e3b238696c2c79000390a6a98f7b9e9" kindref="member">computeMLResidual</ref>(<ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>-1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>crse_norminf<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1aa86c7015c1ee9cfde217cef76c1a55a5" kindref="member">MLResNormInf</ref>(<ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>-1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Iteration<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(3)<sp/>&lt;&lt;<sp/>iter+1</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Crse<sp/>resid/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>crse_norminf/max_norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>=<sp/>(crse_norminf<sp/>&lt;=<sp/>res_target);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>composite_norminf<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(fine_norminf,<sp/>crse_norminf);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(converged)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Final<sp/>Iter.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter+1</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>resid,<sp/>resid/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>composite_norminf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>composite_norminf/max_norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!converged<sp/>&amp;&amp;<sp/><ref refid="classamrex_1_1MLMG_1a16a61c9fe1782c8afde4a096b564fb90" kindref="member">do_fixed_number_of_iters</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Failed<sp/>to<sp/>converge<sp/>after<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1ae4f94ee42b8da24efdafd34b023e2457" kindref="member">max_iters</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>iterations.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>resid,<sp/>resid/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>composite_norminf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>composite_norminf/max_norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;MLMG<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>[<ref refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001af8c1043cde20f8e1d9d022abb2c9ffad" kindref="member">iter_time</ref>]<sp/>=<sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>()<sp/>-<sp/>iter_start_time;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ng_back<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1ac6ee903a66f419d1ed10533cc13bd4e4" kindref="member">final_fill_bc</ref><sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a_sol[alev]<sp/>!=<sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev])</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(*a_sol[alev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>ng_back);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>[<ref refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001a9806779ed6ebcc94ecd07dbb3ff6acca" kindref="member">solve_time</ref>]<sp/>=<sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>()<sp/>-<sp/>solve_start_time;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParallelReduce::Max&lt;Real&gt;(<ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>.data(),<sp/><ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),<sp/>0,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelContext_1a5f6737315bff6905419103b17acf3d06" kindref="member">ParallelContext::MyProcSub</ref>()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1AllPrint" kindref="compound">amrex::AllPrint</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Timers:<sp/>Solve<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>[<ref refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001a9806779ed6ebcc94ecd07dbb3ff6acca" kindref="member">solve_time</ref>]</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Iter<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>[<ref refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001af8c1043cde20f8e1d9d022abb2c9ffad" kindref="member">iter_time</ref>]</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Bottom<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>[<ref refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001accea4ad3befe3a4c0c996cacbc4b1fb3" kindref="member">bottom_time</ref>]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>composite_norminf;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/><sp/>:<sp/>Residual<sp/>(res)<sp/>on<sp/>the<sp/>finest<sp/>AMR<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>out<sp/>:<sp/>sol<sp/>on<sp/>all<sp/>AMR<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1MLMG_1a97f2d0353ab1bbb9e4db171de41e2501" kindref="member">MLMG::oneIter</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::oneIter()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>alev<sp/>&gt;<sp/>0;<sp/>--alev)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a38df331fcb36de71c4af020b2e1117ed" kindref="member">miniCycle</ref>(alev);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" kindref="member">MultiFab::Add</ref>(*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>residual<sp/>for<sp/>the<sp/>coarse<sp/>AMR<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aa802d8378f3912da5b884fcc07c2351b" kindref="member">computeResWithCrseSolFineCor</ref>(alev-1,alev);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alev<sp/>!=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">std::swap</ref>(<ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev][0],<sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0]);<sp/></highlight><highlight class="comment">//<sp/>save<sp/>it<sp/>for<sp/>the<sp/>up<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coarsest<sp/>amr<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enforce<sp/>solvability<sp/>if<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa8d6ef9e77180f9076ef5cb83f48bb50" kindref="member">isSingular</ref>(0))</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ae5f98b72769ed94a44f850aa8aa1e1ba" kindref="member">makeSolvable</ref>(0,0,<ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[0][0]);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1aefc9d57def6cdc2851da4d26e38e092f" kindref="member">max_fmg_iters</ref>)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a7085d7450d545c1f593954d5e445af02" kindref="member">mgFcycle</ref><sp/>();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a6b92f271588ce53fd24d1f7b2c1442a0" kindref="member">mgVcycle</ref><sp/>(0,<sp/>0);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" kindref="member">MultiFab::Add</ref>(*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[0],<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[0][0],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>1;<sp/>alev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Fine<sp/>AMR<sp/>correction)<sp/>=<sp/>I(Coarse<sp/>AMR<sp/>correction)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a884666fcc4158d42a4f01c83e5d454dc" kindref="member">interpCorrection</ref>(alev);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" kindref="member">MultiFab::Add</ref>(*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alev<sp/>!=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" kindref="member">MultiFab::Add</ref>(*<ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev][0],<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>fine<sp/>AMR<sp/>level<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a97d673162294d25b9b325b636cb9183d" kindref="member">computeResWithCrseCorFineCor</ref>(alev);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a38df331fcb36de71c4af020b2e1117ed" kindref="member">miniCycle</ref>(alev);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" kindref="member">MultiFab::Add</ref>(*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alev<sp/>!=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" kindref="member">MultiFab::Add</ref>(*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0],<sp/>*<ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev][0],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a92c1d883b63949e33c6acba2c0e19c6b" kindref="member">averageDownAndSync</ref>();</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>multi-level<sp/>Residual<sp/>(res)<sp/>up<sp/>to<sp/>amrlevmax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a6e3b238696c2c79000390a6a98f7b9e9" kindref="member">MLMG::computeMLResidual</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlevmax)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::computeMLResidual()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>amrlevmax;<sp/>alev<sp/>&gt;=<sp/>0;<sp/>--alev)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab*<sp/>crse_bcdata<sp/>=<sp/>(alev<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev-1]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a37cdc5b58be54be165fee5cc26a5f5e1" kindref="member">solutionResidual</ref>(alev,<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev][mglev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev],<sp/>crse_bcdata);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537" kindref="member">reflux</ref>(alev,<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev][mglev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev],</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev+1][mglev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev+1],<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev+1]);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>single<sp/>AMR<sp/>level<sp/>residual<sp/>without<sp/>masking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1af609ac426f564d969f87201e8189eaf1" kindref="member">MLMG::computeResidual</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::computeResidual()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>x<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>b<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>r<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev][0];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab*<sp/>crse_bcdata<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alev<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crse_bcdata<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev-1];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a37cdc5b58be54be165fee5cc26a5f5e1" kindref="member">solutionResidual</ref>(alev,<sp/>r,<sp/>x,<sp/>b,<sp/>crse_bcdata);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>coarse<sp/>AMR<sp/>level<sp/>composite<sp/>residual<sp/>with<sp/>coarse<sp/>solution<sp/>and<sp/>fine<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1aa802d8378f3912da5b884fcc07c2351b" kindref="member">MLMG::computeResWithCrseSolFineCor</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>calev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>falev)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::computeResWithCrseSolFineCor()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>crse_sol<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[calev];</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>crse_rhs<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[calev];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>crse_res<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[calev][0];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_sol<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>fine_rhs<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[falev];</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[falev][0];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_res<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[falev][0];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_rescor<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[falev][0];</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab*<sp/>crse_bcdata<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(calev<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crse_bcdata<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[calev-1];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a37cdc5b58be54be165fee5cc26a5f5e1" kindref="member">solutionResidual</ref>(calev,<sp/>crse_res,<sp/>crse_sol,<sp/>crse_rhs,<sp/>crse_bcdata);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a824432661ed84da479fefccbf118f6fe" kindref="member">correctionResidual</ref>(falev,<sp/>0,<sp/>fine_rescor,<sp/>fine_cor,<sp/>fine_res,<sp/><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884a548465e8241b26162c8e0a7b0cdfc5e7" kindref="member">BCMode::Homogeneous</ref>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(fine_res,<sp/>fine_rescor,<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537" kindref="member">reflux</ref>(calev,<sp/>crse_res,<sp/>crse_sol,<sp/>crse_rhs,<sp/>fine_res,<sp/>fine_sol,<sp/>fine_rhs);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrrr<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" kindref="member">AMRRefRatio</ref>(calev);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a83baea24aee17c98e8771fa6eea0822f" kindref="member">amrex::EB_average_down</ref>(fine_res,<sp/>crse_res,<sp/>0,<sp/>ncomp,<sp/>amrrr);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" kindref="member">amrex::average_down</ref>(fine_res,<sp/>crse_res,<sp/>0,<sp/>ncomp,<sp/>amrrr);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>fine<sp/>AMR<sp/>level<sp/>residual<sp/>fine_res<sp/>=<sp/>fine_res<sp/>-<sp/>L(fine_cor)<sp/>with<sp/>coarse<sp/>providing<sp/>BC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a97d673162294d25b9b325b636cb9183d" kindref="member">MLMG::computeResWithCrseCorFineCor</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>falev)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::computeResWithCrseCorFineCor()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>crse_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[falev-1][0];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[falev][0];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_res<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[falev][0];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_rescor<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[falev][0];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fine_rescor<sp/>=<sp/>fine_res<sp/>-<sp/>L(fine_cor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a824432661ed84da479fefccbf118f6fe" kindref="member">correctionResidual</ref>(falev,<sp/>0,<sp/>fine_rescor,<sp/>fine_cor,<sp/>fine_res,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884ae9990b3a39151b6f2175caa7621e0c4b" kindref="member">BCMode::Inhomogeneous</ref>,<sp/>&amp;crse_cor);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(fine_res,<sp/>fine_rescor,<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a38df331fcb36de71c4af020b2e1117ed" kindref="member">MLMG::miniCycle</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::miniCycle()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a6b92f271588ce53fd24d1f7b2c1442a0" kindref="member">mgVcycle</ref>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_str_helper<sp/>(std::ostringstream<sp/>&amp;<sp/>oss)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_str_helper<sp/>(std::ostringstream<sp/>&amp;<sp/>oss,<sp/>T<sp/>x,<sp/>Ts...<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>x;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>make_str_helper(oss,<sp/>xs...);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">std::string<sp/>make_str<sp/>(Ts...<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>make_str_helper(oss,<sp/>xs...);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/><sp/><sp/>:<sp/>Residual<sp/>(res)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>out<sp/><sp/>:<sp/>Correction<sp/>(cor)<sp/>from<sp/>bottom<sp/>to<sp/>this<sp/>function&apos;s<sp/>local<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a6b92f271588ce53fd24d1f7b2c1442a0" kindref="member">MLMG::mgVcycle</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev_top)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::mgVcycle()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev_bottom<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(amrlev)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>mglev_top;<sp/>mglev<sp/>&lt;<sp/>mglev_bottom;<sp/>++mglev)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>blp_mgv_down_lev_str<sp/>=<sp/>make_str(</highlight><highlight class="stringliteral">&quot;MLMG::mgVcycle_down::&quot;</highlight><highlight class="normal">,<sp/>mglev);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(blp_mgv_down_lev_str,<sp/>blp_mgv_down_lev);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev].norm0();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>LEVEL<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>amrlev<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mglev</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>DN:<sp/>Norm<sp/>before<sp/>smooth<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev]-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skip_fillboundary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1a8519bc33f4e84ff1b590cf406c0c9506" kindref="member">nu1</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acf3d13b45072c825f835b9b9a536e774" kindref="member">smooth</ref>(amrlev,<sp/>mglev,<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev],<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev],</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_fillboundary);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_fillboundary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rescor<sp/>=<sp/>res<sp/>-<sp/>L(cor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" kindref="member">computeResOfCorrection</ref>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[amrlev][mglev].norm0();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>LEVEL<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>amrlev<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mglev</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>DN:<sp/>Norm<sp/>after<sp/><sp/>smooth<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>res_crse<sp/>=<sp/>R(rescor_fine);<sp/>this<sp/>provides<sp/>res/b<sp/>to<sp/>the<sp/>level<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a5a1bffd08a85405f9a9fbeed7c20fd97" kindref="member">restriction</ref>(amrlev,<sp/>mglev+1,<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev+1],<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[amrlev][mglev]);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::mgVcycle_bottom&quot;</highlight><highlight class="normal">,<sp/>blp_bottom);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amrlev<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev_bottom].norm0();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>LEVEL<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>amrlev<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mglev_bottom</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>DN:<sp/>Norm<sp/>before<sp/>bottom<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a105413ba8fce8beab99c2b7f11f0f028" kindref="member">bottomSolve</ref>();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" kindref="member">computeResOfCorrection</ref>(amrlev,<sp/>mglev_bottom);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[amrlev][mglev_bottom].norm0();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>LEVEL<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>amrlev<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mglev_bottom</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>UP:<sp/>Norm<sp/>after<sp/><sp/>bottom<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev_bottom].norm0();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>LEVEL<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>amrlev<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mglev_bottom<sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>before<sp/>smooth<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev_bottom]-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skip_fillboundary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1a8519bc33f4e84ff1b590cf406c0c9506" kindref="member">nu1</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acf3d13b45072c825f835b9b9a536e774" kindref="member">smooth</ref>(amrlev,<sp/>mglev_bottom,<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev_bottom],<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev_bottom],</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_fillboundary);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_fillboundary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" kindref="member">computeResOfCorrection</ref>(amrlev,<sp/>mglev_bottom);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[amrlev][mglev_bottom].norm0();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>LEVEL<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>amrlev<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mglev_bottom<sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>after<sp/><sp/>smooth<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(blp_bottom);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>mglev_bottom-1;<sp/>mglev<sp/>&gt;=<sp/>mglev_top;<sp/>--mglev)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>blp_mgv_up_lev_str<sp/>=<sp/>make_str(</highlight><highlight class="stringliteral">&quot;MLMG::mgVcycle_up::&quot;</highlight><highlight class="normal">,<sp/>mglev);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(blp_mgv_up_lev_str,<sp/>blp_mgv_up_lev);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cor_fine<sp/>+=<sp/>I(cor_crse)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ae1d69e956c3e0a266b4b2c43c2881e3a" kindref="member">addInterpCorrection</ref>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" kindref="member">computeResOfCorrection</ref>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[amrlev][mglev].norm0();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>LEVEL<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>amrlev<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mglev</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>UP:<sp/>Norm<sp/>before<sp/>smooth<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1a647e21342109e81cc50bc8825bc852ce" kindref="member">nu2</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acf3d13b45072c825f835b9b9a536e774" kindref="member">smooth</ref>(amrlev,<sp/>mglev,<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev],<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev]);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/><ref refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" kindref="member">computeResOfCorrection</ref>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" kindref="member">computeResOfCorrection</ref>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[amrlev][mglev].norm0();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>LEVEL<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>amrlev<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mglev</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>UP:<sp/>Norm<sp/>after<sp/><sp/>smooth<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>norm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FMG<sp/>cycle<sp/>on<sp/>the<sp/>coarsest<sp/>AMR<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in:<sp/><sp/>Residual<sp/>on<sp/>the<sp/>top<sp/>MG<sp/>level<sp/>(i.e.,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>out:<sp/>Correction<sp/>(cor)<sp/>on<sp/>all<sp/>MG<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a7085d7450d545c1f593954d5e445af02" kindref="member">MLMG::mgFcycle</ref><sp/>()</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::mgFcycle()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ratio<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mg_bottom_lev<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(amrlev)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>1;<sp/>mglev<sp/>&lt;=<sp/>mg_bottom_lev;<sp/>++mglev)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>for<sp/>EB<sp/>cell-centered,<sp/>we<sp/>need<sp/>to<sp/>use<sp/>EB_average_down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" kindref="member">amrex::average_down</ref>(<ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev-1],<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev],<sp/>0,<sp/>ncomp,<sp/>ratio);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a105413ba8fce8beab99c2b7f11f0f028" kindref="member">bottomSolve</ref>();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>mg_bottom_lev-1;<sp/>mglev<sp/>&gt;=<sp/>0;<sp/>--mglev)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cor_fine<sp/>=<sp/>I(cor_crse)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a884666fcc4158d42a4f01c83e5d454dc" kindref="member">interpCorrection</ref><sp/>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rescor<sp/>=<sp/>res<sp/>-<sp/>L(cor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" kindref="member">computeResOfCorrection</ref>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>res<sp/>=<sp/>rescor;<sp/>this<sp/>provides<sp/>b<sp/>to<sp/>the<sp/>vcycle<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(<ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev],<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[amrlev][mglev],<sp/>0,0,ncomp,nghost);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>cor;<sp/>do<sp/>v-cycle;<sp/>add<sp/>the<sp/>saved<sp/>to<sp/>cor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">std::swap</ref>(<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev],<sp/><ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[amrlev][mglev]);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a6b92f271588ce53fd24d1f7b2c1442a0" kindref="member">mgVcycle</ref>(amrlev,<sp/>mglev);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" kindref="member">MultiFab::Add</ref>(*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev],<sp/>*<ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[amrlev][mglev],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Interpolate<sp/>correction<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>AMR<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a884666fcc4158d42a4f01c83e5d454dc" kindref="member">MLMG::interpCorrection</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev)</highlight></codeline>
<codeline lineno="551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>gpu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::interpCorrection_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>crse_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev-1][0];</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0];</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>BoxArray<sp/>ba<sp/>=<sp/>fine_cor.boxArray();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrrr<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" kindref="member">AMRRefRatio</ref>(alev-1);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>IntVect<sp/>refratio{amrrr};</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>ba.coarsen(refratio);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&amp;<sp/>crse_geom<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" kindref="member">Geom</ref>(alev-1,0);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ng_src<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ng_dst<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>()<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ng_src<sp/>=<sp/>nghost;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ng_dst<sp/>=<sp/>nghost;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab<sp/>cfine(ba,<sp/>fine_cor.DistributionMap(),<sp/>ncomp,<sp/>ng_dst);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>cfine.setVal(0.0);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>cfine.ParallelCopy(crse_cor,<sp/>0,<sp/>0,<sp/>ncomp,<sp/>ng_src,<sp/>ng_dst,<sp/>crse_geom.periodicity());</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEB<sp/>=<sp/>fine_cor.hasEBFabFactory();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a3f286b9916f92985abdf7743382f6307" kindref="member">ignore_unused</ref>(isEB);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EBFArrayBoxFactory<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;(fine_cor.Factory()));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FabArray&lt;EBCellFlagFab&gt;*<sp/>flags<sp/>=<sp/>(factory)<sp/>?<sp/>&amp;(factory-&gt;getMultiEBCellFlagFab())<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gpu::LaunchSafeGuard<sp/>lg(!isEB<sp/>&amp;&amp;<sp/><ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">Gpu::inLaunchRegion</ref>());<sp/></highlight><highlight class="comment">//<sp/>turn<sp/>off<sp/>gpu<sp/>for<sp/>eb<sp/>for<sp/>now<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFItInfo<sp/>mfi_info;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1Gpu_1a84b4e8c1e004493e6e16003405cec793" kindref="member">Gpu::notInLaunchRegion</ref>())<sp/>mfi_info.EnableTiling().SetDynamic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>if<sp/>(Gpu::notInLaunchRegion())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MFIter<sp/>mfi(fine_cor,<sp/>mfi_info);<sp/>mfi.isValid();<sp/>++mfi)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>bx<sp/>=<sp/>mfi.tilebox();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>call_lincc;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEB)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>flag<sp/>=<sp/>(*flags)[mfi];</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag.getType(<ref refid="namespaceamrex_1aedb1ce8af83d1d6323271203b7168bcc" kindref="member">amrex::grow</ref>(bx,1))<sp/>==<sp/><ref refid="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf37d08ae228a87dc6b265fd1019c97d" kindref="member">FabType::regular</ref>)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_lincc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex__mlmg__interp__module_1a7bfd78ec9883e6e4c68bdb302ae49c85" kindref="member">amrex_mlmg_eb_cc_interp</ref>(BL_TO_FORTRAN_BOX(bx),</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(fine_cor[mfi]),</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(cfine[mfi]),</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(flag),</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;refratio[0],</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ncomp);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_lincc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_lincc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>call_lincc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(call_lincc)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ff<sp/>=<sp/>fine_cor.array(mfi);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cc<sp/>=<sp/>cfine.array(mfi);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(refratio[0])<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuLaunch_8H_1a20fce791cf3cebcb24e689bb5da837c0" kindref="member">AMREX_LAUNCH_HOST_DEVICE_LAMBDA</ref><sp/>(bx,<sp/>tbx,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ab8ae2d49a6f0c82b61e2164579ce20f8" kindref="member">mlmg_lin_cc_interp_r2</ref>(tbx,<sp/>ff,<sp/>cc,<sp/>ncomp);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuLaunch_8H_1a20fce791cf3cebcb24e689bb5da837c0" kindref="member">AMREX_LAUNCH_HOST_DEVICE_LAMBDA</ref><sp/>(bx,<sp/>tbx,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a23cb81a63b3874ab8ec7e3f7bf8c63bc" kindref="member">mlmg_lin_cc_interp_r4</ref>(tbx,<sp/>ff,<sp/>cc,<sp/>ncomp);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;mlmg_lin_cc_interp:<sp/>only<sp/>refratio<sp/>2<sp/>and<sp/>4<sp/>are<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1abd471ebf6086189835e778f06c053833" kindref="member">AMREX_ALWAYS_ASSERT</ref>(amrrr<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FArrayBox<sp/>tmpfab;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MFIter<sp/>mfi(fine_cor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>mfi.isValid();<sp/>++mfi)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>fbx<sp/>=<sp/>mfi.tilebox();</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>cbx<sp/>=<sp/><ref refid="namespaceamrex_1a9fb6c36ab72dfe92709f0ea89baa4824" kindref="member">amrex::coarsen</ref>(fbx,2);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dda334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">CFStrategy::none</ref>)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>tmpbx<sp/>=<sp/><ref refid="namespaceamrex_1abb7cbdfb8c8ec3d94bec38fcf10b92db" kindref="member">amrex::refine</ref>(cbx,2);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpfab.resize(tmpbx,ncomp);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__MLMG__F_8H_1af9b6d72e65f357245eaa9c11c1955cbc" kindref="member">amrex_mlmg_lin_nd_interp</ref>(BL_TO_FORTRAN_BOX(cbx),</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_BOX(tmpbx),</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(tmpfab),</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(cfine[mfi]),</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ncomp);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fine_cor[mfi].copy(tmpfab,<sp/>fbx,<sp/>0,<sp/>fbx,<sp/>0,<sp/>ncomp);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>tmpbx<sp/>=<sp/><ref refid="namespaceamrex_1abb7cbdfb8c8ec3d94bec38fcf10b92db" kindref="member">amrex::refine</ref>(cbx,2);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nghost<sp/>&gt;<sp/>1)<sp/>tmpbx.grow(2);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpfab.resize(tmpbx,ncomp);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__MLMG__F_8H_1ac644c66861ef980061d9b89112af2614" kindref="member">amrex_mlmg_lin_nd_interp_ghostnodes</ref>(BL_TO_FORTRAN_BOX(cbx),</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_BOX(tmpbx),</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(tmpfab),</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(cfine[mfi]),</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ncomp);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fine_cor[mfi].copy(tmpfab,<sp/>tmpbx,<sp/>0,<sp/>tmpbx,<sp/>0,<sp/>ncomp);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Interpolate<sp/>correction<sp/>between<sp/>MG<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inout:<sp/>Correction<sp/>(cor)<sp/>on<sp/>coarse<sp/>MG<sp/>lev.<sp/><sp/>(out<sp/>due<sp/>to<sp/>FillBoundary)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>out<sp/><sp/>:<sp/>Correction<sp/>(cor)<sp/>on<sp/>fine<sp/>MG<sp/>lev.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a884666fcc4158d42a4f01c83e5d454dc" kindref="member">MLMG::interpCorrection</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>gpu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::interpCorrection_2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>crse_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][mglev+1];</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>fine_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][mglev<sp/><sp/>];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&amp;<sp/>crse_geom<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" kindref="member">Geom</ref>(alev,mglev+1);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refratio<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab<sp/>cfine;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab*<sp/>cmf;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1a6a1aa0c151c5fe560ebb86c99194bfc3" kindref="member">amrex::isMFIterSafe</ref>(crse_cor,<sp/>fine_cor))</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crse_cor.FillBoundary(crse_geom.periodicity());</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmf<sp/>=<sp/>&amp;crse_cor;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoxArray<sp/>cba<sp/>=<sp/>fine_cor.boxArray();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cba.<ref refid="classamrex_1_1Geometry_1a1d9c01b45625d9e6f8e0e4d1cdd4a5a6" kindref="member">coarsen</ref>(refratio);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ng<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>()<sp/>?<sp/>crse_cor.nGrow()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>ng<sp/>=<sp/>nghost;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfine.define(cba,<sp/>fine_cor.DistributionMap(),<sp/>ncomp,<sp/>ng);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfine.setVal(0.0);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfine.ParallelCopy(crse_cor,<sp/>0,<sp/>0,<sp/>ncomp,<sp/>0,<sp/>ng,<sp/>crse_geom.periodicity());</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmf<sp/>=<sp/>&amp;<sp/>cfine;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEB<sp/>=<sp/>fine_cor.hasEBFabFactory();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a3f286b9916f92985abdf7743382f6307" kindref="member">ignore_unused</ref>(isEB);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EBFArrayBoxFactory<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;(fine_cor.Factory()));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FabArray&lt;EBCellFlagFab&gt;*<sp/>flags<sp/>=<sp/>(factory)<sp/>?<sp/>&amp;(factory-&gt;getMultiEBCellFlagFab())<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gpu::LaunchSafeGuard<sp/>lg(!isEB<sp/>&amp;&amp;<sp/><ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">Gpu::inLaunchRegion</ref>());<sp/></highlight><highlight class="comment">//<sp/>turn<sp/>off<sp/>gpu<sp/>for<sp/>eb<sp/>for<sp/>now<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFItInfo<sp/>mfi_info;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1Gpu_1a84b4e8c1e004493e6e16003405cec793" kindref="member">Gpu::notInLaunchRegion</ref>())<sp/>mfi_info.EnableTiling().SetDynamic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>if<sp/>(Gpu::notInLaunchRegion())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MFIter<sp/>mfi(fine_cor,<sp/>mfi_info);<sp/>mfi.isValid();<sp/>++mfi)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>bx<sp/>=<sp/>mfi.tilebox();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>call_lincc;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEB)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>flag<sp/>=<sp/>(*flags)[mfi];</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag.getType(<ref refid="namespaceamrex_1aedb1ce8af83d1d6323271203b7168bcc" kindref="member">amrex::grow</ref>(bx,1))<sp/>==<sp/><ref refid="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf37d08ae228a87dc6b265fd1019c97d" kindref="member">FabType::regular</ref>)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_lincc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex__mlmg__interp__module_1a7bfd78ec9883e6e4c68bdb302ae49c85" kindref="member">amrex_mlmg_eb_cc_interp</ref>(BL_TO_FORTRAN_BOX(bx),</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(fine_cor[mfi]),</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(<sp/><sp/>(*cmf)[mfi]),</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(flag),</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;refratio,<sp/>&amp;ncomp);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_lincc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_lincc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>call_lincc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(call_lincc)</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ff<sp/>=<sp/>fine_cor.array(mfi);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cc<sp/>=<sp/>cmf-&gt;array(mfi);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuLaunch_8H_1a20fce791cf3cebcb24e689bb5da837c0" kindref="member">AMREX_LAUNCH_HOST_DEVICE_LAMBDA</ref><sp/>(bx,<sp/>tbx,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ab8ae2d49a6f0c82b61e2164579ce20f8" kindref="member">mlmg_lin_cc_interp_r2</ref>(tbx,<sp/>ff,<sp/>cc,<sp/>ncomp);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FArrayBox<sp/>tmpfab;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MFIter<sp/>mfi(fine_cor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>mfi.isValid();<sp/>++mfi)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>fbx<sp/>=<sp/>mfi.tilebox();</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>cbx<sp/>=<sp/><ref refid="namespaceamrex_1a9fb6c36ab72dfe92709f0ea89baa4824" kindref="member">amrex::coarsen</ref>(fbx,2);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box&amp;<sp/>tmpbx<sp/>=<sp/><ref refid="namespaceamrex_1abb7cbdfb8c8ec3d94bec38fcf10b92db" kindref="member">amrex::refine</ref>(cbx,2);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpfab.resize(tmpbx,ncomp);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dda334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">CFStrategy::none</ref>)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__MLMG__F_8H_1af9b6d72e65f357245eaa9c11c1955cbc" kindref="member">amrex_mlmg_lin_nd_interp</ref>(BL_TO_FORTRAN_BOX(cbx),</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_BOX(tmpbx),</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(tmpfab),</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD((*cmf)[mfi]),</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ncomp);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__MLMG__F_8H_1ac644c66861ef980061d9b89112af2614" kindref="member">amrex_mlmg_lin_nd_interp_ghostnodes</ref>(BL_TO_FORTRAN_BOX(cbx),</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_BOX(tmpbx),</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD(tmpfab),</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_TO_FORTRAN_ANYD((*cmf)[mfi]),</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ncomp);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fine_cor[mfi].copy(tmpfab,<sp/>fbx,<sp/>0,<sp/>fbx,<sp/>0,<sp/>ncomp);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(Fine<sp/>MG<sp/>level<sp/>correction)<sp/>+=<sp/>I(Coarse<sp/>MG<sp/>level<sp/>correction)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1ae1d69e956c3e0a266b4b2c43c2881e3a" kindref="member">MLMG::addInterpCorrection</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev)</highlight></codeline>
<codeline lineno="820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::addInterpCorrection()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>crse_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][mglev+1];</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>fine_cor<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][mglev<sp/><sp/>];</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refratio<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab<sp/>cfine;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab*<sp/>cmf;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1a6a1aa0c151c5fe560ebb86c99194bfc3" kindref="member">amrex::isMFIterSafe</ref>(crse_cor,<sp/>fine_cor))</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmf<sp/>=<sp/>&amp;crse_cor;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoxArray<sp/>cba<sp/>=<sp/>fine_cor.boxArray();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cba.coarsen(refratio);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ng<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfine.define(cba,<sp/>fine_cor.DistributionMap(),<sp/>ncomp,<sp/>ng);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfine.ParallelCopy(crse_cor);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmf<sp/>=<sp/>&amp;cfine;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a55d585de64a0263a1b2308553cbaee13" kindref="member">interpolation</ref>(alev,<sp/>mglev,<sp/>fine_cor,<sp/>*cmf);</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>rescor<sp/>=<sp/>res<sp/>-<sp/>L(cor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/><sp/><sp/>:<sp/>res</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inout:<sp/>cor<sp/>(out<sp/>due<sp/>to<sp/>FillBoundary<sp/>in<sp/>linop.correctionResidual)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>out<sp/><sp/>:<sp/>rescor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" kindref="member">MLMG::computeResOfCorrection</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev)</highlight></codeline>
<codeline lineno="855"><highlight class="normal">{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG:computeResOfCorrection()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>x<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev];</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>b<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev];</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>r<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[amrlev][mglev];</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a824432661ed84da479fefccbf118f6fe" kindref="member">correctionResidual</ref>(amrlev,<sp/>mglev,<sp/>r,<sp/>x,<sp/>b,<sp/><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884a548465e8241b26162c8e0a7b0cdfc5e7" kindref="member">BCMode::Homogeneous</ref>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>At<sp/>the<sp/>true<sp/>bottom<sp/>of<sp/>the<sp/>coarset<sp/>AMR<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/><sp/>:<sp/>Residual<sp/>(res)<sp/>as<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>out<sp/>:<sp/>Correction<sp/>(cor)<sp/>as<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a105413ba8fce8beab99c2b7f11f0f028" kindref="member">MLMG::bottomSolve</ref><sp/>()</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a5de6da3652a1625f6640f4cb80451501" kindref="member">do_nsolve</ref>)</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ac67a9c44825a6f8c44a9ad53020e3109" kindref="member">NSolve</ref>(*<ref refid="classamrex_1_1MLMG_1ab20f4feb5164d7f9ee8bcbfaf6b8c497" kindref="member">ns_mlmg</ref>,<sp/>*<ref refid="classamrex_1_1MLMG_1a976935c58886c588cb51f006fd875809" kindref="member">ns_sol</ref>,<sp/>*<ref refid="classamrex_1_1MLMG_1aed64acecaae43cecb817b689d1da5e54" kindref="member">ns_rhs</ref>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a68fb3d9c54966ec9e5fda98b4b0cf169" kindref="member">actualBottomSolve</ref>();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1ac67a9c44825a6f8c44a9ad53020e3109" kindref="member">MLMG::NSolve</ref><sp/>(<ref refid="classamrex_1_1MLMG_1a4d80ba0f675a1b751f35d66d04253dd6" kindref="member">MLMG</ref>&amp;<sp/>a_solver,<sp/>MultiFab&amp;<sp/>a_sol,<sp/>MultiFab&amp;<sp/>a_rhs)</highlight></codeline>
<codeline lineno="881"><highlight class="normal">{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::NSolve()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>a_sol.setVal(0.0);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>a_rhs.setVal(0.0);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>a_rhs.ParallelCopy(<ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[0].back());</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>a_solver.solve({&amp;a_sol},<sp/>{&amp;a_rhs},<sp/>-1.0,<sp/>-1.0);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[0].back()-&gt;ParallelCopy(a_sol);</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a68fb3d9c54966ec9e5fda98b4b0cf169" kindref="member">MLMG::actualBottomSolve</ref><sp/>()</highlight></codeline>
<codeline lineno="896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::actualBottomSolve()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" kindref="member">isBottomActive</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>bottom_start_time<sp/>=<sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>();</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a09cb92f4a123081a62f72e26a4e3c2a3" kindref="member">ParallelContext::push</ref>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" kindref="member">BottomCommunicator</ref>());</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(amrlev)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>x<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev];</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab&amp;<sp/>b<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[amrlev][mglev];</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>x.setVal(0.0);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4aa24fa9dac0801f55f51de06cd8f9d132" kindref="member">BottomSolver::smoother</ref>)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skip_fillboundary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1a4076f55caa5454e91c6ca50f1d2d6c10" kindref="member">nuf</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acf3d13b45072c825f835b9b9a536e774" kindref="member">smooth</ref>(amrlev,<sp/>mglev,<sp/>x,<sp/>b,<sp/>skip_fillboundary);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_fillboundary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiFab*<sp/>bottom_b<sp/>=<sp/>&amp;b;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiFab<sp/>raii_b;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa6ff4935f1246d7c94ac38dc65c25d7d" kindref="member">isBottomSingular</ref>())</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raii_b.define(b.boxArray(),<sp/>b.DistributionMap(),<sp/>ncomp,<sp/>b.nGrow(),</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFInfo(),<sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(amrlev,mglev));</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(raii_b,b,0,0,ncomp,b.nGrow());</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bottom_b<sp/>=<sp/>&amp;raii_b;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ae5f98b72769ed94a44f850aa8aa1e1ba" kindref="member">makeSolvable</ref>(amrlev,mglev,*bottom_b);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a9d87b5177c778e77c47e29f2b536cd1b" kindref="member">BottomSolver::hypre</ref>)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aaf664a17642380d701b1b7b08e10fa63" kindref="member">bottomSolveWithHypre</ref>(x,<sp/>*bottom_b);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a1c626ad40ecbe4497cfe809fbc98f31f" kindref="member">BottomSolver::petsc</ref>)</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a1d9aa957bda2ed06061254fb7e187c3f" kindref="member">bottomSolveWithPETSc</ref>(x,<sp/>*bottom_b);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">MLCGSolver::Type</ref><sp/>cg_type;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a6e9cf3eef65da697796cf33f27eb0f57" kindref="member">BottomSolver::cg</ref><sp/>||</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a8d94447f423b03d332649d28ef49bfdb" kindref="member">BottomSolver::cgbicg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cg_type<sp/>=<sp/><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a5202c6586cac8bee468e86d1ff854231" kindref="member">MLCGSolver::Type::CG</ref>;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cg_type<sp/>=<sp/><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a17f477cd947340d28b9a4d6f49c1e43b" kindref="member">MLCGSolver::Type::BiCGStab</ref>;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a7449cb19c1e62e14a47d020cb696f0b5" kindref="member">bottomSolveWithCG</ref>(x,<sp/>*bottom_b,<sp/>cg_type);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>MLMG<sp/>solve<sp/>failed<sp/>then<sp/>set<sp/>the<sp/>correction<sp/>to<sp/>zero<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev]-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a8d94447f423b03d332649d28ef49bfdb" kindref="member">BottomSolver::cgbicg</ref><sp/>||</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a17ae71b06faf01831e130c5f94157064" kindref="member">BottomSolver::bicgcg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>==<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a8d94447f423b03d332649d28ef49bfdb" kindref="member">BottomSolver::cgbicg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cg_type<sp/>=<sp/><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a17f477cd947340d28b9a4d6f49c1e43b" kindref="member">MLCGSolver::Type::BiCGStab</ref>;<sp/></highlight><highlight class="comment">//<sp/>switch<sp/>to<sp/>bicg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cg_type<sp/>=<sp/><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a5202c6586cac8bee468e86d1ff854231" kindref="member">MLCGSolver::Type::CG</ref>;<sp/></highlight><highlight class="comment">//<sp/>switch<sp/>to<sp/>cg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a7449cb19c1e62e14a47d020cb696f0b5" kindref="member">bottomSolveWithCG</ref>(x,<sp/>*bottom_b,<sp/>cg_type);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[amrlev][mglev]-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>switch<sp/>permanently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cg_type<sp/>==<sp/><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a5202c6586cac8bee468e86d1ff854231" kindref="member">MLCGSolver::Type::CG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>=<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a6e9cf3eef65da697796cf33f27eb0f57" kindref="member">BottomSolver::cg</ref>;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref><sp/>=<sp/><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4ae123b37d2b5fd373237e049a1e68ca13" kindref="member">BottomSolver::bicgstab</ref>;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(ret==0)<sp/>?<sp/><ref refid="classamrex_1_1MLMG_1ae8120b974758c572d1463ee286204e10" kindref="member">nub</ref><sp/>:<sp/>nuf;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acf3d13b45072c825f835b9b9a536e774" kindref="member">smooth</ref>(amrlev,<sp/>mglev,<sp/>x,<sp/>b);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a6bdab1c75756fa491add5ace4c59550f" kindref="member">ParallelContext::pop</ref>();</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>[<ref refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001accea4ad3befe3a4c0c996cacbc4b1fb3" kindref="member">bottom_time</ref>]<sp/>+=<sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>()<sp/>-<sp/>bottom_start_time;</highlight></codeline>
<codeline lineno="987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a7449cb19c1e62e14a47d020cb696f0b5" kindref="member">MLMG::bottomSolveWithCG</ref><sp/>(MultiFab&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>b,<sp/><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">MLCGSolver::Type</ref><sp/>type)</highlight></codeline>
<codeline lineno="991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a7b344595276c27ed17dacb3ea1fb95aa" kindref="member">MLCGSolver</ref><sp/>cg_solver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>cg_solver.setSolver(type);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>cg_solver.setVerbose(<ref refid="classamrex_1_1MLMG_1ae2f4cd61322f224e598377431f47dde5" kindref="member">bottom_verbose</ref>);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>cg_solver.setMaxIter(<ref refid="classamrex_1_1MLMG_1a37be121e8fe2e8e8341198486fc07d0e" kindref="member">bottom_maxiter</ref>);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>cg_solver.setNGhost(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>());</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>cg_solver.solve(x,<sp/>b,<sp/><ref refid="classamrex_1_1MLMG_1a20ed3ce546f3fa0f009d66fd9bd1f2bc" kindref="member">bottom_reltol</ref>,<sp/><ref refid="classamrex_1_1MLMG_1aeb5b459a58233233b7546e3cef9e928f" kindref="member">bottom_abstol</ref>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Bottom<sp/>solve<sp/>failed.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>single-level<sp/>masked<sp/>inf-norm<sp/>of<sp/>Residual<sp/>(res).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal">Real</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a3ee68a8bba6178a55d1ca183be3f6fb3" kindref="member">MLMG::ResNormInf</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::ResNormInf()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>norm<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab*<sp/>pmf<sp/>=<sp/>&amp;(<ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev][mglev]);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>()<sp/>&amp;&amp;<sp/><ref refid="classamrex_1_1MLMG_1ab013a4dc85f37684f9e65f63b5318fc9" kindref="member">scratch</ref>[alev])<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmf<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1ab013a4dc85f37684f9e65f63b5318fc9" kindref="member">scratch</ref>[alev].get();</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(*pmf,<sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev][mglev],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>0);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EBFArrayBoxFactory<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev));</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>vfrac<sp/>=<sp/>factory-&gt;getVolFrac();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a62db3405e4e92a2a5bd5d3d9d19698ba" kindref="member">MultiFab::Multiply</ref>(*pmf,<sp/>vfrac,<sp/>0,<sp/>n,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>n++)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>newnorm<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>[alev])<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newnorm<sp/>=<sp/>pmf-&gt;norm0(*<ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>[alev],n,0,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newnorm<sp/>=<sp/>pmf-&gt;norm0(n,0,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(norm,<sp/>newnorm);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!local)<sp/><ref refid="namespaceamrex_1_1ParallelAllReduce_1abc654239660dfc6eb557813ef5314650" kindref="member">ParallelAllReduce::Max</ref>(norm,<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>());</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>norm;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>multi-level<sp/>masked<sp/>inf-norm<sp/>of<sp/>Residual<sp/>(res).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal">Real</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1aa86c7015c1ee9cfde217cef76c1a55a5" kindref="member">MLMG::MLResNormInf</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alevmax,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local)</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::MLResNormInf()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>r<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;=<sp/>alevmax;<sp/>++alev)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(r,<sp/><ref refid="classamrex_1_1MLMG_1a3ee68a8bba6178a55d1ca183be3f6fb3" kindref="member">ResNormInf</ref>(alev,</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!local)<sp/><ref refid="namespaceamrex_1_1ParallelAllReduce_1abc654239660dfc6eb557813ef5314650" kindref="member">ParallelAllReduce::Max</ref>(r,<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>());</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>multi-level<sp/>masked<sp/>inf-norm<sp/>of<sp/>RHS<sp/>(rhs).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal">Real</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a2f0fcfb202fff08a11c25408b72dd505" kindref="member">MLMG::MLRhsNormInf</ref><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local)</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::MLRhsNormInf()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>r<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiFab*<sp/>pmf<sp/>=<sp/>&amp;(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev]);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>()<sp/>&amp;&amp;<sp/><ref refid="classamrex_1_1MLMG_1ab013a4dc85f37684f9e65f63b5318fc9" kindref="member">scratch</ref>[alev])<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmf<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1ab013a4dc85f37684f9e65f63b5318fc9" kindref="member">scratch</ref>[alev].get();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(*pmf,<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>0);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EBFArrayBoxFactory<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>vfrac<sp/>=<sp/>factory-&gt;getVolFrac();</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1a62db3405e4e92a2a5bd5d3d9d19698ba" kindref="member">MultiFab::Multiply</ref>(*pmf,<sp/>vfrac,<sp/>0,<sp/>n,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;ncomp;<sp/>++n)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(r,<sp/>pmf-&gt;norm0(*<ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>[alev],n,0,</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(r,<sp/>pmf-&gt;norm0(n,0,</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!local)<sp/><ref refid="namespaceamrex_1_1ParallelAllReduce_1abc654239660dfc6eb557813ef5314650" kindref="member">ParallelAllReduce::Max</ref>(r,<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>());</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1aa2a89a45fc288f18494a1304ce6fe5e2" kindref="member">MLMG::buildFineMask</ref><sp/>()</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::buildFineMask()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>.clear();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>amrrr<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" kindref="member">AMRRefRatio</ref>();</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>[alev].reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>iMultiFab(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].boxArray(),<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].DistributionMap(),<sp/>1,<sp/>0));</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>[alev]-&gt;setVal(1);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoxArray<sp/>baf<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev+1].boxArray();</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baf.coarsen(amrrr[alev]);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MFIter<sp/>mfi(*<ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>[alev],<sp/>MFItInfo().SetDynamic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/>mfi.isValid();<sp/>++mfi)</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fab<sp/>=<sp/>(*<ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>[alev])[mfi];</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::pair&lt;int,Box&gt;<sp/>&gt;&amp;<sp/>isects<sp/>=<sp/>baf.intersections(fab.box());</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>isects.size();<sp/>++ii)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fab.setVal(0,isects[ii].<ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">second</ref>,0);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a5137ff000c6f8940f4b07a28f3bf9375" kindref="member">fixUpResidualMask</ref>(alev,<sp/>*<ref refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" kindref="member">fine_mask</ref>[alev]);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a996893d07fc4ae7a2efb074a010c1041" kindref="member">MLMG::prepareForSolve</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>a_sol,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab<sp/>const*&gt;&amp;<sp/>a_rhs)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::prepareForSolve()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(namrlevs<sp/>&lt;=<sp/>a_sol.size());</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(namrlevs<sp/>&lt;=<sp/>a_rhs.size());</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" kindref="member">timer</ref>.assign(<ref refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001ae447a282e35218ac782b215c4a1fccfc" kindref="member">ntimers</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" kindref="member">linop_prepared</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683" kindref="member">prepareForSolve</ref>();</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" kindref="member">linop_prepared</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ab68d7b11273242e632c9f8a422c911d7" kindref="member">needsUpdate</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_HYPRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>hypre_solver.reset();</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>hypre_bndry.reset();</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>hypre_node_solver.reset();</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_PETSC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>petsc_solver.reset();<sp/></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>petsc_bndry.reset();<sp/></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev]<sp/>=<sp/>a_sol[alev];</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a_sol[alev]-&gt;nGrow()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev]<sp/>=<sp/>a_sol[alev];</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev]-&gt;setBndry(0.0);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>[alev].reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultiFab(a_sol[alev]-&gt;boxArray(),</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_sol[alev]-&gt;DistributionMap(),<sp/>ncomp,<sp/>1,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFInfo(),<sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev)));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>[alev]-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(*<ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>[alev],<sp/>*a_sol[alev],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>0);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev]<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>[alev].get();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].define(a_rhs[alev]-&gt;boxArray(),<sp/>a_rhs[alev]-&gt;DistributionMap(),<sp/>ncomp,<sp/>nghost,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFInfo(),<sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev],<sp/>*a_rhs[alev],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1097a30ac7246a9ef37ab71e8281a8c9" kindref="member">applyMetricTerm</ref>(alev,<sp/>0,<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev]);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EBFArrayBoxFactory<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;Real&gt;<sp/>val(ncomp,<sp/>0.0);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a3baedaa2c05dc91fb1b9b36dc61e128d" kindref="member">amrex::EB_set_covered</ref>(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev],<sp/>0,<sp/>ncomp,<sp/>val);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a3baedaa2c05dc91fb1b9b36dc61e128d" kindref="member">amrex::EB_set_covered</ref>(*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/>0,<sp/>ncomp,<sp/>val);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>falev<sp/>=<sp/>finest_amr_lev;<sp/>falev<sp/>&gt;<sp/>0;<sp/>--falev)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a49e8248c4a3a27e8bfc77227bdfb433a" kindref="member">averageDownSolutionRHS</ref>(falev-1,<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev-1],<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[falev-1],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev],<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[falev]);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enforce<sp/>solvability<sp/>if<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa8d6ef9e77180f9076ef5cb83f48bb50" kindref="member">isSingular</ref>(0))</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a3cd643e6bf9f7e6d9d2b8cb7fa0b7c71" kindref="member">computeVolInv</ref>();</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ae5f98b72769ed94a44f850aa8aa1e1ba" kindref="member">makeSolvable</ref>();</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ng<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>()<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>ng<sp/>=<sp/>nghost;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a6249249666804079176507b88626a72c" kindref="member">make</ref>(<ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>,<sp/>ncomp,<sp/>ng);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a6249249666804079176507b88626a72c" kindref="member">make</ref>(<ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>,<sp/>ncomp,<sp/>ng);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nmglevs<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(alev);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>0;<sp/>mglev<sp/>&lt;<sp/>nmglevs;<sp/>++mglev)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev][mglev].setVal(0.0);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" kindref="member">rescor</ref>[alev][mglev].setVal(0.0);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dda334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">CFStrategy::none</ref>)<sp/>ng<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nmglevs<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(alev);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev].resize(nmglevs);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>0;<sp/>mglev<sp/>&lt;<sp/>nmglevs;<sp/>++mglev)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][mglev].reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultiFab(<ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev][mglev].boxArray(),</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" kindref="member">res</ref>[alev][mglev].DistributionMap(),</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncomp,<sp/>ng,<sp/>MFInfo(),</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev,mglev)));</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][mglev]-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>.resize(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(namrlevs-1,1));</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nmglevs<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(alev);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev].resize(nmglevs);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>0;<sp/>mglev<sp/>&lt;<sp/>nmglevs-1;<sp/>++mglev)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev][mglev].reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultiFab(<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][mglev]-&gt;boxArray(),</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][mglev]-&gt;DistributionMap(),</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncomp,<sp/>ng,<sp/>MFInfo(),</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev,mglev)));</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev][mglev]-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>1;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev].resize(1);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev][0].reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultiFab(<ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0]-&gt;boxArray(),</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" kindref="member">cor</ref>[alev][0]-&gt;DistributionMap(),</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncomp,<sp/>ng,<sp/>MFInfo(),</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev,0)));</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" kindref="member">cor_hold</ref>[alev][0]-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aa2a89a45fc288f18494a1304ce6fe5e2" kindref="member">buildFineMask</ref>();</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ab013a4dc85f37684f9e65f63b5318fc9" kindref="member">scratch</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev=0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].hasEBFabFactory())<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ab013a4dc85f37684f9e65f63b5318fc9" kindref="member">scratch</ref>[alev].reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultiFab(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].boxArray(),</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].DistributionMap(),</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncomp,<sp/>0,<sp/>MFInfo(),<sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev)));</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" kindref="member">m_parent</ref>)<sp/><ref refid="classamrex_1_1MLMG_1a5de6da3652a1625f6640f4cb80451501" kindref="member">do_nsolve</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>embeded<sp/>N-Solve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" kindref="member">m_domain_covered</ref>[0])<sp/><ref refid="classamrex_1_1MLMG_1a5de6da3652a1625f6640f4cb80451501" kindref="member">do_nsolve</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" kindref="member">doAgglomeration</ref>())<sp/><ref refid="classamrex_1_1MLMG_1a5de6da3652a1625f6640f4cb80451501" kindref="member">do_nsolve</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AMREX_SPACEDIM<sp/>!=<sp/>3)<sp/><ref refid="classamrex_1_1MLMG_1a5de6da3652a1625f6640f4cb80451501" kindref="member">do_nsolve</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a5de6da3652a1625f6640f4cb80451501" kindref="member">do_nsolve</ref><sp/>&amp;&amp;<sp/><ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a955977f98a355020f4808fd4acefe76f" kindref="member">prepareForNSolve</ref>();</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>#<sp/>of<sp/>AMR<sp/>levels:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>namrlevs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>of<sp/>MG<sp/>levels<sp/>on<sp/>the<sp/>coarsest<sp/>AMR<sp/>level:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(0)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>of<sp/>MG<sp/>levels<sp/>in<sp/>N-Solve:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref>-&gt;NMGLevels(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>of<sp/>grids<sp/>in<sp/>N-Solve:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref>-&gt;m_grids[0][0].size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a955977f98a355020f4808fd4acefe76f" kindref="member">MLMG::prepareForNSolve</ref><sp/>()</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref><sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1af7992c664d65948c99e3661e6d23a646" kindref="member">makeNLinOp</ref>(<ref refid="classamrex_1_1MLMG_1a8eba5d6f50bda8d65cb4481e57a557a5" kindref="member">nsolve_grid_size</ref>);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoxArray&amp;<sp/>ba<sp/>=<sp/>(*ns_linop).m_grids[0][0];</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistributionMapping&amp;<sp/>dm<sp/>=(*ns_linop).m_dmap[0][0];<sp/></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ng<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>ng<sp/>=<sp/>nghost;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a976935c58886c588cb51f006fd875809" kindref="member">ns_sol</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultiFab(ba,<sp/>dm,<sp/>ncomp,<sp/>ng,<sp/>MFInfo(),<sp/>*(<ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref>-&gt;Factory(0,0))));</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>ng<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>ng<sp/>=<sp/>nghost;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aed64acecaae43cecb817b689d1da5e54" kindref="member">ns_rhs</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultiFab(ba,<sp/>dm,<sp/>ncomp,<sp/>ng,<sp/>MFInfo(),<sp/>*(<ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref>-&gt;Factory(0,0))));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a976935c58886c588cb51f006fd875809" kindref="member">ns_sol</ref>-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1aed64acecaae43cecb817b689d1da5e54" kindref="member">ns_rhs</ref>-&gt;setVal(0.0);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref>-&gt;setLevelBC(0,<sp/><ref refid="classamrex_1_1MLMG_1a976935c58886c588cb51f006fd875809" kindref="member">ns_sol</ref>.get());</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ab20f4feb5164d7f9ee8bcbfaf6b8c497" kindref="member">ns_mlmg</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1MLMG_1a4d80ba0f675a1b751f35d66d04253dd6" kindref="member">MLMG</ref>(*<ref refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" kindref="member">ns_linop</ref>));</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ab20f4feb5164d7f9ee8bcbfaf6b8c497" kindref="member">ns_mlmg</ref>-&gt;setVerbose(0);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ab20f4feb5164d7f9ee8bcbfaf6b8c497" kindref="member">ns_mlmg</ref>-&gt;setFixedIter(1);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ab20f4feb5164d7f9ee8bcbfaf6b8c497" kindref="member">ns_mlmg</ref>-&gt;setMaxFmgIter(20);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ab20f4feb5164d7f9ee8bcbfaf6b8c497" kindref="member">ns_mlmg</ref>-&gt;setBottomSolver(<ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4aa24fa9dac0801f55f51de06cd8f9d132" kindref="member">BottomSolver::smoother</ref>);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a6fcfa52ef82ffa84f1e4358c6b3fd3c6" kindref="member">MLMG::getGradSolution</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;Array&lt;MultiFab*,AMREX_SPACEDIM&gt;<sp/>&gt;&amp;<sp/>a_grad_sol,</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a93725420770bf42d532f9ee7dea87c2f" kindref="member">Location</ref><sp/>a_loc)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::getGradSolution()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa811fc7672cda86a04b37b7a36380823" kindref="member">compGrad</ref>(alev,<sp/>a_grad_sol[alev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/>a_loc);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" kindref="member">MLMG::getFluxes</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;Array&lt;MultiFab*,AMREX_SPACEDIM&gt;<sp/>&gt;&amp;<sp/>a_flux,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a93725420770bf42d532f9ee7dea87c2f" kindref="member">Location</ref><sp/>a_loc)</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;Calling<sp/>wrong<sp/>getFluxes<sp/>for<sp/>nodal<sp/>solver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>.size()<sp/>==<sp/>a_flux.size());</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" kindref="member">getFluxes</ref>(a_flux,<sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>,<sp/>a_loc);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" kindref="member">MLMG::getFluxes</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;Array&lt;MultiFab*,AMREX_SPACEDIM&gt;<sp/>&gt;&amp;<sp/>a_flux,</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>a_sol,</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a93725420770bf42d532f9ee7dea87c2f" kindref="member">Location</ref><sp/>a_loc)</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::getFluxes()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;Calling<sp/>wrong<sp/>getFluxes<sp/>for<sp/>nodal<sp/>solver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ae6a653e83929e0f2c41482551c10b4e8" kindref="member">getFluxes</ref>(a_flux,<sp/>a_sol,<sp/>a_loc);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" kindref="member">MLMG::getFluxes</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;<sp/>&amp;<sp/>a_flux,<sp/><ref refid="classamrex_1_1MLMG_1a93725420770bf42d532f9ee7dea87c2f" kindref="member">Location</ref><sp/>a_loc)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>.size()<sp/>==<sp/>a_flux.size());</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" kindref="member">getFluxes</ref>(a_flux,<sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>,<sp/>a_loc);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" kindref="member">MLMG::getFluxes</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;<sp/>&amp;<sp/>a_flux,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>a_sol,<sp/><ref refid="classamrex_1_1MLMG_1a93725420770bf42d532f9ee7dea87c2f" kindref="member">Location</ref><sp/>a_loc)</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(a_flux[0]-&gt;nComp()<sp/>&gt;=<sp/>AMREX_SPACEDIM);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt;<sp/>&gt;<sp/>ffluxes(namrlevs);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idim<sp/>=<sp/>0;<sp/>idim<sp/>&lt;<sp/>AMREX_SPACEDIM;<sp/>++idim)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffluxes[alev][idim].define(<ref refid="namespaceamrex_1a314545dbd77212eb64c3a248c754eda6" kindref="member">amrex::convert</ref>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" kindref="member">m_grids</ref>[alev][mglev],</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVect_1a954f4b14ca735fce3499ea57f0ad7102" kindref="member">IntVect::TheDimensionVector</ref>(idim)),</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" kindref="member">m_dmap</ref>[alev][mglev],<sp/>ncomp,<sp/>nghost,<sp/>MFInfo(),</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" kindref="member">m_factory</ref>[alev][mglev]);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" kindref="member">getFluxes</ref>(amrex::GetVecOfArrOfPtrs(ffluxes),<sp/>a_sol,<sp/><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3ad1a130e88790663b2124d7dbd3e9f81e" kindref="member">Location::FaceCenter</ref>);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a2ca083595ee0a76ca027da372fadf716" kindref="member">EB_average_face_to_cellcenter</ref>(*a_flux[alev],<sp/>0,<sp/><ref refid="namespaceamrex_1a1c2496ecb409639e8639cf01881d0acb" kindref="member">amrex::GetArrOfConstPtrs</ref>(ffluxes[alev]));</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a95f27241ad83b39ffc015be064f382e7" kindref="member">average_face_to_cellcenter</ref>(*a_flux[alev],<sp/>0,<sp/><ref refid="namespaceamrex_1a1c2496ecb409639e8639cf01881d0acb" kindref="member">amrex::GetArrOfConstPtrs</ref>(ffluxes[alev]));</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ae6a653e83929e0f2c41482551c10b4e8" kindref="member">getFluxes</ref>(a_flux,<sp/>a_sol);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1aa99271a622e85b790d8fa3e07fbafb96" kindref="member">MLMG::compResidual</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>a_res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>a_sol,</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab<sp/>const*&gt;&amp;<sp/>a_rhs)</highlight></codeline>
<codeline lineno="1428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::compResidual()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev]<sp/>=<sp/>a_sol[alev];</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a_sol[alev]-&gt;nGrow()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev]<sp/>=<sp/>a_sol[alev];</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>[alev]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>[alev].reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MultiFab(a_sol[alev]-&gt;boxArray(),</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_sol[alev]-&gt;DistributionMap(),<sp/>ncomp,<sp/>1,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFInfo(),<sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev)));</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(*<ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>[alev],<sp/>*a_sol[alev],<sp/>0,<sp/>0,<sp/>ncomp,<sp/>0);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev]<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" kindref="member">sol_raii</ref>[alev].get();</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" kindref="member">linop_prepared</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683" kindref="member">prepareForSolve</ref>();</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" kindref="member">linop_prepared</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ab68d7b11273242e632c9f8a422c911d7" kindref="member">needsUpdate</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>amrrr<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" kindref="member">AMRRefRatio</ref>();</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>finest_amr_lev;<sp/>alev<sp/>&gt;=<sp/>0;<sp/>--alev)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab*<sp/>crse_bcdata<sp/>=<sp/>(alev<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev-1]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab*<sp/>prhs<sp/>=<sp/>a_rhs[alev];</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(AMREX_SPACEDIM<sp/>!=<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiFab<sp/>rhstmp(prhs-&gt;boxArray(),<sp/>prhs-&gt;DistributionMap(),<sp/>ncomp,<sp/>nghost,</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFInfo(),<sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev));</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(rhstmp,<sp/>*prhs,<sp/>0,<sp/>0,<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1097a30ac7246a9ef37ab71e8281a8c9" kindref="member">applyMetricTerm</ref>(alev,<sp/>0,<sp/>rhstmp);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prhs<sp/>=<sp/>&amp;rhstmp;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a37cdc5b58be54be165fee5cc26a5f5e1" kindref="member">solutionResidual</ref>(alev,<sp/>*a_res[alev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/>*prhs,<sp/>crse_bcdata);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alev<sp/>&lt;<sp/>finest_amr_lev)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537" kindref="member">reflux</ref>(alev,<sp/>*a_res[alev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev],<sp/>*prhs,</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a_res[alev+1],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[alev+1],<sp/>*a_rhs[alev+1]);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a83baea24aee17c98e8771fa6eea0822f" kindref="member">amrex::EB_average_down</ref>(*a_res[alev+1],<sp/>*a_res[alev],<sp/>0,<sp/>ncomp,<sp/>amrrr[alev]);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" kindref="member">amrex::average_down</ref>(*a_res[alev+1],<sp/>*a_res[alev],<sp/>0,<sp/>ncomp,<sp/>amrrr[alev]);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(AMREX_SPACEDIM<sp/>!=<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a3493bb63b041a05c4f4f6de28df1b37e" kindref="member">unapplyMetricTerm</ref>(alev,<sp/>0,<sp/>*a_res[alev]);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a152881811aacd123a2c8b02d00cb154c" kindref="member">MLMG::apply</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>a_in)</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;MLMG::apply()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;MultiFab*&gt;<sp/>in(namrlevs);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;MultiFab&gt;<sp/>in_raii(namrlevs);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;MultiFab&gt;<sp/>rh(namrlevs);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[alev]<sp/>=<sp/>a_in[alev];</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a_in[alev]-&gt;nGrow()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[alev]<sp/>=<sp/>a_in[alev];</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ng<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>ng<sp/>=<sp/>nghost;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_raii[alev].define(a_in[alev]-&gt;boxArray(),</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_in[alev]-&gt;DistributionMap(),</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_in[alev]-&gt;nComp(),<sp/>ng,</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFInfo(),<sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev));</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" kindref="member">MultiFab::Copy</ref>(in_raii[alev],<sp/>*a_in[alev],<sp/>0,<sp/>0,<sp/>a_in[alev]-&gt;nComp(),<sp/>nghost);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[alev]<sp/>=<sp/>&amp;(in_raii[alev]);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rh[alev].define(a_in[alev]-&gt;boxArray(),</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_in[alev]-&gt;DistributionMap(),</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_in[alev]-&gt;nComp(),<sp/>nghost,<sp/>MFInfo(),</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(alev));</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rh[alev].setVal(0.0);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" kindref="member">linop_prepared</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683" kindref="member">prepareForSolve</ref>();</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" kindref="member">linop_prepared</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ab68d7b11273242e632c9f8a422c911d7" kindref="member">needsUpdate</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>amrrr<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" kindref="member">AMRRefRatio</ref>();</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>finest_amr_lev;<sp/>alev<sp/>&gt;=<sp/>0;<sp/>--alev)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab*<sp/>crse_bcdata<sp/>=<sp/>(alev<sp/>&gt;<sp/>0)<sp/>?<sp/>in[alev-1]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a37cdc5b58be54be165fee5cc26a5f5e1" kindref="member">solutionResidual</ref>(alev,<sp/>*out[alev],<sp/>*in[alev],<sp/>rh[alev],<sp/>crse_bcdata);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alev<sp/>&lt;<sp/>finest_amr_lev)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537" kindref="member">reflux</ref>(alev,<sp/>*out[alev],<sp/>*in[alev],<sp/>rh[alev],</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out[alev+1],<sp/>*in[alev+1],<sp/>rh[alev+1]);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a83baea24aee17c98e8771fa6eea0822f" kindref="member">amrex::EB_average_down</ref>(*out[alev+1],<sp/>*out[alev],<sp/>0,<sp/>out[alev]-&gt;nComp(),<sp/>amrrr[alev]);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" kindref="member">amrex::average_down</ref>(*out[alev+1],<sp/>*out[alev],<sp/>0,<sp/>out[alev]-&gt;nComp(),<sp/>amrrr[alev]);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(AMREX_SPACEDIM<sp/>!=<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a3493bb63b041a05c4f4f6de28df1b37e" kindref="member">unapplyMetricTerm</ref>(alev,<sp/>0,<sp/>*out[alev]);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[alev]-&gt;negate(nghost);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a92c1d883b63949e33c6acba2c0e19c6b" kindref="member">MLMG::averageDownAndSync</ref><sp/>()</highlight></codeline>
<codeline lineno="1578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>amrrr<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" kindref="member">AMRRefRatio</ref>();</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nghost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" kindref="member">cf_strategy</ref><sp/>==<sp/><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" kindref="member">CFStrategy::ghostnodes</ref>)<sp/>nghost<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" kindref="member">getNGrow</ref>();</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>falev<sp/>=<sp/>finest_amr_lev;<sp/>falev<sp/>&gt;<sp/>0;<sp/>--falev)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a83baea24aee17c98e8771fa6eea0822f" kindref="member">amrex::EB_average_down</ref>(*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev-1],<sp/>0,<sp/>ncomp,<sp/>amrrr[falev-1]);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" kindref="member">amrex::average_down</ref>(*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev],<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev-1],<sp/>0,<sp/>ncomp,<sp/>amrrr[falev-1]);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a92b49ce3cd6f8877018a284c9a05663b" kindref="member">nodalSync</ref>(finest_amr_lev,<sp/>0,<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[finest_amr_lev]);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>falev<sp/>=<sp/>finest_amr_lev;<sp/>falev<sp/>&gt;<sp/>0;<sp/>--falev)</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fmf<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev];</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmf<sp/>=<sp/>*<ref refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" kindref="member">sol</ref>[falev-1];</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiFab<sp/>tmpmf(<ref refid="namespaceamrex_1a9fb6c36ab72dfe92709f0ea89baa4824" kindref="member">amrex::coarsen</ref>(fmf.boxArray(),<sp/>amrrr[falev-1]),<sp/>fmf.DistributionMap(),<sp/>ncomp,<sp/>nghost);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" kindref="member">amrex::average_down</ref>(fmf,<sp/>tmpmf,<sp/>0,<sp/>ncomp,<sp/>amrrr[falev-1]);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmf.ParallelCopy(tmpmf,<sp/>0,<sp/>0,<sp/>ncomp);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a92b49ce3cd6f8877018a284c9a05663b" kindref="member">nodalSync</ref>(falev-1,<sp/>0,<sp/>cmf);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a3cd643e6bf9f7e6d9d2b8cb7fa0b7c71" kindref="member">MLMG::computeVolInv</ref><sp/>()</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>.resize(namrlevs);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev<sp/>=<sp/>0;<sp/>amrlev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++amrlev)<sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[amrlev].resize(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(amrlev));</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>need<sp/>to<sp/>compute<sp/>for<sp/>every<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>[&amp;]<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev)<sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EBFArrayBoxFactory<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(amrlev,mglev));</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>vfrac<sp/>=<sp/>factory-&gt;getVolFrac();</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[amrlev][mglev]<sp/>=<sp/>vfrac.sum(0,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[amrlev][mglev]<sp/>=<sp/>1.0<sp/>/<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" kindref="member">Geom</ref>(amrlev,mglev).<ref refid="classamrex_1_1Geometry_1a94f4ddb683e381201694d644be7566f1" kindref="member">Domain</ref>().<ref refid="classamrex_1_1Box_1a9e84312721b00d6e0880ed592cc59ac4" kindref="member">d_numPts</ref>();</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>amrlev<sp/>=<sp/>0,<sp/>mglev<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(0,0);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mgbottom<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" kindref="member">NMGLevels</ref>(0)-1;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(0,mgbottom);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>temp1,<sp/>temp2;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[0].hasEBFabFactory())</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParallelAllReduce::Sum&lt;Real&gt;({<ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[0][0],<sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[0][mgbottom]},</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>());</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp1<sp/>=<sp/>1.0/volinv[0][0];</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/>1.0/volinv[0][mgbottom];</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp1<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[0][0];<sp/></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[0][mgbottom];<sp/></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[0][0]<sp/>=<sp/>temp1;<sp/></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[0][mgbottom]<sp/>=<sp/>temp2;<sp/></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1ae5f98b72769ed94a44f850aa8aa1e1ba" kindref="member">MLMG::makeSolvable</ref><sp/>()</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;Real&gt;<sp/>offset(ncomp);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EBFArrayBoxFactory<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(0));</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>vfrac<sp/>=<sp/>factory-&gt;getVolFrac();</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>ncomp;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset[c]<sp/>=<sp/><ref refid="classamrex_1_1MultiFab_1a891a75562cd2f21525d54eb493ae0e2c" kindref="member">MultiFab::Dot</ref>(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[0],<sp/>c,<sp/>vfrac,<sp/>0,<sp/>1,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>*<sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[0][0];</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>ncomp;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset[c]<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[0].sum(c,</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>*<sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[0][0];</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelAllReduce_1a8f0fba40aa737060c0ac09832c9bf877" kindref="member">ParallelAllReduce::Sum</ref>(offset.data(),<sp/>ncomp,<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>());</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&gt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>ncomp;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MLMG:<sp/>Subtracting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>offset[c]<sp/></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>rhs<sp/>component<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>c<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>ncomp;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].plus(-offset[c],<sp/>c,<sp/>1);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].hasEBFabFactory())<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;Real&gt;<sp/>val(ncomp,<sp/>0.0);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a3baedaa2c05dc91fb1b9b36dc61e128d" kindref="member">amrex::EB_set_covered</ref>(<ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev],<sp/>0,<sp/>ncomp,<sp/>val);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a8013eb3b1fc596632383f1bb7c40e92c" kindref="member">AMREX_ASSERT_WITH_MESSAGE</ref>(ncomp==1,<sp/></highlight><highlight class="stringliteral">&quot;ncomp<sp/>&gt;<sp/>1<sp/>not<sp/>supported<sp/>for<sp/>singular<sp/>nodal<sp/>problem&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>offset<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1ad037f6167a4370eef5d2e1b3361cc238" kindref="member">getNodalSum</ref>(0,<sp/>0,<sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[0]);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alev<sp/>=<sp/>0;<sp/>alev<sp/>&lt;<sp/><ref refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" kindref="member">namrlevs</ref>;<sp/>++alev)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" kindref="member">rhs</ref>[alev].plus(-offset,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1ae5f98b72769ed94a44f850aa8aa1e1ba" kindref="member">MLMG::makeSolvable</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev,<sp/>MultiFab&amp;<sp/>mf)</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;Real&gt;<sp/>offset(ncomp);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">EBFArrayBoxFactory<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" kindref="member">Factory</ref>(amrlev,mglev));</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factory)</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>vfrac<sp/>=<sp/>factory-&gt;getVolFrac();</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>ncomp;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset[c]<sp/>=<sp/><ref refid="classamrex_1_1MultiFab_1a891a75562cd2f21525d54eb493ae0e2c" kindref="member">MultiFab::Dot</ref>(mf,<sp/>c,<sp/>vfrac,<sp/>0,<sp/>1,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>*<sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[amrlev][mglev];</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>ncomp;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset[c]<sp/>=<sp/>mf.sum(c,</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>*<sp/><ref refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" kindref="member">volinv</ref>[amrlev][mglev];</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelAllReduce_1a8f0fba40aa737060c0ac09832c9bf877" kindref="member">ParallelAllReduce::Sum</ref>(offset.data(),<sp/>ncomp,<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>());</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>ncomp;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mf.plus(-offset[c],<sp/>c,<sp/>1);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_EB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mf.hasEBFabFactory())<sp/>{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;Real&gt;<sp/>val(ncomp,<sp/>0.0);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a3baedaa2c05dc91fb1b9b36dc61e128d" kindref="member">amrex::EB_set_covered</ref>(mf,<sp/>0,<sp/>ncomp,<sp/>val);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a8013eb3b1fc596632383f1bb7c40e92c" kindref="member">AMREX_ASSERT_WITH_MESSAGE</ref>(ncomp==1,<sp/></highlight><highlight class="stringliteral">&quot;ncomp<sp/>&gt;<sp/>1<sp/>not<sp/>supported<sp/>for<sp/>singular<sp/>nodal<sp/>problem&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>offset<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1ad037f6167a4370eef5d2e1b3361cc238" kindref="member">getNodalSum</ref>(amrlev,<sp/>mglev,<sp/>mf);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mf.plus(-offset,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal">Real</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1ad037f6167a4370eef5d2e1b3361cc238" kindref="member">MLMG::getNodalSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrlev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mglev,<sp/>MultiFab&amp;<sp/>mf)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1768"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab<sp/><ref refid="namespaceamrex__constants__module_1ac1e62f94cf48ab5f9c7203871884b89d" kindref="member">one</ref>(mf.boxArray(),<sp/>mf.DistributionMap(),<sp/>1,<sp/>0,<sp/>MFInfo(),<sp/>mf.Factory());</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex__constants__module_1ac1e62f94cf48ab5f9c7203871884b89d" kindref="member">one</ref>.setVal(1.0);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>s1<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a37371995331ab213ba93ed280b9c71ed" kindref="member">xdoty</ref>(amrlev,<sp/>mglev,<sp/>mf,<sp/><ref refid="namespaceamrex__constants__module_1ac1e62f94cf48ab5f9c7203871884b89d" kindref="member">one</ref>,<sp/>local);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>s2<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a37371995331ab213ba93ed280b9c71ed" kindref="member">xdoty</ref>(amrlev,<sp/>mglev,<sp/><ref refid="namespaceamrex__constants__module_1ac1e62f94cf48ab5f9c7203871884b89d" kindref="member">one</ref>,<sp/><ref refid="namespaceamrex__constants__module_1ac1e62f94cf48ab5f9c7203871884b89d" kindref="member">one</ref>,<sp/>local);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>ParallelAllReduce::Sum&lt;Real&gt;({s1,s2},<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ae56dfc1030a8066132a2cb67334b1aaa" kindref="member">Communicator</ref>(amrlev,mglev));</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s1/s2;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1aaf664a17642380d701b1b7b08e10fa63" kindref="member">MLMG::bottomSolveWithHypre</ref><sp/>(MultiFab&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>b)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(AMREX_USE_HYPRE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;bottomSolveWithHypre<sp/>is<sp/>called<sp/>without<sp/>building<sp/>with<sp/>Hypre&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(ncomp<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;bottomSolveWithHypre<sp/>doesn&apos;t<sp/>work<sp/>with<sp/>ncomp<sp/>&gt;<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" kindref="member">isCellCentered</ref>())</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypre_solver<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>reuse<sp/>the<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypre_solver<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.makeHypre(hypre_interface);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypre_solver-&gt;<ref refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" kindref="member">setVerbose</ref>(<ref refid="classamrex_1_1MLMG_1ae2f4cd61322f224e598377431f47dde5" kindref="member">bottom_verbose</ref>);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoxArray&amp;<sp/>ba<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" kindref="member">m_grids</ref>[0].back();</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistributionMapping&amp;<sp/>dm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" kindref="member">m_dmap</ref>[0].back();</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&amp;<sp/>geom<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" kindref="member">m_geom</ref>[0].back();</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypre_bndry.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MLMGBndry(ba,<sp/>dm,<sp/>ncomp,<sp/>geom));</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypre_bndry-&gt;setHomogValues();</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real*<sp/>dx<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" kindref="member">m_geom</ref>[0][0].CellSize();</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crse_ratio<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" kindref="member">m_coarse_data_crse_ratio</ref><sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" kindref="member">m_coarse_data_crse_ratio</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealVect<sp/>bclocation(<ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(0.5*dx[0]*crse_ratio,</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5*dx[1]*crse_ratio,</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5*dx[2]*crse_ratio));</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypre_bndry-&gt;setLOBndryConds(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" kindref="member">m_lobc</ref>,<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" kindref="member">m_hibc</ref>,<sp/>-1,<sp/>bclocation);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypre_solver-&gt;solve(x,<sp/>b,<sp/><ref refid="classamrex_1_1MLMG_1a20ed3ce546f3fa0f009d66fd9bd1f2bc" kindref="member">bottom_reltol</ref>,<sp/>-1.,<sp/><ref refid="classamrex_1_1MLMG_1a37be121e8fe2e8e8341198486fc07d0e" kindref="member">bottom_maxiter</ref>,<sp/>*hypre_bndry,<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" kindref="member">getMaxOrder</ref>());</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hypre_node_solver<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypre_node_solver<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.makeHypreNodeLap(<ref refid="classamrex_1_1MLMG_1ae2f4cd61322f224e598377431f47dde5" kindref="member">bottom_verbose</ref>);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hypre_node_solver-&gt;solve(x,<sp/>b,<sp/><ref refid="classamrex_1_1MLMG_1a20ed3ce546f3fa0f009d66fd9bd1f2bc" kindref="member">bottom_reltol</ref>,<sp/>-1.,<sp/><ref refid="classamrex_1_1MLMG_1a37be121e8fe2e8e8341198486fc07d0e" kindref="member">bottom_maxiter</ref>);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a1d9aa957bda2ed06061254fb7e187c3f" kindref="member">MLMG::bottomSolveWithPETSc</ref><sp/>(MultiFab&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiFab&amp;<sp/>b)</highlight></codeline>
<codeline lineno="1825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(AMREX_USE_PETSC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;bottomSolveWithPETSc<sp/>is<sp/>called<sp/>without<sp/>building<sp/>with<sp/>PETSc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" kindref="member">getNComp</ref>();</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(ncomp<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;bottomSolveWithPETSc<sp/>doesn&apos;t<sp/>work<sp/>with<sp/>ncomp<sp/>&gt;<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(petsc_solver<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_solver<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.makePETSc();</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_solver-&gt;<ref refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" kindref="member">setVerbose</ref>(<ref refid="classamrex_1_1MLMG_1ae2f4cd61322f224e598377431f47dde5" kindref="member">bottom_verbose</ref>);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoxArray&amp;<sp/>ba<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" kindref="member">m_grids</ref>[0].back();</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistributionMapping&amp;<sp/>dm<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" kindref="member">m_dmap</ref>[0].back();</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&amp;<sp/>geom<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" kindref="member">m_geom</ref>[0].back();</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_bndry.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MLMGBndry(ba,<sp/>dm,<sp/>ncomp,<sp/>geom));</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_bndry-&gt;setHomogValues();</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real*<sp/>dx<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" kindref="member">m_geom</ref>[0][0].CellSize();</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crse_ratio<sp/>=<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" kindref="member">m_coarse_data_crse_ratio</ref><sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" kindref="member">m_coarse_data_crse_ratio</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RealVect<sp/>bclocation(<ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(0.5*dx[0]*crse_ratio,</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5*dx[1]*crse_ratio,</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5*dx[2]*crse_ratio));</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_bndry-&gt;setLOBndryConds(<ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" kindref="member">m_lobc</ref>,<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" kindref="member">m_hibc</ref>,<sp/>-1,<sp/>bclocation);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>petsc_solver-&gt;solve(x,<sp/>b,<sp/><ref refid="classamrex_1_1MLMG_1a20ed3ce546f3fa0f009d66fd9bd1f2bc" kindref="member">bottom_reltol</ref>,<sp/>-1.,<sp/><ref refid="classamrex_1_1MLMG_1a37be121e8fe2e8e8341198486fc07d0e" kindref="member">bottom_maxiter</ref>,<sp/>*petsc_bndry,<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" kindref="member">getMaxOrder</ref>());</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><ref refid="classamrex_1_1MLMG_1a52cbdeb167834e42f778f74b3047938d" kindref="member">MLMG::checkPoint</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab*&gt;&amp;<sp/>a_sol,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;MultiFab<sp/>const*&gt;&amp;<sp/>a_rhs,</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>a_tol_rel,<sp/>Real<sp/>a_tol_abs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_file_name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1858"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>file_name(a_file_name);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a832f4ad883cbc470d76cde70a099e912" kindref="member">UtilCreateCleanDirectory</ref>(file_name,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelContext_1af766eba670e3bba30b2b8db7f20e8885" kindref="member">ParallelContext::IOProcessorSub</ref>())</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>HeaderFileName(std::string(a_file_name)+</highlight><highlight class="stringliteral">&quot;/Header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>HeaderFile;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeaderFile.open(HeaderFileName.c_str(),<sp/>std::ofstream::out<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream::trunc<sp/>|</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream::binary);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>HeaderFile.good())<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" kindref="member">FileOpenFailed</ref>(HeaderFileName);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeaderFile.precision(17);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeaderFile<sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a9f6145ef119707fa7ce4fd43542d1c24" kindref="member">name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;a_tol_rel<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a_tol_rel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;a_tol_abs<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a_tol_abs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;verbose<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" kindref="member">verbose</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;max_iters<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1ae4f94ee42b8da24efdafd34b023e2457" kindref="member">max_iters</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nu1<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nu1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nu2<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nu2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nuf<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nuf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nub<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1ae8120b974758c572d1463ee286204e10" kindref="member">nub</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;max_fmg_iters<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1aefc9d57def6cdc2851da4d26e38e092f" kindref="member">max_fmg_iters</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bottom_solver<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" kindref="member">bottom_solver</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bottom_verbose<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1ae2f4cd61322f224e598377431f47dde5" kindref="member">bottom_verbose</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bottom_maxiter<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a37be121e8fe2e8e8341198486fc07d0e" kindref="member">bottom_maxiter</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bottom_reltol<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a20ed3ce546f3fa0f009d66fd9bd1f2bc" kindref="member">bottom_reltol</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;always_use_bnorm<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a383d3320ac67af7ea304a3fad4c53ff6" kindref="member">always_use_bnorm</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;namrlevs<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>namrlevs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;finest_amr_lev<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>finest_amr_lev<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;linop_prepared<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" kindref="member">linop_prepared</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;solve_called<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1MLMG_1a0988de0b7355cc6067a0512759cac21e" kindref="member">solve_called</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilev<sp/>=<sp/>0;<sp/>ilev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++ilev)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a832f4ad883cbc470d76cde70a099e912" kindref="member">UtilCreateCleanDirectory</ref>(file_name+</highlight><highlight class="stringliteral">&quot;/Level_&quot;</highlight><highlight class="normal">+std::to_string(ilev),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a1ceab6de8572b3cfd10ddba48f266863" kindref="member">ParallelContext::BarrierSub</ref>();</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilev<sp/>=<sp/>0;<sp/>ilev<sp/>&lt;=<sp/><ref refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" kindref="member">finest_amr_lev</ref>;<sp/>++ilev)<sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1VisMF_1a865aac1ae0e0fde40a0470d75eb44935" kindref="member">VisMF::Write</ref>(*a_sol[ilev],<sp/>file_name+</highlight><highlight class="stringliteral">&quot;/Level_&quot;</highlight><highlight class="normal">+std::to_string(ilev)+</highlight><highlight class="stringliteral">&quot;/sol&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1VisMF_1a865aac1ae0e0fde40a0470d75eb44935" kindref="member">VisMF::Write</ref>(*a_rhs[ilev],<sp/>file_name+</highlight><highlight class="stringliteral">&quot;/Level_&quot;</highlight><highlight class="normal">+std::to_string(ilev)+</highlight><highlight class="stringliteral">&quot;/rhs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" kindref="member">linop</ref>.<ref refid="classamrex_1_1MLLinOp_1a19f8f18b021a5b9caf959de14247bd92" kindref="member">checkPoint</ref>(file_name+</highlight><highlight class="stringliteral">&quot;/linop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1910"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp"/>
  </compounddef>
</doxygen>
