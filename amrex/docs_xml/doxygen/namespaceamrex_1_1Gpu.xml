<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1Gpu" kind="namespace" language="C++">
    <compoundname>amrex::Gpu</compoundname>
    <innerclass refid="classamrex_1_1Gpu_1_1AsyncArray" prot="public">amrex::Gpu::AsyncArray</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1AtomicAdd" prot="public">amrex::Gpu::AtomicAdd</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1AtomicLogicalAnd" prot="public">amrex::Gpu::AtomicLogicalAnd</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1AtomicLogicalOr" prot="public">amrex::Gpu::AtomicLogicalOr</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1AtomicMax" prot="public">amrex::Gpu::AtomicMax</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1AtomicMin" prot="public">amrex::Gpu::AtomicMin</innerclass>
    <innerclass refid="classamrex_1_1Gpu_1_1Buffer" prot="public">amrex::Gpu::Buffer</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1ComponentBox" prot="public">amrex::Gpu::ComponentBox</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1Deleter" prot="public">amrex::Gpu::Deleter</innerclass>
    <innerclass refid="classamrex_1_1Gpu_1_1Device" prot="public">amrex::Gpu::Device</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1DeviceScalar" prot="public">amrex::Gpu::DeviceScalar</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1DeviceToDevice" prot="public">amrex::Gpu::DeviceToDevice</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1DeviceToHost" prot="public">amrex::Gpu::DeviceToHost</innerclass>
    <innerclass refid="classamrex_1_1Gpu_1_1Elixir" prot="public">amrex::Gpu::Elixir</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1ExecConfig" prot="public">amrex::Gpu::ExecConfig</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1ExecutionConfig" prot="public">amrex::Gpu::ExecutionConfig</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1GraphSafeGuard" prot="public">amrex::Gpu::GraphSafeGuard</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1GridSize" prot="public">amrex::Gpu::GridSize</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1Handler" prot="public">amrex::Gpu::Handler</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1HostToDevice" prot="public">amrex::Gpu::HostToDevice</innerclass>
    <innerclass refid="classamrex_1_1Gpu_1_1KernelInfo" prot="public">amrex::Gpu::KernelInfo</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1LaunchSafeGuard" prot="public">amrex::Gpu::LaunchSafeGuard</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1Managed" prot="public">amrex::Gpu::Managed</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1NoSyncRegion" prot="public">amrex::Gpu::NoSyncRegion</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1Pinned" prot="public">amrex::Gpu::Pinned</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory" prot="public">amrex::Gpu::SharedMemory</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01bool_01_4" prot="public">amrex::Gpu::SharedMemory&lt; bool &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01char_01_4" prot="public">amrex::Gpu::SharedMemory&lt; char &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01double_01_4" prot="public">amrex::Gpu::SharedMemory&lt; double &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01float_01_4" prot="public">amrex::Gpu::SharedMemory&lt; float &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01int_01_4" prot="public">amrex::Gpu::SharedMemory&lt; int &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01long_01_4" prot="public">amrex::Gpu::SharedMemory&lt; long &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01long_01long_01_4" prot="public">amrex::Gpu::SharedMemory&lt; long long &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01openbc_1_1Moments_1_1array__type_01_4" prot="public">amrex::Gpu::SharedMemory&lt; openbc::Moments::array_type &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01short_01_4" prot="public">amrex::Gpu::SharedMemory&lt; short &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01unsigned_01char_01_4" prot="public">amrex::Gpu::SharedMemory&lt; unsigned char &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01unsigned_01int_01_4" prot="public">amrex::Gpu::SharedMemory&lt; unsigned int &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01unsigned_01long_01_4" prot="public">amrex::Gpu::SharedMemory&lt; unsigned long &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01unsigned_01long_01long_01_4" prot="public">amrex::Gpu::SharedMemory&lt; unsigned long long &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SharedMemory_3_01unsigned_01short_01_4" prot="public">amrex::Gpu::SharedMemory&lt; unsigned short &gt;</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1SingleStreamRegion" prot="public">amrex::Gpu::SingleStreamRegion</innerclass>
    <innerclass refid="classamrex_1_1Gpu_1_1StreamIter" prot="public">amrex::Gpu::StreamIter</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1StreamItInfo" prot="public">amrex::Gpu::StreamItInfo</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1warpReduce" prot="public">amrex::Gpu::warpReduce</innerclass>
    <innernamespace refid="namespaceamrex_1_1Gpu_1_1Atomic">amrex::Gpu::Atomic</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Gpu_1_1detail">amrex::Gpu::detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Gpu_1_1range__detail">amrex::Gpu::range_detail</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, <ref refid="classamrex_1_1ArenaAllocator" kindref="compound">ArenaAllocator</ref>&lt; T &gt; &gt;</type>
        <definition>using amrex::Gpu::DeviceVector = typedef PODVector&lt;T, ArenaAllocator&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>DeviceVector</name>
        <qualifiedname>amrex::Gpu::DeviceVector</qualifiedname>
        <briefdescription>
<para>A <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> that uses the standard memory <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref>. Note that the memory might or might not be managed depending on the amrex.the_arena_is_managed <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="23" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1a2388c83afe31a41fc38fab133d98a1be" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, <ref refid="classamrex_1_1DeviceArenaAllocator" kindref="compound">DeviceArenaAllocator</ref>&lt; T &gt; &gt;</type>
        <definition>using amrex::Gpu::NonManagedDeviceVector = typedef PODVector&lt;T, DeviceArenaAllocator&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>NonManagedDeviceVector</name>
        <qualifiedname>amrex::Gpu::NonManagedDeviceVector</qualifiedname>
        <briefdescription>
<para>A <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> that uses the non-managed device memory arena. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="30" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1ab2661b6ddd9751b7e197a9d619dabc7b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, <ref refid="classamrex_1_1ManagedArenaAllocator" kindref="compound">ManagedArenaAllocator</ref>&lt; T &gt; &gt;</type>
        <definition>using amrex::Gpu::ManagedVector = typedef PODVector&lt;T, ManagedArenaAllocator&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ManagedVector</name>
        <qualifiedname>amrex::Gpu::ManagedVector</qualifiedname>
        <briefdescription>
<para>A <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> that uses the managed memory arena. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="37" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, <ref refid="classamrex_1_1PinnedArenaAllocator" kindref="compound">PinnedArenaAllocator</ref>&lt; T &gt; &gt;</type>
        <definition>using amrex::Gpu::PinnedVector = typedef PODVector&lt;T, PinnedArenaAllocator&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>PinnedVector</name>
        <qualifiedname>amrex::Gpu::PinnedVector</qualifiedname>
        <briefdescription>
<para>A <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> that uses the pinned memory arena. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="44" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1af0ed55b80609bd8e66da4d0c435894d0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, <ref refid="classamrex_1_1AsyncArenaAllocator" kindref="compound">AsyncArenaAllocator</ref>&lt; T &gt; &gt;</type>
        <definition>using amrex::Gpu::AsyncVector = typedef PODVector&lt;T, AsyncArenaAllocator&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>AsyncVector</name>
        <qualifiedname>amrex::Gpu::AsyncVector</qualifiedname>
        <briefdescription>
<para>A <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> that uses the async memory arena. Maybe useful for temporary vectors inside MFIters that are accessed on the device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="53" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1a337aceb06d1f93486e6593ff058c0a93" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">PinnedVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Gpu::HostVector = typedef PinnedVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>HostVector</name>
        <qualifiedname>amrex::Gpu::HostVector</qualifiedname>
        <briefdescription>
<para>A <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> that uses pinned host memory. <ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as PinnedVector. For a vector class that uses std::allocator by default, see <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="61" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1af22f411b79da7033051cdfa1539e21be" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, <ref refid="classamrex_1_1ManagedArenaAllocator" kindref="compound">ManagedArenaAllocator</ref>&lt; T &gt; &gt;</type>
        <definition>using amrex::Gpu::ManagedDeviceVector = typedef PODVector&lt;T, ManagedArenaAllocator&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ManagedDeviceVector</name>
        <qualifiedname>amrex::Gpu::ManagedDeviceVector</qualifiedname>
        <briefdescription>
<para>This is identical to ManagedVector&lt;T&gt;. The ManagedDeviceVector form is deprecated and will be removed in a future release. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="69" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="69" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structamrex_1_1Gpu_1_1HostToDevice" kindref="compound">HostToDevice</ref></type>
        <definition>constexpr HostToDevice amrex::Gpu::hostToDevice</definition>
        <argsstring></argsstring>
        <name>hostToDevice</name>
        <qualifiedname>amrex::Gpu::hostToDevice</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="98" column="37" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structamrex_1_1Gpu_1_1DeviceToHost" kindref="compound">DeviceToHost</ref></type>
        <definition>constexpr DeviceToHost amrex::Gpu::deviceToHost</definition>
        <argsstring></argsstring>
        <name>deviceToHost</name>
        <qualifiedname>amrex::Gpu::deviceToHost</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="99" column="37" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a45b5d93b9e83ebcd8fb2f1e90aced0c7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structamrex_1_1Gpu_1_1DeviceToDevice" kindref="compound">DeviceToDevice</ref></type>
        <definition>constexpr DeviceToDevice amrex::Gpu::deviceToDevice</definition>
        <argsstring></argsstring>
        <name>deviceToDevice</name>
        <qualifiedname>amrex::Gpu::deviceToDevice</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="100" column="37" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a46c58e76f1942c7eefcf205b3ec3d24c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Gpu::in_launch_region</definition>
        <argsstring></argsstring>
        <name>in_launch_region</name>
        <qualifiedname>amrex::Gpu::in_launch_region</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.cpp" line="7" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.cpp" bodystart="7" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" declline="90" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a3d36026586dd063c89350f39d815285a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Gpu::in_graph_region</definition>
        <argsstring></argsstring>
        <name>in_graph_region</name>
        <qualifiedname>amrex::Gpu::in_graph_region</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.cpp" line="8" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.cpp" bodystart="8" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" declline="120" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a77a9e29985ce3d940d17cad0584d2446" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Gpu::in_single_stream_region</definition>
        <argsstring></argsstring>
        <name>in_single_stream_region</name>
        <qualifiedname>amrex::Gpu::in_single_stream_region</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.cpp" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.cpp" bodystart="9" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" declline="148" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a8946d247baac46fe1bc6e81897915366" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Gpu::in_nosync_region</definition>
        <argsstring></argsstring>
        <name>in_nosync_region</name>
        <qualifiedname>amrex::Gpu::in_nosync_region</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.cpp" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.cpp" bodystart="10" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" declline="149" declcolumn="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copy</definition>
        <argsstring>(HostToDevice, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copy</name>
        <qualifiedname>amrex::Gpu::copy</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1HostToDevice" kindref="compound">HostToDevice</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A host-to-device copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a337aceb06d1f93486e6593ff058c0a93" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>
        </briefdescription>
        <detaileddescription>
<para>This version is blocking - CPU execution will halt until the copy is finished.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" kindref="member">Gpu::hostToDevice</ref>,<sp/>a.begin(),<sp/>a.end(),<sp/><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3a92eb5ffee6ae2fec3ad71c777531578f" kindref="member">b</ref>.begin());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="121" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="121" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1abea324bd9a4533e4f54614f6a7d410d1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copy</definition>
        <argsstring>(DeviceToHost, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copy</name>
        <qualifiedname>amrex::Gpu::copy</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1DeviceToHost" kindref="compound">DeviceToHost</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A device-to-host copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a337aceb06d1f93486e6593ff058c0a93" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>
        </briefdescription>
        <detaileddescription>
<para>This version is blocking - CPU execution will halt until the copy is finished.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" kindref="member">Gpu::deviceToHost</ref>,<sp/>a.begin(),<sp/>a.end(),<sp/><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3a92eb5ffee6ae2fec3ad71c777531578f" kindref="member">b</ref>.begin());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="158" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="158" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1afb3bc7b25afb38fc8f371f3bc4966483" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copy</definition>
        <argsstring>(DeviceToDevice, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copy</name>
        <qualifiedname>amrex::Gpu::copy</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1DeviceToDevice" kindref="compound">DeviceToDevice</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A device-to-device copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a337aceb06d1f93486e6593ff058c0a93" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>
        </briefdescription>
        <detaileddescription>
<para>This version is blocking - CPU execution will halt until the copy is finished.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a45b5d93b9e83ebcd8fb2f1e90aced0c7" kindref="member">Gpu::deviceToDevice</ref>,<sp/>a.begin(),<sp/>a.end(),<sp/><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3a92eb5ffee6ae2fec3ad71c777531578f" kindref="member">b</ref>.begin());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="195" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="195" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a39c6894dcdb993d9e4455d7d418947b9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copyAsync</definition>
        <argsstring>(HostToDevice, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copyAsync</name>
        <qualifiedname>amrex::Gpu::copyAsync</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1HostToDevice" kindref="compound">HostToDevice</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A host-to-device copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a337aceb06d1f93486e6593ff058c0a93" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>
        </briefdescription>
        <detaileddescription>
<para>This version is asynchronous - CPU execution will continue, whether or not the copy is finished.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespaceamrex_1_1Gpu_1a39c6894dcdb993d9e4455d7d418947b9" kindref="member">Gpu::copyAsync</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" kindref="member">Gpu::hostToDevice</ref>,<sp/>a.begin(),<sp/>a.end(),<sp/><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3a92eb5ffee6ae2fec3ad71c777531578f" kindref="member">b</ref>.begin());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="233" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="233" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a15d5aa9cbac1f2a0ef1f042530760b88" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copyAsync</definition>
        <argsstring>(DeviceToHost, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copyAsync</name>
        <qualifiedname>amrex::Gpu::copyAsync</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1DeviceToHost" kindref="compound">DeviceToHost</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A device-to-host copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a337aceb06d1f93486e6593ff058c0a93" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>
        </briefdescription>
        <detaileddescription>
<para>This version is asynchronous - CPU execution will continue, whether or not the copy is finished.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespaceamrex_1_1Gpu_1a39c6894dcdb993d9e4455d7d418947b9" kindref="member">Gpu::copyAsync</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" kindref="member">Gpu::deviceToHost</ref>,<sp/>a.begin(),<sp/>a.end(),<sp/><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3a92eb5ffee6ae2fec3ad71c777531578f" kindref="member">b</ref>.begin());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="271" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="271" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a3da569ab08ec568b8e512d91d6259b53" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copyAsync</definition>
        <argsstring>(DeviceToDevice, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copyAsync</name>
        <qualifiedname>amrex::Gpu::copyAsync</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1DeviceToDevice" kindref="compound">DeviceToDevice</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A device-to-device copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a337aceb06d1f93486e6593ff058c0a93" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>
        </briefdescription>
        <detaileddescription>
<para>This version is asynchronous - CPU execution will continue, whether or not the copy is finished.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespaceamrex_1_1Gpu_1a39c6894dcdb993d9e4455d7d418947b9" kindref="member">Gpu::copyAsync</ref>(<ref refid="namespaceamrex_1_1Gpu_1a45b5d93b9e83ebcd8fb2f1e90aced0c7" kindref="member">Gpu::deviceToDevice</ref>,<sp/>a.begin(),<sp/>a.end(),<sp/><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3a92eb5ffee6ae2fec3ad71c777531578f" kindref="member">b</ref>.begin());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="309" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="309" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a3abad1fb37ce40b710326ae2d9ab208c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::prefetchToHost</definition>
        <argsstring>(Iter begin, Iter end) noexcept</argsstring>
        <name>prefetchToHost</name>
        <qualifiedname>amrex::Gpu::prefetchToHost</qualifiedname>
        <param>
          <type>Iter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Migrate elements of a container from device to host. This is a no-op for host-only code. </para>
        </briefdescription>
        <detaileddescription>
<para>This version is blocking - CPU execution will halt until the migration is finished. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="334" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="334" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1af50ec082ab16407059545feed99d648f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::prefetchToDevice</definition>
        <argsstring>(Iter begin, Iter end) noexcept</argsstring>
        <name>prefetchToDevice</name>
        <qualifiedname>amrex::Gpu::prefetchToDevice</qualifiedname>
        <param>
          <type>Iter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Migrate elements of a container from host to device. This is a no-op for host-only code. </para>
        </briefdescription>
        <detaileddescription>
<para>This version is blocking - CPU execution will halt until the migration is finished. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="375" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="375" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a0c2569c007a55f5619e6242794f066e6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IT</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
            <defval>typename std::iterator_traits&lt;IT&gt;::value_type</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(sizeof(T)&lt;=36 *8) &amp;&amp;std::is_trivially_copyable_v&lt; T &gt; &amp;&amp;<ref refid="structamrex_1_1IsCallable" kindref="compound">amrex::IsCallable</ref>&lt; F, T &amp;, Long &gt;::value, int &gt;</type>
            <declname>FOO</declname>
            <defname>FOO</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::fillAsync</definition>
        <argsstring>(IT first, IT last, F const &amp;f) noexcept</argsstring>
        <name>fillAsync</name>
        <qualifiedname>amrex::Gpu::fillAsync</qualifiedname>
        <param>
          <type>IT</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IT</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Fill the elements in the given range using the given calllable. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is asynchronous for GPU builds.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IT</parametername>
</parameternamelist>
<parameterdescription>
<para>the iterator type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the callable type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the inclusive first in the range [first, last) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the exclusive last in the range [first, last) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the callable with the function signature of void(T&amp;, Long), where T is the element type and the Long parameter is the index for the element to be filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" line="430" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="430" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a7a05369cacb826ba5546b4dd507c49dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::inLaunchRegion</definition>
        <argsstring>() noexcept</argsstring>
        <name>inLaunchRegion</name>
        <qualifiedname>amrex::Gpu::inLaunchRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="92" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a8e6abda3339e4295716d7e2ff78e9603" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::notInLaunchRegion</definition>
        <argsstring>() noexcept</argsstring>
        <name>notInLaunchRegion</name>
        <qualifiedname>amrex::Gpu::notInLaunchRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="93" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a9f755b4680ecd261e7416fda7ca2b5bb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::setLaunchRegion</definition>
        <argsstring>(bool launch) noexcept</argsstring>
        <name>setLaunchRegion</name>
        <qualifiedname>amrex::Gpu::setLaunchRegion</qualifiedname>
        <param>
          <type>bool</type>
          <declname>launch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable/disable GPU kernel launches.</para>
<para><simplesect kind="note"><para>This will only switch from GPU to CPU for kernels launched with macros. Functions like <computeroutput>amrex::ParallelFor</computeroutput> will be unaffected. Therefore it should not be used for comparing GPU to non-GPU performance or behavior.</para>
</simplesect>
<programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespaceamrex_1_1Gpu_1a9f755b4680ecd261e7416fda7ca2b5bb" kindref="member">Gpu::setLaunchRegion</ref>(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespaceamrex_1_1Gpu_1a9f755b4680ecd261e7416fda7ca2b5bb" kindref="member">Gpu::setLaunchRegion</ref>(1);</highlight></codeline>
</programlisting></para>
<para>Will disable the launching of GPU kernels between the calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="114" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a2fed08a89572d6c04add3c5587f647d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::inGraphRegion</definition>
        <argsstring>()</argsstring>
        <name>inGraphRegion</name>
        <qualifiedname>amrex::Gpu::inGraphRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="121" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a73a7f12036e7cda0332aec8185d4c330" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::notInGraphRegion</definition>
        <argsstring>()</argsstring>
        <name>notInGraphRegion</name>
        <qualifiedname>amrex::Gpu::notInGraphRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="122" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a092d5e2b6a052f9620c9d3c3757ed1be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::setGraphRegion</definition>
        <argsstring>(bool graph)</argsstring>
        <name>setGraphRegion</name>
        <qualifiedname>amrex::Gpu::setGraphRegion</qualifiedname>
        <param>
          <type>bool</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="124" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a7b9b6dc13dd85b3eeac69203a56e39c0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::inSingleStreamRegion</definition>
        <argsstring>() noexcept</argsstring>
        <name>inSingleStreamRegion</name>
        <qualifiedname>amrex::Gpu::inSingleStreamRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="151" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1aa291965db390b525ec650fbb777bfd44" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::inNoSyncRegion</definition>
        <argsstring>() noexcept</argsstring>
        <name>inNoSyncRegion</name>
        <qualifiedname>amrex::Gpu::inNoSyncRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="152" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ae31e2a43c93959ebf7aa6bd6f564d85c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::setSingleStreamRegion</definition>
        <argsstring>(bool b) noexcept</argsstring>
        <name>setSingleStreamRegion</name>
        <qualifiedname>amrex::Gpu::setSingleStreamRegion</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="154" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a361fc388a79423386fd65e7dfe189f57" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::setNoSyncRegion</definition>
        <argsstring>(bool b) noexcept</argsstring>
        <name>setNoSyncRegion</name>
        <qualifiedname>amrex::Gpu::setNoSyncRegion</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="158" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ae1a0966ad8daf3a49564123b8dbdb3fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a3e08759747455ff96c8f68e8673c2b19" kindref="member">gpuStream_t</ref></type>
        <definition>gpuStream_t amrex::Gpu::gpuStream</definition>
        <argsstring>() noexcept</argsstring>
        <name>gpuStream</name>
        <qualifiedname>amrex::Gpu::gpuStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="218" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a920dd19f186b2276d9bbdb14d117565c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Gpu::numGpuStreams</definition>
        <argsstring>() noexcept</argsstring>
        <name>numGpuStreams</name>
        <qualifiedname>amrex::Gpu::numGpuStreams</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="225" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a0040af3e7783b853140a6e13c755fc25" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::synchronize</definition>
        <argsstring>() noexcept</argsstring>
        <name>synchronize</name>
        <qualifiedname>amrex::Gpu::synchronize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="231" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a67a618504ee5fb94bd65a5d393e344b4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::streamSynchronize</definition>
        <argsstring>() noexcept</argsstring>
        <name>streamSynchronize</name>
        <qualifiedname>amrex::Gpu::streamSynchronize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="237" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a78acbb676e94c674fa5ec73508cef459" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::streamSynchronizeAll</definition>
        <argsstring>() noexcept</argsstring>
        <name>streamSynchronizeAll</name>
        <qualifiedname>amrex::Gpu::streamSynchronizeAll</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1aacefe17a39734cb2475a36199ab1370b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::htod_memcpy_async</definition>
        <argsstring>(void *p_d, const void *p_h, const std::size_t sz) noexcept</argsstring>
        <name>htod_memcpy_async</name>
        <qualifiedname>amrex::Gpu::htod_memcpy_async</qualifiedname>
        <param>
          <type>void *</type>
          <declname>p_d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_h</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="251" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a6cb0d90b937d4749b2219ad0e9fa8277" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::dtoh_memcpy_async</definition>
        <argsstring>(void *p_h, const void *p_d, const std::size_t sz) noexcept</argsstring>
        <name>dtoh_memcpy_async</name>
        <qualifiedname>amrex::Gpu::dtoh_memcpy_async</qualifiedname>
        <param>
          <type>void *</type>
          <declname>p_h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_d</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="265" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="265" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a00026ef5f8505586ed52acbbc11fdf91" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::dtod_memcpy_async</definition>
        <argsstring>(void *p_d_dst, const void *p_d_src, const std::size_t sz) noexcept</argsstring>
        <name>dtod_memcpy_async</name>
        <qualifiedname>amrex::Gpu::dtod_memcpy_async</qualifiedname>
        <param>
          <type>void *</type>
          <declname>p_d_dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_d_src</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="279" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="279" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1aa720ba8e7b622f0897659c64d23d5db4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::htod_memcpy</definition>
        <argsstring>(void *p_d, const void *p_h, const std::size_t sz) noexcept</argsstring>
        <name>htod_memcpy</name>
        <qualifiedname>amrex::Gpu::htod_memcpy</qualifiedname>
        <param>
          <type>void *</type>
          <declname>p_d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_h</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="293" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="293" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1aa443a27f05e81db793b131d3fc0b101c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::dtoh_memcpy</definition>
        <argsstring>(void *p_h, const void *p_d, const std::size_t sz) noexcept</argsstring>
        <name>dtoh_memcpy</name>
        <qualifiedname>amrex::Gpu::dtoh_memcpy</qualifiedname>
        <param>
          <type>void *</type>
          <declname>p_h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_d</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="301" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ab695bddeb3cc727225d95a1826472ae4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::dtod_memcpy</definition>
        <argsstring>(void *p_d_dst, const void *p_d_src, const std::size_t sz) noexcept</argsstring>
        <name>dtod_memcpy</name>
        <qualifiedname>amrex::Gpu::dtod_memcpy</qualifiedname>
        <param>
          <type>void *</type>
          <declname>p_d_dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_d_src</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="309" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="309" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1acd480232c63b6e866c02e40561f9f635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::memcpy_from_host_to_device_global_async</definition>
        <argsstring>(T &amp;dg, const void *src, std::size_t nbytes, std::size_t offset=0)</argsstring>
        <name>memcpy_from_host_to_device_global_async</name>
        <qualifiedname>amrex::Gpu::memcpy_from_host_to_device_global_async</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>dg</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy <computeroutput>nbytes</computeroutput> bytes from host to device global variable. <computeroutput>offset</computeroutput> is the offset in bytes from the start of the device global variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="325" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="325" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a7c0024e0db9fbe3a6522df0047bc581b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::memcpy_from_device_global_to_host_async</definition>
        <argsstring>(void *dst, T const &amp;dg, std::size_t nbytes, std::size_t offset=0)</argsstring>
        <name>memcpy_from_device_global_to_host_async</name>
        <qualifiedname>amrex::Gpu::memcpy_from_device_global_to_host_async</qualifiedname>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>dg</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy <computeroutput>nbytes</computeroutput> bytes from device global variable to host. <computeroutput>offset</computeroutput> is the offset in bytes from the start of the device global variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="348" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="348" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a8e72d3661b320758c41e4a548b80beec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::ErrorCheck</definition>
        <argsstring>(const char *file, int line) noexcept</argsstring>
        <name>ErrorCheck</name>
        <qualifiedname>amrex::Gpu::ErrorCheck</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" line="50" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" bodystart="50" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a99d3039071c1009b16e08b63b63013db" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t amrex::Gpu::numThreadsPerBlockParallelFor</definition>
        <argsstring>()</argsstring>
        <name>numThreadsPerBlockParallelFor</name>
        <qualifiedname>amrex::Gpu::numThreadsPerBlockParallelFor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="85" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a0945ddac094ce0d3bc1bcf3234fd9741" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>__host__ __device__ Box amrex::Gpu::getThreadBox</definition>
        <argsstring>(const Box &amp;bx, Long offset) noexcept</argsstring>
        <name>getThreadBox</name>
        <qualifiedname>amrex::Gpu::getThreadBox</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="110" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="110" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ac21b6d1625e2f56c27d364434a5c49f4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Gpu_1_1ExecutionConfig" kindref="compound">ExecutionConfig</ref></type>
        <definition>ExecutionConfig amrex::Gpu::makeExecutionConfig</definition>
        <argsstring>(Long N) noexcept</argsstring>
        <name>makeExecutionConfig</name>
        <qualifiedname>amrex::Gpu::makeExecutionConfig</qualifiedname>
        <param>
          <type>Long</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="164" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="164" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a96329917c7544347d421e3a216fb58a1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Gpu_1_1ExecutionConfig" kindref="compound">ExecutionConfig</ref></type>
        <definition>ExecutionConfig amrex::Gpu::makeExecutionConfig</definition>
        <argsstring>(const Box &amp;box) noexcept</argsstring>
        <name>makeExecutionConfig</name>
        <qualifiedname>amrex::Gpu::makeExecutionConfig</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="180" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a847a3d9567ae4e8ac078cad1ac555d20" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1Gpu_1_1ExecConfig" kindref="compound">ExecConfig</ref> &gt;</type>
        <definition>Vector&lt; ExecConfig &gt; amrex::Gpu::makeNExecutionConfigs</definition>
        <argsstring>(Long N) noexcept</argsstring>
        <name>makeNExecutionConfigs</name>
        <qualifiedname>amrex::Gpu::makeNExecutionConfigs</qualifiedname>
        <param>
          <type>Long</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="192" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="192" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a28a5a940451f82dac8c84f09e5f89fea" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1Gpu_1_1ExecConfig" kindref="compound">ExecConfig</ref> &gt;</type>
        <definition>Vector&lt; ExecConfig &gt; amrex::Gpu::makeNExecutionConfigs</definition>
        <argsstring>(BoxND&lt; dim &gt; const &amp;box) noexcept</argsstring>
        <name>makeNExecutionConfigs</name>
        <qualifiedname>amrex::Gpu::makeNExecutionConfigs</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>&lt; dim &gt; const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="221" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a0238e6657139393e8a65f7a3d160e128" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1Gpu_1_1range__detail_1_1range__impl" kindref="compound">range_detail::range_impl</ref>&lt; T &gt;</type>
        <definition>__host__ __device__ range_detail::range_impl&lt; T &gt; amrex::Gpu::Range</definition>
        <argsstring>(T const &amp;b) noexcept</argsstring>
        <name>Range</name>
        <qualifiedname>amrex::Gpu::Range</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" line="125" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a227a928fd27304426892b246e6f4d055" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceSum</definition>
        <argsstring>(T *dest, T source, Gpu::Handler const &amp;h) noexcept</argsstring>
        <name>deviceReduceSum</name>
        <qualifiedname>amrex::Gpu::deviceReduceSum</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="606" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="606" bodyend="621" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" declline="32" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ac7aea9aca3e05f9f1eb95e484d220ee7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceMin</definition>
        <argsstring>(T *dest, T source, Gpu::Handler const &amp;h) noexcept</argsstring>
        <name>deviceReduceMin</name>
        <qualifiedname>amrex::Gpu::deviceReduceMin</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="625" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="625" bodyend="640" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a5e9bd542c0c9e7ea73a017de372712d6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceMax</definition>
        <argsstring>(T *dest, T source, Gpu::Handler const &amp;h) noexcept</argsstring>
        <name>deviceReduceMax</name>
        <qualifiedname>amrex::Gpu::deviceReduceMax</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="644" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="644" bodyend="659" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a6dfc0047b812e0f99119ff36dda58bb7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceLogicalAnd</definition>
        <argsstring>(int *dest, int source, Gpu::Handler const &amp;h) noexcept</argsstring>
        <name>deviceReduceLogicalAnd</name>
        <qualifiedname>amrex::Gpu::deviceReduceLogicalAnd</qualifiedname>
        <param>
          <type>int *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="662" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="662" bodyend="677" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a8b13e3dd450bafceb06a1f17c16eb56b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceLogicalOr</definition>
        <argsstring>(int *dest, int source, Gpu::Handler const &amp;h) noexcept</argsstring>
        <name>deviceReduceLogicalOr</name>
        <qualifiedname>amrex::Gpu::deviceReduceLogicalOr</qualifiedname>
        <param>
          <type>int *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="680" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="680" bodyend="695" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" declline="46" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a2efa52db2812020e4a2dca110f4d62a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>warpSize</declname>
            <defname>warpSize</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename WARPREDUCE</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T amrex::Gpu::blockReduce</definition>
        <argsstring>(T x, WARPREDUCE &amp;&amp;warp_reduce, T x0)</argsstring>
        <name>blockReduce</name>
        <qualifiedname>amrex::Gpu::blockReduce</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>WARPREDUCE &amp;&amp;</type>
          <declname>warp_reduce</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="312" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="312" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a34cbe61ca1607c0a4c216406d97a751c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>warpSize</declname>
            <defname>warpSize</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename WARPREDUCE</type>
          </param>
          <param>
            <type>typename ATOMICOP</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::blockReduce_partial</definition>
        <argsstring>(T *dest, T x, WARPREDUCE &amp;&amp;warp_reduce, ATOMICOP &amp;&amp;atomic_op, Gpu::Handler const &amp;handler)</argsstring>
        <name>blockReduce_partial</name>
        <qualifiedname>amrex::Gpu::blockReduce_partial</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>WARPREDUCE &amp;&amp;</type>
          <declname>warp_reduce</declname>
        </param>
        <param>
          <type>ATOMICOP &amp;&amp;</type>
          <declname>atomic_op</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="333" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="333" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1afb8251b45e6f236ac283f3f5e5363f27" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T amrex::Gpu::blockReduceSum</definition>
        <argsstring>(T source) noexcept</argsstring>
        <name>blockReduceSum</name>
        <qualifiedname>amrex::Gpu::blockReduceSum</qualifiedname>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="348" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="348" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1aaca543c46a47848547c66514745569db" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceSum_full</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceSum_full</name>
        <qualifiedname>amrex::Gpu::deviceReduceSum_full</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="356" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="356" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1aeb619fda3e94a275e0a214533b95d0fe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BLOCKDIMX</declname>
            <defname>BLOCKDIMX</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T amrex::Gpu::blockReduceSum</definition>
        <argsstring>(T source) noexcept</argsstring>
        <name>blockReduceSum</name>
        <qualifiedname>amrex::Gpu::blockReduceSum</qualifiedname>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="365" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="365" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1adf189da09ec8860b8b3743e749e86547" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BLOCKDIMX</declname>
            <defname>BLOCKDIMX</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceSum_full</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceSum_full</name>
        <qualifiedname>amrex::Gpu::deviceReduceSum_full</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="389" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a589404293403cf894b2532d5b61df482" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T amrex::Gpu::blockReduceMin</definition>
        <argsstring>(T source) noexcept</argsstring>
        <name>blockReduceMin</name>
        <qualifiedname>amrex::Gpu::blockReduceMin</qualifiedname>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="398" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="398" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1abea9163d293b31e86bcce543d3e75896" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceMin_full</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceMin_full</name>
        <qualifiedname>amrex::Gpu::deviceReduceMin_full</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="406" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="406" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a395b74319a24844a731df0eb22ffa8ee" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BLOCKDIMX</declname>
            <defname>BLOCKDIMX</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T amrex::Gpu::blockReduceMin</definition>
        <argsstring>(T source) noexcept</argsstring>
        <name>blockReduceMin</name>
        <qualifiedname>amrex::Gpu::blockReduceMin</qualifiedname>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="415" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="415" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ac9d231dcecbad167ab0c6c6aaac9c651" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BLOCKDIMX</declname>
            <defname>BLOCKDIMX</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceMin_full</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceMin_full</name>
        <qualifiedname>amrex::Gpu::deviceReduceMin_full</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="444" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="444" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a4f5839eee64bdce0a2880c67a704ab02" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T amrex::Gpu::blockReduceMax</definition>
        <argsstring>(T source) noexcept</argsstring>
        <name>blockReduceMax</name>
        <qualifiedname>amrex::Gpu::blockReduceMax</qualifiedname>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="453" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="453" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a5fe82b7247c5f8ada5de5d979a84514c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceMax_full</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceMax_full</name>
        <qualifiedname>amrex::Gpu::deviceReduceMax_full</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="461" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="461" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a07a19c7e52caa0c033b7003a90d267a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BLOCKDIMX</declname>
            <defname>BLOCKDIMX</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ T</type>
        <definition>__device__ T amrex::Gpu::blockReduceMax</definition>
        <argsstring>(T source) noexcept</argsstring>
        <name>blockReduceMax</name>
        <qualifiedname>amrex::Gpu::blockReduceMax</qualifiedname>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="470" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="470" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1aa7cafbe7f4b2582d1401652a262a46de" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BLOCKDIMX</declname>
            <defname>BLOCKDIMX</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Gpu::deviceReduceMax_full</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceMax_full</name>
        <qualifiedname>amrex::Gpu::deviceReduceMax_full</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" line="498" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="498" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a2af1b1d0436a3dd8440988b7a79545c6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::Gpu::LDG</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a, int i, int j, int k) noexcept</argsstring>
        <name>LDG</name>
        <qualifiedname>amrex::Gpu::LDG</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="28" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a14e5029168c68fa1b6db837631729b68" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::Gpu::LDG</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a, int i, int j, int k, int n) noexcept</argsstring>
        <name>LDG</name>
        <qualifiedname>amrex::Gpu::LDG</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="39" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a15625bddaff1aaca4d04b13492962b92" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::isManaged</definition>
        <argsstring>(void const *p) noexcept</argsstring>
        <name>isManaged</name>
        <qualifiedname>amrex::Gpu::isManaged</qualifiedname>
        <param>
          <type>void const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="48" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="48" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1af5ad0c7753b11912c68338e7f33fde0f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::isDevicePtr</definition>
        <argsstring>(void const *p) noexcept</argsstring>
        <name>isDevicePtr</name>
        <qualifiedname>amrex::Gpu::isDevicePtr</qualifiedname>
        <param>
          <type>void const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="64" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="64" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a93299a5692a098ffa6f10f6cce78fd17" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::isPinnedPtr</definition>
        <argsstring>(void const *p) noexcept</argsstring>
        <name>isPinnedPtr</name>
        <qualifiedname>amrex::Gpu::isPinnedPtr</qualifiedname>
        <param>
          <type>void const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="88" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="88" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a5ee8881eb9dcf74360bb8981d1478a17" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::isGpuPtr</definition>
        <argsstring>(void const *p) noexcept</argsstring>
        <name>isGpuPtr</name>
        <qualifiedname>amrex::Gpu::isGpuPtr</qualifiedname>
        <param>
          <type>void const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="112" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="112" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a8a1da88c4e0c492c38daa1a27a183194" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::Gpu::isnan</definition>
        <argsstring>(T m) noexcept</argsstring>
        <name>isnan</name>
        <qualifiedname>amrex::Gpu::isnan</qualifiedname>
        <param>
          <type>T</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="150" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="150" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1af1ae35b56f411d4aa793936e3e7bc31d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::Gpu::isinf</definition>
        <argsstring>(T m) noexcept</argsstring>
        <name>isinf</name>
        <qualifiedname>amrex::Gpu::isinf</qualifiedname>
        <param>
          <type>T</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="164" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="164" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ae705f3df7090abe926659ea69999c756" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ void *</type>
        <definition>__host__ __device__ void * amrex::Gpu::memcpy</definition>
        <argsstring>(void *dest, const void *src, std::size_t count)</argsstring>
        <name>memcpy</name>
        <qualifiedname>amrex::Gpu::memcpy</qualifiedname>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" line="220" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="220" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ab4e0fa80e6873e53208d917854f37129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>OutIter</type>
        <definition>OutIter amrex::Gpu::inclusive_scan</definition>
        <argsstring>(InIter begin, InIter end, OutIter result)</argsstring>
        <name>inclusive_scan</name>
        <qualifiedname>amrex::Gpu::inclusive_scan</qualifiedname>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Scan.H" line="1374" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Scan.H" bodystart="1374" bodyend="1388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a3f116832e254a3422729b3455b22f18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>OutIter</type>
        <definition>OutIter amrex::Gpu::exclusive_scan</definition>
        <argsstring>(InIter begin, InIter end, OutIter result)</argsstring>
        <name>exclusive_scan</name>
        <qualifiedname>amrex::Gpu::exclusive_scan</qualifiedname>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Scan.H" line="1391" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Scan.H" bodystart="1391" bodyend="1414"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFwd.H" line="52" column="1"/>
  </compounddef>
</doxygen>
