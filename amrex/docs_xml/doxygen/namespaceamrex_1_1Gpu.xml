<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceamrex_1_1Gpu" kind="namespace" language="C++">
    <compoundname>amrex::Gpu</compoundname>
    <innerclass refid="classamrex_1_1Gpu_1_1AsyncArray" prot="public">amrex::Gpu::AsyncArray</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1ComponentBox" prot="public">amrex::Gpu::ComponentBox</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1Deleter" prot="public">amrex::Gpu::Deleter</innerclass>
    <innerclass refid="classamrex_1_1Gpu_1_1Device" prot="public">amrex::Gpu::Device</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1DeviceScalar" prot="public">amrex::Gpu::DeviceScalar</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1DeviceToDevice" prot="public">amrex::Gpu::DeviceToDevice</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1DeviceToHost" prot="public">amrex::Gpu::DeviceToHost</innerclass>
    <innerclass refid="classamrex_1_1Gpu_1_1Elixir" prot="public">amrex::Gpu::Elixir</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1GraphSafeGuard" prot="public">amrex::Gpu::GraphSafeGuard</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1GridSize" prot="public">amrex::Gpu::GridSize</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1HostToDevice" prot="public">amrex::Gpu::HostToDevice</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1LaunchSafeGuard" prot="public">amrex::Gpu::LaunchSafeGuard</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1Managed" prot="public">amrex::Gpu::Managed</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1Pinned" prot="public">amrex::Gpu::Pinned</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1ScopedDefaultStream" prot="public">amrex::Gpu::ScopedDefaultStream</innerclass>
    <innerclass refid="classamrex_1_1Gpu_1_1StreamIter" prot="public">amrex::Gpu::StreamIter</innerclass>
    <innerclass refid="structamrex_1_1Gpu_1_1StreamItInfo" prot="public">amrex::Gpu::StreamItInfo</innerclass>
    <innernamespace refid="namespaceamrex_1_1Gpu_1_1Atomic">amrex::Gpu::Atomic</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Gpu_1_1range__detail">amrex::Gpu::range_detail</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Gpu::DeviceVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>DeviceVector</name>
        <briefdescription>
<para>When Cuda is off, all these containers revert to <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1a3d871a58c724cf2f3a5fb0247d592beb" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Gpu::HostVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>HostVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1ad6c6e91c90e801f44c429c7b32abd257" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Gpu::ManagedVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>ManagedVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1abe2cd73b65ff4d9eb3c2672e1425212b" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Gpu::ManagedDeviceVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>ManagedDeviceVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1af9749d46a7d1bfabf6c7430c0e4a777b" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Gpu::PinnedVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>PinnedVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1Gpu_1aa06084d673c5ad11d0431208239fe562" prot="public" static="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T &gt;</type>
        <definition>using amrex::Gpu::PolymorphicVector = typedef PODVector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>PolymorphicVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structamrex_1_1Gpu_1_1HostToDevice" kindref="compound">HostToDevice</ref></type>
        <definition>constexpr HostToDevice amrex::Gpu::hostToDevice</definition>
        <argsstring></argsstring>
        <name>hostToDevice</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structamrex_1_1Gpu_1_1DeviceToHost" kindref="compound">DeviceToHost</ref></type>
        <definition>constexpr DeviceToHost amrex::Gpu::deviceToHost</definition>
        <argsstring></argsstring>
        <name>deviceToHost</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1Gpu_1a45b5d93b9e83ebcd8fb2f1e90aced0c7" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structamrex_1_1Gpu_1_1DeviceToDevice" kindref="compound">DeviceToDevice</ref></type>
        <definition>constexpr DeviceToDevice amrex::Gpu::deviceToDevice</definition>
        <argsstring></argsstring>
        <name>deviceToDevice</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copy</definition>
        <argsstring>(HostToDevice, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1HostToDevice" kindref="compound">HostToDevice</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A host-to-device copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a3d871a58c724cf2f3a5fb0247d592beb" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>        </briefdescription>
        <detaileddescription>
<para>This version is blocking - CPU execution will halt until the copy is finished.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structamrex_1_1Gpu_1_1HostToDevice" kindref="compound">HostToDevice</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>A tag indicating that the copy is from the host to the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para><para><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" kindref="member">Gpu::hostToDevice</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">a.begin()</ref>, <ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">a.end()</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">b.begin()</ref>); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="114" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1abea324bd9a4533e4f54614f6a7d410d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copy</definition>
        <argsstring>(DeviceToHost, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1DeviceToHost" kindref="compound">DeviceToHost</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A device-to-host copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a3d871a58c724cf2f3a5fb0247d592beb" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>        </briefdescription>
        <detaileddescription>
<para>This version is blocking - CPU execution will halt until the copy is finished.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structamrex_1_1Gpu_1_1DeviceToHost" kindref="compound">DeviceToHost</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>A tag indicating that the copy is from the device to the host </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para><para><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" kindref="member">Gpu::deviceToHost</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">a.begin()</ref>, <ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">a.end()</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">b.begin()</ref>); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="146" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1afb3bc7b25afb38fc8f371f3bc4966483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copy</definition>
        <argsstring>(DeviceToDevice, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1DeviceToDevice" kindref="compound">DeviceToDevice</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A device-to-device copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a3d871a58c724cf2f3a5fb0247d592beb" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>        </briefdescription>
        <detaileddescription>
<para>This version is blocking - CPU execution will halt until the copy is finished.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structamrex_1_1Gpu_1_1DeviceToDevice" kindref="compound">DeviceToDevice</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>A tag indicating that the copy is from the device to the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para><para><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a45b5d93b9e83ebcd8fb2f1e90aced0c7" kindref="member">Gpu::deviceToDevice</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">a.begin()</ref>, <ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">a.end()</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">b.begin()</ref>); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="178" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a39c6894dcdb993d9e4455d7d418947b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copyAsync</definition>
        <argsstring>(HostToDevice, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copyAsync</name>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1HostToDevice" kindref="compound">HostToDevice</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A host-to-device copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a3d871a58c724cf2f3a5fb0247d592beb" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>        </briefdescription>
        <detaileddescription>
<para>This version is asynchronous - CPU execution will continue, whether or not the copy is finished.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structamrex_1_1Gpu_1_1HostToDevice" kindref="compound">HostToDevice</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>A tag indicating that the copy is from the host to the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para><para><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" kindref="member">Gpu::hostToDevice</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">a.begin()</ref>, <ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">a.end()</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">b.begin()</ref>); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="211" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="211" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a15d5aa9cbac1f2a0ef1f042530760b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copyAsync</definition>
        <argsstring>(DeviceToHost, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copyAsync</name>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1DeviceToHost" kindref="compound">DeviceToHost</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A device-to-host copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a3d871a58c724cf2f3a5fb0247d592beb" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>        </briefdescription>
        <detaileddescription>
<para>This version is asynchronous - CPU execution will continue, whether or not the copy is finished.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structamrex_1_1Gpu_1_1DeviceToHost" kindref="compound">DeviceToHost</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>A tag indicating that the copy is from the device to the host </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para><para><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" kindref="member">Gpu::deviceToHost</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">a.begin()</ref>, <ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">a.end()</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">b.begin()</ref>); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="244" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="244" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a3da569ab08ec568b8e512d91d6259b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Gpu::copyAsync</definition>
        <argsstring>(DeviceToDevice, InIter begin, InIter end, OutIter result) noexcept</argsstring>
        <name>copyAsync</name>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1DeviceToDevice" kindref="compound">DeviceToDevice</ref></type>
        </param>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>A device-to-device copy routine. Note this is just a wrapper around memcpy, so it assumes contiguous storage. The amrex-provided containers like <ref refid="namespaceamrex_1_1Gpu_1a3d871a58c724cf2f3a5fb0247d592beb" kindref="member">Gpu::HostVector</ref>, <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>, etc. meet this requirement. </para>        </briefdescription>
        <detaileddescription>
<para>This version is asynchronous - CPU execution will continue, whether or not the copy is finished.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The input iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutIter</parametername>
</parameternamelist>
<parameterdescription>
<para>The output iterator type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structamrex_1_1Gpu_1_1DeviceToDevice" kindref="compound">DeviceToDevice</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>A tag indicating that the copy is from the device to the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to start reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the input to stop reading </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Where in the output to start writing</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para><para><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a45b5d93b9e83ebcd8fb2f1e90aced0c7" kindref="member">Gpu::deviceToDevice</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">a.begin()</ref>, <ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">a.end()</ref>, <ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">b.begin()</ref>); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuContainers.H" bodystart="277" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool amrex::Gpu::inLaunchRegion</definition>
        <argsstring>()</argsstring>
        <name>inLaunchRegion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" line="127" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a84b4e8c1e004493e6e16003405cec793" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool amrex::Gpu::notInLaunchRegion</definition>
        <argsstring>()</argsstring>
        <name>notInLaunchRegion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a395b909fb359f806a5a94b78a94855d8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool amrex::Gpu::setLaunchRegion</definition>
        <argsstring>(bool)</argsstring>
        <name>setLaunchRegion</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a6be69064b9a7673aa066f42cac505f25" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool amrex::Gpu::inGraphRegion</definition>
        <argsstring>()</argsstring>
        <name>inGraphRegion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a75f138b5ae000637503fb21570285378" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool amrex::Gpu::notInGraphRegion</definition>
        <argsstring>()</argsstring>
        <name>notInGraphRegion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a5b1f57488f3261a149dbb59792c1592c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool amrex::Gpu::setGraphRegion</definition>
        <argsstring>(bool)</argsstring>
        <name>setGraphRegion</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" line="133" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuControl.H" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a920dd19f186b2276d9bbdb14d117565c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Gpu::numGpuStreams</definition>
        <argsstring>() noexcept</argsstring>
        <name>numGpuStreams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuDevice.H" line="182" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a0040af3e7783b853140a6e13c755fc25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::synchronize</definition>
        <argsstring>() noexcept</argsstring>
        <name>synchronize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuDevice.H" line="188" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a67a618504ee5fb94bd65a5d393e344b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::streamSynchronize</definition>
        <argsstring>() noexcept</argsstring>
        <name>streamSynchronize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuDevice.H" line="194" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a9ac3f1c6e71f0842b8f152fce7e4a7fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::size_t</type>
        <definition>static constexpr std::size_t amrex::Gpu::numThreadsPerBlockParallelFor</definition>
        <argsstring>()</argsstring>
        <name>numThreadsPerBlockParallelFor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunch.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a8116e775f35d977f35ff6a522db709d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::getGridSize</definition>
        <argsstring>(FabArrayBase const &amp;fa, int ngrow, LayoutData&lt; GridSize &gt; &amp;gs, int &amp;ntotblocks)</argsstring>
        <name>getGridSize</name>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; <ref refid="structamrex_1_1Gpu_1_1GridSize" kindref="compound">GridSize</ref> &gt; &amp;</type>
          <declname>gs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>ntotblocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunch.H" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ae2cf1d72cec1f6929ea0405c70ce2f45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Gpu::getThreadBox</definition>
        <argsstring>(const Box &amp;bx, Long offset) noexcept</argsstring>
        <name>getThreadBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunch.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="102" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1Gpu_1_1range__detail_1_1range__impl" kindref="compound">range_detail::range_impl</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE range_detail::range_impl&lt;T&gt; amrex::Gpu::Range</definition>
        <argsstring>(T const &amp;b) noexcept</argsstring>
        <name>Range</name>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuRange.H" line="125" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuRange.H" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ab50ab224d1a043d14eccc5019548c562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::Gpu::deviceReduceSum</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceSum</name>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" line="193" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a43c0464b84a84c9342e01a13f076e1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::Gpu::deviceReduceMin</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceMin</name>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="203" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a434d47b5660b0c082d361aa5994ee218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::Gpu::deviceReduceMax</definition>
        <argsstring>(T *dest, T source) noexcept</argsstring>
        <name>deviceReduceMax</name>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="213" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a3ce0db272209050a5bf6c593c2679607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::Gpu::deviceReduceLogicalAnd</definition>
        <argsstring>(int *dest, int source) noexcept</argsstring>
        <name>deviceReduceLogicalAnd</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" line="222" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="222" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a6c3c7080ba11377ca7a9df8ef573e133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::Gpu::deviceReduceLogicalOr</definition>
        <argsstring>(int *dest, int source) noexcept</argsstring>
        <name>deviceReduceLogicalOr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" line="231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuReduce.H" bodystart="231" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a568da598ec8829dff901c81d530db976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::LDG</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a, int i, int j, int k) noexcept</argsstring>
        <name>LDG</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" line="26" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ae595b27ab79b81cdbddf1a1e0fef31ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::LDG</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a, int i, int j, int k, int n) noexcept</argsstring>
        <name>LDG</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a15625bddaff1aaca4d04b13492962b92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::isManaged</definition>
        <argsstring>(void const *p) noexcept</argsstring>
        <name>isManaged</name>
        <param>
          <type>void const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="44" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1af5ad0c7753b11912c68338e7f33fde0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::isDevicePtr</definition>
        <argsstring>(void const *p) noexcept</argsstring>
        <name>isDevicePtr</name>
        <param>
          <type>void const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="63" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a93299a5692a098ffa6f10f6cce78fd17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::isPinnedPtr</definition>
        <argsstring>(void const *p) noexcept</argsstring>
        <name>isPinnedPtr</name>
        <param>
          <type>void const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="85" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a5ee8881eb9dcf74360bb8981d1478a17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::isGpuPtr</definition>
        <argsstring>(void const *p) noexcept</argsstring>
        <name>isGpuPtr</name>
        <param>
          <type>void const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="107" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ae593bd821798e21aa2e404559d59ae2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::Gpu::isnan</definition>
        <argsstring>(T m) noexcept</argsstring>
        <name>isnan</name>
        <param>
          <type>T</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" line="141" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="141" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a0b47b234df50714368217dfb8703aaab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::Gpu::isinf</definition>
        <argsstring>(T m) noexcept</argsstring>
        <name>isinf</name>
        <param>
          <type>T</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuUtility.H" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1ab4e0fa80e6873e53208d917854f37129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>OutIter</type>
        <definition>OutIter amrex::Gpu::inclusive_scan</definition>
        <argsstring>(InIter begin, InIter end, OutIter result)</argsstring>
        <name>inclusive_scan</name>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Scan.H" line="665" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Scan.H" bodystart="665" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1a3f116832e254a3422729b3455b22f18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InIter</type>
          </param>
          <param>
            <type>class OutIter</type>
          </param>
        </templateparamlist>
        <type>OutIter</type>
        <definition>OutIter amrex::Gpu::exclusive_scan</definition>
        <argsstring>(InIter begin, InIter end, OutIter result)</argsstring>
        <name>exclusive_scan</name>
        <param>
          <type>InIter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InIter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Scan.H" line="679" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Scan.H" bodystart="679" bodyend="699"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Gpu.H" line="34" column="1"/>
  </compounddef>
</doxygen>
