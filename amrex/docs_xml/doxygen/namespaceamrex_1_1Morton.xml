<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1Morton" kind="namespace" language="C++">
    <compoundname>amrex::Morton</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Morton_1a50d00717231e067994583a7c23c29007" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint32_t</type>
        <definition>__host__ __device__ std::uint32_t amrex::Morton::makeSpace</definition>
        <argsstring>(std::uint32_t x) noexcept</argsstring>
        <name>makeSpace</name>
        <qualifiedname>amrex::Morton::makeSpace</qualifiedname>
        <param>
          <type>std::uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This makes space in the input 32-bit integer by splitting the bits so they can be interleaved. </para>
        </briefdescription>
        <detaileddescription>
<para>In 3D, the lowest 10 bits of x are assumed filled, with the next 22 0. On output, x has been &quot;stretched&quot; to 30 bits, with each input bit followed by two interleaving bits set to 0.</para>
<para>In 2D, it is the same except the lowest 16 bits on x are filled, and there is only one interleaving bit.</para>
<para>In 1D no interleaving is needed and x is just returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned int holding the input to be split </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" line="31" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" bodystart="31" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Morton_1a595f5db9664324e9bb78cbb47ec31399" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint32_t</type>
        <definition>__host__ __device__ std::uint32_t amrex::Morton::toUInt10</definition>
        <argsstring>(amrex::Real x, amrex::Real xmin, amrex::Real xmax) noexcept</argsstring>
        <name>toUInt10</name>
        <qualifiedname>amrex::Morton::toUInt10</qualifiedname>
        <param>
          <type>amrex::Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>xmin</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>xmax</declname>
        </param>
        <briefdescription>
<para>Convert a Real to a uint32, keeping only 10 significant bits. This puts the first 10 bits of x into retval with the 22 highest bits set to 0. It is assumed that xmin &lt;= x &lt; xmax. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful in 3D, because you can interleave the bits of 3 10-bit numbers and store the result in one 32-bit integer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinate to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmin</parametername>
</parameternamelist>
<parameterdescription>
<para>the low end of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmax</parametername>
</parameternamelist>
<parameterdescription>
<para>the high end of the domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" line="97" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Morton_1a0fd0d6fb6c00f2d95edd902c8bfb3a76" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint32_t</type>
        <definition>__host__ __device__ std::uint32_t amrex::Morton::toUInt16</definition>
        <argsstring>(amrex::Real x, amrex::Real xmin, amrex::Real xmax) noexcept</argsstring>
        <name>toUInt16</name>
        <qualifiedname>amrex::Morton::toUInt16</qualifiedname>
        <param>
          <type>amrex::Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>xmin</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>xmax</declname>
        </param>
        <briefdescription>
<para>Convert a Real to a uint32, keeping only 16 significant bits. This puts the first 16 bits of x into retval with the 16 highest bits set to 0. It is assumed that xmin &lt;= x &lt; xmax. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful in 2D, because you can interleave the bits of two 16-bit numbers and store the result in one 32-bit integer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinate to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmin</parametername>
</parameternamelist>
<parameterdescription>
<para>the low end of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmax</parametername>
</parameternamelist>
<parameterdescription>
<para>the high end of the domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" line="117" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Morton_1a5f4f04ab3f6670a10fcb9b44dfab4bbc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint32_t</type>
        <definition>__host__ __device__ std::uint32_t amrex::Morton::toUInt32</definition>
        <argsstring>(amrex::Real x, amrex::Real xmin, amrex::Real xmax) noexcept</argsstring>
        <name>toUInt32</name>
        <qualifiedname>amrex::Morton::toUInt32</qualifiedname>
        <param>
          <type>amrex::Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>xmin</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>xmax</declname>
        </param>
        <briefdescription>
<para>Convert a Real to a uint32, keeping all significant bits. It is assumed that xmin &lt;= x &lt; xmax. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful in 1D, because no interleaving is needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinate to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmin</parametername>
</parameternamelist>
<parameterdescription>
<para>the low end of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmax</parametername>
</parameternamelist>
<parameterdescription>
<para>the high end of the domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" line="135" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Morton_1a97c0d3c91c596fbab4645bae70f46c26" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint32_t</type>
        <definition>__host__ __device__ std::uint32_t amrex::Morton::get32BitCode</definition>
        <argsstring>(Real x, Real y, Real z, const GpuArray&lt; amrex::Real, 3 &gt; &amp;plo, const GpuArray&lt; amrex::Real, 3 &gt; &amp;phi) noexcept</argsstring>
        <name>get32BitCode</name>
        <qualifiedname>amrex::Morton::get32BitCode</qualifiedname>
        <param>
          <type>Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; amrex::Real, 3 &gt; &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; amrex::Real, 3 &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
<para>Given a 3D real-space coordinate, returns a <ref refid="namespaceamrex_1_1Morton" kindref="compound">Morton</ref> code stored in an unsigned 32 bit integer. </para>
        </briefdescription>
        <detaileddescription>
<para>In 3D, this works by converting the coordinate to a 10-bit nonnegative integer in each direction and then interleaving the bits.</para>
<para>In 2D, it is same except the lowest 16 bits of of the coordinates are kept.</para>
<para>It is assumed that plo &lt;= p &lt; phi has already been enforced.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinates to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinates to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinates to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plo</parametername>
</parameternamelist>
<parameterdescription>
<para>the low end of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi</parametername>
</parameternamelist>
<parameterdescription>
<para>the high end of the domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" line="160" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" bodystart="160" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Morton_1a8b2b806f461635e6695a1281da1a63e5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint32_t</type>
        <definition>__host__ __device__ std::uint32_t amrex::Morton::get32BitCode</definition>
        <argsstring>(const XDim3 &amp;p, const GpuArray&lt; amrex::Real, 3 &gt; &amp;plo, const GpuArray&lt; amrex::Real, 3 &gt; &amp;phi) noexcept</argsstring>
        <name>get32BitCode</name>
        <qualifiedname>amrex::Morton::get32BitCode</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; amrex::Real, 3 &gt; &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; amrex::Real, 3 &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
<para>Given a 3D real-space coordinate, returns a <ref refid="namespaceamrex_1_1Morton" kindref="compound">Morton</ref> code stored in an unsigned 32 bit integer. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as the above, except takes an <ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref>. Assumes 3D.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinate to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plo</parametername>
</parameternamelist>
<parameterdescription>
<para>the low end of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi</parametername>
</parameternamelist>
<parameterdescription>
<para>the high end of the domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" line="189" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" bodystart="189" bodyend="193"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Morton.H" line="12" column="1"/>
  </compounddef>
</doxygen>
