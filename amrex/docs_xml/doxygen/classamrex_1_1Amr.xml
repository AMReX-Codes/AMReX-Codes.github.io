<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1Amr" kind="class" language="C++" prot="public">
    <compoundname>amrex::Amr</compoundname>
    <basecompoundref refid="classamrex_1_1AmrCore" prot="public" virt="non-virtual">amrex::AmrCore</basecompoundref>
    <includes refid="AMReX__Amr_8H" local="no">AMReX_Amr.H</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" prot="private" static="no">
        <type>std::multimap&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, double &gt;</type>
        <definition>typedef std::multimap&lt; std::pair&lt;int, int&gt;, double &gt; amrex::Amr::BoundaryPointList</definition>
        <argsstring></argsstring>
        <name>BoundaryPointList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1Amr_1aaa8cb07b444ec3f7be3a7680c7e37363" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::regrid_grids_file</definition>
        <argsstring></argsstring>
        <name>regrid_grids_file</name>
        <briefdescription>
<para>Grids file that will bypass regridding. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="404" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1aadcea8b0f09483be05ad913b0c9a6e91" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::initial_grids_file</definition>
        <argsstring></argsstring>
        <name>initial_grids_file</name>
        <briefdescription>
<para>Grids file that will bypass regridding only at initialization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="405" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a48ea3d37aac2f07a6488cb599f45fc8b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;AmrLevel&gt; &gt; amrex::Amr::amr_level</definition>
        <argsstring></argsstring>
        <name>amr_level</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of levels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="406" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a9b46db71980158bc8f12c2f7eebede4a" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::Amr::cumtime</definition>
        <argsstring></argsstring>
        <name>cumtime</name>
        <briefdescription>
<para>Physical time variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="407" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ad97c2f4d6656288b817b8bbcc0bba7b6" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::Amr::start_time</definition>
        <argsstring></argsstring>
        <name>start_time</name>
        <briefdescription>
<para>Physical time this simulation started. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="408" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a1aa63d206ed0a9bbb5365d703260601b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt;Real&gt; amrex::Amr::dt_level</definition>
        <argsstring></argsstring>
        <name>dt_level</name>
        <briefdescription>
<para>Timestep at this level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="409" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a38fbd17db8a050b5bf3302427b9285ea" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::Amr::level_steps</definition>
        <argsstring></argsstring>
        <name>level_steps</name>
        <briefdescription>
<para>Number of time steps at this level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="410" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a1a1d9a33774055f267ad5297b2846ecc" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::Amr::level_count</definition>
        <argsstring></argsstring>
        <name>level_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="411" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a091b2e0b9cd006fd375a407f8ed98f80" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::Amr::n_cycle</definition>
        <argsstring></argsstring>
        <name>n_cycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="412" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a746a85f8a72742a006a5c78de497c3f9" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::subcycling_mode</definition>
        <argsstring></argsstring>
        <name>subcycling_mode</name>
        <briefdescription>
<para>Type of subcycling to use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="413" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a43fe1508a0a3160d4ba363fd663d520a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt;Real&gt; amrex::Amr::dt_min</definition>
        <argsstring></argsstring>
        <name>dt_min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="414" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a47527266245319befc8538d55dac8bc3" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Amr::isPeriodic[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>isPeriodic</name>
        <briefdescription>
<para>Domain periodic? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="415" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a2fc94106d0164a3cfc3e206db6b7e768" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::Amr::regrid_int</definition>
        <argsstring></argsstring>
        <name>regrid_int</name>
        <briefdescription>
<para>Interval between regridding. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="416" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1aedc8350798946e5e5d1d68b4861195a5" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::last_checkpoint</definition>
        <argsstring></argsstring>
        <name>last_checkpoint</name>
        <briefdescription>
<para>Step number of previous checkpoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="417" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1aabf4b679fb946c492eecfe38be051333" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::check_int</definition>
        <argsstring></argsstring>
        <name>check_int</name>
        <briefdescription>
<para>How often checkpoint (# time steps). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="418" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a9daa98984b300c7a3080d0752f233a0b" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::Amr::check_per</definition>
        <argsstring></argsstring>
        <name>check_per</name>
        <briefdescription>
<para>How often checkpoint (units of time). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="419" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a006c720b7d8ecf6e603785ab0b82bced" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::check_file_root</definition>
        <argsstring></argsstring>
        <name>check_file_root</name>
        <briefdescription>
<para>Root name of checkpoint file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="420" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a8bdd58e0f251c3097ae6631621a32253" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::last_plotfile</definition>
        <argsstring></argsstring>
        <name>last_plotfile</name>
        <briefdescription>
<para>Step number of previous plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="421" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ac3c786f18b9e2b297f07f10e28852bbf" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::last_smallplotfile</definition>
        <argsstring></argsstring>
        <name>last_smallplotfile</name>
        <briefdescription>
<para>Step number of previous small plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="422" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a8e9bb15131c1b8431dc0336678e0b1ea" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::plot_int</definition>
        <argsstring></argsstring>
        <name>plot_int</name>
        <briefdescription>
<para>How often plotfile (# of time steps) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="423" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1af097e0455a9da7e8e6a9dc131d1b96f2" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::Amr::plot_per</definition>
        <argsstring></argsstring>
        <name>plot_per</name>
        <briefdescription>
<para>How often plotfile (in units of time) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="424" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ac28ad84e2187c8094fe436eb5e5847d8" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::Amr::plot_log_per</definition>
        <argsstring></argsstring>
        <name>plot_log_per</name>
        <briefdescription>
<para>How often plotfile (in units of log10(time)) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="425" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a61f6ee1066c6df367e8b5f3680965b0e" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::small_plot_int</definition>
        <argsstring></argsstring>
        <name>small_plot_int</name>
        <briefdescription>
<para>How often small plotfile (# of time steps) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="426" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1aa9f5b7511d029e894847247437d90e19" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::Amr::small_plot_per</definition>
        <argsstring></argsstring>
        <name>small_plot_per</name>
        <briefdescription>
<para>How often small plotfile (in units of time) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="427" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ab75c18875ec4f6d84cb1bfe4518ea81b" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::Amr::small_plot_log_per</definition>
        <argsstring></argsstring>
        <name>small_plot_log_per</name>
        <briefdescription>
<para>How often small plotfile (in units of log10(time)) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="428" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1aa8e99beaed580c528d7f63268275d4a5" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::write_plotfile_with_checkpoint</definition>
        <argsstring></argsstring>
        <name>write_plotfile_with_checkpoint</name>
        <briefdescription>
<para>Write out a plotfile whenever we checkpoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="429" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a1d325f8ad0d5d179fc7fcee0f35f0500" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::file_name_digits</definition>
        <argsstring></argsstring>
        <name>file_name_digits</name>
        <briefdescription>
<para>How many digits to use in the plotfile and checkpoint names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="430" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a37d45dad31dd3b070c0a14578937365b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::message_int</definition>
        <argsstring></argsstring>
        <name>message_int</name>
        <briefdescription>
<para>How often checking messages touched by user, such as &quot;stop_run&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="431" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a6d91b6937dfb14b4b4777f640971b072" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::plot_file_root</definition>
        <argsstring></argsstring>
        <name>plot_file_root</name>
        <briefdescription>
<para>Root name of plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="432" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a55fb651c5355f362017c26f4f02cc127" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::small_plot_file_root</definition>
        <argsstring></argsstring>
        <name>small_plot_file_root</name>
        <briefdescription>
<para>Root name of small plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="433" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a71368e4ccbd5ee723f8675ee9ba4abf5" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::which_level_being_advanced</definition>
        <argsstring></argsstring>
        <name>which_level_being_advanced</name>
        <briefdescription>
<para>Only &gt;=0 if we are in <ref refid="classamrex_1_1Amr_1a2648a488ef613f454d29b519aca41bc8" kindref="member">Amr::timeStep</ref>(level,...) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="435" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1abd4f88199336df506302a1d53b0ef0ac" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::record_grid_info</definition>
        <argsstring></argsstring>
        <name>record_grid_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="437" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ad8d22fb152c5f5620ab9b1ab994f68aa" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::record_run_info</definition>
        <argsstring></argsstring>
        <name>record_run_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="438" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ab443c219d9056c789db6475acb78ea7b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::record_run_info_terse</definition>
        <argsstring></argsstring>
        <name>record_run_info_terse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="439" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a8faf7f22cccf4da975ca761f1920f5e8" prot="protected" static="no" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream amrex::Amr::gridlog</definition>
        <argsstring></argsstring>
        <name>gridlog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="440" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1abca666179e968bdbf467f8a903830bcd" prot="protected" static="no" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream amrex::Amr::runlog</definition>
        <argsstring></argsstring>
        <name>runlog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="441" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a693fdb636ccbf5dde6fb220c835ee2a2" prot="protected" static="no" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream amrex::Amr::runlog_terse</definition>
        <argsstring></argsstring>
        <name>runlog_terse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="442" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a34d4fd7a519716a0155f261ba210bd85" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; std::fstream &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;std::fstream&gt; &gt; amrex::Amr::datalog</definition>
        <argsstring></argsstring>
        <name>datalog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="443" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a2cbd53ff9ac71cac5e52e7311de0b2b8" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::Amr::datalogname</definition>
        <argsstring></argsstring>
        <name>datalogname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="444" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a1fa04ad61e5931bab05e515255c447d1" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::sub_cycle</definition>
        <argsstring></argsstring>
        <name>sub_cycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="445" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ac00b1478382804abeb82dd75b4ab5194" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::restart_chkfile</definition>
        <argsstring></argsstring>
        <name>restart_chkfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="446" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a295b3f0ab02158ef294ed68349f41dae" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::restart_pltfile</definition>
        <argsstring></argsstring>
        <name>restart_pltfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="447" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a015dec6a04940644e63848d6afd6e7c8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::Amr::probin_file</definition>
        <argsstring></argsstring>
        <name>probin_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="448" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a99ffc00c495183894b2ee7e11a79685e" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1LevelBld" kindref="compound">LevelBld</ref> *</type>
        <definition>LevelBld* amrex::Amr::levelbld</definition>
        <argsstring></argsstring>
        <name>levelbld</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="449" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a98d00dad9a4ef2a681aaafdf2a59cb0b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Amr::abort_on_stream_retry_failure</definition>
        <argsstring></argsstring>
        <name>abort_on_stream_retry_failure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="450" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a21bfe4d69a3d61259e419781fac7e519" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::stream_max_tries</definition>
        <argsstring></argsstring>
        <name>stream_max_tries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="451" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a6019d262d557fc37c9706c05a6cc5794" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::loadbalance_with_workestimates</definition>
        <argsstring></argsstring>
        <name>loadbalance_with_workestimates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="452" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a4c3e758e6025e4cf4f975f445d1eb6f3" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::loadbalance_level0_int</definition>
        <argsstring></argsstring>
        <name>loadbalance_level0_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="453" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ada948dc3a7c2301b9aab5f9b9f65507f" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::Amr::loadbalance_max_fac</definition>
        <argsstring></argsstring>
        <name>loadbalance_max_fac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="454" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a0275a70b67bcded29bdf03229bea8edb" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Amr::bUserStopRequest</definition>
        <argsstring></argsstring>
        <name>bUserStopRequest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="456" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="456" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1Amr_1a68d5307a670be15bf2684597d9a4484a" prot="protected" static="yes" mutable="no">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt; std::string &gt; amrex::Amr::state_plot_vars</definition>
        <argsstring></argsstring>
        <name>state_plot_vars</name>
        <briefdescription>
<para>State Vars to dump to plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="461" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a6332120c4e7b5df16dc8631e98b42d39" prot="protected" static="yes" mutable="no">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt; std::string &gt; amrex::Amr::state_small_plot_vars</definition>
        <argsstring></argsstring>
        <name>state_small_plot_vars</name>
        <briefdescription>
<para>State Vars to dump to small plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="462" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a7ff13d5d803c5302fe25c97d4cf64dca" prot="protected" static="yes" mutable="no">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt; std::string &gt; amrex::Amr::derive_plot_vars</definition>
        <argsstring></argsstring>
        <name>derive_plot_vars</name>
        <briefdescription>
<para>Derived Vars to dump to plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="463" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a5001ffe5303ca45da09139c255f75aeb" prot="protected" static="yes" mutable="no">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt; std::string &gt; amrex::Amr::derive_small_plot_vars</definition>
        <argsstring></argsstring>
        <name>derive_small_plot_vars</name>
        <briefdescription>
<para>Derived Vars to dump to small plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="464" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1af12817d167774c57ed1c1f24bb03954a" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Amr::first_plotfile</definition>
        <argsstring></argsstring>
        <name>first_plotfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="465" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a49468e4d346f32d97ab09f48f4ff9dd2" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt;</type>
        <definition>Vector&lt; BoxArray &gt; amrex::Amr::initial_ba</definition>
        <argsstring></argsstring>
        <name>initial_ba</name>
        <briefdescription>
<para>Array of BoxArrays read in to initially define grid hierarchy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="467" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ad17547793e589e382cafaea103a01637" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt;</type>
        <definition>Vector&lt; BoxArray &gt; amrex::Amr::regrid_ba</definition>
        <argsstring></argsstring>
        <name>regrid_ba</name>
        <briefdescription>
<para>Array of BoxArrays read in to externally define grid hierarchy at each regrid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="469" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a9f1bea870dda8d846c53e5302e9d4941" prot="protected" static="yes" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::compute_new_dt_on_regrid</definition>
        <argsstring></argsstring>
        <name>compute_new_dt_on_regrid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="470" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="470" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1Amr_1a74f3b055b554426d6404985f46bc5713" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref></type>
        <definition>BoundaryPointList amrex::Amr::intersect_lox</definition>
        <argsstring></argsstring>
        <name>intersect_lox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="477" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a63e0fe7c5999847347e2959ef6d35e84" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref></type>
        <definition>BoundaryPointList amrex::Amr::intersect_loy</definition>
        <argsstring></argsstring>
        <name>intersect_loy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="478" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ac8fbee6b944ffeb46dac1abb6c4e979c" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref></type>
        <definition>BoundaryPointList amrex::Amr::intersect_loz</definition>
        <argsstring></argsstring>
        <name>intersect_loz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="479" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1aa74ec3120336fb6f18e589e7e31a2fec" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref></type>
        <definition>BoundaryPointList amrex::Amr::intersect_hix</definition>
        <argsstring></argsstring>
        <name>intersect_hix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="480" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1ad89ad8ade0419ea12d1901d4237b9f07" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref></type>
        <definition>BoundaryPointList amrex::Amr::intersect_hiy</definition>
        <argsstring></argsstring>
        <name>intersect_hiy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="481" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Amr_1a4b8339a63d2e5a665044f782e929a02f" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref></type>
        <definition>BoundaryPointList amrex::Amr::intersect_hiz</definition>
        <argsstring></argsstring>
        <name>intersect_hiz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="482" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="482" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1Amr_1aacd36827f62f4c412e11818f70bda156" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Amr::first_smallplotfile</definition>
        <argsstring></argsstring>
        <name>first_smallplotfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="484" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="484" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Amr_1ad535bfdb6e2684b9fe912b5e9569cf4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Amr::Amr</definition>
        <argsstring>()</argsstring>
        <name>Amr</name>
        <briefdescription>
<para>The constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="203" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1afee7d6a1ce3e9d16a920cdd9e21ca9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Amr::Amr</definition>
        <argsstring>(const RealBox *rb, int max_level_in, const Vector&lt; int &gt; &amp;n_cell_in, int coord)</argsstring>
        <name>Amr</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_level_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>n_cell_in</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="211" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a850f1090f6ca9e8b954eeb61dff6ddb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Amr::Amr</definition>
        <argsstring>(const Amr &amp;rhs)=delete</argsstring>
        <name>Amr</name>
        <param>
          <type>const <ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a9f5d7648e9214d0a3a88f40383bafff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> &amp;</type>
        <definition>Amr&amp; amrex::Amr::operator=</definition>
        <argsstring>(const Amr &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a9214cdbdc7fddff0ba8afd7d592ba869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::InitAmr</definition>
        <argsstring>()</argsstring>
        <name>InitAmr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="220" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a739b025250207eabcd5f0505ab16dc8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::Amr::~Amr</definition>
        <argsstring>()</argsstring>
        <name>~Amr</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="728" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a00a3d52093863719ed7429f3bbf35eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::init</definition>
        <argsstring>(Real strt_time, Real stop_time)</argsstring>
        <name>init</name>
        <param>
          <type>Real</type>
          <declname>strt_time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Init data after construction. Must be called before timestepping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1105" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a96d263aac2bf01c26faa2e9e6247e002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::InitializeInit</definition>
        <argsstring>(Real strt_time, Real stop_time, const BoxArray *lev0_grids=0, const Vector&lt; int &gt; *pmap=0)</argsstring>
        <name>InitializeInit</name>
        <param>
          <type>Real</type>
          <declname>strt_time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <param>
          <type>const BoxArray *</type>
          <declname>lev0_grids</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; *</type>
          <declname>pmap</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>First part of initialInit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1248" bodyend="1275"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1acc31a806beac20735b0589a0195dd3e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::FinalizeInit</definition>
        <argsstring>(Real strt_time, Real stop_time)</argsstring>
        <name>FinalizeInit</name>
        <param>
          <type>Real</type>
          <declname>strt_time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Second part of initialInit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1278" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ae63754ca7b99b0ebc7dca496b4689bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setDtLevel</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;dt_lev) noexcept</argsstring>
        <name>setDtLevel</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>dt_lev</declname>
        </param>
        <briefdescription>
<para>Set the timestep on each level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="788" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a0a911dea6d732d72a00a493bd3205fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setDtLevel</definition>
        <argsstring>(Real dt, int lev) noexcept</argsstring>
        <name>setDtLevel</name>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Set the timestep at one level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="795" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a4986d104fba637f01fbd191892ea8a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setDtMin</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;dt_lev) noexcept</argsstring>
        <name>setDtMin</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>dt_lev</declname>
        </param>
        <briefdescription>
<para>Set the dtmin on each level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a1efb7bdb15ac24d605dcfa19819b8991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setNCycle</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;mss) noexcept</argsstring>
        <name>setNCycle</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mss</declname>
        </param>
        <briefdescription>
<para>Set the cycle count on each level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="801" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ae22e90398efa6b78ca3d1a68e0839a31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::subCycle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>subCycle</name>
        <briefdescription>
<para>Subcycle in time? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a32a8083d08d7c253cabc6428890a708e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; amrex::Amr::subcyclingMode</definition>
        <argsstring>() const noexcept</argsstring>
        <name>subcyclingMode</name>
        <briefdescription>
<para>How are we subcycling? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1af0c8b87958fdb3cc31b2b3b994c8b37e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::level_being_advanced</definition>
        <argsstring>() const noexcept</argsstring>
        <name>level_being_advanced</name>
        <briefdescription>
<para>What is &quot;level&quot; in <ref refid="classamrex_1_1Amr_1a2648a488ef613f454d29b519aca41bc8" kindref="member">Amr::timeStep</ref>? This is only relevant if we are still in <ref refid="classamrex_1_1Amr_1a2648a488ef613f454d29b519aca41bc8" kindref="member">Amr::timeStep</ref>; it is set back to -1 on leaving <ref refid="classamrex_1_1Amr_1a2648a488ef613f454d29b519aca41bc8" kindref="member">Amr::timeStep</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ae1a7de4bbf27289ccab4e3b8364a7c83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::cumTime</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cumTime</name>
        <briefdescription>
<para>Physical time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a8440e6564a766f2aa1cf0670450b8523" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setCumTime</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setCumTime</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a70c62cf9a34766ad62c1b2ff4df8b10e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::startTime</definition>
        <argsstring>() const noexcept</argsstring>
        <name>startTime</name>
        <briefdescription>
<para>Physical time this simulation started. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a6f9ae291b9b51ed55c83ff49e418fc49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setStartTime</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setStartTime</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aabf57ca7f26b3f1bf6c5af3e1e2c4d66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::dtLevel</definition>
        <argsstring>(int level) const noexcept</argsstring>
        <name>dtLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Time step at specified level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ace23e3b0cd924344014b8b5451d7c359" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::dtMin</definition>
        <argsstring>(int level) const noexcept</argsstring>
        <name>dtMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Max time step (typically based on physics) at specified level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a904343b1efe2ff873b545c80a69e58e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
        <definition>const Vector&lt;Real&gt;&amp; amrex::Amr::dtLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dtLevel</name>
        <briefdescription>
<para>Array of time steps at all levels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a5858409b6a0c53ac8e09fd9601a44dcd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::nCycle</definition>
        <argsstring>(int level) const noexcept</argsstring>
        <name>nCycle</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Number of subcycled time steps. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a8101a391189955c50c7a36d359f3f5ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::levelSteps</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>levelSteps</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Number of time steps at specified level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="103" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a1cfac74af2f249a6addd2637d24cb758" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setLevelSteps</definition>
        <argsstring>(int lev, int n) noexcept</argsstring>
        <name>setLevelSteps</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Number of time steps at specified level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ad37c151a0ef82ea98f18707e98d44dc7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::levelCount</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>levelCount</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Which step are we at for the specified level? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ac5745e35deb1c5f1c6d8585cffe9605d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setLevelCount</definition>
        <argsstring>(int lev, int n) noexcept</argsstring>
        <name>setLevelCount</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Which step are we at for the specified level? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a9fa95998903f721c41e3d677c4894d47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::RegridOnRestart</definition>
        <argsstring>() const noexcept</argsstring>
        <name>RegridOnRestart</name>
        <briefdescription>
<para>Whether to regrid right after restart. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="111" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a6c0f2e73f58bdff46fc5692ed85611f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::regridInt</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>regridInt</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Interval between regridding. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ac30d97b7e66cda1fad54283a9e6a9600" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::checkInt</definition>
        <argsstring>() const noexcept</argsstring>
        <name>checkInt</name>
        <briefdescription>
<para>Number of time steps between checkpoint files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="115" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aa2e4c97e5351e7e9353af927b4628e24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::checkPer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>checkPer</name>
        <briefdescription>
<para>Time between checkpoint files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="117" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a6b328e1464fc914bea4ea6da8a067c57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::plotInt</definition>
        <argsstring>() const noexcept</argsstring>
        <name>plotInt</name>
        <briefdescription>
<para>Number of time steps between plot files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="119" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a5a931bcdf3440fa41801f73a87f417ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::plotPer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>plotPer</name>
        <briefdescription>
<para>Time between plot files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="121" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a3a98ce23547463e17b55901b8818f0fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::plotLogPer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>plotLogPer</name>
        <briefdescription>
<para>Spacing in log10(time) of logarithmically spaced plot files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="123" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a2c5ce27afbaf7d1a9e5938e547862527" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::smallplotInt</definition>
        <argsstring>() const noexcept</argsstring>
        <name>smallplotInt</name>
        <briefdescription>
<para>Number of time steps between small plot files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="125" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a004dd1aadb752b3913f83f1d4bd825a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::smallplotPer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>smallplotPer</name>
        <briefdescription>
<para>Time between plot files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="127" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ae93d8da97d0a049f5da23bea33ed2fe1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::smallplotLogPer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>smallplotLogPer</name>
        <briefdescription>
<para>Spacing in log10(time) of logarithmically spaced small plot files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="129" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a5db40812e41cec37353e6308befc77da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
        <definition>AmrLevel&amp; amrex::Amr::getLevel</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>getLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> lev. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="187" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a705d1e2cbc8481f2ab8516ce61034a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &gt; &gt; &amp;</type>
        <definition>Vector&lt; std::unique_ptr&lt; AmrLevel &gt; &gt; &amp; amrex::Amr::getAmrLevels</definition>
        <argsstring>() noexcept</argsstring>
        <name>getAmrLevels</name>
        <briefdescription>
<para>Array of AmrLevels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="189" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ab1fa12d8a76471eac770533845c1a59a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Amr::cellCount</definition>
        <argsstring>() noexcept</argsstring>
        <name>cellCount</name>
        <briefdescription>
<para>Total number of cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="191" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="808" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a76adb6f14e46b7ed89679dfdca012385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Amr::cellCount</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>cellCount</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Number of cells at given level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ad8affd8de32d5fc666795d5a13a39e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::numGrids</definition>
        <argsstring>() noexcept</argsstring>
        <name>numGrids</name>
        <briefdescription>
<para>Total number of grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="195" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="817" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a8727954d78b0edddf953091df0cdcb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::numGrids</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>numGrids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Number of grids at given level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a925e6a93c8c15b09058d992c92ef59e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::okToContinue</definition>
        <argsstring>() noexcept</argsstring>
        <name>okToContinue</name>
        <briefdescription>
<para>More work to be done? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="826" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a6254e512f37656c89acb1e19162d26b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::RegridOnly</definition>
        <argsstring>(Real time, bool do_io=true)</argsstring>
        <name>RegridOnly</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_io</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Regrid only! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="201" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1851" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1af05216d2777d71cb9572ac0a03e19646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::okToRegrid</definition>
        <argsstring>(int level) noexcept</argsstring>
        <name>okToRegrid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Should we regrid this level? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="203" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="3223" bodyend="3229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ab6618049b000c03c0adcc424d13cc5e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::coarseTimeStep</definition>
        <argsstring>(Real stop_time)</argsstring>
        <name>coarseTimeStep</name>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Do a complete integration cycle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="210" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2043" bodyend="2293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a2f3c0b9d3f8f7d2eb05319ce4754ac8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::coarseTimeStepDt</definition>
        <argsstring>(Real stop_time)</argsstring>
        <name>coarseTimeStepDt</name>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Do a complete integration cycle and return the coarse dt. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2036" bodyend="2040"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a3d596021574d699fd925b664a9c1bf7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::Amr::derive</definition>
        <argsstring>(const std::string &amp;name, Real time, int lev, int ngrow)</argsstring>
        <name>derive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Retrieve derived data. User is responsible for deleting pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="195" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ac501ff9a494314e973685c776fae2498" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; amrex::Amr::theRestartFile</definition>
        <argsstring>() const noexcept</argsstring>
        <name>theRestartFile</name>
        <briefdescription>
<para>Name of the restart chkpoint file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="220" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a1049e70b4e279c64160c9ff62ba42653" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; amrex::Amr::theRestartPlotFile</definition>
        <argsstring>() const noexcept</argsstring>
        <name>theRestartPlotFile</name>
        <briefdescription>
<para>Name of the restart plotfile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="222" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a782f42d62191f606a77cb1c78ab584a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::Amr::DataLog</definition>
        <argsstring>(int i)</argsstring>
        <name>DataLog</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>The ith datalog file. Do with it what you want. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="224" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1acbecf8145200607f53282433a788437f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string amrex::Amr::DataLogName</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>DataLogName</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>The filename of the ith datalog file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="226" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a22c7ccfe95fd35cc2a2c6629a8e3edbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::NumDataLogs</definition>
        <argsstring>() noexcept</argsstring>
        <name>NumDataLogs</name>
        <briefdescription>
<para>How many datalogs have been opened. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="228" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a1913d5ba8be07f02e9ae1f1b2c667a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::writePlotFile</definition>
        <argsstring>()</argsstring>
        <name>writePlotFile</name>
        <briefdescription>
<para>Write the plot file to be used for visualization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="838" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a60e9811cfc1390ce271f27a1e6382aba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::stepOfLastPlotFile</definition>
        <argsstring>() const noexcept</argsstring>
        <name>stepOfLastPlotFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="244" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a01705c5091524e41df7d4d5b4fc27de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::writeSmallPlotFile</definition>
        <argsstring>()</argsstring>
        <name>writeSmallPlotFile</name>
        <briefdescription>
<para>Write the small plot file to be used for visualization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="246" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="876" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a254fc5d48a5ea09b0036ac3c0261d1ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::stepOfLastSmallPlotFile</definition>
        <argsstring>() const noexcept</argsstring>
        <name>stepOfLastSmallPlotFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="247" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a8afe35c2818f661481ed2603ae036928" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::checkPoint</definition>
        <argsstring>()</argsstring>
        <name>checkPoint</name>
        <briefdescription>
<para>Write current state into a chk* file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="249" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1669" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a846cd945ebbc286b3488690b2105794a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::stepOfLastCheckPoint</definition>
        <argsstring>() const noexcept</argsstring>
        <name>stepOfLastCheckPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="250" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a1cb4fa8c70133837b3b6940290732c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
        <definition>const Vector&lt; BoxArray &gt; &amp; amrex::Amr::getInitialBA</definition>
        <argsstring>() noexcept</argsstring>
        <name>getInitialBA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="252" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="3278" bodyend="3281"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a90bf34103118043a594a3e827f9f5e8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setBoundaryGeometry</definition>
        <argsstring>(BoundaryPointList &amp;IntersectLoX, BoundaryPointList &amp;IntersectHiX, BoundaryPointList &amp;IntersectLoY, BoundaryPointList &amp;IntersectHiY) noexcept</argsstring>
        <name>setBoundaryGeometry</name>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectLoX</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectHiX</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectLoY</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectHiY</declname>
        </param>
        <briefdescription>
<para>Specialized version: Define BoundaryPointLists that give the intersections of the external geometry with constant (i,k) and (j,k) These are defined at the coarsest level indexing only. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="260" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="260" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1adfcea84d67ac5f1276111e2bb32007aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setBoundaryGeometry</definition>
        <argsstring>(BoundaryPointList &amp;IntersectLoX, BoundaryPointList &amp;IntersectHiX, BoundaryPointList &amp;IntersectLoY, BoundaryPointList &amp;IntersectHiY, BoundaryPointList &amp;IntersectLoZ, BoundaryPointList &amp;IntersectHiZ) noexcept</argsstring>
        <name>setBoundaryGeometry</name>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectLoX</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectHiX</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectLoY</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectHiY</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectLoZ</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
          <declname>IntersectHiZ</declname>
        </param>
        <briefdescription>
<para>More general version: Define BoundaryPointLists that give the intersections of the external geometry with constant (i,k),(j,k) and (i,j). These are defined at the coarsest level indexing only. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="278" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="278" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aebb7e0750e8e5f5a9ae59c4b048e0974" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
        <definition>BoundaryPointList&amp; amrex::Amr::getIntersectLoX</definition>
        <argsstring>() noexcept</argsstring>
        <name>getIntersectLoX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="293" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1adf62b6ed57f2b6300c88006b075613cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
        <definition>BoundaryPointList&amp; amrex::Amr::getIntersectHiX</definition>
        <argsstring>() noexcept</argsstring>
        <name>getIntersectHiX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="297" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a35cf977f63121c5cca4bd94237b33a18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
        <definition>BoundaryPointList&amp; amrex::Amr::getIntersectLoY</definition>
        <argsstring>() noexcept</argsstring>
        <name>getIntersectLoY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="301" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a019a2bcc15ee8ff3f96613ca88b09228" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
        <definition>BoundaryPointList&amp; amrex::Amr::getIntersectHiY</definition>
        <argsstring>() noexcept</argsstring>
        <name>getIntersectHiY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="305" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a5b3ad9bd9642884b6f9bbc2912ac6319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
        <definition>BoundaryPointList&amp; amrex::Amr::getIntersectLoZ</definition>
        <argsstring>() noexcept</argsstring>
        <name>getIntersectLoZ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="309" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a6d73495d2d5390c4324c48b943e2893c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" kindref="member">BoundaryPointList</ref> &amp;</type>
        <definition>BoundaryPointList&amp; amrex::Amr::getIntersectHiZ</definition>
        <argsstring>() noexcept</argsstring>
        <name>getIntersectHiZ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="313" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ac3e662f31f9e418725c27e5c55577202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::InstallNewDistributionMap</definition>
        <argsstring>(int lev, const DistributionMapping &amp;newdm)</argsstring>
        <name>InstallNewDistributionMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>newdm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="323" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2728" bodyend="2738"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1af0ab98386ac1b7aac739c65a8c3f2d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::UsingPrecreateDirectories</definition>
        <argsstring>() noexcept</argsstring>
        <name>UsingPrecreateDirectories</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="325" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Amr_1a026e3576e84968fb18a32fc46f1cc21a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::list&lt; std::string &gt; &amp;</type>
        <definition>static const std::list&lt;std::string&gt;&amp; amrex::Amr::statePlotVars</definition>
        <argsstring>() noexcept</argsstring>
        <name>statePlotVars</name>
        <briefdescription>
<para>The names of state variables to output in the plotfile. They can be set using the amr.plot_vars variable in a <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> inputs file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a8a241b0a149dd4f2b15a83c5724d4153" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::list&lt; std::string &gt; &amp;</type>
        <definition>static const std::list&lt;std::string&gt;&amp; amrex::Amr::stateSmallPlotVars</definition>
        <argsstring>() noexcept</argsstring>
        <name>stateSmallPlotVars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="136" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a8e76ba9b63802ff44942fe4dc4ffbd8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::isStatePlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>isStatePlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Is the string the name of a variable in state_plot_vars? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="138" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="535" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a44718cda179205e8d5e6c5997131f7fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::isStateSmallPlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>isStateSmallPlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="139" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="549" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ac32245e75a89b7e4c2466f34df05aa85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::addStatePlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>addStatePlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>If the string is not the name of a variable in state_plot_vars, add it to state_plot_vars. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="602" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1addec944dc521c490639b53c7eff3d1cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::addStateSmallPlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>addStateSmallPlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="145" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="610" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ab72037810d96a60c15358d42c780d92e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::deleteStatePlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>deleteStatePlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Remove the string from state_plot_vars. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="617" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a369a6509a5b72f33560a79a590de7ca0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::clearStatePlotVarList</definition>
        <argsstring>()</argsstring>
        <name>clearStatePlotVarList</name>
        <briefdescription>
<para>Clear the list of state_plot_vars. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a5f91cf7bf6b769609cca453f241744ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::clearStateSmallPlotVarList</definition>
        <argsstring>()</argsstring>
        <name>clearStateSmallPlotVarList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="150" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="596" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aa409f5572b79fbf4d109aeac4b810c86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::fillStatePlotVarList</definition>
        <argsstring>()</argsstring>
        <name>fillStatePlotVarList</name>
        <briefdescription>
<para>Fill the list of state_plot_vars with all of the state quantities. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="152" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="562" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1accc5b95bd9e05e81871f28975760f74f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::fillStateSmallPlotVarList</definition>
        <argsstring>()</argsstring>
        <name>fillStateSmallPlotVarList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="153" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="582" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aa9af5d2dcba7539444e0334b84ed7504" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::Plot_Files_Output</definition>
        <argsstring>()</argsstring>
        <name>Plot_Files_Output</name>
        <briefdescription>
<para>Write out plotfiles (True/False)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a9b93d8c38cf0e1c1c361f54ed57bf29f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::list&lt; std::string &gt; &amp;</type>
        <definition>static const std::list&lt;std::string&gt;&amp; amrex::Amr::derivePlotVars</definition>
        <argsstring>() noexcept</argsstring>
        <name>derivePlotVars</name>
        <briefdescription>
<para>The names of derived variables to output in the plotfile. They can be set using the amr.derive_plot_vars variable in a <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> inputs file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="161" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aba45633dfea7697479eb0854d6e697aa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::list&lt; std::string &gt; &amp;</type>
        <definition>static const std::list&lt;std::string&gt;&amp; amrex::Amr::deriveSmallPlotVars</definition>
        <argsstring>() noexcept</argsstring>
        <name>deriveSmallPlotVars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a534b06b1181277637fae2a4caf17e8c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::isDerivePlotVar</definition>
        <argsstring>(const std::string &amp;name) noexcept</argsstring>
        <name>isDerivePlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Is the string the name of a variable in derive_plot_vars? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="164" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="625" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a6ad527c04f14f430b8835dc690337df8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::isDeriveSmallPlotVar</definition>
        <argsstring>(const std::string &amp;name) noexcept</argsstring>
        <name>isDeriveSmallPlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="640" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a5a16c64d38a92425d131ed14624d3fd8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::addDerivePlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>addDerivePlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>If the string is not the name of a variable in derive_plot_vars, add it to derive_plot_vars. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="170" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="701" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1af55244caab5862e688d1f3177084ef4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::addDeriveSmallPlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>addDeriveSmallPlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="708" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a1eaf7d49c3fdfa17035d39cf047d5874" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::deleteDerivePlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>deleteDerivePlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Remove the string from derive_plot_vars. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="173" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="715" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a9a6b2ab66182008060baa72d4702f321" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::deleteDeriveSmallPlotVar</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>deleteDeriveSmallPlotVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="174" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="722" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a4f6a614f477cd3ff94f362d7a8dfe8b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::clearDerivePlotVarList</definition>
        <argsstring>()</argsstring>
        <name>clearDerivePlotVarList</name>
        <briefdescription>
<para>Clear the list of derive_plot_vars. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a0517c3858954b59c15be4b72472c0e55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::clearDeriveSmallPlotVarList</definition>
        <argsstring>()</argsstring>
        <name>clearDeriveSmallPlotVarList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="695" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a075723bf2fb621f6decda9d20d4cb3ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::fillDerivePlotVarList</definition>
        <argsstring>()</argsstring>
        <name>fillDerivePlotVarList</name>
        <briefdescription>
<para>Fill the list of derive_plot_vars with all derived quantities. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="655" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aac5f926db1c887325c23896f29feb866" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::fillDeriveSmallPlotVarList</definition>
        <argsstring>()</argsstring>
        <name>fillDeriveSmallPlotVarList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="180" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="672" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a5ab06f1b57ba4e63bacb37f8d394e744" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::Amr::setComputeNewDtOnRegrid</definition>
        <argsstring>(int flag)</argsstring>
        <name>setComputeNewDtOnRegrid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="182" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aa33f37ed3b665ed7c5eb98de5cdafcd3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="104" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1adce93d1ef45e49e692f62ee9fa8ac48f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="185" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="137" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1acadd647c5f887a16b8c6d1fd09b2f41f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>static const BoxArray&amp; amrex::Amr::initialBa</definition>
        <argsstring>(int level) noexcept</argsstring>
        <name>initialBa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Array of BoxArrays read in to initially define grid hierarchy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="205" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="205" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1aa0fd6eea096c16f444db7d0f93b1cbb5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::Amr::initialBaLevels</definition>
        <argsstring>() noexcept</argsstring>
        <name>initialBaLevels</name>
        <briefdescription>
<para>Number of levels at which the grids are initially specified. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="208" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a094322102029f30480f512416d64bc04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Amr::computeOptimalSubcycling</definition>
        <argsstring>(int n, int *best, Real *dt_max, Real *est_work, int *cycle_max)</argsstring>
        <name>computeOptimalSubcycling</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>best</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>dt_max</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>est_work</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>cycle_max</declname>
        </param>
        <briefdescription>
<para>Compute the optimal subcycling pattern. This assumes that anything less than cycle_max[i] is a valid number of subcycles at level[i]. For example if ref_ratio[i] = cycle_max[i] = 4, then 1,2,3,4 are all valid values for n_cycles[i]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="236" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="3232" bodyend="3276"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1Amr_1a6004de04a2cb33d15d7650e3b622936c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::initialInit</definition>
        <argsstring>(Real strt_time, Real stop_time, const BoxArray *lev0_grids=0, const Vector&lt; int &gt; *pmap=0)</argsstring>
        <name>initialInit</name>
        <param>
          <type>Real</type>
          <declname>strt_time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <param>
          <type>const BoxArray *</type>
          <declname>lev0_grids</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; *</type>
          <declname>pmap</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Initialize grid hierarchy <ndash/> called by <ref refid="classamrex_1_1Amr_1a00a3d52093863719ed7429f3bbf35eb4" kindref="member">Amr::init</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="330" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1230" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a979e1cff503e5f3c6436a232284fdcfb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::readProbinFile</definition>
        <argsstring>(int &amp;init)</argsstring>
        <name>readProbinFile</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Read the probin file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="333" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1143" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a0db8b6a43fba7580d8dc6571e64eceb2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::checkInput</definition>
        <argsstring>()</argsstring>
        <name>checkInput</name>
        <briefdescription>
<para>Check for valid input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="335" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1033" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a3070a179ad3daed519f8d41a2f2d6b3b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::restart</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>restart</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Restart from a checkpoint file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="337" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1351" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ae05b2fdc32475c82226b591968dae641" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::defBaseLevel</definition>
        <argsstring>(Real start_time, const BoxArray *lev0_grids=0, const Vector&lt; int &gt; *pmap=0)</argsstring>
        <name>defBaseLevel</name>
        <param>
          <type>Real</type>
          <declname>start_time</declname>
        </param>
        <param>
          <type>const BoxArray *</type>
          <declname>lev0_grids</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; *</type>
          <declname>pmap</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Define and initialize coarsest level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="339" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2442" bodyend="2496"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a12a8a852d0fe80b6a15cd05d0e96d2fd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::bldFineLevels</definition>
        <argsstring>(Real start_time)</argsstring>
        <name>bldFineLevels</name>
        <param>
          <type>Real</type>
          <declname>start_time</declname>
        </param>
        <briefdescription>
<para>Define and initialize refined levels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="341" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2958" bodyend="3027"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a9d6faadd0aabf54081fe9ea12be10484" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::regrid</definition>
        <argsstring>(int lbase, Real time, bool initial=false) override</argsstring>
        <name>regrid</name>
        <reimplements refid="classamrex_1_1AmrCore_1ae80fa713b669de0f235d3ef0792e7200">regrid</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lbase</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Rebuild grid hierarchy finer than lbase. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="343" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2499" bodyend="2672"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a5c2a28dfa0840069f813bf56565b4007" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::regrid_level_0_on_restart</definition>
        <argsstring>()</argsstring>
        <name>regrid_level_0_on_restart</name>
        <briefdescription>
<para>Regrid level 0 on restart. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="347" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2741" bodyend="2798"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a90155667257e3c51890f716ade65c5e7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::grid_places</definition>
        <argsstring>(int lbase, Real time, int &amp;new_finest, Vector&lt; BoxArray &gt; &amp;new_grids)</argsstring>
        <name>grid_places</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lbase</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>new_finest</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>new_grids</declname>
        </param>
        <briefdescription>
<para>Define new grid locations (called from regrid) and put into new_grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="349" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2844" bodyend="2937"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a11440fbd79bb8db036e18692462e142f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::Amr::makeLoadBalanceDistributionMap</definition>
        <argsstring>(int lev, Real time, const BoxArray &amp;ba) const</argsstring>
        <name>makeLoadBalanceDistributionMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="354" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2675" bodyend="2716"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ab35e0719d1321112010ff20228ad1acc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::LoadBalanceLevel0</definition>
        <argsstring>(Real time)</argsstring>
        <name>LoadBalanceLevel0</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="355" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2719" bodyend="2725"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a80b107efe79904f079c92600156e523d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::ErrorEst</definition>
        <argsstring>(int lev, TagBoxArray &amp;tags, Real time, int ngrow) override</argsstring>
        <name>ErrorEst</name>
        <reimplements refid="classamrex_1_1AmrCore_1aa0f5dabb31da45d02a320a11caa96875">ErrorEst</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Tag cells for refinement. <ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> tags is built on level lev grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="357" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2940" bodyend="2943"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1af6388eb0b60035305b92b00398c67762" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::Amr::GetAreaNotToTag</definition>
        <argsstring>(int lev) override</argsstring>
        <name>GetAreaNotToTag</name>
        <reimplements refid="classamrex_1_1AmrMesh_1a9a621503f0ef653fc2eab9229168782d">GetAreaNotToTag</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="358" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2946" bodyend="2949"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a9d0e58b8aaa0cac0a8cd432f37198197" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::ManualTagsPlacement</definition>
        <argsstring>(int lev, TagBoxArray &amp;tags, const Vector&lt; IntVect &gt; &amp;bf_lev) override</argsstring>
        <name>ManualTagsPlacement</name>
        <reimplements refid="classamrex_1_1AmrMesh_1abe4eb07db47e710993616e88931fafe1">ManualTagsPlacement</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Manually tag. Note that tags is built on level lev grids coarsened by bf_lev[lev]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="359" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2952" bodyend="2955"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a2648a488ef613f454d29b519aca41bc8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Amr::timeStep</definition>
        <argsstring>(int level, Real time, int iteration, int niter, Real stop_time)</argsstring>
        <name>timeStep</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iteration</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>niter</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Do a single timestep on level L. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="362" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="1875" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ad521ab1431b0695f5638a627db2a6adb" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::Amr::MakeNewLevelFromScratch</definition>
        <argsstring>(int, Real, const BoxArray &amp;, const DistributionMapping &amp;) override</argsstring>
        <name>MakeNewLevelFromScratch</name>
        <reimplements refid="classamrex_1_1AmrCore_1af037642d569d83cfe2ca14de640a4d28">MakeNewLevelFromScratch</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a new level from scratch using provided BoxArray and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. Only used during initialization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="369" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="369" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a6874ed073068abdede9571c1773985f8" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::Amr::MakeNewLevelFromCoarse</definition>
        <argsstring>(int, Real, const BoxArray &amp;, const DistributionMapping &amp;) override</argsstring>
        <name>MakeNewLevelFromCoarse</name>
        <reimplements refid="classamrex_1_1AmrCore_1af472acf05bea1145b67f7022de16a664">MakeNewLevelFromCoarse</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
<para>Make a new level using provided BoxArray and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> and fill with interpolated coarse level data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="371" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="371" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a068668005a432a854ee2e98ccac4ac73" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::Amr::RemakeLevel</definition>
        <argsstring>(int, Real, const BoxArray &amp;, const DistributionMapping &amp;) override</argsstring>
        <name>RemakeLevel</name>
        <reimplements refid="classamrex_1_1AmrCore_1a89b690a6f834d76bf96f8f1facc356c4">RemakeLevel</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
<para>Remake an existing level using provided BoxArray and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> and fill with existing fine and coarse data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="373" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="373" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ae33c3da2142bfd379d08bad3b4104562" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::Amr::ClearLevel</definition>
        <argsstring>(int) override</argsstring>
        <name>ClearLevel</name>
        <reimplements refid="classamrex_1_1AmrCore_1a26c39ed62cd9f3383f3936f1fcdb65b3">ClearLevel</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Delete level data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="375" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="375" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ac56504a819c5f48033a0c10f94dc64ce" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::writePlotNow</definition>
        <argsstring>() noexcept</argsstring>
        <name>writePlotNow</name>
        <briefdescription>
<para>Whether to write a plotfile now. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="379" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2296" bodyend="2366"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a79963ad1530c1e895fed27bfd77f2131" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Amr::writeSmallPlotNow</definition>
        <argsstring>() noexcept</argsstring>
        <name>writeSmallPlotNow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="380" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2369" bodyend="2439"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a4b7fbf8492a6e663bd567bfdb4151a40" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::printGridInfo</definition>
        <argsstring>(std::ostream &amp;os, int min_lev, int max_lev)</argsstring>
        <name>printGridInfo</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>min_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="382" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="2801" bodyend="2840"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a1019472407f6945a0f73f610fc1fd497" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setRecordGridInfo</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>setRecordGridInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>filename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="386" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="736" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a9bbbb5b286faccc02c5b6b90b4184c6a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setRecordRunInfo</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>setRecordRunInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>filename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="388" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="749" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1af19da464ed538fdb371cfc74ff3ac469" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setRecordRunInfoTerse</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>setRecordRunInfoTerse</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>filename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="390" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="762" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a1569c279c9f53680c034fa8412aec447" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::setRecordDataInfo</definition>
        <argsstring>(int i, const std::string &amp;)</argsstring>
        <name>setRecordDataInfo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>filename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="392" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="775" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1ac817c89d71bd72e6514b12b78ba3a955" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::initSubcycle</definition>
        <argsstring>()</argsstring>
        <name>initSubcycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="394" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="3030" bodyend="3128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a210649d50f9f052bcaf38336ce97f986" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::initPltAndChk</definition>
        <argsstring>()</argsstring>
        <name>initPltAndChk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="395" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="3131" bodyend="3219"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a983258693a263cd6121c36a664f97565" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::initInSitu</definition>
        <argsstring>()</argsstring>
        <name>initInSitu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="397" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="492" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Amr_1a8a6cfcdb14e8d28779382ac6406ab2ca" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::updateInSitu</definition>
        <argsstring>()</argsstring>
        <name>updateInSitu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="398" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="506" bodyend="516"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classamrex_1_1Amr_1a566aa710514e53eb2193e7bbd4e5ff8d" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Amr::finalizeInSitu</definition>
        <argsstring>()</argsstring>
        <name>finalizeInSitu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="399" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="519" bodyend="532"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Amr_1a1ed3ee4ce3c8cc59e0b64767105cd936" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Amr::writePlotFileDoit</definition>
        <argsstring>(std::string const &amp;pltfile, bool regular)</argsstring>
        <name>writePlotFileDoit</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>pltfile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>regular</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="487" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="915" bodyend="1030"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Manage hierarchy of levels for time-dependent AMR computations. </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> class is designed to manage parts of the computation which do not belong on a single level, like establishing and updating the hierarchy of levels, global timestepping, and managing the different AmrLevels </para>    </detaileddescription>
    <inheritancegraph>
      <node id="17">
        <label>amrex::AmrCore</label>
        <link refid="classamrex_1_1AmrCore"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Amr</label>
        <link refid="classamrex_1_1Amr"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::AmrInfo</label>
        <link refid="structamrex_1_1AmrInfo"/>
      </node>
      <node id="18">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
        <childnode refid="19" relation="protected-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="43">
        <label>amrex::LevelBld</label>
        <link refid="classamrex_1_1LevelBld"/>
      </node>
      <node id="40">
        <label>std::vector&lt; std::unique_ptr&lt; std::fstream &gt;, std::allocator&lt; std::unique_ptr&lt; std::fstream &gt; &gt; &gt;</label>
      </node>
      <node id="36">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::AmrLevel &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::AmrLevel &gt; &gt; &gt;</label>
      </node>
      <node id="35">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::AmrLevel &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>Real</label>
      </node>
      <node id="32">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="21">
        <label>amrex::AmrCore</label>
        <link refid="classamrex_1_1AmrCore"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="29">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>string</label>
      </node>
      <node id="20">
        <label>amrex::Amr</label>
        <link refid="classamrex_1_1Amr"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>regrid_ba</edgelabel>
          <edgelabel>initial_ba</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>dt_min</edgelabel>
          <edgelabel>dt_level</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>amr_level</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>datalogname</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>datalog</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>n_cycle</edgelabel>
          <edgelabel>level_count</edgelabel>
          <edgelabel>regrid_int</edgelabel>
          <edgelabel>level_steps</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>levelbld</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>small_plot_file_root</edgelabel>
          <edgelabel>initial_grids_file</edgelabel>
          <edgelabel>check_file_root</edgelabel>
          <edgelabel>regrid_grids_file</edgelabel>
          <edgelabel>subcycling_mode</edgelabel>
          <edgelabel>plot_file_root</edgelabel>
          <edgelabel>restart_chkfile</edgelabel>
          <edgelabel>probin_file</edgelabel>
          <edgelabel>restart_pltfile</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>gridlog</edgelabel>
          <edgelabel>runlog</edgelabel>
          <edgelabel>runlog_terse</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>check_per</edgelabel>
          <edgelabel>start_time</edgelabel>
          <edgelabel>small_plot_per</edgelabel>
          <edgelabel>plot_log_per</edgelabel>
          <edgelabel>cumtime</edgelabel>
          <edgelabel>plot_per</edgelabel>
          <edgelabel>small_plot_log_per</edgelabel>
          <edgelabel>loadbalance_max_fac</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
      </node>
      <node id="30">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>amrex::Vector&lt; std::unique_ptr&lt; std::fstream &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="27">
        <label>amrex::Vector&lt; BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>ofstream</label>
      </node>
      <node id="23">
        <label>amrex::AmrInfo</label>
        <link refid="structamrex_1_1AmrInfo"/>
        <childnode refid="24" relation="usage">
          <edgelabel>blocking_factor</edgelabel>
          <edgelabel>n_error_buf</edgelabel>
          <edgelabel>max_grid_size</edgelabel>
          <edgelabel>ref_ratio</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>grid_eff</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>std::vector&lt; BoxArray, std::allocator&lt; BoxArray &gt; &gt;</label>
      </node>
      <node id="25">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="33">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
        <childnode refid="23" relation="protected-inheritance">
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.H" bodystart="36" bodyend="488"/>
    <listofallmembers>
      <member refid="classamrex_1_1Amr_1a98d00dad9a4ef2a681aaafdf2a59cb0b" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>abort_on_stream_retry_failure</name></member>
      <member refid="classamrex_1_1Amr_1a5a16c64d38a92425d131ed14624d3fd8" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>addDerivePlotVar</name></member>
      <member refid="classamrex_1_1Amr_1af55244caab5862e688d1f3177084ef4a" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>addDeriveSmallPlotVar</name></member>
      <member refid="classamrex_1_1Amr_1ac32245e75a89b7e4c2466f34df05aa85" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>addStatePlotVar</name></member>
      <member refid="classamrex_1_1Amr_1addec944dc521c490639b53c7eff3d1cb" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>addStateSmallPlotVar</name></member>
      <member refid="classamrex_1_1Amr_1ad535bfdb6e2684b9fe912b5e9569cf4f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Amr</name></member>
      <member refid="classamrex_1_1Amr_1afee7d6a1ce3e9d16a920cdd9e21ca9a3" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Amr</name></member>
      <member refid="classamrex_1_1Amr_1a850f1090f6ca9e8b954eeb61dff6ddb1" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Amr</name></member>
      <member refid="classamrex_1_1Amr_1a48ea3d37aac2f07a6488cb599f45fc8b" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>amr_level</name></member>
      <member refid="classamrex_1_1AmrCore_1a30f4c446e360d02875146f91f942012c" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrCore_1ac9680d7596a200d0a7403732101565e2" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrCore_1afb69ffb7fcb6a73fd03d61b5752424b4" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrCore_1a5d9e69f3be72cef7a8aa76cf94f9588c" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrCore_1a691bdc73902c0c5695d186ac680deb9f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrCore_1ac0a84aa89a7db1e9543096d9c9f50a65" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrMesh_1a163e8a28e1f841b2c174d6d34664e2d3" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a58e7077dec217e4bdad1f5221e6229cc" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab883ddbcab8b89f8eee7e9df1ae2b41b" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac0486abd196135fb9ac41748f2d2f1c9" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa3d1b57d3957feca7d0f897ec2e62824" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a43f67413ffdd911f5a91e9041bb20d0e" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1Amr_1a12a8a852d0fe80b6a15cd05d0e96d2fd" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>bldFineLevels</name></member>
      <member refid="structamrex_1_1AmrInfo_1aec9f071fb0930efe09a4efe35edc4a2f" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>blocking_factor</name></member>
      <member refid="classamrex_1_1AmrMesh_1af4a41ee86449b2afa949b6d68f6faf6f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>blockingFactor</name></member>
      <member refid="classamrex_1_1Amr_1a8dc323a910cf01ef443a1664ccabdf83" prot="private" virt="non-virtual"><scope>amrex::Amr</scope><name>BoundaryPointList</name></member>
      <member refid="classamrex_1_1AmrMesh_1a331d8f1ba022fc6d08c1e2be97dd2eb6" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a65c25342b534c0f03ebdf9e4f5ffac51" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1af3ad3b7266d2e9e90ddf607455fb3163" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1Amr_1a0275a70b67bcded29bdf03229bea8edb" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>bUserStopRequest</name></member>
      <member refid="classamrex_1_1Amr_1ab1fa12d8a76471eac770533845c1a59a" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>cellCount</name></member>
      <member refid="classamrex_1_1Amr_1a76adb6f14e46b7ed89679dfdca012385" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>cellCount</name></member>
      <member refid="classamrex_1_1Amr_1a006c720b7d8ecf6e603785ab0b82bced" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>check_file_root</name></member>
      <member refid="structamrex_1_1AmrInfo_1aa5055bd91d26288e720771986e3ae06f" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>check_input</name></member>
      <member refid="classamrex_1_1Amr_1aabf4b679fb946c492eecfe38be051333" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>check_int</name></member>
      <member refid="classamrex_1_1Amr_1a9daa98984b300c7a3080d0752f233a0b" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>check_per</name></member>
      <member refid="classamrex_1_1Amr_1a0db8b6a43fba7580d8dc6571e64eceb2" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>checkInput</name></member>
      <member refid="classamrex_1_1Amr_1ac30d97b7e66cda1fad54283a9e6a9600" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>checkInt</name></member>
      <member refid="classamrex_1_1Amr_1aa2e4c97e5351e7e9353af927b4628e24" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>checkPer</name></member>
      <member refid="classamrex_1_1Amr_1a8afe35c2818f661481ed2603ae036928" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1AmrMesh_1a894b739ead93a3f976ead6e0c8fb0536" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>ChopGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1afc5fde984a1cdd6fcfddb6ff26fb92f6" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>ClearBoxArray</name></member>
      <member refid="classamrex_1_1Amr_1a4f6a614f477cd3ff94f362d7a8dfe8b0" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>clearDerivePlotVarList</name></member>
      <member refid="classamrex_1_1Amr_1a0517c3858954b59c15be4b72472c0e55" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>clearDeriveSmallPlotVarList</name></member>
      <member refid="classamrex_1_1AmrMesh_1af5ec08eb03bebbb7a0f37f2af4bbda5d" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>ClearDistributionMap</name></member>
      <member refid="classamrex_1_1Amr_1ae33c3da2142bfd379d08bad3b4104562" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>ClearLevel</name></member>
      <member refid="classamrex_1_1Amr_1a369a6509a5b72f33560a79a590de7ca0" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>clearStatePlotVarList</name></member>
      <member refid="classamrex_1_1Amr_1a5f91cf7bf6b769609cca453f241744ae" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>clearStateSmallPlotVarList</name></member>
      <member refid="classamrex_1_1Amr_1ab6618049b000c03c0adcc424d13cc5e7" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>coarseTimeStep</name></member>
      <member refid="classamrex_1_1Amr_1a2f3c0b9d3f8f7d2eb05319ce4754ac8c" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>coarseTimeStepDt</name></member>
      <member refid="classamrex_1_1Amr_1a9f1bea870dda8d846c53e5302e9d4941" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>compute_new_dt_on_regrid</name></member>
      <member refid="classamrex_1_1Amr_1a094322102029f30480f512416d64bc04" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>computeOptimalSubcycling</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab386f620b52b8c696aeafbfb86a18cc7" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>CountCells</name></member>
      <member refid="classamrex_1_1Amr_1ae1a7de4bbf27289ccab4e3b8364a7c83" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>cumTime</name></member>
      <member refid="classamrex_1_1Amr_1a9b46db71980158bc8f12c2f7eebede4a" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>cumtime</name></member>
      <member refid="classamrex_1_1Amr_1a782f42d62191f606a77cb1c78ab584a1" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>DataLog</name></member>
      <member refid="classamrex_1_1Amr_1a34d4fd7a519716a0155f261ba210bd85" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>datalog</name></member>
      <member refid="classamrex_1_1Amr_1acbecf8145200607f53282433a788437f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>DataLogName</name></member>
      <member refid="classamrex_1_1Amr_1a2cbd53ff9ac71cac5e52e7311de0b2b8" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>datalogname</name></member>
      <member refid="classamrex_1_1Amr_1ae05b2fdc32475c82226b591968dae641" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>defBaseLevel</name></member>
      <member refid="classamrex_1_1Amr_1a1eaf7d49c3fdfa17035d39cf047d5874" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>deleteDerivePlotVar</name></member>
      <member refid="classamrex_1_1Amr_1a9a6b2ab66182008060baa72d4702f321" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>deleteDeriveSmallPlotVar</name></member>
      <member refid="classamrex_1_1Amr_1ab72037810d96a60c15358d42c780d92e" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>deleteStatePlotVar</name></member>
      <member refid="classamrex_1_1Amr_1a3d596021574d699fd925b664a9c1bf7c" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>derive</name></member>
      <member refid="classamrex_1_1Amr_1a7ff13d5d803c5302fe25c97d4cf64dca" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>derive_plot_vars</name></member>
      <member refid="classamrex_1_1Amr_1a5001ffe5303ca45da09139c255f75aeb" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>derive_small_plot_vars</name></member>
      <member refid="classamrex_1_1Amr_1a9b93d8c38cf0e1c1c361f54ed57bf29f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>derivePlotVars</name></member>
      <member refid="classamrex_1_1Amr_1aba45633dfea7697479eb0854d6e697aa" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>deriveSmallPlotVars</name></member>
      <member refid="classamrex_1_1AmrMesh_1a900d9137ef4b7f6dedc412b3caecbee9" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0dfee271ae9f2b00ab0b2ce8abd85d2d" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1a4586c2c2a9ea3418e1a7c8830d6d8c73" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab7f8457c3e5a0dc0295247f005e5a107" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>dmap</name></member>
      <member refid="classamrex_1_1Amr_1a1aa63d206ed0a9bbb5365d703260601b" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>dt_level</name></member>
      <member refid="classamrex_1_1Amr_1a43fe1508a0a3160d4ba363fd663d520a" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>dt_min</name></member>
      <member refid="classamrex_1_1Amr_1aabf57ca7f26b3f1bf6c5af3e1e2c4d66" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>dtLevel</name></member>
      <member refid="classamrex_1_1Amr_1a904343b1efe2ff873b545c80a69e58e8" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>dtLevel</name></member>
      <member refid="classamrex_1_1Amr_1ace23e3b0cd924344014b8b5451d7c359" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>dtMin</name></member>
      <member refid="classamrex_1_1Amr_1a80b107efe79904f079c92600156e523d" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>ErrorEst</name></member>
      <member refid="classamrex_1_1Amr_1a1d325f8ad0d5d179fc7fcee0f35f0500" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>file_name_digits</name></member>
      <member refid="classamrex_1_1Amr_1a075723bf2fb621f6decda9d20d4cb3ce" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>fillDerivePlotVarList</name></member>
      <member refid="classamrex_1_1Amr_1aac5f926db1c887325c23896f29feb866" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>fillDeriveSmallPlotVarList</name></member>
      <member refid="classamrex_1_1Amr_1aa409f5572b79fbf4d109aeac4b810c86" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>fillStatePlotVarList</name></member>
      <member refid="classamrex_1_1Amr_1accc5b95bd9e05e81871f28975760f74f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>fillStateSmallPlotVarList</name></member>
      <member refid="classamrex_1_1Amr_1adce93d1ef45e49e692f62ee9fa8ac48f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1Amr_1acc31a806beac20735b0589a0195dd3e2" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>FinalizeInit</name></member>
      <member refid="classamrex_1_1Amr_1a566aa710514e53eb2193e7bbd4e5ff8d" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>finalizeInSitu</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7a466d1cfea1c18c35128fb5a7c5793f" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>finest_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1a71cf25bbc89fd5fd140d6a7090a8b451" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1Amr_1af12817d167774c57ed1c1f24bb03954a" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>first_plotfile</name></member>
      <member refid="classamrex_1_1Amr_1aacd36827f62f4c412e11818f70bda156" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>first_smallplotfile</name></member>
      <member refid="classamrex_1_1AmrMesh_1a239ef06043779ea301395ae14876d6cb" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a38a313616cf363d4848934853dd47092" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1adf16ab166b53c2ae62ee664a25e31e57" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab1419d0ea909582b877283e1196d6e68" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a24f762a6fc54a0adff17d31a5ff22e8b" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a924462614f8ea65b38f21163808bdddc" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Geom</name></member>
      <member refid="classamrex_1_1Amr_1a705d1e2cbc8481f2ab8516ce61034a81" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getAmrLevels</name></member>
      <member refid="classamrex_1_1Amr_1af6388eb0b60035305b92b00398c67762" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>GetAreaNotToTag</name></member>
      <member refid="classamrex_1_1Amr_1a1cb4fa8c70133837b3b6940290732c30" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getInitialBA</name></member>
      <member refid="classamrex_1_1Amr_1adf62b6ed57f2b6300c88006b075613cc" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getIntersectHiX</name></member>
      <member refid="classamrex_1_1Amr_1a019a2bcc15ee8ff3f96613ca88b09228" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getIntersectHiY</name></member>
      <member refid="classamrex_1_1Amr_1a6d73495d2d5390c4324c48b943e2893c" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getIntersectHiZ</name></member>
      <member refid="classamrex_1_1Amr_1aebb7e0750e8e5f5a9ae59c4b048e0974" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getIntersectLoX</name></member>
      <member refid="classamrex_1_1Amr_1a35cf977f63121c5cca4bd94237b33a18" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getIntersectLoY</name></member>
      <member refid="classamrex_1_1Amr_1a5b3ad9bd9642884b6f9bbc2912ac6319" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getIntersectLoZ</name></member>
      <member refid="classamrex_1_1Amr_1a5db40812e41cec37353e6308befc77da" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>getLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a5120f6797b0975a8cbdff7e8e5b98efa" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>GetLevel</name></member>
      <member refid="structamrex_1_1AmrInfo_1a8932f2846ed22b769126d4783f76107a" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>grid_eff</name></member>
      <member refid="classamrex_1_1Amr_1a90155667257e3c51890f716ade65c5e7" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>grid_places</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7bc5798a6ef2a0c27b0141112104e087" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>gridEff</name></member>
      <member refid="classamrex_1_1Amr_1a8faf7f22cccf4da975ca761f1920f5e8" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>gridlog</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae53347adc8a239367f153d3705a8ed25" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>grids</name></member>
      <member refid="classamrex_1_1Amr_1a00a3d52093863719ed7429f3bbf35eb4" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>init</name></member>
      <member refid="classamrex_1_1Amr_1a9214cdbdc7fddff0ba8afd7d592ba869" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>InitAmr</name></member>
      <member refid="classamrex_1_1AmrCore_1a309a4bad63faba98cfc57641e274413d" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>InitFromScratch</name></member>
      <member refid="classamrex_1_1Amr_1a49468e4d346f32d97ab09f48f4ff9dd2" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>initial_ba</name></member>
      <member refid="classamrex_1_1Amr_1aadcea8b0f09483be05ad913b0c9a6e91" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>initial_grids_file</name></member>
      <member refid="classamrex_1_1Amr_1acadd647c5f887a16b8c6d1fd09b2f41f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>initialBa</name></member>
      <member refid="classamrex_1_1Amr_1aa0fd6eea096c16f444db7d0f93b1cbb5" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>initialBaLevels</name></member>
      <member refid="classamrex_1_1Amr_1a6004de04a2cb33d15d7650e3b622936c" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>initialInit</name></member>
      <member refid="classamrex_1_1Amr_1aa33f37ed3b665ed7c5eb98de5cdafcd3" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1Amr_1a96d263aac2bf01c26faa2e9e6247e002" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>InitializeInit</name></member>
      <member refid="classamrex_1_1Amr_1a983258693a263cd6121c36a664f97565" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>initInSitu</name></member>
      <member refid="classamrex_1_1Amr_1a210649d50f9f052bcaf38336ce97f986" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>initPltAndChk</name></member>
      <member refid="classamrex_1_1Amr_1ac817c89d71bd72e6514b12b78ba3a955" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>initSubcycle</name></member>
      <member refid="classamrex_1_1Amr_1ac3e662f31f9e418725c27e5c55577202" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>InstallNewDistributionMap</name></member>
      <member refid="classamrex_1_1Amr_1aa74ec3120336fb6f18e589e7e31a2fec" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>intersect_hix</name></member>
      <member refid="classamrex_1_1Amr_1ad89ad8ade0419ea12d1901d4237b9f07" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>intersect_hiy</name></member>
      <member refid="classamrex_1_1Amr_1a4b8339a63d2e5a665044f782e929a02f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>intersect_hiz</name></member>
      <member refid="classamrex_1_1Amr_1a74f3b055b554426d6404985f46bc5713" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>intersect_lox</name></member>
      <member refid="classamrex_1_1Amr_1a63e0fe7c5999847347e2959ef6d35e84" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>intersect_loy</name></member>
      <member refid="classamrex_1_1Amr_1ac8fbee6b944ffeb46dac1abb6c4e979c" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>intersect_loz</name></member>
      <member refid="classamrex_1_1Amr_1a534b06b1181277637fae2a4caf17e8c1" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>isDerivePlotVar</name></member>
      <member refid="classamrex_1_1Amr_1a6ad527c04f14f430b8835dc690337df8" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>isDeriveSmallPlotVar</name></member>
      <member refid="classamrex_1_1Amr_1a47527266245319befc8538d55dac8bc3" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>isPeriodic</name></member>
      <member refid="classamrex_1_1Amr_1a8e76ba9b63802ff44942fe4dc4ffbd8f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>isStatePlotVar</name></member>
      <member refid="classamrex_1_1Amr_1a44718cda179205e8d5e6c5997131f7fd" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>isStateSmallPlotVar</name></member>
      <member refid="structamrex_1_1AmrInfo_1a937e0b9dc3689884b262936e6c3c0b7d" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>iterate_on_new_grids</name></member>
      <member refid="classamrex_1_1Amr_1aedc8350798946e5e5d1d68b4861195a5" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>last_checkpoint</name></member>
      <member refid="classamrex_1_1Amr_1a8bdd58e0f251c3097ae6631621a32253" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>last_plotfile</name></member>
      <member refid="classamrex_1_1Amr_1ac3c786f18b9e2b297f07f10e28852bbf" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>last_smallplotfile</name></member>
      <member refid="classamrex_1_1Amr_1af0c8b87958fdb3cc31b2b3b994c8b37e" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>level_being_advanced</name></member>
      <member refid="classamrex_1_1Amr_1a1a1d9a33774055f267ad5297b2846ecc" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>level_count</name></member>
      <member refid="classamrex_1_1Amr_1a38fbd17db8a050b5bf3302427b9285ea" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>level_steps</name></member>
      <member refid="classamrex_1_1Amr_1a99ffc00c495183894b2ee7e11a79685e" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>levelbld</name></member>
      <member refid="classamrex_1_1Amr_1ad37c151a0ef82ea98f18707e98d44dc7" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>levelCount</name></member>
      <member refid="classamrex_1_1AmrMesh_1a08cfede00ef133a4756ac22a7ea7bfe7" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>LevelDefined</name></member>
      <member refid="classamrex_1_1Amr_1a8101a391189955c50c7a36d359f3f5ed" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>levelSteps</name></member>
      <member refid="classamrex_1_1Amr_1a4c3e758e6025e4cf4f975f445d1eb6f3" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>loadbalance_level0_int</name></member>
      <member refid="classamrex_1_1Amr_1ada948dc3a7c2301b9aab5f9b9f65507f" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>loadbalance_max_fac</name></member>
      <member refid="classamrex_1_1Amr_1a6019d262d557fc37c9706c05a6cc5794" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>loadbalance_with_workestimates</name></member>
      <member refid="classamrex_1_1Amr_1ab35e0719d1321112010ff20228ad1acc" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>LoadBalanceLevel0</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac7d0ce87a8047dcdf7b45d4232121881" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>MakeBaseGrids</name></member>
      <member refid="classamrex_1_1Amr_1a11440fbd79bb8db036e18692462e142f" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>makeLoadBalanceDistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1acb422930e8e69fc386727f45607e114b" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>MakeNewGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0bf56e73af1dfffcba7bfcadad887751" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>MakeNewGrids</name></member>
      <member refid="classamrex_1_1Amr_1a6874ed073068abdede9571c1773985f8" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>MakeNewLevelFromCoarse</name></member>
      <member refid="classamrex_1_1Amr_1ad521ab1431b0695f5638a627db2a6adb" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>MakeNewLevelFromScratch</name></member>
      <member refid="classamrex_1_1Amr_1a9d0e58b8aaa0cac0a8cd432f37198197" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>ManualTagsPlacement</name></member>
      <member refid="structamrex_1_1AmrInfo_1ad3142cf009fdd8667c2352c39fb2c522" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>max_grid_size</name></member>
      <member refid="structamrex_1_1AmrInfo_1abcb6f6baf4e1ecd3d143d7d8cb6a2a93" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>max_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1a359b34414e4ab7c9b33f74b031d16af8" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>maxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2b5ebb9f738e77dcc2f99dfe4e4e91d6" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8d91fffbf09ac3c696d1f7cffee76b2c" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>MaxRefRatio</name></member>
      <member refid="classamrex_1_1Amr_1a37d45dad31dd3b070c0a14578937365b" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>message_int</name></member>
      <member refid="classamrex_1_1Amr_1a091b2e0b9cd006fd375a407f8ed98f80" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>n_cycle</name></member>
      <member refid="structamrex_1_1AmrInfo_1aa78fef1ea7608723c281debe971d460e" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>n_error_buf</name></member>
      <member refid="structamrex_1_1AmrInfo_1a36e0332bccfe906856f622730eeafbcf" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>n_proper</name></member>
      <member refid="classamrex_1_1Amr_1a5858409b6a0c53ac8e09fd9601a44dcd" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>nCycle</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad5199bceb8775542859c6b51d0a2100c" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>nErrorBuf</name></member>
      <member refid="classamrex_1_1AmrMesh_1a071011d3702ecfc14ebc0f61a30a50ed" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>nErrorBufVect</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa1e59b567c58d9ba22c9e56f8138a22a" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>nProper</name></member>
      <member refid="classamrex_1_1AmrMesh_1a450db80ef9bd209ebb61cb47ff12ca22" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>num_setba</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2ddfbb3a69cf479f1d28f704d19e4f96" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>num_setdm</name></member>
      <member refid="classamrex_1_1Amr_1a22c7ccfe95fd35cc2a2c6629a8e3edbc" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>NumDataLogs</name></member>
      <member refid="classamrex_1_1Amr_1ad8affd8de32d5fc666795d5a13a39e45" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>numGrids</name></member>
      <member refid="classamrex_1_1Amr_1a8727954d78b0edddf953091df0cdcb8f" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>numGrids</name></member>
      <member refid="classamrex_1_1Amr_1a925e6a93c8c15b09058d992c92ef59e3" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>okToContinue</name></member>
      <member refid="classamrex_1_1Amr_1af05216d2777d71cb9572ac0a03e19646" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>okToRegrid</name></member>
      <member refid="classamrex_1_1Amr_1a9f5d7648e9214d0a3a88f40383bafff7" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrCore_1ae524f7c2cee3133106953319696bd7c5" prot="public" virt="non-virtual" ambiguityscope="amrex::AmrCore::"><scope>amrex::Amr</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrCore_1acf424d1fa598d256d7285e7fc6f20a73" prot="public" virt="non-virtual" ambiguityscope="amrex::AmrCore::"><scope>amrex::Amr</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrMesh_1a51e0432968299f0c83f90d9b79376a6c" prot="public" virt="non-virtual" ambiguityscope="amrex::AmrMesh::"><scope>amrex::Amr</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrMesh_1af2d4364b9fd33cf012edbb2170105845" prot="public" virt="non-virtual" ambiguityscope="amrex::AmrMesh::"><scope>amrex::Amr</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Amr_1a6d91b6937dfb14b4b4777f640971b072" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>plot_file_root</name></member>
      <member refid="classamrex_1_1Amr_1aa9af5d2dcba7539444e0334b84ed7504" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Plot_Files_Output</name></member>
      <member refid="classamrex_1_1Amr_1a8e9bb15131c1b8431dc0336678e0b1ea" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>plot_int</name></member>
      <member refid="classamrex_1_1Amr_1ac28ad84e2187c8094fe436eb5e5847d8" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>plot_log_per</name></member>
      <member refid="classamrex_1_1Amr_1af097e0455a9da7e8e6a9dc131d1b96f2" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>plot_per</name></member>
      <member refid="classamrex_1_1Amr_1a6b328e1464fc914bea4ea6da8a067c57" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>plotInt</name></member>
      <member refid="classamrex_1_1Amr_1a3a98ce23547463e17b55901b8818f0fc" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>plotLogPer</name></member>
      <member refid="classamrex_1_1Amr_1a5a931bcdf3440fa41801f73a87f417ef" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>plotPer</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad5863ce18c2b8b1dc6371d33c227f2a6" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>PostProcessBaseGrids</name></member>
      <member refid="classamrex_1_1Amr_1a4b7fbf8492a6e663bd567bfdb4151a40" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>printGridInfo</name></member>
      <member refid="classamrex_1_1AmrCore_1a4f3c144db8f986764324e9ba788666b3" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>printGridSummary</name></member>
      <member refid="classamrex_1_1Amr_1a015dec6a04940644e63848d6afd6e7c8" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>probin_file</name></member>
      <member refid="classamrex_1_1Amr_1a979e1cff503e5f3c6436a232284fdcfb" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>readProbinFile</name></member>
      <member refid="classamrex_1_1Amr_1abd4f88199336df506302a1d53b0ef0ac" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>record_grid_info</name></member>
      <member refid="classamrex_1_1Amr_1ad8d22fb152c5f5620ab9b1ab994f68aa" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>record_run_info</name></member>
      <member refid="classamrex_1_1Amr_1ab443c219d9056c789db6475acb78ea7b" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>record_run_info_terse</name></member>
      <member refid="structamrex_1_1AmrInfo_1a73a3b38cadf1943503cf77622ea6a3ae" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>ref_ratio</name></member>
      <member refid="structamrex_1_1AmrInfo_1a4494b1f6c76612d4af30d18d62dd410c" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>refine_grid_layout</name></member>
      <member refid="classamrex_1_1AmrMesh_1a848a89635a0f509800a5d912ef7b4f0b" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3e96de11d4a8b2cababa14d116b61958" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1Amr_1a9d6faadd0aabf54081fe9ea12be10484" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>regrid</name></member>
      <member refid="classamrex_1_1Amr_1ad17547793e589e382cafaea103a01637" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>regrid_ba</name></member>
      <member refid="classamrex_1_1Amr_1aaa8cb07b444ec3f7be3a7680c7e37363" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>regrid_grids_file</name></member>
      <member refid="classamrex_1_1Amr_1a2fc94106d0164a3cfc3e206db6b7e768" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>regrid_int</name></member>
      <member refid="classamrex_1_1Amr_1a5c2a28dfa0840069f813bf56565b4007" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>regrid_level_0_on_restart</name></member>
      <member refid="classamrex_1_1Amr_1a6c0f2e73f58bdff46fc5692ed85611f5" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>regridInt</name></member>
      <member refid="classamrex_1_1Amr_1a6254e512f37656c89acb1e19162d26b8" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>RegridOnly</name></member>
      <member refid="classamrex_1_1Amr_1a9fa95998903f721c41e3d677c4894d47" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>RegridOnRestart</name></member>
      <member refid="classamrex_1_1Amr_1a068668005a432a854ee2e98ccac4ac73" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>RemakeLevel</name></member>
      <member refid="classamrex_1_1Amr_1a3070a179ad3daed519f8d41a2f2d6b3b" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>restart</name></member>
      <member refid="classamrex_1_1Amr_1ac00b1478382804abeb82dd75b4ab5194" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>restart_chkfile</name></member>
      <member refid="classamrex_1_1Amr_1a295b3f0ab02158ef294ed68349f41dae" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>restart_pltfile</name></member>
      <member refid="classamrex_1_1Amr_1abca666179e968bdbf467f8a903830bcd" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>runlog</name></member>
      <member refid="classamrex_1_1Amr_1a693fdb636ccbf5dde6fb220c835ee2a2" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>runlog_terse</name></member>
      <member refid="classamrex_1_1AmrMesh_1aba9a6c34f6e246926e9147ef3da5b535" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1adf01c926d4f55d291a5d5a0e0b48c348" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3818b75f890359e9a8042f7a3b9e4e21" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a04ba4d303b52fe2f1db1e7e23fca5c06" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1Amr_1a90bf34103118043a594a3e827f9f5e8b" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setBoundaryGeometry</name></member>
      <member refid="classamrex_1_1Amr_1adfcea84d67ac5f1276111e2bb32007aa" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setBoundaryGeometry</name></member>
      <member refid="classamrex_1_1AmrMesh_1a404d43ca2363907df6d3206e892a220d" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetBoxArray</name></member>
      <member refid="classamrex_1_1Amr_1a5ab06f1b57ba4e63bacb37f8d394e744" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setComputeNewDtOnRegrid</name></member>
      <member refid="classamrex_1_1Amr_1a8440e6564a766f2aa1cf0670450b8523" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setCumTime</name></member>
      <member refid="classamrex_1_1AmrMesh_1a452a3c38dd51bc37e199abe772759a3b" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetDistributionMap</name></member>
      <member refid="classamrex_1_1Amr_1ae63754ca7b99b0ebc7dca496b4689bc4" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setDtLevel</name></member>
      <member refid="classamrex_1_1Amr_1a0a911dea6d732d72a00a493bd3205fe3" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setDtLevel</name></member>
      <member refid="classamrex_1_1Amr_1a4986d104fba637f01fbd191892ea8a96" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setDtMin</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab40e510f5cd8deda45eb675b82494808" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetFinestLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa755628d0ad98daf37de1670e57d2364" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetGeometry</name></member>
      <member refid="classamrex_1_1AmrMesh_1a77c262385b1bd0bfc96fec96347c041a" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetGridEff</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2c473ca991e89cf526fa0ecd967a7217" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>SetIterateToFalse</name></member>
      <member refid="classamrex_1_1Amr_1ac5745e35deb1c5f1c6d8585cffe9605d" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setLevelCount</name></member>
      <member refid="classamrex_1_1Amr_1a1cfac74af2f249a6addd2637d24cb758" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setLevelSteps</name></member>
      <member refid="classamrex_1_1AmrMesh_1a4612b4d9b23253095da92c3e323ffd73" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a964c875f4546f513fb285e2f90278473" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae26f4d197dc68e2d26837b8ad0043dbe" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad6695b6090e726ea6bc405a7d3a75be8" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1Amr_1a1efb7bdb15ac24d605dcfa19819b8991" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setNCycle</name></member>
      <member refid="classamrex_1_1AmrMesh_1aee314c43754854d98fc25ce6cd278796" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>SetNProper</name></member>
      <member refid="classamrex_1_1Amr_1a1569c279c9f53680c034fa8412aec447" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>setRecordDataInfo</name></member>
      <member refid="classamrex_1_1Amr_1a1019472407f6945a0f73f610fc1fd497" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>setRecordGridInfo</name></member>
      <member refid="classamrex_1_1Amr_1a9bbbb5b286faccc02c5b6b90b4184c6a" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>setRecordRunInfo</name></member>
      <member refid="classamrex_1_1Amr_1af19da464ed538fdb371cfc74ff3ac469" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>setRecordRunInfoTerse</name></member>
      <member refid="classamrex_1_1Amr_1a6f9ae291b9b51ed55c83ff49e418fc49" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>setStartTime</name></member>
      <member refid="classamrex_1_1AmrMesh_1a54d57857c4dd3aa50841ec74a13d4e4c" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>SetUseNewChop</name></member>
      <member refid="classamrex_1_1Amr_1a55fb651c5355f362017c26f4f02cc127" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>small_plot_file_root</name></member>
      <member refid="classamrex_1_1Amr_1a61f6ee1066c6df367e8b5f3680965b0e" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>small_plot_int</name></member>
      <member refid="classamrex_1_1Amr_1ab75c18875ec4f6d84cb1bfe4518ea81b" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>small_plot_log_per</name></member>
      <member refid="classamrex_1_1Amr_1aa9f5b7511d029e894847247437d90e19" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>small_plot_per</name></member>
      <member refid="classamrex_1_1Amr_1a2c5ce27afbaf7d1a9e5938e547862527" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>smallplotInt</name></member>
      <member refid="classamrex_1_1Amr_1ae93d8da97d0a049f5da23bea33ed2fe1" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>smallplotLogPer</name></member>
      <member refid="classamrex_1_1Amr_1a004dd1aadb752b3913f83f1d4bd825a3" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>smallplotPer</name></member>
      <member refid="classamrex_1_1Amr_1ad97c2f4d6656288b817b8bbcc0bba7b6" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>start_time</name></member>
      <member refid="classamrex_1_1Amr_1a70c62cf9a34766ad62c1b2ff4df8b10e" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>startTime</name></member>
      <member refid="classamrex_1_1Amr_1a68d5307a670be15bf2684597d9a4484a" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>state_plot_vars</name></member>
      <member refid="classamrex_1_1Amr_1a6332120c4e7b5df16dc8631e98b42d39" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>state_small_plot_vars</name></member>
      <member refid="classamrex_1_1Amr_1a026e3576e84968fb18a32fc46f1cc21a" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>statePlotVars</name></member>
      <member refid="classamrex_1_1Amr_1a8a241b0a149dd4f2b15a83c5724d4153" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>stateSmallPlotVars</name></member>
      <member refid="classamrex_1_1Amr_1a846cd945ebbc286b3488690b2105794a" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>stepOfLastCheckPoint</name></member>
      <member refid="classamrex_1_1Amr_1a60e9811cfc1390ce271f27a1e6382aba" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>stepOfLastPlotFile</name></member>
      <member refid="classamrex_1_1Amr_1a254fc5d48a5ea09b0036ac3c0261d1ec" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>stepOfLastSmallPlotFile</name></member>
      <member refid="classamrex_1_1Amr_1a21bfe4d69a3d61259e419781fac7e519" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>stream_max_tries</name></member>
      <member refid="classamrex_1_1Amr_1a1fa04ad61e5931bab05e515255c447d1" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>sub_cycle</name></member>
      <member refid="classamrex_1_1Amr_1ae22e90398efa6b78ca3d1a68e0839a31" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>subCycle</name></member>
      <member refid="classamrex_1_1Amr_1a746a85f8a72742a006a5c78de497c3f9" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>subcycling_mode</name></member>
      <member refid="classamrex_1_1Amr_1a32a8083d08d7c253cabc6428890a708e" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>subcyclingMode</name></member>
      <member refid="classamrex_1_1Amr_1ac501ff9a494314e973685c776fae2498" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>theRestartFile</name></member>
      <member refid="classamrex_1_1Amr_1a1049e70b4e279c64160c9ff62ba42653" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>theRestartPlotFile</name></member>
      <member refid="classamrex_1_1Amr_1a2648a488ef613f454d29b519aca41bc8" prot="protected" virt="virtual"><scope>amrex::Amr</scope><name>timeStep</name></member>
      <member refid="classamrex_1_1Amr_1a8a6cfcdb14e8d28779382ac6406ab2ca" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>updateInSitu</name></member>
      <member refid="structamrex_1_1AmrInfo_1a6a665ee4c81c3b28e36775d7e94ab261" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>use_fixed_coarse_grids</name></member>
      <member refid="structamrex_1_1AmrInfo_1ad9000321def17faf06f9fef5ea304163" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>use_fixed_upto_level</name></member>
      <member refid="structamrex_1_1AmrInfo_1a7caf591556b0da33b2a44a7726706395" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>use_new_chop</name></member>
      <member refid="classamrex_1_1AmrMesh_1aee758e772b5c854d121923686d1d3949" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>useFixedCoarseGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a6ff4a09f169c29d17327aa37b49d3e5a" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>useFixedUpToLevel</name></member>
      <member refid="classamrex_1_1Amr_1af0ab98386ac1b7aac739c65a8c3f2d95" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>UsingPrecreateDirectories</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9b78b807755b822ba0c46ec0e3150089" prot="public" virt="non-virtual"><scope>amrex::Amr</scope><name>Verbose</name></member>
      <member refid="structamrex_1_1AmrInfo_1ae0c6a5189c216220bf4aab567206c362" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>verbose</name></member>
      <member refid="classamrex_1_1Amr_1a71368e4ccbd5ee723f8675ee9ba4abf5" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>which_level_being_advanced</name></member>
      <member refid="classamrex_1_1Amr_1aa8e99beaed580c528d7f63268275d4a5" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>write_plotfile_with_checkpoint</name></member>
      <member refid="classamrex_1_1Amr_1a1913d5ba8be07f02e9ae1f1b2c667a18" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>writePlotFile</name></member>
      <member refid="classamrex_1_1Amr_1a1ed3ee4ce3c8cc59e0b64767105cd936" prot="private" virt="non-virtual"><scope>amrex::Amr</scope><name>writePlotFileDoit</name></member>
      <member refid="classamrex_1_1Amr_1ac56504a819c5f48033a0c10f94dc64ce" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>writePlotNow</name></member>
      <member refid="classamrex_1_1Amr_1a01705c5091524e41df7d4d5b4fc27de8" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>writeSmallPlotFile</name></member>
      <member refid="classamrex_1_1Amr_1a79963ad1530c1e895fed27bfd77f2131" prot="protected" virt="non-virtual"><scope>amrex::Amr</scope><name>writeSmallPlotNow</name></member>
      <member refid="classamrex_1_1Amr_1a739b025250207eabcd5f0505ab16dc8d" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>~Amr</name></member>
      <member refid="classamrex_1_1AmrCore_1aa826ec39007a18c0002a14d9a53863af" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>~AmrCore</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8fb2fefeadc3653f3f263d32fd195460" prot="public" virt="virtual"><scope>amrex::Amr</scope><name>~AmrMesh</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
