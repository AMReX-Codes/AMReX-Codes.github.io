<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceamrex_1_1detail" kind="namespace" language="C++">
    <compoundname>amrex::detail</compoundname>
    <innerclass refid="structamrex_1_1detail_1_1apply__result" prot="public">amrex::detail::apply_result</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1apply__result_3_01F_00_01GpuTuple_3_01Ts_8_8_8_01_4_01_4" prot="public">amrex::detail::apply_result&lt; F, GpuTuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1gpu__tuple__element" prot="public">amrex::detail::gpu_tuple_element</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1gpu__tuple__impl" prot="public">amrex::detail::gpu_tuple_impl</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1gpu__tuple__impl_3_01I_00_01Head_01_4" prot="public">amrex::detail::gpu_tuple_impl&lt; I, Head &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1gpu__tuple__impl_3_01I_00_01Head_00_01Tail_8_8_8_01_4" prot="public">amrex::detail::gpu_tuple_impl&lt; I, Head, Tail... &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1invoke__result" prot="public">amrex::detail::invoke_result</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1invoke__result_3_01decltype_07void_07INVOKE_07std_1_1declval_3_01F_01_49dd63e63d8c4c4c6d40ab44a59ce8a5b" prot="public">amrex::detail::invoke_result&lt; decltype(void(INVOKE(std::declval&lt; F &gt;(), std::declval&lt; Args &gt;()...))), F, Args... &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1tuple__cat__result" prot="public">amrex::detail::tuple_cat_result</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1tuple__cat__result_3_01GpuTuple_3_01T1s_8_8_8_01_4_00_01GpuTuple_3_01T2e7f956a9a5fbb5ccc01506013b6ed802" prot="public">amrex::detail::tuple_cat_result&lt; GpuTuple&lt; T1s... &gt;, GpuTuple&lt; T2s... &gt;, TPs... &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1tuple__cat__result_3_01GpuTuple_3_01Ts_8_8_8_01_4_01_4" prot="public">amrex::detail::tuple_cat_result&lt; GpuTuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1unwrap" prot="public">amrex::detail::unwrap</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1unwrap_3_01std_1_1reference__wrapper_3_01T_01_4_01_4" prot="public">amrex::detail::unwrap&lt; std::reference_wrapper&lt; T &gt; &gt;</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569d" prot="public" static="no">
        <name>ReduceOp</name>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" prot="public">
          <name>max</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" prot="public">
          <name>min</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569dadb62579be9a4f3141fb640a655f49f52" prot="public">
          <name>sum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da9409354542db34fb149ecb3c91ebb8bd" prot="public">
          <name>lor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da1543dab5fc332f7f6a146da7718c486d" prot="public">
          <name>land</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="15" bodyend="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1_1detail_1a4dabd168440a362478e0d2887dfdfe23" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1detail_1_1unwrap" kindref="compound">unwrap</ref>&lt; typename std::decay&lt; T &gt;::type &gt;::type</type>
        <definition>using amrex::detail::tuple_decay_t = typedef typename unwrap&lt;typename std::decay&lt;T&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>tuple_decay_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="245" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="245" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a10e8c484da7d2f2f5bbd223b6b92dc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::detail::complex_pow_unsigned</definition>
        <argsstring>(GpuComplex&lt; T &gt; a_z, unsigned a_n)</argsstring>
        <name>complex_pow_unsigned</name>
        <param>
          <type><ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
          <declname>a_z</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>a_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="428" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="428" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a2d9a622392a0eee879ac8180cb2371e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Reduce</definition>
        <argsstring>(ReduceOp, T *, int, int, MPI_Comm)</argsstring>
        <name>Reduce</name>
        <param>
          <type><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569d" kindref="member">ReduceOp</ref></type>
        </param>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a11b496ac41b8e46fe7f1adf74392dcfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Reduce</definition>
        <argsstring>(ReduceOp, T &amp;, int, MPI_Comm)</argsstring>
        <name>Reduce</name>
        <param>
          <type><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569d" kindref="member">ReduceOp</ref></type>
        </param>
        <param>
          <type>T &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a59bb763ea3df042d86d6906cc9ccfc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Reduce</definition>
        <argsstring>(ReduceOp, Vector&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;, int, MPI_Comm)</argsstring>
        <name>Reduce</name>
        <param>
          <type><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569d" kindref="member">ReduceOp</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a6ea7eeaafa369d6246da405045b73208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Gather</definition>
        <argsstring>(const T *, int, T *, int, MPI_Comm)</argsstring>
        <name>Gather</name>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aac087974da543982e53f9b3f1da42005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Gather</definition>
        <argsstring>(const T &amp;, T *, int, MPI_Comm)</argsstring>
        <name>Gather</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a5bcec00259aa287e4fa1c57ed626d4e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename Size</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;RunOnGpu&lt;T&gt;::value&gt;::type amrex::detail::uninitializedFillNImpl</definition>
        <argsstring>(U *data, Size count, const Value &amp;value)</argsstring>
        <name>uninitializedFillNImpl</name>
        <param>
          <type>U *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a2bc955e71a20bceeaed3cc8333eb0398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename Size</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!RunOnGpu&lt;T&gt;::value&gt;::type amrex::detail::uninitializedFillNImpl</definition>
        <argsstring>(U *data, Size count, const Value &amp;value)</argsstring>
        <name>uninitializedFillNImpl</name>
        <param>
          <type>U *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa59349c2dc230fb4a0c79fd80154b201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;RunOnGpu&lt;T&gt;::value&gt;::type amrex::detail::memCopyImpl</definition>
        <argsstring>(void *dst, const void *src, std::size_t count)</argsstring>
        <name>memCopyImpl</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a5eae9e79bcaf47cc572db8a613117788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!RunOnGpu&lt;T&gt;::value&gt;::type amrex::detail::memCopyImpl</definition>
        <argsstring>(void *dst, const void *src, std::size_t count)</argsstring>
        <name>memCopyImpl</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a4ad48aa99f6648fea787451a974dda26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;RunOnGpu&lt;T&gt;::value&gt;::type amrex::detail::memMoveImpl</definition>
        <argsstring>(void *dst, const void *src, std::size_t count, T &amp;allocator)</argsstring>
        <name>memMoveImpl</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="57" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a1470b94793e6b77a8735c66329069612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!RunOnGpu&lt;T&gt;::value&gt;::type amrex::detail::memMoveImpl</definition>
        <argsstring>(void *dst, const void *src, std::size_t count, T &amp;)</argsstring>
        <name>memMoveImpl</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a0a1833caa214a1cb642c80afe8c49bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;RunOnGpu&lt;T&gt;::value&gt;::type amrex::detail::initFromListImpl</definition>
        <argsstring>(U *data, std::initializer_list&lt; U &gt; list)</argsstring>
        <name>initFromListImpl</name>
        <param>
          <type>U *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; U &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a2eed1c648c543a4917823d6a12dc9135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!RunOnGpu&lt;T&gt;::value&gt;::type amrex::detail::initFromListImpl</definition>
        <argsstring>(U *data, std::initializer_list&lt; U &gt; list)</argsstring>
        <name>initFromListImpl</name>
        <param>
          <type>U *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; U &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a62a2b2ccd165d829b36206f3cffb70f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type&amp; amrex::detail::get_impl</definition>
        <argsstring>(detail::gpu_tuple_element&lt; I, typename GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type &gt; &amp;te) noexcept</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="structamrex_1_1detail_1_1gpu__tuple__element" kindref="compound">detail::gpu_tuple_element</ref>&lt; I, typename <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &gt; &amp;</type>
          <declname>te</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a80728f757289cb823fe33703fe6f867c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type const  &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type const&amp; amrex::detail::get_impl</definition>
        <argsstring>(detail::gpu_tuple_element&lt; I, typename GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type &gt; const &amp;te) noexcept</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="structamrex_1_1detail_1_1gpu__tuple__element" kindref="compound">detail::gpu_tuple_element</ref>&lt; I, typename <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &gt; const &amp;</type>
          <declname>te</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ab82c58cf7befb92b7f934917cbc2e17e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &amp;&amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type&amp;&amp; amrex::detail::get_impl</definition>
        <argsstring>(detail::gpu_tuple_element&lt; I, typename GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type &gt; &amp;&amp;te) noexcept</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="structamrex_1_1detail_1_1gpu__tuple__element" kindref="compound">detail::gpu_tuple_element</ref>&lt; I, typename <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &gt; &amp;&amp;</type>
          <declname>te</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="167" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1acf5761b3201f222f4415dec1b481ccbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;(I&lt; N-1), void &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::EnableIf_t&lt;(I&lt;N-1),void&gt; amrex::detail::tuple_copy</definition>
        <argsstring>(TP1 &amp;a, TP2 &amp;&amp;b)</argsstring>
        <name>tuple_copy</name>
        <param>
          <type>TP1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="206" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="206" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a68a6605ef64715ec8e0ba99fa9d975cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; I==N-1, void &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::EnableIf_t&lt;I==N-1,void&gt; amrex::detail::tuple_copy</definition>
        <argsstring>(TP1 &amp;a, TP2 &amp;&amp;b)</argsstring>
        <name>tuple_copy</name>
        <param>
          <type>TP1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a334a20ac09edf93e77327f031f9c13c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr R</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr R amrex::detail::make_tuple</definition>
        <argsstring>(TP1 &amp;&amp;a, TP2 &amp;&amp;b, IndexSequence&lt; N1... &gt; const &amp;, IndexSequence&lt; N2... &gt; const &amp;)</argsstring>
        <name>make_tuple</name>
        <param>
          <type>TP1 &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1IndexSequence" kindref="compound">IndexSequence</ref>&lt; N1... &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1IndexSequence" kindref="compound">IndexSequence</ref>&lt; N2... &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="274" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1af2dd4ad4f928e269d1bc2dce24f48b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE auto amrex::detail::INVOKE</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; decltype(f(std::forward&lt; Args &gt;(args)...))</argsstring>
        <name>INVOKE</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a286142afeed92b5a909e7f8f6778330d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename TP</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::detail::apply_impl</definition>
        <argsstring>(F &amp;&amp;f, TP &amp;&amp;t, IndexSequence&lt; N... &gt;) -&gt; typename detail::apply_result&lt; F, detail::tuple_decay_t&lt; TP &gt; &gt;::type</argsstring>
        <name>apply_impl</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>TP &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1IndexSequence" kindref="compound">IndexSequence</ref>&lt; N... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="346" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ae9c414dd7bc47e48d6fe4e6361b1b723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::detail::removeDupDoit</definition>
        <argsstring>(Vector&lt; T &gt; &amp;vec, std::size_t start, std::size_t stop)</argsstring>
        <name>removeDupDoit</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="198" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="198" bodyend="276"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="425" column="1"/>
  </compounddef>
</doxygen>
