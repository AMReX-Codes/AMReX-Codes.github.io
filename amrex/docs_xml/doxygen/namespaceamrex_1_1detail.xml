<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1detail" kind="namespace" language="C++">
    <compoundname>amrex::detail</compoundname>
    <innerclass refid="structamrex_1_1detail_1_1apply__result" prot="public">amrex::detail::apply_result</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1apply__result_3_01F_00_01GpuTuple_3_01Ts_8_8_8_01_4_01_4" prot="public">amrex::detail::apply_result&lt; F, GpuTuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1clz__tag" prot="public">amrex::detail::clz_tag</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1clzl__tag" prot="public">amrex::detail::clzl_tag</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1clzll__tag" prot="public">amrex::detail::clzll_tag</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1CTOWrapper" prot="public">amrex::detail::CTOWrapper</innerclass>
    <innerclass refid="classamrex_1_1detail_1_1CutFabFactory" prot="public">amrex::detail::CutFabFactory</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1Detector" prot="public">amrex::detail::Detector</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1Detector_3_01Default_00_01Void__t_3_01Op_3_01Args_8_8_8_01_4_01_4_00_01Op_00_01Args_8_8_8_01_4" prot="public">amrex::detail::Detector&lt; Default, Void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1gpu__tuple__element" prot="public">amrex::detail::gpu_tuple_element</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1gpu__tuple__impl" prot="public">amrex::detail::gpu_tuple_impl</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1gpu__tuple__impl_3_01I_00_01Head_01_4" prot="public">amrex::detail::gpu_tuple_impl&lt; I, Head &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1gpu__tuple__impl_3_01I_00_01Head_00_01Tail_8_8_8_01_4" prot="public">amrex::detail::gpu_tuple_impl&lt; I, Head, Tail... &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1invoke__result" prot="public">amrex::detail::invoke_result</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1invoke__result_3_01decltype_07void_07INVOKE_07std_1_1declval_3_01F_01_49dd63e63d8c4c4c6d40ab44a59ce8a5b" prot="public">amrex::detail::invoke_result&lt; decltype(void(INVOKE(std::declval&lt; F &gt;(), std::declval&lt; Args &gt;()...))), F, Args... &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1IsConvertibleImp" prot="public">amrex::detail::IsConvertibleImp</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1IsConvertibleImp_3_01T_00_01U_00_01std_1_1enable__if__t_3_01is__convert835250fd1ee22d7499b01af822c5df97" prot="public">amrex::detail::IsConvertibleImp&lt; T, U, std::enable_if_t&lt; is_convertible&lt; T &gt;(U{})&gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1Nonesuch" prot="public">amrex::detail::Nonesuch</innerclass>
    <innerclass refid="classamrex_1_1detail_1_1SingleChunkArena" prot="public">amrex::detail::SingleChunkArena</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1SplitIndexList" prot="public">amrex::detail::SplitIndexList</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1tuple__cat__result" prot="public">amrex::detail::tuple_cat_result</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1tuple__cat__result_3_01GpuTuple_3_01T1s_8_8_8_01_4_00_01GpuTuple_3_01T2e7f956a9a5fbb5ccc01506013b6ed802" prot="public">amrex::detail::tuple_cat_result&lt; GpuTuple&lt; T1s... &gt;, GpuTuple&lt; T2s... &gt;, TPs... &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1tuple__cat__result_3_01GpuTuple_3_01Ts_8_8_8_01_4_01_4" prot="public">amrex::detail::tuple_cat_result&lt; GpuTuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1TypeListGet" prot="public">amrex::detail::TypeListGet</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1TypeListGet_3_010_00_01TypeList_3_01Head_00_01Tail_8_8_8_01_4_01_4" prot="public">amrex::detail::TypeListGet&lt; 0, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1TypeListGet_3_01I_00_01TypeList_3_01Head_00_01Tail_8_8_8_01_4_01_4" prot="public">amrex::detail::TypeListGet&lt; I, TypeList&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1unwrap" prot="public">amrex::detail::unwrap</innerclass>
    <innerclass refid="structamrex_1_1detail_1_1unwrap_3_01std_1_1reference__wrapper_3_01T_01_4_01_4" prot="public">amrex::detail::unwrap&lt; std::reference_wrapper&lt; T &gt; &gt;</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569d" prot="public" static="no" strong="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <name>ReduceOp</name>
        <qualifiedname>amrex::detail::ReduceOp</qualifiedname>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" prot="public">
          <name>max</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" prot="public">
          <name>min</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569dadb62579be9a4f3141fb640a655f49f52" prot="public">
          <name>sum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da9409354542db34fb149ecb3c91ebb8bd" prot="public">
          <name>lor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da1543dab5fc332f7f6a146da7718c486d" prot="public">
          <name>land</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="16" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="16" bodyend="22"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1_1detail_1aca8ebce069c1d3ef5f89482a9e96bb6d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structamrex_1_1detail_1_1unwrap" kindref="compound">unwrap</ref>&lt; std::decay_t&lt; T &gt; &gt;::type</type>
        <definition>using amrex::detail::tuple_decay_t = typedef typename unwrap&lt;std::decay_t&lt;T&gt; &gt;::type</definition>
        <argsstring></argsstring>
        <name>tuple_decay_t</name>
        <qualifiedname>amrex::detail::tuple_decay_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="245" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1detail_1a1fbad5ff9cc23fcc37c363d9d3bc0d94" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>using amrex::detail::Void_t = typedef void</definition>
        <argsstring></argsstring>
        <name>Void_t</name>
        <qualifiedname>amrex::detail::Void_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="146" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1detail_1ad9ffd55042a6573c492b8fc107951d12" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;()(std::declval&lt; Args &gt;()...))</type>
        <definition>using amrex::detail::call_result_t = typedef decltype(std::declval&lt;T&gt;()(std::declval&lt;Args&gt;()...))</definition>
        <argsstring></argsstring>
        <name>call_result_t</name>
        <qualifiedname>amrex::detail::call_result_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="188" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="188" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aaa2f442d8ea72f80f2d543e12c5f8a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename MF</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::detail::call_interp_hook</definition>
        <argsstring>(F const &amp;f, MF &amp;mf, int icomp, int ncomp) -&gt; decltype(f(mf[0], Box(), icomp, ncomp))</argsstring>
        <name>call_interp_hook</name>
        <qualifiedname>amrex::detail::call_interp_hook</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="10" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a1f1cf618eec93f3f663f4eab80c283a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; typename MF::FABType::value_type, FArrayBox &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>MF</type>
        <definition>MF amrex::detail::make_mf_crse_patch</definition>
        <argsstring>(FabArrayBase::FPinfo const &amp;fpc, int ncomp)</argsstring>
        <name>make_mf_crse_patch</name>
        <qualifiedname>amrex::detail::make_mf_crse_patch</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> const &amp;</type>
          <declname>fpc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="313" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="313" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a34a42876ed5cec17cb6852ce43b710b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; typename MF::FABType::value_type, FArrayBox &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>MF</type>
        <definition>MF amrex::detail::make_mf_crse_patch</definition>
        <argsstring>(FabArrayBase::FPinfo const &amp;fpc, int ncomp, IndexType idx_type)</argsstring>
        <name>make_mf_crse_patch</name>
        <qualifiedname>amrex::detail::make_mf_crse_patch</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> const &amp;</type>
          <declname>fpc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
          <declname>idx_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="324" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="324" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a10de83755b69f93f5403c69c1de02300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; typename MF::FABType::value_type, FArrayBox &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>MF</type>
        <definition>MF amrex::detail::make_mf_fine_patch</definition>
        <argsstring>(FabArrayBase::FPinfo const &amp;fpc, int ncomp)</argsstring>
        <name>make_mf_fine_patch</name>
        <qualifiedname>amrex::detail::make_mf_fine_patch</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> const &amp;</type>
          <declname>fpc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="335" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a2b92d0ed9f799213702e12a02f9585d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; typename MF::FABType::value_type, FArrayBox &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>MF</type>
        <definition>MF amrex::detail::make_mf_fine_patch</definition>
        <argsstring>(FabArrayBase::FPinfo const &amp;fpc, int ncomp, IndexType idx_type)</argsstring>
        <name>make_mf_fine_patch</name>
        <qualifiedname>amrex::detail::make_mf_fine_patch</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> const &amp;</type>
          <declname>fpc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
          <declname>idx_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="346" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="346" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a18788233897dcea378a821f83c7dd90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; typename MF::FABType::value_type, FArrayBox &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>MF</type>
        <definition>MF amrex::detail::make_mf_refined_patch</definition>
        <argsstring>(FabArrayBase::FPinfo const &amp;fpc, int ncomp, IndexType idx_type, IntVect ratio)</argsstring>
        <name>make_mf_refined_patch</name>
        <qualifiedname>amrex::detail::make_mf_refined_patch</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> const &amp;</type>
          <declname>fpc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
          <declname>idx_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="357" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="357" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a34617f70eaffc9dd42ef30e75602e4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; typename MF::FABType::value_type, FArrayBox &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>MF</type>
        <definition>MF amrex::detail::make_mf_crse_mask</definition>
        <argsstring>(FabArrayBase::FPinfo const &amp;fpc, int ncomp, IndexType idx_type, IntVect ratio)</argsstring>
        <name>make_mf_crse_mask</name>
        <qualifiedname>amrex::detail::make_mf_crse_mask</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> const &amp;</type>
          <declname>fpc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
          <declname>idx_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="368" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="368" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a12a52d34749a2924b4dc8f3d82f7f94d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; typename MF::FABType::value_type, FArrayBox &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::mf_set_domain_bndry</definition>
        <argsstring>(MF &amp;mf, Geometry const &amp;geom)</argsstring>
        <name>mf_set_domain_bndry</name>
        <qualifiedname>amrex::detail::mf_set_domain_bndry</qualifiedname>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="379" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a16008d0df1c03023495a12e6cd27e50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
          </param>
          <param>
            <type>typename PostInterpHook</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value, int &gt; amrex::detail::FillPatchTwoLevels_doit</definition>
        <argsstring>(MF &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; MF * &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; MF * &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp, const PostInterpHook &amp;post_interp, EB2::IndexSpace const *index_space, bool return_error_code=false)</argsstring>
        <name>FillPatchTwoLevels_doit</name>
        <qualifiedname>amrex::detail::FillPatchTwoLevels_doit</qualifiedname>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> const *</type>
          <declname>index_space</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_error_code</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="452" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="452" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a9752ed24083f36e84c25809fe1c66fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
          </param>
          <param>
            <type>typename PostInterpHook</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::detail::FillPatchTwoLevels_doit</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, const Array&lt; int, AMREX_SPACEDIM &gt; &amp;cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, const Array&lt; int, AMREX_SPACEDIM &gt; &amp;fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, const Array&lt; int, AMREX_SPACEDIM &gt; &amp;bcscomp, const PreInterpHook &amp;pre_interp, const PostInterpHook &amp;post_interp, EB2::IndexSpace const *index_space)</argsstring>
        <name>FillPatchTwoLevels_doit</name>
        <qualifiedname>amrex::detail::FillPatchTwoLevels_doit</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> const *</type>
          <declname>index_space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="625" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="625" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a5ad2e1914e7d42fdb76f380b4a29e2ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::detail::box_write</definition>
        <argsstring>(std::ostream &amp;os, const int *smallend, const int *bigend, const int *type, int dim)</argsstring>
        <name>box_write</name>
        <qualifiedname>amrex::detail::box_write</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>smallend</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>bigend</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" bodystart="20" bodyend="36" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" declline="1678" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a23e1d95e3ebccd77fdb4d988b280c0cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::detail::box_read</definition>
        <argsstring>(std::istream &amp;is, int *smallend, int *bigend, int *type, int dim)</argsstring>
        <name>box_read</name>
        <qualifiedname>amrex::detail::box_read</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>smallend</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>bigend</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" line="44" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" bodystart="44" bodyend="95" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" declline="1680" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1afba677c6302c38a725150f1a80736fff" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr auto amrex::detail::BoxSplit_imp</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, const T &amp;lo, const T &amp;hi, const U &amp;typ) noexcept</argsstring>
        <name>BoxSplit_imp</name>
        <qualifiedname>amrex::detail::BoxSplit_imp</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1684" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1684" bodyend="1687"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a8a6471ac95c2027491ef2aef47e2e988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>As</declname>
            <defname>As</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Fs</declname>
            <defname>Fs</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::detail::AnyCTO_helper2</definition>
        <argsstring>(const L &amp;l, TypeList&lt; As... &gt;, std::array&lt; int, sizeof...(As)&gt; const &amp;runtime_options, const Fs &amp;...cto_functs)</argsstring>
        <name>AnyCTO_helper2</name>
        <qualifiedname>amrex::detail::AnyCTO_helper2</qualifiedname>
        <param>
          <type>const L &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; As... &gt;</type>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, sizeof...(As)&gt; const &amp;</type>
          <declname>runtime_options</declname>
        </param>
        <param>
          <type>const Fs &amp;...</type>
          <declname>cto_functs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" line="47" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" bodystart="47" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a095902c599d3f8b4683acf1fc2dc43ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>PPs</declname>
            <defname>PPs</defname>
          </param>
          <param>
            <type>typename RO</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Fs</declname>
            <defname>Fs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::AnyCTO_helper1</definition>
        <argsstring>(const L &amp;l, TypeList&lt; PPs... &gt;, RO const &amp;runtime_options, const Fs &amp;...cto_functs)</argsstring>
        <name>AnyCTO_helper1</name>
        <qualifiedname>amrex::detail::AnyCTO_helper1</qualifiedname>
        <param>
          <type>const L &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; PPs... &gt;</type>
        </param>
        <param>
          <type>RO const &amp;</type>
          <declname>runtime_options</declname>
        </param>
        <param>
          <type>const Fs &amp;...</type>
          <declname>cto_functs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" line="67" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a83312fbf7153a7a17dd3edd3a1952734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt; T &gt; amrex::detail::complex_pow_unsigned</definition>
        <argsstring>(GpuComplex&lt; T &gt; a_z, unsigned a_n)</argsstring>
        <name>complex_pow_unsigned</name>
        <qualifiedname>amrex::detail::complex_pow_unsigned</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
          <declname>a_z</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>a_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="436" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="436" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa004283e3920e413c389c093161cad79" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::detail::call_f_scalar_handler</definition>
        <argsstring>(F const &amp;f, N i) noexcept -&gt; decltype(f(0))</argsstring>
        <name>call_f_scalar_handler</name>
        <qualifiedname>amrex::detail::call_f_scalar_handler</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>N</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="31" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 1 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 1 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="49" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="49" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a64ebcc6c0abdb545a519a9d378dca174" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 2 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 2 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="57" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a36c4819d0af66858bf09a3dd588fca74" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; dim &gt; iv, Args...args) noexcept -&gt; decltype(f(iv, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="65" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1abf33e4589ea5adab841f76cf4ba8fec2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_engine</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, RandomEngine engine) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, engine))</argsstring>
        <name>call_f_intvect_engine</name>
        <qualifiedname>amrex::detail::call_f_intvect_engine</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref></type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_handler</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv))</argsstring>
        <name>call_f_intvect_handler</name>
        <qualifiedname>amrex::detail::call_f_intvect_handler</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1acdccebd8d9e6a4c1db19363438a5cba2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_ncomp_engine</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, T n, RandomEngine engine) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, n, engine))</argsstring>
        <name>call_f_intvect_ncomp_engine</name>
        <qualifiedname>amrex::detail::call_f_intvect_ncomp_engine</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref></type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="111" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_ncomp_handler</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, T n) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, n))</argsstring>
        <name>call_f_intvect_ncomp_handler</name>
        <qualifiedname>amrex::detail::call_f_intvect_ncomp_handler</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="121" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a3fed1f766f2a246764a7880eecc640c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::detail::For_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>For_impND</name>
        <qualifiedname>amrex::detail::For_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="238" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="238" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1abbcccb7a439192126cc04a4980052d70" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::detail::ParallelFor_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>ParallelFor_impND</name>
        <qualifiedname>amrex::detail::ParallelFor_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="298" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="298" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1af64c8e0dcca83824d84b736217db75a6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::detail::For_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, T n) noexcept</argsstring>
        <name>For_impND</name>
        <qualifiedname>amrex::detail::For_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="361" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="361" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a9806a4f60e5ec27fadcda28a97df3806" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::detail::ParallelFor_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, T n) noexcept</argsstring>
        <name>ParallelFor_impND</name>
        <qualifiedname>amrex::detail::ParallelFor_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="423" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="423" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa9178db9a47be24aee36f3c72d0ed274" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::detail::ParallelForRNG_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv) noexcept</argsstring>
        <name>ParallelForRNG_impND</name>
        <qualifiedname>amrex::detail::ParallelForRNG_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1275" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1275" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a80bc7ba0eaf66754172d9d1d172eeacc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>idim</declname>
            <defname>idim</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::detail::ParallelForRNG_impND</definition>
        <argsstring>(L const &amp;f, IntVectND&lt; dim &gt; const lo, IntVectND&lt; dim &gt; const hi, IntVectND&lt; dim &gt; iv, T n) noexcept</argsstring>
        <name>ParallelForRNG_impND</name>
        <qualifiedname>amrex::detail::ParallelForRNG_impND</qualifiedname>
        <param>
          <type>L const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; const</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1301" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1301" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a90aaa100d2d55f47c63bf669ba307022" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_scalar_handler</definition>
        <argsstring>(F const &amp;f, N i, Gpu::Handler const &amp;) noexcept -&gt; decltype(f(0))</argsstring>
        <name>call_f_scalar_handler</name>
        <qualifiedname>amrex::detail::call_f_scalar_handler</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>N</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <defname>handler</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="13" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a1e5d59f318e4a3288329abfc2327ad9d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 1 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 1 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="31" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a7b0378fbfb01165d7ca8e1e379c43f81" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; 2 &gt; iv, Args...args) noexcept -&gt; decltype(f(0, 0, 0, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; 2 &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="39" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a5c97e24447d9887bed04b8e7ecf13cc8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_inner</definition>
        <argsstring>(std::index_sequence&lt; Ns... &gt;, F const &amp;f, IntVectND&lt; dim &gt; iv, Args...args) noexcept -&gt; decltype(f(iv, args...))</argsstring>
        <name>call_f_intvect_inner</name>
        <qualifiedname>amrex::detail::call_f_intvect_inner</qualifiedname>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="47" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa05aeb114ce9ecd66760d831ae2471f8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv))</argsstring>
        <name>call_f_intvect</name>
        <qualifiedname>amrex::detail::call_f_intvect</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="65" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1acd22cc8e7edfa53f2cf129c76d8745ea" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_engine</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, RandomEngine engine) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, engine))</argsstring>
        <name>call_f_intvect_engine</name>
        <qualifiedname>amrex::detail::call_f_intvect_engine</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref></type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="75" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a405f588558bf5afc228a55ebe21303a1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_handler</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, Gpu::Handler const &amp;) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv))</argsstring>
        <name>call_f_intvect_handler</name>
        <qualifiedname>amrex::detail::call_f_intvect_handler</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <defname>handler</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a9724b4915ce5a6c9e9766a4e0a221723" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_ncomp</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, T ncomp) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, 0))</argsstring>
        <name>call_f_intvect_ncomp</name>
        <qualifiedname>amrex::detail::call_f_intvect_ncomp</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1af281321d89351c33fe9ac9804527741a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_ncomp_engine</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, T ncomp, RandomEngine engine) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, 0, engine))</argsstring>
        <name>call_f_intvect_ncomp_engine</name>
        <qualifiedname>amrex::detail::call_f_intvect_ncomp_engine</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref></type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="115" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a2c5b6087ddf712ba78b4adb8a1baea78" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE auto amrex::detail::call_f_intvect_ncomp_handler</definition>
        <argsstring>(F const &amp;f, IntVectND&lt; dim &gt; iv, T ncomp, Gpu::Handler const &amp;) noexcept -&gt; decltype(call_f_intvect_inner(std::make_index_sequence&lt; dim &gt;(), f, iv, 0))</argsstring>
        <name>call_f_intvect_ncomp_handler</name>
        <qualifiedname>amrex::detail::call_f_intvect_ncomp_handler</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref> const &amp;</type>
          <defname>handler</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="127" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="127" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ab00f37e64a03e8049a6890215b22817a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::detail::index_type_write</definition>
        <argsstring>(std::ostream &amp;os, const unsigned int &amp;iv, int dim)</argsstring>
        <name>index_type_write</name>
        <qualifiedname>amrex::detail::index_type_write</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" bodystart="10" bodyend="23" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" declline="254" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ae1db1fc5feb5005eee61aeeeb926a478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::detail::index_type_read</definition>
        <argsstring>(std::istream &amp;is, unsigned int &amp;iv, int dim)</argsstring>
        <name>index_type_read</name>
        <qualifiedname>amrex::detail::index_type_read</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" bodystart="31" bodyend="49" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" declline="255" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1acd664d5efff72dae0a5b31f4a05ea09d" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::detail::IndexTypeSplit_imp</definition>
        <argsstring>(T &amp;retval, std::index_sequence&lt; Ns... &gt;, unsigned int src) noexcept</argsstring>
        <name>IndexTypeSplit_imp</name>
        <qualifiedname>amrex::detail::IndexTypeSplit_imp</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>retval</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" line="259" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" bodystart="259" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a447b3a82196abd5e97f2cec9f53d466b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::detail::int_vector_write</definition>
        <argsstring>(std::ostream &amp;os, const int *iv, int dim)</argsstring>
        <name>int_vector_write</name>
        <qualifiedname>amrex::detail::int_vector_write</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="13" bodyend="24" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" declline="1100" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a10cf5f494efe193085325d416a180ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::detail::int_vector_read</definition>
        <argsstring>(std::istream &amp;is, int *iv, int dim)</argsstring>
        <name>int_vector_read</name>
        <qualifiedname>amrex::detail::int_vector_read</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" line="29" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="29" bodyend="64" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" declline="1101" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a3cf8fbdb3e7ca85143aa87208bcf4150" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr void amrex::detail::IntVectCat_imp</definition>
        <argsstring>(int *&amp;dst, const IntVectND&lt; dim &gt; &amp;src) noexcept</argsstring>
        <name>IntVectCat_imp</name>
        <qualifiedname>amrex::detail::IntVectCat_imp</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *&amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="1105" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="1105" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa5b5b0ea1c9328e169b2f95848868a75" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr void amrex::detail::IntVectSplit_imp2</definition>
        <argsstring>(IntVectND&lt; dim &gt; &amp;dst, const int *&amp;src) noexcept</argsstring>
        <name>IntVectSplit_imp2</name>
        <qualifiedname>amrex::detail::IntVectSplit_imp2</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *&amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="1114" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="1114" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a19624f52fdf52e40edcc90ba71de2afb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::detail::IntVectSplit_imp</definition>
        <argsstring>(T &amp;retval, std::index_sequence&lt; Ns... &gt;, const int *src) noexcept</argsstring>
        <name>IntVectSplit_imp</name>
        <qualifiedname>amrex::detail::IntVectSplit_imp</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>retval</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="1123" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="1123" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a212330747d8eef18497f7b5aa65c40f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int...</type>
            <declname>dims</declname>
            <defname>dims</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr int amrex::detail::get_sum</definition>
        <argsstring>()</argsstring>
        <name>get_sum</name>
        <qualifiedname>amrex::detail::get_sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="1130" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="1130" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ae20e7a35360b4e186c0ebe376b80b551" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::detail::build_par_for_boxes</definition>
        <argsstring>(char *&amp;hp, BoxIndexer *&amp;pboxes, Vector&lt; Box &gt; const &amp;boxes)</argsstring>
        <name>build_par_for_boxes</name>
        <qualifiedname>amrex::detail::build_par_for_boxes</qualifiedname>
        <param>
          <type>char *&amp;</type>
          <declname>hp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1aac7253360db8634d12242f7237ff2af1" kindref="member">BoxIndexer</ref> *&amp;</type>
          <declname>pboxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; const &amp;</type>
          <declname>boxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" line="15" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" bodystart="15" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a65f4c73661780b56c58b697f491395e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::detail::destroy_par_for_boxes</definition>
        <argsstring>(char *hp, char *dp)</argsstring>
        <name>destroy_par_for_boxes</name>
        <qualifiedname>amrex::detail::destroy_par_for_boxes</qualifiedname>
        <param>
          <type>char *</type>
          <declname>hp</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" line="32" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a000ed35d0c246f3d833140b732696dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::reduce_to_plane</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;ar, int direction, Box const &amp;bx, int box_no, F const &amp;f)</argsstring>
        <name>reduce_to_plane</name>
        <qualifiedname>amrex::detail::reduce_to_plane</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>box_no</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="1201" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="1201" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ade17c15318059947f1833b705cea0bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename FA</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>FA</type>
        <definition>FA amrex::detail::reduce_to_plane</definition>
        <argsstring>(int direction, Box const &amp;domain, FA const &amp;mf, F const &amp;f)</argsstring>
        <name>reduce_to_plane</name>
        <qualifiedname>amrex::detail::reduce_to_plane</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>FA const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="1321" column="4" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="1321" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a2d9a622392a0eee879ac8180cb2371e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Reduce</definition>
        <argsstring>(ReduceOp, T *, int, int, MPI_Comm)</argsstring>
        <name>Reduce</name>
        <qualifiedname>amrex::detail::Reduce</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569d" kindref="member">ReduceOp</ref></type>
        </param>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1mpidatatypes_1a30fa228956d7a68a0c604ae5f2163db9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="92" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a11b496ac41b8e46fe7f1adf74392dcfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Reduce</definition>
        <argsstring>(ReduceOp, T &amp;, int, MPI_Comm)</argsstring>
        <name>Reduce</name>
        <qualifiedname>amrex::detail::Reduce</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569d" kindref="member">ReduceOp</ref></type>
        </param>
        <param>
          <type>T &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1mpidatatypes_1a30fa228956d7a68a0c604ae5f2163db9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="93" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a59bb763ea3df042d86d6906cc9ccfc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Reduce</definition>
        <argsstring>(ReduceOp, Vector&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;, int, MPI_Comm)</argsstring>
        <name>Reduce</name>
        <qualifiedname>amrex::detail::Reduce</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569d" kindref="member">ReduceOp</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1mpidatatypes_1a30fa228956d7a68a0c604ae5f2163db9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="94" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a6ea7eeaafa369d6246da405045b73208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Gather</definition>
        <argsstring>(const T *, int, T *, int, MPI_Comm)</argsstring>
        <name>Gather</name>
        <qualifiedname>amrex::detail::Gather</qualifiedname>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1mpidatatypes_1a30fa228956d7a68a0c604ae5f2163db9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="96" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aac087974da543982e53f9b3f1da42005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::Gather</definition>
        <argsstring>(const T &amp;, T *, int, MPI_Comm)</argsstring>
        <name>Gather</name>
        <qualifiedname>amrex::detail::Gather</qualifiedname>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1mpidatatypes_1a30fa228956d7a68a0c604ae5f2163db9" kindref="member">MPI_Comm</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" line="97" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelReduce.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ac21ab25e49c31a58b678ab25626397d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::detail::amrex_partition_helper</definition>
        <argsstring>(T const *AMREX_RESTRICT pv, T *AMREX_RESTRICT pv2, int n, F &amp;&amp;f)</argsstring>
        <name>amrex_partition_helper</name>
        <qualifiedname>amrex::detail::amrex_partition_helper</qualifiedname>
        <param>
          <type>T const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>pv</declname>
        </param>
        <param>
          <type>T *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>pv2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="18" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="18" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a685da3e1082796b88fdcd226e6cd923d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::amrex_stable_partition_helper</definition>
        <argsstring>(T *p, int n2)</argsstring>
        <name>amrex_stable_partition_helper</name>
        <qualifiedname>amrex::detail::amrex_stable_partition_helper</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="46" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="46" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ac05b5bef8cc6ac4861152e46104f68f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Size</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Allocator</declname>
            <defname>Allocator</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1FatPtr" kindref="compound">FatPtr</ref>&lt; T &gt;</type>
        <definition>FatPtr&lt; T &gt; amrex::detail::allocate_in_place</definition>
        <argsstring>(T *p, Size nmin, Size nmax, Allocator&lt; T &gt; &amp;allocator)</argsstring>
        <name>allocate_in_place</name>
        <qualifiedname>amrex::detail::allocate_in_place</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>nmin</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>nmax</declname>
        </param>
        <param>
          <type>Allocator&lt; T &gt; &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="24" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="24" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a8d163044e732afdda53677c7dddd9c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Size</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Allocator</declname>
            <defname>Allocator</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * amrex::detail::shrink_in_place</definition>
        <argsstring>(T *p, Size n, Allocator&lt; T &gt; &amp;allocator)</argsstring>
        <name>shrink_in_place</name>
        <qualifiedname>amrex::detail::shrink_in_place</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Allocator&lt; T &gt; &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="36" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a81336d236fd79da01826419cf5cd2a10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Size</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Allocator</declname>
            <defname>Allocator</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::uninitializedFillNImpl</definition>
        <argsstring>(T *data, Size count, const T &amp;value, Allocator&lt; T &gt; const &amp;allocator)</argsstring>
        <name>uninitializedFillNImpl</name>
        <qualifiedname>amrex::detail::uninitializedFillNImpl</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Allocator&lt; T &gt; const &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="46" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="46" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ad0a751c8706e531d0cd3f1b5058cfdd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Allocator</declname>
            <defname>Allocator</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::initFromListImpl</definition>
        <argsstring>(T *data, std::initializer_list&lt; T &gt; const &amp;list, Allocator&lt; T &gt; const &amp;allocator)</argsstring>
        <name>initFromListImpl</name>
        <qualifiedname>amrex::detail::initFromListImpl</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; T &gt; const &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>Allocator&lt; T &gt; const &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="84" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="84" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a62c08f90753df00eb337b5fb354dbb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Size</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Allocator</declname>
            <defname>Allocator</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::fillValuesImpl</definition>
        <argsstring>(T *dst, T const *src, Size count, Allocator&lt; T &gt; const &amp;allocator)</argsstring>
        <name>fillValuesImpl</name>
        <qualifiedname>amrex::detail::fillValuesImpl</qualifiedname>
        <param>
          <type>T *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Allocator&lt; T &gt; const &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="110" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="110" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a3b9bb314f62122cb2a6f053b49e8850d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Allocator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::memCopyImpl</definition>
        <argsstring>(void *dst, const void *src, std::size_t count, Allocator const &amp;dst_allocator, Allocator const &amp;src_allocator, bool sync=true)</argsstring>
        <name>memCopyImpl</name>
        <qualifiedname>amrex::detail::memCopyImpl</qualifiedname>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Allocator const &amp;</type>
          <declname>dst_allocator</declname>
        </param>
        <param>
          <type>Allocator const &amp;</type>
          <declname>src_allocator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="152" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="152" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa96357c6317510d47b48c850a6369421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Allocator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::memMoveImpl</definition>
        <argsstring>(void *dst, const void *src, std::size_t count, Allocator const &amp;allocator)</argsstring>
        <name>memMoveImpl</name>
        <qualifiedname>amrex::detail::memMoveImpl</qualifiedname>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Allocator const &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="188" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="188" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1acaad82f4281e3a1b6691574774731430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Size</type>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>Allocator</declname>
            <defname>Allocator</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::maybe_init_snan</definition>
        <argsstring>(T *data, Size count, Allocator&lt; T &gt; const &amp;allocator)</argsstring>
        <name>maybe_init_snan</name>
        <qualifiedname>amrex::detail::maybe_init_snan</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Allocator&lt; T &gt; const &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="219" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="219" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1afd0b9d029d68b514e004d7c4fccfbe42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ULong</type>
        <definition>ULong amrex::detail::DefaultGpuSeed</definition>
        <argsstring>()</argsstring>
        <name>DefaultGpuSeed</name>
        <qualifiedname>amrex::detail::DefaultGpuSeed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="239" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a177c7c95c391c6f66768e9941de3f5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::detail::real_vector_write</definition>
        <argsstring>(std::ostream &amp;os, const Real *p, int dim)</argsstring>
        <name>real_vector_write</name>
        <qualifiedname>amrex::detail::real_vector_write</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" line="7" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="7" bodyend="18" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" declline="1140" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1af8b32f47381c856a24526c7094f59b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::detail::real_vector_read</definition>
        <argsstring>(std::istream &amp;is, Real *p, int dim)</argsstring>
        <name>real_vector_read</name>
        <qualifiedname>amrex::detail::real_vector_read</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="23" bodyend="58" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" declline="1141" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa47c9843db0439d93e761932252724a9" prot="protected" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr void amrex::detail::RealVectCat_imp</definition>
        <argsstring>(Real *&amp;dst, const RealVectND&lt; dim &gt; &amp;src) noexcept</argsstring>
        <name>RealVectCat_imp</name>
        <qualifiedname>amrex::detail::RealVectCat_imp</qualifiedname>
        <param>
          <type>Real *&amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1145" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1145" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a4a94ec9593eec5537df7f9e8a75b03fb" prot="protected" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr void amrex::detail::RealVectSplit_imp2</definition>
        <argsstring>(RealVectND&lt; dim &gt; &amp;dst, const Real *&amp;src) noexcept</argsstring>
        <name>RealVectSplit_imp2</name>
        <qualifiedname>amrex::detail::RealVectSplit_imp2</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Real *&amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1154" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1154" bodyend="1159"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a72664be26417579880fe6ac83e7c7122" prot="protected" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Ns</declname>
            <defname>Ns</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::detail::RealVectSplit_imp</definition>
        <argsstring>(T &amp;retval, std::index_sequence&lt; Ns... &gt;, const Real *src) noexcept</argsstring>
        <name>RealVectSplit_imp</name>
        <qualifiedname>amrex::detail::RealVectSplit_imp</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>retval</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Ns... &gt;</type>
        </param>
        <param>
          <type>const Real *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1163" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1163" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1abe68fd4d68114add4f550c526d2990ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Order</type>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Table1D" kindref="compound">Table1D</ref>&lt; T &gt;</type>
        <definition>Table1D&lt; T &gt; amrex::detail::make_table</definition>
        <argsstring>(T *p, Array&lt; int, 1 &gt; const &amp;lo, Array&lt; int, 1 &gt; const &amp;hi)</argsstring>
        <name>make_table</name>
        <qualifiedname>amrex::detail::make_table</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 1 &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 1 &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="585" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="585" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a825923f56b431f9f68e2324130da23e9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Order</type>
            <declname>ORDER</declname>
            <defname>ORDER</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Table2D" kindref="compound">Table2D</ref>&lt; T, ORDER &gt;</type>
        <definition>Table2D&lt; T, ORDER &gt; amrex::detail::make_table</definition>
        <argsstring>(T *p, Array&lt; int, 2 &gt; const &amp;lo, Array&lt; int, 2 &gt; const &amp;hi)</argsstring>
        <name>make_table</name>
        <qualifiedname>amrex::detail::make_table</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 2 &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 2 &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="589" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="589" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a79896a63aa04eece86eb047f77ccd396" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Order</type>
            <declname>ORDER</declname>
            <defname>ORDER</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Table3D" kindref="compound">Table3D</ref>&lt; T &gt;</type>
        <definition>Table3D&lt; T &gt; amrex::detail::make_table</definition>
        <argsstring>(T *p, Array&lt; int, 3 &gt; const &amp;lo, Array&lt; int, 3 &gt; const &amp;hi)</argsstring>
        <name>make_table</name>
        <qualifiedname>amrex::detail::make_table</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 3 &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 3 &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="593" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="593" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a73a59f21468276881c4b934eee14e100" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Order</type>
            <declname>ORDER</declname>
            <defname>ORDER</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Table4D" kindref="compound">Table4D</ref>&lt; T &gt;</type>
        <definition>Table4D&lt; T &gt; amrex::detail::make_table</definition>
        <argsstring>(T *p, Array&lt; int, 4 &gt; const &amp;lo, Array&lt; int, 4 &gt; const &amp;hi)</argsstring>
        <name>make_table</name>
        <qualifiedname>amrex::detail::make_table</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 4 &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 4 &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" line="597" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TableData.H" bodystart="597" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a5dabf23fc1d6b0482df819bdd5d465c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::detail::get_tag_size</definition>
        <argsstring>(T const &amp;tag) noexcept</argsstring>
        <name>get_tag_size</name>
        <qualifiedname>amrex::detail::get_tag_size</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" line="128" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1af326bd0d976be857a654524dde9d94b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::detail::is_box_tag</definition>
        <argsstring>(T const &amp;)</argsstring>
        <name>is_box_tag</name>
        <qualifiedname>amrex::detail::is_box_tag</qualifiedname>
        <param>
          <type>T const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" line="145" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a993d7b3ea476f2a40be00ab6a5199d1e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::detail::tagparfor_call_f</definition>
        <argsstring>(int icell, T const &amp;tag, F &amp;&amp;f) noexcept</argsstring>
        <name>tagparfor_call_f</name>
        <qualifiedname>amrex::detail::tagparfor_call_f</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icell</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" line="311" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" bodystart="311" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a7a5a3206b9f94dfe494007e74436e178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagType</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::ParallelFor_doit</definition>
        <argsstring>(TagVector&lt; TagType &gt; const &amp;tv, F const &amp;f)</argsstring>
        <name>ParallelFor_doit</name>
        <qualifiedname>amrex::detail::ParallelFor_doit</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1TagVector" kindref="compound">TagVector</ref>&lt; TagType &gt; const &amp;</type>
          <declname>tv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" line="352" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" bodystart="352" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a9c34cacdb9e743c69a70b8faacfa73da" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type &amp; amrex::detail::get_impl</definition>
        <argsstring>(detail::gpu_tuple_element&lt; I, typename GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type &gt; &amp;te) noexcept</argsstring>
        <name>get_impl</name>
        <qualifiedname>amrex::detail::get_impl</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1detail_1_1gpu__tuple__element" kindref="compound">detail::gpu_tuple_element</ref>&lt; I, typename <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &gt; &amp;</type>
          <declname>te</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a12b3f22e2b63011a15fa992a6537e407" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type const &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type const  &amp; amrex::detail::get_impl</definition>
        <argsstring>(detail::gpu_tuple_element&lt; I, typename GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type &gt; const &amp;te) noexcept</argsstring>
        <name>get_impl</name>
        <qualifiedname>amrex::detail::get_impl</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1detail_1_1gpu__tuple__element" kindref="compound">detail::gpu_tuple_element</ref>&lt; I, typename <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &gt; const &amp;</type>
          <declname>te</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a9ecc057679e58157ef83b2ae8e32b501" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &amp;&amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type &amp;&amp; amrex::detail::get_impl</definition>
        <argsstring>(detail::gpu_tuple_element&lt; I, typename GpuTupleElement&lt; I, GpuTuple&lt; Ts... &gt; &gt;::type &gt; &amp;&amp;te) noexcept</argsstring>
        <name>get_impl</name>
        <qualifiedname>amrex::detail::get_impl</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1detail_1_1gpu__tuple__element" kindref="compound">detail::gpu_tuple_element</ref>&lt; I, typename <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &gt; &amp;&amp;</type>
          <declname>te</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="167" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a4d8bd6131b31ad2784f287c4b81f5e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> std::enable_if_t&lt;(I&lt; N-1), void &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE std::enable_if_t&lt;(I&lt; N-1), void &gt; amrex::detail::tuple_copy</definition>
        <argsstring>(TP1 &amp;a, TP2 &amp;&amp;b)</argsstring>
        <name>tuple_copy</name>
        <qualifiedname>amrex::detail::tuple_copy</qualifiedname>
        <param>
          <type>TP1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="206" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="206" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1abd33986be7a7b01156ee2e81dfe2e73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> std::enable_if_t&lt; I==N-1, void &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE std::enable_if_t&lt; I==N-1, void &gt; amrex::detail::tuple_copy</definition>
        <argsstring>(TP1 &amp;a, TP2 &amp;&amp;b)</argsstring>
        <name>tuple_copy</name>
        <qualifiedname>amrex::detail::tuple_copy</qualifiedname>
        <param>
          <type>TP1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="215" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ac1af99af88b3a8137ece92c113410041" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>N1</declname>
            <defname>N1</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr R</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr R amrex::detail::make_tuple</definition>
        <argsstring>(TP1 const &amp;a, TP2 const &amp;b, std::index_sequence&lt; N1... &gt; const &amp;, std::index_sequence&lt; N2... &gt; const &amp;)</argsstring>
        <name>make_tuple</name>
        <qualifiedname>amrex::detail::make_tuple</qualifiedname>
        <param>
          <type>TP1 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; N1... &gt; const &amp;</type>
        </param>
        <param>
          <type>std::index_sequence&lt; N2... &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="274" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1acc454a2126927ee94899960756cf8fff" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>start</declname>
            <defname>start</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::detail::GetSubTuple</definition>
        <argsstring>(const GpuTuple&lt; Args... &gt; &amp;tup, std::index_sequence&lt; Is... &gt;) noexcept</argsstring>
        <name>GetSubTuple</name>
        <qualifiedname>amrex::detail::GetSubTuple</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Args... &gt; &amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="346" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa4903f499d13cca99a61de4f1edb8efe" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
          <param>
            <type>typename SIL</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::detail::TupleSplitImp</definition>
        <argsstring>(const GpuTuple&lt; Args... &gt; &amp;tup, std::index_sequence&lt; Is... &gt;, SIL) noexcept</argsstring>
        <name>TupleSplitImp</name>
        <qualifiedname>amrex::detail::TupleSplitImp</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Args... &gt; &amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <param>
          <type>SIL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="354" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="354" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1af2dd4ad4f928e269d1bc2dce24f48b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE auto amrex::detail::INVOKE</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; decltype(f(std::forward&lt; Args &gt;(args)...))</argsstring>
        <name>INVOKE</name>
        <qualifiedname>amrex::detail::INVOKE</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="388" column="10" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" declline="388" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1adc2850adfe9cf5541d06a9605342718b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename TP</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::detail::apply_impl</definition>
        <argsstring>(F &amp;&amp;f, TP &amp;&amp;t, std::index_sequence&lt; N... &gt;) -&gt; typename detail::apply_result&lt; F, detail::tuple_decay_t&lt; TP &gt; &gt;::type</argsstring>
        <name>apply_impl</name>
        <qualifiedname>amrex::detail::apply_impl</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>TP &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; N... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="410" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="410" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ab56ff5fee72b0885f7433f367867986c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::detail::tuple_to_array_helper</definition>
        <argsstring>(T const &amp;tup, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>tuple_to_array_helper</name>
        <qualifiedname>amrex::detail::tuple_to_array_helper</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="463" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="463" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1af378b35270a3e9fbab911a6fe0058eb5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TL</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void amrex::detail::for_each_impl</definition>
        <argsstring>(F const &amp;f, std::index_sequence&lt; N... &gt;)</argsstring>
        <name>for_each_impl</name>
        <qualifiedname>amrex::detail::for_each_impl</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; N... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="37" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a8e84dd049acffc06333882e476f741ce" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TL</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::detail::for_each_until_impl</definition>
        <argsstring>(F const &amp;f, std::index_sequence&lt; N... &gt;)</argsstring>
        <name>for_each_until_impl</name>
        <qualifiedname>amrex::detail::for_each_until_impl</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; N... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="43" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ad867a3bb23fa15988044c68bf1266b7c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::detail::SingleTypeMultiplier_impl</definition>
        <argsstring>()</argsstring>
        <name>SingleTypeMultiplier_impl</name>
        <qualifiedname>amrex::detail::SingleTypeMultiplier_impl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="163" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="163" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1af01333ae8cd22a78600a759f8cc32089" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::detail::SingleTypeMultiplier</definition>
        <argsstring>(const T(&amp;)[N])</argsstring>
        <name>SingleTypeMultiplier</name>
        <qualifiedname>amrex::detail::SingleTypeMultiplier</qualifiedname>
        <param>
          <type>const </type>
          <declname>T</declname>
          <array>(&amp;)[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="178" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ad2a45b8966cebe365a3b497c9c9be44c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::detail::SingleTypeMultiplier</definition>
        <argsstring>(TypeArray&lt; T, N &gt;)</argsstring>
        <name>SingleTypeMultiplier</name>
        <qualifiedname>amrex::detail::SingleTypeMultiplier</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1TypeArray" kindref="compound">TypeArray</ref>&lt; T, N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="186" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ab5675d735314e418d7eb80a17ef3f135" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::detail::SingleTypeMultiplier</definition>
        <argsstring>(T)</argsstring>
        <name>SingleTypeMultiplier</name>
        <qualifiedname>amrex::detail::SingleTypeMultiplier</qualifiedname>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="192" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ad5568d6d500edc6ee5938dca76c1caa8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>TParam</declname>
            <defname>TParam</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::detail::TApply</definition>
        <argsstring>(TypeList&lt; Args... &gt;)</argsstring>
        <name>TApply</name>
        <qualifiedname>amrex::detail::TApply</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Args... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="198" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a49e77dfdb351e7ec62381480eb764922" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::detail::is_convertible</definition>
        <argsstring>(T)</argsstring>
        <name>is_convertible</name>
        <qualifiedname>amrex::detail::is_convertible</qualifiedname>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="246" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ac52a7c80af5bdb3acbe7530033d68f5c" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr decltype((std::declval&lt; T &gt;().<ref refid="namespaceamrex_1abf1d4578d3f20a3f5b2d2d74c8c90af6" kindref="member">begin</ref>(), std::declval&lt; T &gt;().<ref refid="namespaceamrex_1a68910ee43a4d4544d54a2a6fe26454e2" kindref="member">end</ref>(), true))</type>
        <definition>constexpr decltype((std::declval&lt; T &gt;().begin(), std::declval&lt; T &gt;().end(), true)) amrex::detail::HasBeginEnd</definition>
        <argsstring>()</argsstring>
        <name>HasBeginEnd</name>
        <qualifiedname>amrex::detail::HasBeginEnd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="410" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a6d7c00c17d8f6f7a1cf248ac5c3a7006" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::detail::HasBeginEnd</definition>
        <argsstring>(Args...)</argsstring>
        <name>HasBeginEnd</name>
        <qualifiedname>amrex::detail::HasBeginEnd</qualifiedname>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="414" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="414" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a8ce08b35d21afcf9bc5bd424932d62e1" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr decltype((std::tuple_size&lt; T &gt;::value, true))</type>
        <definition>constexpr decltype((std::tuple_size&lt; T &gt;::value, true)) amrex::detail::HasTupleSize</definition>
        <argsstring>()</argsstring>
        <name>HasTupleSize</name>
        <qualifiedname>amrex::detail::HasTupleSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="420" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="420" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a74a3c98b4c5c5aed1b2fbc13a26109a2" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::detail::HasTupleSize</definition>
        <argsstring>(Args...)</argsstring>
        <name>HasTupleSize</name>
        <qualifiedname>amrex::detail::HasTupleSize</qualifiedname>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="424" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="424" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a2cefaaa5d889b064cd258d0365763274" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>idx</declname>
            <defname>idx</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::ToStringTupleImp</definition>
        <argsstring>(std::index_sequence&lt; idx... &gt;, std::ostream &amp;os, const T &amp;t, const char *symbol_begin, const char *symbol_delim, const char *symbol_end, const char *symbol_str, int limit)</argsstring>
        <name>ToStringTupleImp</name>
        <qualifiedname>amrex::detail::ToStringTupleImp</qualifiedname>
        <param>
          <type>std::index_sequence&lt; idx... &gt;</type>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>symbol_begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>symbol_delim</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>symbol_end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>symbol_str</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="430" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="430" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ae9c414dd7bc47e48d6fe4e6361b1b723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::detail::removeDupDoit</definition>
        <argsstring>(Vector&lt; T &gt; &amp;vec, std::size_t start, std::size_t stop)</argsstring>
        <name>removeDupDoit</name>
        <qualifiedname>amrex::detail::removeDupDoit</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="216" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="216" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa3870bf45fd14f87c3674a996cae2752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::read_fab</definition>
        <argsstring>(FAB &amp;fab, VisMF::FabOnDisk const &amp;fod, std::string const &amp;name)</argsstring>
        <name>read_fab</name>
        <qualifiedname>amrex::detail::read_fab</qualifiedname>
        <param>
          <type>FAB &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> const &amp;</type>
          <declname>fod</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" line="532" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" bodystart="532" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1aa62287d7ded7d4e0e10300835ed32d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1a84466765b78f04404d1d42c19ee85657" kindref="member">RealVect</ref></type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE RealVect amrex::detail::facets_nearest_pt</definition>
        <argsstring>(IntVect const &amp;ind_pt, IntVect const &amp;ind_loop, RealVect const &amp;r_vec, RealVect const &amp;eb_normal, RealVect const &amp;eb_p0, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx)</argsstring>
        <name>facets_nearest_pt</name>
        <qualifiedname>amrex::detail::facets_nearest_pt</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ind_pt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ind_loop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a84466765b78f04404d1d42c19ee85657" kindref="member">RealVect</ref> const &amp;</type>
          <declname>r_vec</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a84466765b78f04404d1d42c19ee85657" kindref="member">RealVect</ref> const &amp;</type>
          <declname>eb_normal</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a84466765b78f04404d1d42c19ee85657" kindref="member">RealVect</ref> const &amp;</type>
          <declname>eb_p0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.cpp" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.cpp" bodystart="30" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a552276d715b5fb007fa8045a2f8dc713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::detail::comp_bf</definition>
        <argsstring>(Real &amp;bf1, Real &amp;bf2, Real sb, Real h, int bct, Real bcl, int bho)</argsstring>
        <name>comp_bf</name>
        <qualifiedname>amrex::detail::comp_bf</qualifiedname>
        <param>
          <type>Real &amp;</type>
          <declname>bf1</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>bf2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_K.H" line="11" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_K.H" bodystart="11" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a63f67f333c651c923c2d3eaf7b0a15aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::detail::comp_bflo</definition>
        <argsstring>(Real &amp;bf1, Real &amp;bf2, Real &amp;bflo, Real sb, Real h, int bct, Real bcl, int bho)</argsstring>
        <name>comp_bflo</name>
        <qualifiedname>amrex::detail::comp_bflo</qualifiedname>
        <param>
          <type>Real &amp;</type>
          <declname>bf1</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>bf2</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>bflo</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_K.H" line="34" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_K.H" bodystart="34" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1ab8aa339fca5416d16202578d9560f96d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::pack_matrix_gpu</definition>
        <argsstring>(Gpu::DeviceVector&lt; HYPRE_Int &gt; &amp;cols_tmp, Gpu::DeviceVector&lt; HYPRE_Real &gt; mat_tmp, Gpu::DeviceVector&lt; HYPRE_Int &gt; &amp;cols, Gpu::DeviceVector&lt; HYPRE_Real &gt; &amp;mat)</argsstring>
        <name>pack_matrix_gpu</name>
        <qualifiedname>amrex::detail::pack_matrix_gpu</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; HYPRE_Int &gt; &amp;</type>
          <declname>cols_tmp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; HYPRE_Real &gt;</type>
          <declname>mat_tmp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; HYPRE_Int &gt; &amp;</type>
          <declname>cols</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; HYPRE_Real &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_HypreSolver.H" line="449" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_HypreSolver.H" bodystart="449" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a291f4a64951d7b0faabda32ef45084f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LP</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::detail::applyRobinBCTermsCoeffs</definition>
        <argsstring>(LP &amp;linop)</argsstring>
        <name>applyRobinBCTermsCoeffs</name>
        <qualifiedname>amrex::detail::applyRobinBCTermsCoeffs</qualifiedname>
        <param>
          <type>LP &amp;</type>
          <declname>linop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="488" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="488" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a7df5de70f7ab58e32c467a66af4fdbd9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename SrcData</type>
          </param>
          <param>
            <type>typename DstData</type>
          </param>
          <param>
            <type>typename N1</type>
          </param>
          <param>
            <type>typename N2</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE auto amrex::detail::call_check_pair</definition>
        <argsstring>(F const &amp;check_pair, const SrcData &amp;src_tile, const DstData &amp;dst_tile, N1 i, N2 j) noexcept -&gt; decltype(check_pair(src_tile.m_aos[i], dst_tile.m_aos[j]))</argsstring>
        <name>call_check_pair</name>
        <qualifiedname>amrex::detail::call_check_pair</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>check_pair</declname>
        </param>
        <param>
          <type>const SrcData &amp;</type>
          <declname>src_tile</declname>
        </param>
        <param>
          <type>const DstData &amp;</type>
          <declname>dst_tile</declname>
        </param>
        <param>
          <type>N1</type>
          <declname>i</declname>
        </param>
        <param>
          <type>N2</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborList.H" line="19" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborList.H" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a8a333f99592fcb77801eee6ae33eb42e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename SrcData</type>
          </param>
          <param>
            <type>typename DstData</type>
          </param>
          <param>
            <type>typename N1</type>
          </param>
          <param>
            <type>typename N2</type>
          </param>
          <param>
            <type>typename N3</type>
          </param>
          <param>
            <type>typename N4</type>
          </param>
          <param>
            <type>typename N5</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE auto amrex::detail::call_check_pair</definition>
        <argsstring>(F const &amp;check_pair, const SrcData &amp;src_tile, const DstData &amp;dst_tile, N1 i, N2 j, N3, N4, N5) noexcept -&gt; decltype(check_pair(src_tile.m_aos[i], dst_tile.m_aos[j]))</argsstring>
        <name>call_check_pair</name>
        <qualifiedname>amrex::detail::call_check_pair</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>check_pair</declname>
        </param>
        <param>
          <type>const SrcData &amp;</type>
          <declname>src_tile</declname>
        </param>
        <param>
          <type>const DstData &amp;</type>
          <declname>dst_tile</declname>
        </param>
        <param>
          <type>N1</type>
          <declname>i</declname>
        </param>
        <param>
          <type>N2</type>
          <declname>j</declname>
        </param>
        <param>
          <type>N3</type>
          <defname>type</defname>
        </param>
        <param>
          <type>N4</type>
          <defname>ghost_i</defname>
        </param>
        <param>
          <type>N5</type>
          <defname>ghost_pid</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborList.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborList.H" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1detail_1a01f595a1caf92d3d2db64fe8916e0011" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt;</type>
        <definition>Vector&lt; Box &gt; amrex::detail::getBoundaryBoxes</definition>
        <argsstring>(const Box &amp;box, int ncells)</argsstring>
        <name>getBoundaryBoxes</name>
        <qualifiedname>amrex::detail::getBoundaryBoxes</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncells</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" line="9" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" bodystart="9" bodyend="47"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="7" column="1"/>
  </compounddef>
</doxygen>
