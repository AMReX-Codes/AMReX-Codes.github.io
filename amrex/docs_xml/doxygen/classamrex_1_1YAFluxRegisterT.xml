<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1YAFluxRegisterT" kind="class" language="C++" prot="public">
    <compoundname>amrex::YAFluxRegisterT</compoundname>
    <derivedcompoundref refid="classamrex_1_1EBFluxRegister" prot="public" virt="non-virtual">amrex::EBFluxRegister</derivedcompoundref>
    <includes refid="AMReX__YAFluxRegister_8H" local="no">AMReX_YAFluxRegister.H</includes>
    <templateparamlist>
      <param>
        <type>typename MF</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1YAFluxRegisterT_1a98d014f8977101cb5406c3437897763c" prot="public" static="no" strong="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <name>CellType</name>
        <qualifiedname>amrex::YAFluxRegisterT::CellType</qualifiedname>
        <enumvalue id="classamrex_1_1YAFluxRegisterT_1a98d014f8977101cb5406c3437897763ca5c0ed298da0038126a31182eb1385392" prot="public">
          <name>crse_cell</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1YAFluxRegisterT_1a98d014f8977101cb5406c3437897763ca95ed02b2c9b5b5a936871917a0da3d52" prot="public">
          <name>crse_fine_boundary_cell</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1YAFluxRegisterT_1a98d014f8977101cb5406c3437897763ca4438d5a5594d291716164dd529a902cd" prot="public">
          <name>fine_cell</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="81" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1YAFluxRegisterT_1ae4ccc72afbdaefad1add5c84f52ded78" prot="public" static="no">
        <type>typename MF::value_type</type>
        <definition>using amrex::YAFluxRegisterT&lt; MF &gt;::T =  typename MF::value_type</definition>
        <argsstring></argsstring>
        <name>T</name>
        <qualifiedname>amrex::YAFluxRegisterT::T</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="31" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1YAFluxRegisterT_1a96ad5ba6f6b373c04d31d704bb04d872" prot="public" static="no">
        <type>typename MF::fab_type</type>
        <definition>using amrex::YAFluxRegisterT&lt; MF &gt;::FAB =  typename MF::fab_type</definition>
        <argsstring></argsstring>
        <name>FAB</name>
        <qualifiedname>amrex::YAFluxRegisterT::FAB</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="32" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a74b021a20514364f11e7f743cea7c0b4" prot="protected" static="no" mutable="no">
        <type>MF</type>
        <definition>MF amrex::YAFluxRegisterT&lt; MF &gt;::m_crse_data</definition>
        <argsstring></argsstring>
        <name>m_crse_data</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_crse_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="95" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a5a0318376def0681f878a9628db75930" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::YAFluxRegisterT&lt; MF &gt;::m_crse_flag</definition>
        <argsstring></argsstring>
        <name>m_crse_flag</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_crse_flag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="96" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a1bc7ad69316f063b0e10812ff7f06705" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::YAFluxRegisterT&lt; MF &gt;::m_crse_fab_flag</definition>
        <argsstring></argsstring>
        <name>m_crse_fab_flag</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_crse_fab_flag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="97" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a266eca2069ccb69be79badf962e3902b" prot="protected" static="no" mutable="no">
        <type>MF</type>
        <definition>MF amrex::YAFluxRegisterT&lt; MF &gt;::m_cfpatch</definition>
        <argsstring></argsstring>
        <name>m_cfpatch</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_cfpatch</qualifiedname>
        <briefdescription>
<para>This is built on crse/fine patches. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="99" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1ad0aa87622ba3aa5a30c21fe56eeb3c33" prot="protected" static="no" mutable="no">
        <type>MF</type>
        <definition>MF amrex::YAFluxRegisterT&lt; MF &gt;::m_cfp_mask</definition>
        <argsstring></argsstring>
        <name>m_cfp_mask</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_cfp_mask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="100" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a166ac40711474ecc9d054bdf63632675" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1YAFluxRegisterT_1a96ad5ba6f6b373c04d31d704bb04d872" kindref="member">FAB</ref> * &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;FAB*&gt; &gt; amrex::YAFluxRegisterT&lt; MF &gt;::m_cfp_fab</definition>
        <argsstring></argsstring>
        <name>m_cfp_fab</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_cfp_fab</qualifiedname>
        <briefdescription>
<para>The size of this is (# of local fine grids (# of crse/fine patches for that grid)) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="101" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1ad3d68c63ff831153ffc01bf39298a1fe" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::YAFluxRegisterT&lt; MF &gt;::m_cfp_localindex</definition>
        <argsstring></argsstring>
        <name>m_cfp_localindex</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_cfp_localindex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="102" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a3597f5caa96ed6c401d35158a5228fa7" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::YAFluxRegisterT&lt; MF &gt;::m_fine_geom</definition>
        <argsstring></argsstring>
        <name>m_fine_geom</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_fine_geom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="104" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a7563f9f354215d32467cc8b6f3e83ad3" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::YAFluxRegisterT&lt; MF &gt;::m_crse_geom</definition>
        <argsstring></argsstring>
        <name>m_crse_geom</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_crse_geom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="105" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a3cc8f2331d48facc82d8d85c31bab3f1" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::YAFluxRegisterT&lt; MF &gt;::m_ratio</definition>
        <argsstring></argsstring>
        <name>m_ratio</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="107" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a775a265fd7aa131bd5c7c3f4cef282ed" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::YAFluxRegisterT&lt; MF &gt;::m_fine_level</definition>
        <argsstring></argsstring>
        <name>m_fine_level</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_fine_level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="108" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1af33672ac47d288fbe42c788ddb8f953a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::YAFluxRegisterT&lt; MF &gt;::m_ncomp</definition>
        <argsstring></argsstring>
        <name>m_ncomp</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_ncomp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="109" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegisterT_1a58d0c8eb8bdaf808e5462cfa75b76b3f" prot="protected" static="no" mutable="no">
        <type>MF const  *</type>
        <definition>MF const* amrex::YAFluxRegisterT&lt; MF &gt;::m_cvol</definition>
        <argsstring></argsstring>
        <name>m_cvol</name>
        <qualifiedname>amrex::YAFluxRegisterT::m_cvol</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="111" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="111" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1a5368c976e1f4845f16096aa9a9945c02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::YAFluxRegisterT&lt; MF &gt;::YAFluxRegisterT</definition>
        <argsstring>()=default</argsstring>
        <name>YAFluxRegisterT</name>
        <qualifiedname>amrex::YAFluxRegisterT::YAFluxRegisterT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="34" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1ad17e1ac181b131cfdc655b4abfe03a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::YAFluxRegisterT&lt; MF &gt;::YAFluxRegisterT</definition>
        <argsstring>(const BoxArray &amp;fba, const BoxArray &amp;cba, const DistributionMapping &amp;fdm, const DistributionMapping &amp;cdm, const Geometry &amp;fgeom, const Geometry &amp;cgeom, const IntVect &amp;ref_ratio, int fine_lev, int nvar)</argsstring>
        <name>YAFluxRegisterT</name>
        <qualifiedname>amrex::YAFluxRegisterT::YAFluxRegisterT</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>fdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="36" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1a493f364171c018374a110d24f0c9b7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::define</definition>
        <argsstring>(const BoxArray &amp;fba, const BoxArray &amp;cba, const DistributionMapping &amp;fdm, const DistributionMapping &amp;cdm, const Geometry &amp;fgeom, const Geometry &amp;cgeom, const IntVect &amp;ref_ratio, int fine_lev, int nvar)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::YAFluxRegisterT::define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>fdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="41" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="125" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1af9d5717b63e6c3f0cfb79d33862e44c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>amrex::YAFluxRegisterT::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="46" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1ab499670f73f11f117350646d2d154867" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::CrseAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FAB const *, AMREX_SPACEDIM &gt; &amp;flux, const Real *dx, Real dt, RunOn runon) noexcept</argsstring>
        <name>CrseAdd</name>
        <qualifiedname>amrex::YAFluxRegisterT::CrseAdd</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1YAFluxRegisterT_1a96ad5ba6f6b373c04d31d704bb04d872" kindref="member">FAB</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>runon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="48" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="343" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1a7f98a30f8f9bf8eb7d0246311f93ca4c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::CrseAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FAB const *, AMREX_SPACEDIM &gt; &amp;flux, const Real *dx, Real dt, int srccomp, int destcomp, int numcomp, RunOn runon) noexcept</argsstring>
        <name>CrseAdd</name>
        <qualifiedname>amrex::YAFluxRegisterT::CrseAdd</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1YAFluxRegisterT_1a96ad5ba6f6b373c04d31d704bb04d872" kindref="member">FAB</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>runon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="52" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="356" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1a9eea47bda999a0731934a386b05b3978" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::FineAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FAB const *, AMREX_SPACEDIM &gt; &amp;flux, const Real *dx, Real dt, RunOn runon) noexcept</argsstring>
        <name>FineAdd</name>
        <qualifiedname>amrex::YAFluxRegisterT::FineAdd</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1YAFluxRegisterT_1a96ad5ba6f6b373c04d31d704bb04d872" kindref="member">FAB</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>runon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="57" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="401" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1abff8b13543ca6e0eb194283e744b4caa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::FineAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FAB const *, AMREX_SPACEDIM &gt; &amp;a_flux, const Real *dx, Real dt, int srccomp, int destcomp, int numcomp, RunOn runon) noexcept</argsstring>
        <name>FineAdd</name>
        <qualifiedname>amrex::YAFluxRegisterT::FineAdd</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1YAFluxRegisterT_1a96ad5ba6f6b373c04d31d704bb04d872" kindref="member">FAB</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>runon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="61" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="414" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1a29bbf0848629975e74b0412adf5cbcf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::Reflux</definition>
        <argsstring>(MF &amp;state, int dc=0)</argsstring>
        <name>Reflux</name>
        <qualifiedname>amrex::YAFluxRegisterT::Reflux</qualifiedname>
        <param>
          <type>MF &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dc</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="66" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="508" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1aa5b234a986e199e5dec6ffd996db12eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::Reflux</definition>
        <argsstring>(MF &amp;state, int srccomp, int destcomp, int numcomp)</argsstring>
        <name>Reflux</name>
        <qualifiedname>amrex::YAFluxRegisterT::Reflux</qualifiedname>
        <param>
          <type>MF &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="67" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="518" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1a5191f9f71d66d51913c859e7835fd3a9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::YAFluxRegisterT&lt; MF &gt;::CrseHasWork</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>CrseHasWork</name>
        <qualifiedname>amrex::YAFluxRegisterT::CrseHasWork</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="69" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1aadc0fd498bbbe602b6468b9624b322cf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::YAFluxRegisterT&lt; MF &gt;::FineHasWork</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>FineHasWork</name>
        <qualifiedname>amrex::YAFluxRegisterT::FineHasWork</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="73" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1a00e42aad2911705689a1abd3857146bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MF &amp;</type>
        <definition>MF &amp; amrex::YAFluxRegisterT&lt; MF &gt;::getFineData</definition>
        <argsstring>()</argsstring>
        <name>getFineData</name>
        <qualifiedname>amrex::YAFluxRegisterT::getFineData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="77" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1ac9027c1a21fd7ec198393939ff2d4be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MF &amp;</type>
        <definition>MF &amp; amrex::YAFluxRegisterT&lt; MF &gt;::getCrseData</definition>
        <argsstring>()</argsstring>
        <name>getCrseData</name>
        <qualifiedname>amrex::YAFluxRegisterT::getCrseData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="79" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="567" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegisterT_1a6a278cbdb5d26d92153834df80c5bb26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegisterT&lt; MF &gt;::setCrseVolume</definition>
        <argsstring>(MF const *cvol)</argsstring>
        <name>setCrseVolume</name>
        <qualifiedname>amrex::YAFluxRegisterT::setCrseVolume</qualifiedname>
        <param>
          <type>MF const *</type>
          <declname>cvol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For curvilinear coordinates only. In that case, the flux passed to YAFluxRegister is assumed to have been multiplied by area. Note that YAFluxRegister does NOT make a copy of the volume data. So the coarse volume MF must be alive during the life time of YAFluxRegister. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="91" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="91" bodyend="91"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>YAFluxRegister is yet another Flux Register for refluxing.</para>
<para>At the beginning of a coarse step, <computeroutput><ref refid="classamrex_1_1YAFluxRegisterT_1af9d5717b63e6c3f0cfb79d33862e44c0" kindref="member">reset()</ref></computeroutput> is called. In <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> for the coarse level advance, <computeroutput>CrseAdd</computeroutput> is called with coarse flux. The flux is not scaled. In <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> for the fine level advance, <computeroutput>FineAdd</computeroutput> is called. After the fine level finished its time steps, <computeroutput>Reflux</computeroutput> is called to update the coarse cells next to the coarse/fine boundary. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::EBFluxRegister&lt; MultiFab &gt;</label>
        <link refid="classamrex_1_1EBFluxRegister"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::YAFluxRegisterT&lt; MF &gt;</label>
        <link refid="classamrex_1_1YAFluxRegisterT"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="70">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="71" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="71" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="78">
        <label>amrex::FBData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="79" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::FabFactory&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="103">
        <label>amrex::GpuArray&lt; ParticleReal, AMREX_SPACEDIM &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
      <node id="20">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="7">
        <label>K</label>
      </node>
      <node id="69">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="70" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="73" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>amrex::PCData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="95" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>T</label>
      </node>
      <node id="89">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="90" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="91">
        <label>amrex::Vector&lt; amrex::MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>amrex::Vector&lt; amrex::Vector&lt; FAB * &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="98" relation="public-inheritance">
        </childnode>
      </node>
      <node id="85">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="86" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="87">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="88" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="56" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="58" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="28">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="29" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="26" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="23" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="20" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="20" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="16">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="17" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="18" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="16" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="28" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="49" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="29" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="100">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="101" relation="usage">
          <edgelabel>dx</edgelabel>
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="55" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="36">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="37" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="38" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="4">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="5" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="43" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_dstng</edgelabel>
          <edgelabel>m_srcng</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_dstba</edgelabel>
          <edgelabel>m_srcba</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="10" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="81" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="47">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="16" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="99">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="103" relation="usage">
          <edgelabel>roundoff_hi</edgelabel>
          <edgelabel>roundoff_lo</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::IArrayBox</label>
        <link refid="classamrex_1_1IArrayBox"/>
        <childnode refid="66" relation="public-inheritance">
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>ifabio</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>amrex::IFABio</label>
        <link refid="classamrex_1_1IFABio"/>
      </node>
      <node id="5">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="49">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="60">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="26">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="84">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="23" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>Real</label>
      </node>
      <node id="102">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="101" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::YAFluxRegisterT&lt; MF &gt;</label>
        <link refid="classamrex_1_1YAFluxRegisterT"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_crse_flag</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_cfp_localindex</edgelabel>
          <edgelabel>m_crse_fab_flag</edgelabel>
        </childnode>
        <childnode refid="97" relation="usage">
          <edgelabel>m_cfp_fab</edgelabel>
        </childnode>
        <childnode refid="99" relation="usage">
          <edgelabel>m_crse_geom</edgelabel>
          <edgelabel>m_fine_geom</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_ratio</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::detail::SingleChunkArena</label>
        <link refid="classamrex_1_1detail_1_1SingleChunkArena"/>
        <childnode refid="55" relation="public-inheritance">
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="42" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="42" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="35" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="38" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="45">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>std::mutex</label>
      </node>
      <node id="10">
        <label>std::string</label>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="90">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="82" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="83">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="45" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>std::unique_ptr&lt; amrex::FBData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="78" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="96">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="53" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>std::unique_ptr&lt; amrex::IFABio &gt;</label>
        <childnode refid="68" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>std::unique_ptr&lt; amrex::PCData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="94" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
        <childnode refid="63" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="64">
        <label>std::vector&lt; IArrayBox * &gt;</label>
        <childnode refid="65" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="33">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="14">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="28" bodyend="112"/>
    <listofallmembers>
      <member refid="classamrex_1_1YAFluxRegisterT_1a98d014f8977101cb5406c3437897763c" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>CellType</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a98d014f8977101cb5406c3437897763ca5c0ed298da0038126a31182eb1385392" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>crse_cell</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a98d014f8977101cb5406c3437897763ca95ed02b2c9b5b5a936871917a0da3d52" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>crse_fine_boundary_cell</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1ab499670f73f11f117350646d2d154867" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>CrseAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a7f98a30f8f9bf8eb7d0246311f93ca4c" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>CrseAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a5191f9f71d66d51913c859e7835fd3a9" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>CrseHasWork</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a493f364171c018374a110d24f0c9b7c3" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>define</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a96ad5ba6f6b373c04d31d704bb04d872" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>FAB</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a98d014f8977101cb5406c3437897763ca4438d5a5594d291716164dd529a902cd" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>fine_cell</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a9eea47bda999a0731934a386b05b3978" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1abff8b13543ca6e0eb194283e744b4caa" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1aadc0fd498bbbe602b6468b9624b322cf" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>FineHasWork</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1ac9027c1a21fd7ec198393939ff2d4be2" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>getCrseData</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a00e42aad2911705689a1abd3857146bb" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>getFineData</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a166ac40711474ecc9d054bdf63632675" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_cfp_fab</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1ad3d68c63ff831153ffc01bf39298a1fe" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_cfp_localindex</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1ad0aa87622ba3aa5a30c21fe56eeb3c33" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_cfp_mask</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a266eca2069ccb69be79badf962e3902b" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_cfpatch</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a74b021a20514364f11e7f743cea7c0b4" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_crse_data</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a1bc7ad69316f063b0e10812ff7f06705" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_crse_fab_flag</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a5a0318376def0681f878a9628db75930" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_crse_flag</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a7563f9f354215d32467cc8b6f3e83ad3" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_crse_geom</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a58d0c8eb8bdaf808e5462cfa75b76b3f" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_cvol</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a3597f5caa96ed6c401d35158a5228fa7" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_fine_geom</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a775a265fd7aa131bd5c7c3f4cef282ed" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_fine_level</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1af33672ac47d288fbe42c788ddb8f953a" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a3cc8f2331d48facc82d8d85c31bab3f1" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>m_ratio</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a29bbf0848629975e74b0412adf5cbcf6" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1aa5b234a986e199e5dec6ffd996db12eb" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1af9d5717b63e6c3f0cfb79d33862e44c0" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>reset</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a6a278cbdb5d26d92153834df80c5bb26" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>setCrseVolume</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1ae4ccc72afbdaefad1add5c84f52ded78" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>T</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1a5368c976e1f4845f16096aa9a9945c02" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>YAFluxRegisterT</name></member>
      <member refid="classamrex_1_1YAFluxRegisterT_1ad17e1ac181b131cfdc655b4abfe03a98" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegisterT</scope><name>YAFluxRegisterT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
