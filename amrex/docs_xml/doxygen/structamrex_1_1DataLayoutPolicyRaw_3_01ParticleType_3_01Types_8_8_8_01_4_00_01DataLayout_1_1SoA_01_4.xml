<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4" kind="struct" language="C++" prot="public">
    <compoundname>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</compoundname>
    <includes refid="AMReX__ParticleArray_8H" local="no">AMReX_ParticleArray.H</includes>
    <templateparamlist>
      <param>
        <type>template&lt; typename... &gt; class</type>
        <declname>ParticleType</declname>
        <defname>ParticleType</defname>
      </param>
      <param>
        <type>typename...</type>
        <declname>Types</declname>
        <defname>Types</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1ac7df2f9de658c06efefb501e8544e9c5" prot="public" static="no">
        <type><ref refid="classamrex_1_1GpuTuple" kindref="compound">amrex::GpuTuple</ref>&lt; Types *... &gt;</type>
        <definition>using amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::raw_type =  amrex::GpuTuple&lt;Types*...&gt;</definition>
        <argsstring></argsstring>
        <name>raw_type</name>
        <qualifiedname>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::raw_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="190" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1aee9e9e8e6778816545b4523b1bb0056e" prot="public" static="no">
        <type>ParticleType&lt; <ref refid="classamrex_1_1ref__wrapper" kindref="compound">ref_wrapper</ref>&lt; Types &gt;... &gt;</type>
        <definition>using amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::value_type =  ParticleType&lt;ref_wrapper&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="191" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="191" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1abe44649d4e450ab55faa681ab651ff5c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1aee9e9e8e6778816545b4523b1bb0056e" kindref="member">value_type</ref></type>
        <definition>static AMREX_GPU_HOST_DEVICE constexpr value_type amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::get</definition>
        <argsstring>(raw_type const &amp;a_tuple, std::size_t a_index)</argsstring>
        <name>get</name>
        <qualifiedname>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::get</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1ac7df2f9de658c06efefb501e8544e9c5" kindref="member">raw_type</ref> const &amp;</type>
          <declname>a_tuple</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>a_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="194" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="194" bodyend="197"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a4c282fa27608182611670fe608da9094" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>static AMREX_GPU_HOST_DEVICE constexpr auto amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::get_impl</definition>
        <argsstring>(raw_type const &amp;a_tuple, std::size_t a_index, std::index_sequence&lt; Is... &gt;)</argsstring>
        <name>get_impl</name>
        <qualifiedname>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::get_impl</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1ac7df2f9de658c06efefb501e8544e9c5" kindref="member">raw_type</ref> const &amp;</type>
          <declname>a_tuple</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>a_index</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="203" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="203" bodyend="207"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A non-owning version of SoA policy for passing to the GPU. </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="189" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="189" bodyend="208"/>
    <listofallmembers>
      <member refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1abe44649d4e450ab55faa681ab651ff5c" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>get</name></member>
      <member refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a4c282fa27608182611670fe608da9094" prot="private" virt="non-virtual"><scope>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>get_impl</name></member>
      <member refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1ac7df2f9de658c06efefb501e8544e9c5" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>raw_type</name></member>
      <member refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1aee9e9e8e6778816545b4523b1bb0056e" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
