<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1PODVector" kind="class" language="C++" prot="public">
    <compoundname>amrex::PODVector</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::allocator&lt; T &gt;</basecompoundref>
    <includes refid="AMReX__PODVector_8H" local="no">AMReX_PODVector.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class Allocator</type>
        <defval>std::allocator&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a845a40f6549798e6ddf2079f1882f1a6" prot="public" static="no">
        <type>T</type>
        <definition>typedef T amrex::PODVector&lt; T, Allocator &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="233" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1af2658f7c6d69faf4cd927d908802b41c" prot="public" static="no">
        <type>Allocator</type>
        <definition>typedef Allocator amrex::PODVector&lt; T, Allocator &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="234" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a483f82ea685a6b6fecca53afe15d558d" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t amrex::PODVector&lt; T, Allocator &gt;::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="235" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t amrex::PODVector&lt; T, Allocator &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="236" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1af184326386f1d1a678a4bf3247d45d42" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>typedef std::ptrdiff_t amrex::PODVector&lt; T, Allocator &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="237" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a9581fd4380a515628518d666d00e9d49" prot="public" static="no">
        <type>T &amp;</type>
        <definition>typedef T&amp; amrex::PODVector&lt; T, Allocator &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="239" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1ac45bc075fc9a1f60362dea58a71bf4c0" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* amrex::PODVector&lt; T, Allocator &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="240" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* amrex::PODVector&lt; T, Allocator &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="241" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a49a0b4c89f35668f99101cfae2905fd2" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;iterator&gt; amrex::PODVector&lt; T, Allocator &gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="242" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a4d6e9668f39b13b37a58ca6be438bbfa" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>typedef const T&amp; amrex::PODVector&lt; T, Allocator &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="244" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a92c3b41f9015529103a077d83ea9fd3b" prot="public" static="no">
        <type>const T *</type>
        <definition>typedef const T* amrex::PODVector&lt; T, Allocator &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="245" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" prot="public" static="no">
        <type>const T *</type>
        <definition>typedef const T* amrex::PODVector&lt; T, Allocator &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="246" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a956bb5cb593c90c5767dab45cdb827d5" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_iterator&gt; amrex::PODVector&lt; T, Allocator &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="247" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1PODVector_1aa3653b70897299b34df8afff92bb2299" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector_1ac45bc075fc9a1f60362dea58a71bf4c0" kindref="member">pointer</ref></type>
        <definition>pointer amrex::PODVector&lt; T, Allocator &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="250" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1PODVector_1a9ff96f69373c71e0ce54cae0b724c374" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="251" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1PODVector_1ab34b6361d0ed17fe5d62a6a11dc21174" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::m_capacity</definition>
        <argsstring></argsstring>
        <name>m_capacity</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="251" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="251" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1PODVector_1a76f461b88f855afac15b08881216c5d1" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>PODVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="254" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ad7b0f629ddd6623ad965cc468bfda35b" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(const allocator_type &amp;a_allocator) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1af2658f7c6d69faf4cd927d908802b41c" kindref="member">allocator_type</ref> &amp;</type>
          <declname>a_allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="258" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a79ee46b90b91bcc831c81e7ad43b3219" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(size_type a_size) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="262" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aa826f3cebc8fcc8912101481e36e0b52" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(size_type a_size, const value_type &amp;a_value, const allocator_type &amp;a_allocator=Allocator()) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_size</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1a845a40f6549798e6ddf2079f1882f1a6" kindref="member">value_type</ref> &amp;</type>
          <declname>a_value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1af2658f7c6d69faf4cd927d908802b41c" kindref="member">allocator_type</ref> &amp;</type>
          <declname>a_allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="268" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="268" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a6b8ab8f7ddc2372349a59abfbd06ceab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(std::initializer_list&lt; T &gt; a_initializer_list, const allocator_type &amp;a_allocator=Allocator()) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>a_initializer_list</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1af2658f7c6d69faf4cd927d908802b41c" kindref="member">allocator_type</ref> &amp;</type>
          <declname>a_allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="276" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="276" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a5c85faa4ccae07e9e904c516cfd1ef49" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(const PODVector&lt; T, Allocator &gt; &amp;a_vector) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="284" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="284" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1abac5cd6b7981b06fe091b1cea5b54579" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;&amp;a_vector) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;&amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="293" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="293" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1afe47db5bea52ba4e76c92c5f4e185c46" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;&amp;a_vector, const allocator_type &amp;a_allocator) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;&amp;</type>
          <declname>a_vector</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1af2658f7c6d69faf4cd927d908802b41c" kindref="member">allocator_type</ref> &amp;</type>
          <declname>a_allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="304" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="304" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a4b55d119990bf8f5038348b29aa996c8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::~PODVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>~PODVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="315" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a463a93331c5e5a8658ce9bd9fac52a32" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> &amp;</type>
        <definition>PODVector&amp; amrex::PODVector&lt; T, Allocator &gt;::operator=</definition>
        <argsstring>(const PODVector&lt; T, Allocator &gt; &amp;a_vector) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="317" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="317" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a08d60f3cf95329c999bc991ebd4b1df1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> &amp;</type>
        <definition>PODVector&amp; amrex::PODVector&lt; T, Allocator &gt;::operator=</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;&amp;a_vector) noexcept(std::allocator_traits&lt; Allocator &gt;::propagate_on_container_move_assignment::value)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;&amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="324" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="324" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ada4716396d1c5faae81c327d1ac44e81" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::erase</definition>
        <argsstring>(const_iterator a_pos) noexcept</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="332" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="332" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a6aec62620d673d5bfd290bfa35cdd0d6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::erase</definition>
        <argsstring>(const_iterator a_first, const_iterator a_last) noexcept</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
          <declname>a_first</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
          <declname>a_last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="339" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="339" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a07a01dfd32b00e67c3c65e9ecb7da432" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, const T &amp;a_item) noexcept</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="348" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="348" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ae26665c45117a553ccdf7c2a216c11e6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, size_type a_count, const T &amp;a_value) noexcept</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_count</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="368" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="368" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a3b5964595821a3c3e9c261b40ec53e58" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, T &amp;&amp;a_item) noexcept</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>a_item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="389" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="389" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ad50d4bf1013274e31a7efbb856407372" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, std::initializer_list&lt; T &gt; a_initializer_list) noexcept</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>a_initializer_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="408" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="408" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1af372ba330714bf4ec696aad95e1f4dfc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>typename std::iterator_traits&lt;InputIt&gt;::<ref refid="classamrex_1_1PODVector_1af184326386f1d1a678a4bf3247d45d42" kindref="member">difference_type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, InputIt a_first, InputIt a_last) noexcept</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>a_first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>a_last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="428" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="428" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a4e20e83accd80a92cd1a01b1c3242d25" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::assign</definition>
        <argsstring>(size_type a_count, const T &amp;a_value) noexcept</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_count</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="448" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="448" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a55288145cc1dcb67bfd58a5b85fac727" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::assign</definition>
        <argsstring>(std::initializer_list&lt; T &gt; a_initializer_list) noexcept</argsstring>
        <name>assign</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>a_initializer_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="455" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="455" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a1afe8d2f8a93c4feb056c2214878fd0a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>typename std::iterator_traits&lt;InputIt&gt;::<ref refid="classamrex_1_1PODVector_1af184326386f1d1a678a4bf3247d45d42" kindref="member">difference_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::assign</definition>
        <argsstring>(InputIt a_first, InputIt a_last) noexcept</argsstring>
        <name>assign</name>
        <param>
          <type>InputIt</type>
          <declname>a_first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>a_last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="464" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="464" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a67de98b5efe335d818e6bc91911418ff" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1af2658f7c6d69faf4cd927d908802b41c" kindref="member">allocator_type</ref></type>
        <definition>allocator_type amrex::PODVector&lt; T, Allocator &gt;::get_allocator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="473" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="473" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1adb9df25b399f75fae646206ecd6706cc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::push_back</definition>
        <argsstring>(const T &amp;a_value) noexcept</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="475" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="475" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a30ce7699c5a5620cad90ce01e827092c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::push_back</definition>
        <argsstring>(T &amp;&amp;a_value) noexcept</argsstring>
        <name>push_back</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="482" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="482" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a437b046dcdfcfe81a587846c4068c95a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::pop_back</definition>
        <argsstring>() noexcept</argsstring>
        <name>pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="489" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="489" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aab4feefd754fb80185d22c9a6708caea" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="491" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="491" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a1cdc3c767875be38aa4e622280597347" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="493" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="493" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1abf630d0bfa81c94458b031d299c5d6ef" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::max_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="495" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="495" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ab0c66f33cd2db51d1c4d142e175eefd3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="497" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="497" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1af46775770f6ac9e8696c8e8fd80da03e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::PODVector&lt; T, Allocator &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="499" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="499" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a553df993568cf65c1252d805c7cfcd8e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; amrex::PODVector&lt; T, Allocator &gt;::operator[]</definition>
        <argsstring>(size_type a_index) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="501" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="501" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a57c5c0338de67e3329a4e33e0500527b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; amrex::PODVector&lt; T, Allocator &gt;::operator[]</definition>
        <argsstring>(size_type a_index) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="503" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="503" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ae35d54db01ac368409bd57f8e2f91941" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; amrex::PODVector&lt; T, Allocator &gt;::front</definition>
        <argsstring>() noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="505" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="505" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a24668b130567e7b47b01a5342ac943a2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; amrex::PODVector&lt; T, Allocator &gt;::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="507" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="507" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a2f7b499a6deaa9062f42552e90766de6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; amrex::PODVector&lt; T, Allocator &gt;::back</definition>
        <argsstring>() noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="509" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="509" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a94624aaa5b0a5c99b6a6e755fcb39120" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; amrex::PODVector&lt; T, Allocator &gt;::back</definition>
        <argsstring>() const noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="511" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="511" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a52a678e008fab2346394fcad18bc90c4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::PODVector&lt; T, Allocator &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="513" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="513" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a7915ebc269c31e0ca4dd52ea91b782ad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* amrex::PODVector&lt; T, Allocator &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="515" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="515" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aed3e37de016bb3a5bdeef31fe0f8b4e0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::PODVector&lt; T, Allocator &gt;::dataPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="517" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="517" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ae1c2484fecf96587fdb95ba7fffc55ad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* amrex::PODVector&lt; T, Allocator &gt;::dataPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="519" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="519" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a688bc1525c5bcb7456f6423383540666" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="521" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="521" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a0d45a6981becc1c5a1185029a91d47f6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::PODVector&lt; T, Allocator &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="523" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="523" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a834016620c6c540a3af5cbe7a2637bed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="525" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="525" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1acd98b753ad23f8ace8640192eaf907e2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::PODVector&lt; T, Allocator &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="527" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="527" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aa95b5d33b04423ffc385e2c8f2096876" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a49a0b4c89f35668f99101cfae2905fd2" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="529" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="529" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a8dc6a6dec2668ff14d083905ed5b128a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a956bb5cb593c90c5767dab45cdb827d5" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="531" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="531" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a62f0bd74d3b57e02621753ca0892e892" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a49a0b4c89f35668f99101cfae2905fd2" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="533" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="533" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a951939815fe8ce7a68fd156df98d76e9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a956bb5cb593c90c5767dab45cdb827d5" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="535" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="535" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a0def3f145344eccc86425f242f188ac8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::PODVector&lt; T, Allocator &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="537" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="537" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ab181f05f4a962b1a5f6092ba124bc9a6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::PODVector&lt; T, Allocator &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="539" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="539" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a2c68dc479595f1cfeb16dc8c5e3a8c81" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a956bb5cb593c90c5767dab45cdb827d5" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="541" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="541" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aa4c942fc07ff0e247a2857deeaa773ae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a956bb5cb593c90c5767dab45cdb827d5" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="543" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="543" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ac7b03a34c6a6ff4d2962494280652506" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::resize</definition>
        <argsstring>(size_type a_new_size) noexcept</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="545" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="545" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a250601ff5e9d9c82bf48202f062fec41" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::resize</definition>
        <argsstring>(size_type a_new_size, const T &amp;a_val) noexcept</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_new_size</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="551" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="551" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a0710d10af50a121adb47fd3982774d8c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::reserve</definition>
        <argsstring>(size_type a_capacity) noexcept</argsstring>
        <name>reserve</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="563" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ad57142666bd78b62d509821a0e0f2e6a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::shrink_to_fit</definition>
        <argsstring>() noexcept</argsstring>
        <name>shrink_to_fit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="568" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="568" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a20b9cc552a434d343fd01e5c62b39ef2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::swap</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;a_vector) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="584" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="584" bodyend="590"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1PODVector_1aef1641f59137b10682b3c6a6e563fecc" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::GetNewCapacity</definition>
        <argsstring>(size_type a_num_to_be_added) const noexcept</argsstring>
        <name>GetNewCapacity</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_num_to_be_added</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="595" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="595" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a9952bc77943ea3370be5fad878b97e03" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::AllocateBuffer</definition>
        <argsstring>(size_type a_capacity) noexcept</argsstring>
        <name>AllocateBuffer</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="613" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="613" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a8249332ae009a83e8b0b6600032d05a3" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::AllocateBufferForInsert</definition>
        <argsstring>(size_type a_capacity, size_type a_index, size_type a_count) noexcept</argsstring>
        <name>AllocateBufferForInsert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_capacity</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_index</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" kindref="member">size_type</ref></type>
          <declname>a_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="626" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="626" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a5a460930ffbde164303d6fb956a2990e" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> &amp;</type>
        <definition>PODVector&amp; amrex::PODVector&lt; T, Allocator &gt;::CopyAssignmentDoIt</definition>
        <argsstring>(const PODVector&lt; T, Allocator &gt; &amp;a_vector, std::true_type) noexcept</argsstring>
        <name>CopyAssignmentDoIt</name>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>a_vector</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="643" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="643" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a1cc18735213c97b7fb64e2ce42a83cc2" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> &amp;</type>
        <definition>PODVector&amp; amrex::PODVector&lt; T, Allocator &gt;::CopyAssignmentDoIt</definition>
        <argsstring>(const PODVector&lt; T, Allocator &gt; &amp;a_vector, std::false_type) noexcept</argsstring>
        <name>CopyAssignmentDoIt</name>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>a_vector</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="653" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="653" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1af344a2609581e4d8a2150493765c89fb" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> &amp;</type>
        <definition>PODVector&amp; amrex::PODVector&lt; T, Allocator &gt;::MoveAssignmentDoIt</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;&amp;a_vector, std::false_type) noexcept</argsstring>
        <name>MoveAssignmentDoIt</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;&amp;</type>
          <declname>a_vector</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="671" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="671" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a5deceff5843ae30c88913841d64ce001" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> &amp;</type>
        <definition>PODVector&amp; amrex::PODVector&lt; T, Allocator &gt;::MoveAssignmentDoIt</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;&amp;a_vector, std::true_type) noexcept</argsstring>
        <name>MoveAssignmentDoIt</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;&amp;</type>
          <declname>a_vector</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="694" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="694" bodyend="709"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::PODVector&lt; T, Allocator &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::allocator&lt; T &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::PODVector&lt; T, Allocator &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="222" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="223" bodyend="710"/>
    <listofallmembers>
      <member refid="classamrex_1_1PODVector_1a9952bc77943ea3370be5fad878b97e03" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>AllocateBuffer</name></member>
      <member refid="classamrex_1_1PODVector_1a8249332ae009a83e8b0b6600032d05a3" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>AllocateBufferForInsert</name></member>
      <member refid="classamrex_1_1PODVector_1af2658f7c6d69faf4cd927d908802b41c" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>allocator_type</name></member>
      <member refid="classamrex_1_1PODVector_1a4e20e83accd80a92cd1a01b1c3242d25" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>assign</name></member>
      <member refid="classamrex_1_1PODVector_1a55288145cc1dcb67bfd58a5b85fac727" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>assign</name></member>
      <member refid="classamrex_1_1PODVector_1a1afe8d2f8a93c4feb056c2214878fd0a" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>assign</name></member>
      <member refid="classamrex_1_1PODVector_1a2f7b499a6deaa9062f42552e90766de6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>back</name></member>
      <member refid="classamrex_1_1PODVector_1a94624aaa5b0a5c99b6a6e755fcb39120" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>back</name></member>
      <member refid="classamrex_1_1PODVector_1a688bc1525c5bcb7456f6423383540666" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>begin</name></member>
      <member refid="classamrex_1_1PODVector_1a0d45a6981becc1c5a1185029a91d47f6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>begin</name></member>
      <member refid="classamrex_1_1PODVector_1ab0c66f33cd2db51d1c4d142e175eefd3" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>capacity</name></member>
      <member refid="classamrex_1_1PODVector_1a0def3f145344eccc86425f242f188ac8" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>cbegin</name></member>
      <member refid="classamrex_1_1PODVector_1ab181f05f4a962b1a5f6092ba124bc9a6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>cend</name></member>
      <member refid="classamrex_1_1PODVector_1aab4feefd754fb80185d22c9a6708caea" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>clear</name></member>
      <member refid="classamrex_1_1PODVector_1a56a171f1a3aae0c9e557639027f8fbf5" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>const_iterator</name></member>
      <member refid="classamrex_1_1PODVector_1a92c3b41f9015529103a077d83ea9fd3b" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>const_pointer</name></member>
      <member refid="classamrex_1_1PODVector_1a4d6e9668f39b13b37a58ca6be438bbfa" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>const_reference</name></member>
      <member refid="classamrex_1_1PODVector_1a956bb5cb593c90c5767dab45cdb827d5" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>const_reverse_iterator</name></member>
      <member refid="classamrex_1_1PODVector_1a5a460930ffbde164303d6fb956a2990e" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>CopyAssignmentDoIt</name></member>
      <member refid="classamrex_1_1PODVector_1a1cc18735213c97b7fb64e2ce42a83cc2" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>CopyAssignmentDoIt</name></member>
      <member refid="classamrex_1_1PODVector_1a2c68dc479595f1cfeb16dc8c5e3a8c81" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>crbegin</name></member>
      <member refid="classamrex_1_1PODVector_1aa4c942fc07ff0e247a2857deeaa773ae" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>crend</name></member>
      <member refid="classamrex_1_1PODVector_1a52a678e008fab2346394fcad18bc90c4" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>data</name></member>
      <member refid="classamrex_1_1PODVector_1a7915ebc269c31e0ca4dd52ea91b782ad" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>data</name></member>
      <member refid="classamrex_1_1PODVector_1aed3e37de016bb3a5bdeef31fe0f8b4e0" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1PODVector_1ae1c2484fecf96587fdb95ba7fffc55ad" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1PODVector_1af184326386f1d1a678a4bf3247d45d42" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>difference_type</name></member>
      <member refid="classstd_1_1allocator_1a55f88dab1194d6b8a34e46017c4dfd79" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>elements</name></member>
      <member refid="classamrex_1_1PODVector_1af46775770f6ac9e8696c8e8fd80da03e" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>empty</name></member>
      <member refid="classamrex_1_1PODVector_1a834016620c6c540a3af5cbe7a2637bed" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>end</name></member>
      <member refid="classamrex_1_1PODVector_1acd98b753ad23f8ace8640192eaf907e2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>end</name></member>
      <member refid="classamrex_1_1PODVector_1ada4716396d1c5faae81c327d1ac44e81" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>erase</name></member>
      <member refid="classamrex_1_1PODVector_1a6aec62620d673d5bfd290bfa35cdd0d6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>erase</name></member>
      <member refid="classamrex_1_1PODVector_1ae35d54db01ac368409bd57f8e2f91941" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>front</name></member>
      <member refid="classamrex_1_1PODVector_1a24668b130567e7b47b01a5342ac943a2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>front</name></member>
      <member refid="classamrex_1_1PODVector_1a67de98b5efe335d818e6bc91911418ff" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>get_allocator</name></member>
      <member refid="classamrex_1_1PODVector_1aef1641f59137b10682b3c6a6e563fecc" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>GetNewCapacity</name></member>
      <member refid="classamrex_1_1PODVector_1a07a01dfd32b00e67c3c65e9ecb7da432" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1ae26665c45117a553ccdf7c2a216c11e6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1a3b5964595821a3c3e9c261b40ec53e58" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1ad50d4bf1013274e31a7efbb856407372" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1af372ba330714bf4ec696aad95e1f4dfc" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1ac6db97322538232bff8ba94dbecb0bcf" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>iterator</name></member>
      <member refid="classamrex_1_1PODVector_1ab34b6361d0ed17fe5d62a6a11dc21174" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>m_capacity</name></member>
      <member refid="classamrex_1_1PODVector_1aa3653b70897299b34df8afff92bb2299" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>m_data</name></member>
      <member refid="classamrex_1_1PODVector_1a9ff96f69373c71e0ce54cae0b724c374" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>m_size</name></member>
      <member refid="classamrex_1_1PODVector_1abf630d0bfa81c94458b031d299c5d6ef" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>max_size</name></member>
      <member refid="classamrex_1_1PODVector_1af344a2609581e4d8a2150493765c89fb" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>MoveAssignmentDoIt</name></member>
      <member refid="classamrex_1_1PODVector_1a5deceff5843ae30c88913841d64ce001" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>MoveAssignmentDoIt</name></member>
      <member refid="classamrex_1_1PODVector_1a463a93331c5e5a8658ce9bd9fac52a32" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>operator=</name></member>
      <member refid="classamrex_1_1PODVector_1a08d60f3cf95329c999bc991ebd4b1df1" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>operator=</name></member>
      <member refid="classamrex_1_1PODVector_1a553df993568cf65c1252d805c7cfcd8e" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1PODVector_1a57c5c0338de67e3329a4e33e0500527b" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1PODVector_1a76f461b88f855afac15b08881216c5d1" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1ad7b0f629ddd6623ad965cc468bfda35b" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1a79ee46b90b91bcc831c81e7ad43b3219" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1aa826f3cebc8fcc8912101481e36e0b52" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1a6b8ab8f7ddc2372349a59abfbd06ceab" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1a5c85faa4ccae07e9e904c516cfd1ef49" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1abac5cd6b7981b06fe091b1cea5b54579" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1afe47db5bea52ba4e76c92c5f4e185c46" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1ac45bc075fc9a1f60362dea58a71bf4c0" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>pointer</name></member>
      <member refid="classamrex_1_1PODVector_1a437b046dcdfcfe81a587846c4068c95a" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>pop_back</name></member>
      <member refid="classamrex_1_1PODVector_1adb9df25b399f75fae646206ecd6706cc" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>push_back</name></member>
      <member refid="classamrex_1_1PODVector_1a30ce7699c5a5620cad90ce01e827092c" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>push_back</name></member>
      <member refid="classamrex_1_1PODVector_1aa95b5d33b04423ffc385e2c8f2096876" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>rbegin</name></member>
      <member refid="classamrex_1_1PODVector_1a8dc6a6dec2668ff14d083905ed5b128a" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>rbegin</name></member>
      <member refid="classamrex_1_1PODVector_1a9581fd4380a515628518d666d00e9d49" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>reference</name></member>
      <member refid="classamrex_1_1PODVector_1a62f0bd74d3b57e02621753ca0892e892" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>rend</name></member>
      <member refid="classamrex_1_1PODVector_1a951939815fe8ce7a68fd156df98d76e9" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>rend</name></member>
      <member refid="classamrex_1_1PODVector_1a0710d10af50a121adb47fd3982774d8c" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>reserve</name></member>
      <member refid="classamrex_1_1PODVector_1ac7b03a34c6a6ff4d2962494280652506" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>resize</name></member>
      <member refid="classamrex_1_1PODVector_1a250601ff5e9d9c82bf48202f062fec41" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>resize</name></member>
      <member refid="classamrex_1_1PODVector_1a49a0b4c89f35668f99101cfae2905fd2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>reverse_iterator</name></member>
      <member refid="classamrex_1_1PODVector_1ad57142666bd78b62d509821a0e0f2e6a" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>shrink_to_fit</name></member>
      <member refid="classamrex_1_1PODVector_1a1cdc3c767875be38aa4e622280597347" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>size</name></member>
      <member refid="classamrex_1_1PODVector_1a483f82ea685a6b6fecca53afe15d558d" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>size_t</name></member>
      <member refid="classamrex_1_1PODVector_1a60a84d612f4b351d147ba1bb934758c1" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>size_type</name></member>
      <member refid="classamrex_1_1PODVector_1a20b9cc552a434d343fd01e5c62b39ef2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>swap</name></member>
      <member refid="classamrex_1_1PODVector_1a845a40f6549798e6ddf2079f1882f1a6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>value_type</name></member>
      <member refid="classamrex_1_1PODVector_1a4b55d119990bf8f5038348b29aa996c8" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>~PODVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
