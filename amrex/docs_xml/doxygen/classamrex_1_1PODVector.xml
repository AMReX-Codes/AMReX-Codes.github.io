<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1PODVector" kind="class" language="C++" prot="public">
    <compoundname>amrex::PODVector</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::allocator&lt; T &gt;</basecompoundref>
    <includes refid="AMReX__PODVector_8H" local="no">AMReX_PODVector.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class Allocator</type>
        <defval>std::allocator&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a84b384d831870fe5521721c6414cab99" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="255" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1af9a80a3988ccc51fd593974ea6b21df2" prot="public" static="no">
        <type>Allocator</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::allocator_type =  Allocator</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="256" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="257" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1aea40df219b90fb5d86fa4fb3b8f270c3" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="258" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1abf56886aed8de2e01e1da75b1c989351" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="260" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a3c87edf01e970b09b0a59f130ada9262" prot="public" static="no">
        <type>T *</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="261" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" prot="public" static="no">
        <type>T *</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::iterator =  T*</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="262" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a3a90e6ff2204052e56983913fa5437e8" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref> &gt;</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::reverse_iterator =  std::reverse_iterator&lt;iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="263" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1adb5652b40f09c48b793ce3bef45ff183" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::const_reference =  const T&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="265" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1a1d52cfcb84489a5f66f8d7ca5597795e" prot="public" static="no">
        <type>const T *</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::const_pointer =  const T*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="266" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" prot="public" static="no">
        <type>const T *</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::const_iterator =  const T*</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="267" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1PODVector_1ade82f075bd0f551b43bed2182af5c5fb" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref> &gt;</type>
        <definition>using amrex::PODVector&lt; T, Allocator &gt;::const_reverse_iterator =  std::reverse_iterator&lt;const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="268" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1PODVector_1aa3653b70897299b34df8afff92bb2299" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector_1a3c87edf01e970b09b0a59f130ada9262" kindref="member">pointer</ref></type>
        <definition>pointer amrex::PODVector&lt; T, Allocator &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="271" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1PODVector_1a9ff96f69373c71e0ce54cae0b724c374" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="272" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1PODVector_1ab34b6361d0ed17fe5d62a6a11dc21174" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::m_capacity</definition>
        <argsstring></argsstring>
        <name>m_capacity</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="272" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="272" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1PODVector_1a8cbeac763750da6c5bfc9958bbb123d9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>PODVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="275" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a342ac4a8fd2ef2b61b49242fa28a2057" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(const allocator_type &amp;a_allocator) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1af9a80a3988ccc51fd593974ea6b21df2" kindref="member">allocator_type</ref> &amp;</type>
          <declname>a_allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="277" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a6340b7de6f0414037450ce9749af867b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(size_type a_size)</argsstring>
        <name>PODVector</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="281" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="281" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aefdcef17153e4edbad24f0c5419287e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(size_type a_size, const value_type &amp;a_value, const allocator_type &amp;a_allocator=Allocator())</argsstring>
        <name>PODVector</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_size</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1a84b384d831870fe5521721c6414cab99" kindref="member">value_type</ref> &amp;</type>
          <declname>a_value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1af9a80a3988ccc51fd593974ea6b21df2" kindref="member">allocator_type</ref> &amp;</type>
          <declname>a_allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="290" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="290" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a02e18e4e17cc3356084fa3be3c3f44b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(std::initializer_list&lt; T &gt; a_initializer_list, const allocator_type &amp;a_allocator=Allocator())</argsstring>
        <name>PODVector</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>a_initializer_list</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector_1af9a80a3988ccc51fd593974ea6b21df2" kindref="member">allocator_type</ref> &amp;</type>
          <declname>a_allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="301" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="301" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a3654586fb4dd4a65acf395935c6ed4a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(const PODVector&lt; T, Allocator &gt; &amp;a_vector)</argsstring>
        <name>PODVector</name>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="314" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="314" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1abac5cd6b7981b06fe091b1cea5b54579" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::PODVector</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;&amp;a_vector) noexcept</argsstring>
        <name>PODVector</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;&amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="327" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="327" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1acc9a13384ea6afdf5c637b9f11b091ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::PODVector&lt; T, Allocator &gt;::~PODVector</definition>
        <argsstring>()</argsstring>
        <name>~PODVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="338" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="338" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a79713d96447fdc1d95b539753ef20e51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> &amp;</type>
        <definition>PODVector&amp; amrex::PODVector&lt; T, Allocator &gt;::operator=</definition>
        <argsstring>(const PODVector&lt; T, Allocator &gt; &amp;a_vector)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="348" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="348" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1af7f6e724b950732247737bc755624931" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref> &amp;</type>
        <definition>PODVector&amp; amrex::PODVector&lt; T, Allocator &gt;::operator=</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;&amp;a_vector) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;&amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="377" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="377" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a1299b5a44efad2f0c8966d45ad0b61f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::erase</definition>
        <argsstring>(const_iterator a_pos)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="405" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="405" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aa99bd0cb7a274579760788af8dbd2dea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::erase</definition>
        <argsstring>(const_iterator a_first, const_iterator a_last)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
          <declname>a_first</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
          <declname>a_last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="414" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="414" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a0e8d37623b1314d826c263bdf5be3d26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, const T &amp;a_item)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="426" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="426" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a1bd112fd8425ebbf152b979c27629357" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, size_type a_count, const T &amp;a_value)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_count</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="431" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="431" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a0384ebf38ab1dbf96a080ff6abaf45c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, T &amp;&amp;a_item)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>a_item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="453" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="453" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a4b7de0d9bfdaa4615eb0143265f2cbb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, std::initializer_list&lt; T &gt; a_initializer_list)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>a_initializer_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="459" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="459" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a5295d29a95b00f0b0809881e3a555905" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>typename std::iterator_traits&lt;InputIt&gt;::<ref refid="classamrex_1_1PODVector_1aea40df219b90fb5d86fa4fb3b8f270c3" kindref="member">difference_type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator a_pos, InputIt a_first, InputIt a_last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
          <declname>a_pos</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>a_first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>a_last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="484" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="484" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a8d2722278ba3ee0ec060e4a0c26fd1dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::assign</definition>
        <argsstring>(size_type a_count, const T &amp;a_value)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_count</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="510" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="510" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a7fd3f892debb6d633f30864aac18d858" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::assign</definition>
        <argsstring>(std::initializer_list&lt; T &gt; a_initializer_list)</argsstring>
        <name>assign</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>a_initializer_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="521" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="521" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aa0537d2b1d3afed5553c0b871f177de4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>typename std::iterator_traits&lt;InputIt&gt;::<ref refid="classamrex_1_1PODVector_1aea40df219b90fb5d86fa4fb3b8f270c3" kindref="member">difference_type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::assign</definition>
        <argsstring>(InputIt a_first, InputIt a_last)</argsstring>
        <name>assign</name>
        <param>
          <type>InputIt</type>
          <declname>a_first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>a_last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="533" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="533" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a3ddec04bd145211bbd1fefac3e005211" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::assign</definition>
        <argsstring>(const T &amp;a_value)</argsstring>
        <name>assign</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the same value to every element of the vector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to assign </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="549" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a67de98b5efe335d818e6bc91911418ff" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1af9a80a3988ccc51fd593974ea6b21df2" kindref="member">allocator_type</ref></type>
        <definition>allocator_type amrex::PODVector&lt; T, Allocator &gt;::get_allocator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="554" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="554" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1af89cd4b6f177740be608d75ccf9eb045" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::push_back</definition>
        <argsstring>(const T &amp;a_value)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="556" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="556" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a437b046dcdfcfe81a587846c4068c95a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::pop_back</definition>
        <argsstring>() noexcept</argsstring>
        <name>pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="571" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="571" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aab4feefd754fb80185d22c9a6708caea" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="573" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="573" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a1cdc3c767875be38aa4e622280597347" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="575" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="575" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ab0c66f33cd2db51d1c4d142e175eefd3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="577" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="577" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1af46775770f6ac9e8696c8e8fd80da03e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::PODVector&lt; T, Allocator &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="579" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="579" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a553df993568cf65c1252d805c7cfcd8e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; amrex::PODVector&lt; T, Allocator &gt;::operator[]</definition>
        <argsstring>(size_type a_index) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="581" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="581" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a57c5c0338de67e3329a4e33e0500527b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; amrex::PODVector&lt; T, Allocator &gt;::operator[]</definition>
        <argsstring>(size_type a_index) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="583" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="583" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ae35d54db01ac368409bd57f8e2f91941" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; amrex::PODVector&lt; T, Allocator &gt;::front</definition>
        <argsstring>() noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="585" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="585" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a24668b130567e7b47b01a5342ac943a2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; amrex::PODVector&lt; T, Allocator &gt;::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="587" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="587" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a2f7b499a6deaa9062f42552e90766de6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; amrex::PODVector&lt; T, Allocator &gt;::back</definition>
        <argsstring>() noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="589" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="589" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a94624aaa5b0a5c99b6a6e755fcb39120" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; amrex::PODVector&lt; T, Allocator &gt;::back</definition>
        <argsstring>() const noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="591" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="591" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a52a678e008fab2346394fcad18bc90c4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::PODVector&lt; T, Allocator &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="593" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="593" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a7915ebc269c31e0ca4dd52ea91b782ad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* amrex::PODVector&lt; T, Allocator &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="595" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="595" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aed3e37de016bb3a5bdeef31fe0f8b4e0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::PODVector&lt; T, Allocator &gt;::dataPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="597" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="597" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ae1c2484fecf96587fdb95ba7fffc55ad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* amrex::PODVector&lt; T, Allocator &gt;::dataPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="599" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="599" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a688bc1525c5bcb7456f6423383540666" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="601" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="601" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a0d45a6981becc1c5a1185029a91d47f6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::PODVector&lt; T, Allocator &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="603" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="603" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a834016620c6c540a3af5cbe7a2637bed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" kindref="member">iterator</ref></type>
        <definition>iterator amrex::PODVector&lt; T, Allocator &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="605" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="605" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1acd98b753ad23f8ace8640192eaf907e2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::PODVector&lt; T, Allocator &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="607" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="607" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aa95b5d33b04423ffc385e2c8f2096876" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a3a90e6ff2204052e56983913fa5437e8" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="609" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="609" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a8dc6a6dec2668ff14d083905ed5b128a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ade82f075bd0f551b43bed2182af5c5fb" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="611" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="611" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a62f0bd74d3b57e02621753ca0892e892" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a3a90e6ff2204052e56983913fa5437e8" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="613" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="613" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a951939815fe8ce7a68fd156df98d76e9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ade82f075bd0f551b43bed2182af5c5fb" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="615" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="615" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a0def3f145344eccc86425f242f188ac8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::PODVector&lt; T, Allocator &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="617" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="617" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ab181f05f4a962b1a5f6092ba124bc9a6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" kindref="member">const_iterator</ref></type>
        <definition>const_iterator amrex::PODVector&lt; T, Allocator &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="619" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="619" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a2c68dc479595f1cfeb16dc8c5e3a8c81" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ade82f075bd0f551b43bed2182af5c5fb" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="621" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="621" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1aa4c942fc07ff0e247a2857deeaa773ae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1ade82f075bd0f551b43bed2182af5c5fb" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator amrex::PODVector&lt; T, Allocator &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="623" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="623" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ac5114811535bc90b00c115260f83b20c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::resize</definition>
        <argsstring>(size_type a_new_size)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="625" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="625" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1ae77d9927b9cbf583c1c81e38ae11cb5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::resize</definition>
        <argsstring>(size_type a_new_size, const T &amp;a_val)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_new_size</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="635" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="635" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a1acdad6998ff1a1464020b0b70b69e1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::reserve</definition>
        <argsstring>(size_type a_capacity)</argsstring>
        <name>reserve</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="647" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="647" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a3cff4b6aa7fd45c59b2225de7f72f979" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::shrink_to_fit</definition>
        <argsstring>()</argsstring>
        <name>shrink_to_fit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="656" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="656" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a20b9cc552a434d343fd01e5c62b39ef2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::swap</definition>
        <argsstring>(PODVector&lt; T, Allocator &gt; &amp;a_vector) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector" kindref="compound">PODVector</ref>&lt; T, Allocator &gt; &amp;</type>
          <declname>a_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="677" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="677" bodyend="683"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1PODVector_1a4731233b08ab3019e0f71a2e9a78a16a" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::nBytes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nBytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="687" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="687" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a60bd0f3726b18f1015e6bebece37f679" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
        <definition>size_type amrex::PODVector&lt; T, Allocator &gt;::GetNewCapacityForPush</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetNewCapacityForPush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="693" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="693" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a28a9b3abe95194c50e3e7bcdc069219b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::UpdateDataPtr</definition>
        <argsstring>(FatPtr&lt; T &gt; const &amp;fp)</argsstring>
        <name>UpdateDataPtr</name>
        <param>
          <type><ref refid="structamrex_1_1FatPtr" kindref="compound">FatPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="707" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="707" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a5e58adad8e3a9824ae172c4beeaa3b76" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::AllocateBufferForPush</definition>
        <argsstring>(size_type target_capacity)</argsstring>
        <name>AllocateBufferForPush</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>target_capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="725" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="725" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1af6fc3e8635c3829330db263343ab6f59" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::AllocateBufferForInsert</definition>
        <argsstring>(size_type a_index, size_type a_count)</argsstring>
        <name>AllocateBufferForInsert</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_index</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="735" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="735" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1PODVector_1a0de3fd1db54cd0fb49dec4a4e3f21e59" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PODVector&lt; T, Allocator &gt;::resize_without_init_snan</definition>
        <argsstring>(size_type a_new_size)</argsstring>
        <name>resize_without_init_snan</name>
        <param>
          <type><ref refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" kindref="member">size_type</ref></type>
          <declname>a_new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="774" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="774" bodyend="780"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::PODVector&lt; T, Allocator &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::allocator&lt; T &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::PODVector&lt; T, Allocator &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" line="245" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PODVector.H" bodystart="246" bodyend="781"/>
    <listofallmembers>
      <member refid="classamrex_1_1PODVector_1af6fc3e8635c3829330db263343ab6f59" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>AllocateBufferForInsert</name></member>
      <member refid="classamrex_1_1PODVector_1a5e58adad8e3a9824ae172c4beeaa3b76" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>AllocateBufferForPush</name></member>
      <member refid="classamrex_1_1PODVector_1af9a80a3988ccc51fd593974ea6b21df2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>allocator_type</name></member>
      <member refid="classamrex_1_1PODVector_1a8d2722278ba3ee0ec060e4a0c26fd1dc" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>assign</name></member>
      <member refid="classamrex_1_1PODVector_1a7fd3f892debb6d633f30864aac18d858" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>assign</name></member>
      <member refid="classamrex_1_1PODVector_1aa0537d2b1d3afed5553c0b871f177de4" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>assign</name></member>
      <member refid="classamrex_1_1PODVector_1a3ddec04bd145211bbd1fefac3e005211" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>assign</name></member>
      <member refid="classamrex_1_1PODVector_1a2f7b499a6deaa9062f42552e90766de6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>back</name></member>
      <member refid="classamrex_1_1PODVector_1a94624aaa5b0a5c99b6a6e755fcb39120" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>back</name></member>
      <member refid="classamrex_1_1PODVector_1a688bc1525c5bcb7456f6423383540666" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>begin</name></member>
      <member refid="classamrex_1_1PODVector_1a0d45a6981becc1c5a1185029a91d47f6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>begin</name></member>
      <member refid="classamrex_1_1PODVector_1ab0c66f33cd2db51d1c4d142e175eefd3" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>capacity</name></member>
      <member refid="classamrex_1_1PODVector_1a0def3f145344eccc86425f242f188ac8" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>cbegin</name></member>
      <member refid="classamrex_1_1PODVector_1ab181f05f4a962b1a5f6092ba124bc9a6" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>cend</name></member>
      <member refid="classamrex_1_1PODVector_1aab4feefd754fb80185d22c9a6708caea" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>clear</name></member>
      <member refid="classamrex_1_1PODVector_1ac32d9f644793a1c54fe9979e7307f7ba" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>const_iterator</name></member>
      <member refid="classamrex_1_1PODVector_1a1d52cfcb84489a5f66f8d7ca5597795e" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>const_pointer</name></member>
      <member refid="classamrex_1_1PODVector_1adb5652b40f09c48b793ce3bef45ff183" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>const_reference</name></member>
      <member refid="classamrex_1_1PODVector_1ade82f075bd0f551b43bed2182af5c5fb" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>const_reverse_iterator</name></member>
      <member refid="classamrex_1_1PODVector_1a2c68dc479595f1cfeb16dc8c5e3a8c81" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>crbegin</name></member>
      <member refid="classamrex_1_1PODVector_1aa4c942fc07ff0e247a2857deeaa773ae" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>crend</name></member>
      <member refid="classamrex_1_1PODVector_1a52a678e008fab2346394fcad18bc90c4" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>data</name></member>
      <member refid="classamrex_1_1PODVector_1a7915ebc269c31e0ca4dd52ea91b782ad" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>data</name></member>
      <member refid="classamrex_1_1PODVector_1aed3e37de016bb3a5bdeef31fe0f8b4e0" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1PODVector_1ae1c2484fecf96587fdb95ba7fffc55ad" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1PODVector_1aea40df219b90fb5d86fa4fb3b8f270c3" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>difference_type</name></member>
      <member refid="classstd_1_1allocator_1a55f88dab1194d6b8a34e46017c4dfd79" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>elements</name></member>
      <member refid="classamrex_1_1PODVector_1af46775770f6ac9e8696c8e8fd80da03e" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>empty</name></member>
      <member refid="classamrex_1_1PODVector_1a834016620c6c540a3af5cbe7a2637bed" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>end</name></member>
      <member refid="classamrex_1_1PODVector_1acd98b753ad23f8ace8640192eaf907e2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>end</name></member>
      <member refid="classamrex_1_1PODVector_1a1299b5a44efad2f0c8966d45ad0b61f5" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>erase</name></member>
      <member refid="classamrex_1_1PODVector_1aa99bd0cb7a274579760788af8dbd2dea" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>erase</name></member>
      <member refid="classamrex_1_1PODVector_1ae35d54db01ac368409bd57f8e2f91941" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>front</name></member>
      <member refid="classamrex_1_1PODVector_1a24668b130567e7b47b01a5342ac943a2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>front</name></member>
      <member refid="classamrex_1_1PODVector_1a67de98b5efe335d818e6bc91911418ff" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>get_allocator</name></member>
      <member refid="classamrex_1_1PODVector_1a60bd0f3726b18f1015e6bebece37f679" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>GetNewCapacityForPush</name></member>
      <member refid="classamrex_1_1PODVector_1a0e8d37623b1314d826c263bdf5be3d26" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1a1bd112fd8425ebbf152b979c27629357" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1a0384ebf38ab1dbf96a080ff6abaf45c7" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1a4b7de0d9bfdaa4615eb0143265f2cbb9" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1a5295d29a95b00f0b0809881e3a555905" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>insert</name></member>
      <member refid="classamrex_1_1PODVector_1a5895b3a2414fe5808db523612e438ab8" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>iterator</name></member>
      <member refid="classamrex_1_1PODVector_1ab34b6361d0ed17fe5d62a6a11dc21174" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>m_capacity</name></member>
      <member refid="classamrex_1_1PODVector_1aa3653b70897299b34df8afff92bb2299" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>m_data</name></member>
      <member refid="classamrex_1_1PODVector_1a9ff96f69373c71e0ce54cae0b724c374" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>m_size</name></member>
      <member refid="classamrex_1_1PODVector_1a4731233b08ab3019e0f71a2e9a78a16a" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1PODVector_1a79713d96447fdc1d95b539753ef20e51" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>operator=</name></member>
      <member refid="classamrex_1_1PODVector_1af7f6e724b950732247737bc755624931" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>operator=</name></member>
      <member refid="classamrex_1_1PODVector_1a553df993568cf65c1252d805c7cfcd8e" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1PODVector_1a57c5c0338de67e3329a4e33e0500527b" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1PODVector_1a8cbeac763750da6c5bfc9958bbb123d9" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1a342ac4a8fd2ef2b61b49242fa28a2057" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1a6340b7de6f0414037450ce9749af867b" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1aefdcef17153e4edbad24f0c5419287e7" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1a02e18e4e17cc3356084fa3be3c3f44b3" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1a3654586fb4dd4a65acf395935c6ed4a7" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1abac5cd6b7981b06fe091b1cea5b54579" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>PODVector</name></member>
      <member refid="classamrex_1_1PODVector_1a3c87edf01e970b09b0a59f130ada9262" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>pointer</name></member>
      <member refid="classamrex_1_1PODVector_1a437b046dcdfcfe81a587846c4068c95a" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>pop_back</name></member>
      <member refid="classamrex_1_1PODVector_1af89cd4b6f177740be608d75ccf9eb045" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>push_back</name></member>
      <member refid="classamrex_1_1PODVector_1aa95b5d33b04423ffc385e2c8f2096876" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>rbegin</name></member>
      <member refid="classamrex_1_1PODVector_1a8dc6a6dec2668ff14d083905ed5b128a" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>rbegin</name></member>
      <member refid="classamrex_1_1PODVector_1abf56886aed8de2e01e1da75b1c989351" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>reference</name></member>
      <member refid="classamrex_1_1PODVector_1a62f0bd74d3b57e02621753ca0892e892" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>rend</name></member>
      <member refid="classamrex_1_1PODVector_1a951939815fe8ce7a68fd156df98d76e9" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>rend</name></member>
      <member refid="classamrex_1_1PODVector_1a1acdad6998ff1a1464020b0b70b69e1f" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>reserve</name></member>
      <member refid="classamrex_1_1PODVector_1ac5114811535bc90b00c115260f83b20c" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>resize</name></member>
      <member refid="classamrex_1_1PODVector_1ae77d9927b9cbf583c1c81e38ae11cb5d" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>resize</name></member>
      <member refid="classamrex_1_1PODVector_1a0de3fd1db54cd0fb49dec4a4e3f21e59" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>resize_without_init_snan</name></member>
      <member refid="classamrex_1_1PODVector_1a3a90e6ff2204052e56983913fa5437e8" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>reverse_iterator</name></member>
      <member refid="classamrex_1_1PODVector_1a3cff4b6aa7fd45c59b2225de7f72f979" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>shrink_to_fit</name></member>
      <member refid="classamrex_1_1PODVector_1a1cdc3c767875be38aa4e622280597347" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>size</name></member>
      <member refid="classamrex_1_1PODVector_1a9303944a518a80618dd3f19c92a8a0f2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>size_type</name></member>
      <member refid="classamrex_1_1PODVector_1a20b9cc552a434d343fd01e5c62b39ef2" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>swap</name></member>
      <member refid="classamrex_1_1PODVector_1a28a9b3abe95194c50e3e7bcdc069219b" prot="private" virt="non-virtual"><scope>amrex::PODVector</scope><name>UpdateDataPtr</name></member>
      <member refid="classamrex_1_1PODVector_1a84b384d831870fe5521721c6414cab99" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>value_type</name></member>
      <member refid="classamrex_1_1PODVector_1acc9a13384ea6afdf5c637b9f11b091ba" prot="public" virt="non-virtual"><scope>amrex::PODVector</scope><name>~PODVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
