<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1StateDescriptor" kind="class" language="C++" prot="public">
    <compoundname>amrex::StateDescriptor</compoundname>
    <includes refid="AMReX__StateDescriptor_8H" local="no">AMReX_StateDescriptor.H</includes>
    <innerclass refid="classamrex_1_1StateDescriptor_1_1BndryFunc" prot="public">amrex::StateDescriptor::BndryFunc</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434" prot="public" static="no" strong="no">
        <type></type>
        <name>TimeCenter</name>
        <qualifiedname>amrex::StateDescriptor::TimeCenter</qualifiedname>
        <enumvalue id="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434ab4007993e9c944fbfd42096732e4b430" prot="public">
          <name>Point</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434a0135564ab7966e377f4b9fff395b6eb6" prot="public">
          <name>Interval</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines the temporal centeredness of data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="39" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="39" bodyend="39"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1StateDescriptor_1a3228f3db7c3a74f0144dbed2bf674673" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DescriptorList</definition>
        <argsstring></argsstring>
        <name>DescriptorList</name>
        <qualifiedname>amrex::StateDescriptor::DescriptorList</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="34" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1acb33de9ee20312affa72aa7cc80b8bdd" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
        <definition>IndexType amrex::StateDescriptor::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>amrex::StateDescriptor::type</qualifiedname>
        <briefdescription>
<para>Cell centered, node centered ... </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="391" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a75ba4e192cc92deb94fa756eadba363f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434" kindref="member">TimeCenter</ref></type>
        <definition>TimeCenter amrex::StateDescriptor::t_type</definition>
        <argsstring></argsstring>
        <name>t_type</name>
        <qualifiedname>amrex::StateDescriptor::t_type</qualifiedname>
        <initializer>{<ref refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434ab4007993e9c944fbfd42096732e4b430" kindref="member">Point</ref>}</initializer>
        <briefdescription>
<para>Temporal centering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="392" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="392" bodyend="392"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1aaa15aa2f29efcb1129570ab6ba798db4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::StateDescriptor::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <qualifiedname>amrex::StateDescriptor::id</qualifiedname>
        <initializer>{-1}</initializer>
        <briefdescription>
<para>Unique id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="393" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="393" bodyend="393"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1ab0fc399bd97c511820bc806a78ac10a9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::StateDescriptor::ncomp</definition>
        <argsstring></argsstring>
        <name>ncomp</name>
        <qualifiedname>amrex::StateDescriptor::ncomp</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Number of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="394" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1ae0e3631c9cd4872714c6d926073d1a51" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::StateDescriptor::ngrow</definition>
        <argsstring></argsstring>
        <name>ngrow</name>
        <qualifiedname>amrex::StateDescriptor::ngrow</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Grow factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="395" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a0bde7d6910db8c5b29d8ea845f7dff88" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
        <definition>InterpBase* amrex::StateDescriptor::mapper</definition>
        <argsstring></argsstring>
        <name>mapper</name>
        <qualifiedname>amrex::StateDescriptor::mapper</qualifiedname>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Default interpolator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="396" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a4316157b8036d764b2c4eab037fc03f3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::m_extrap</definition>
        <argsstring></argsstring>
        <name>m_extrap</name>
        <qualifiedname>amrex::StateDescriptor::m_extrap</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Can extrapolate in time? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="397" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a83266e34a32f66f82481390292960e28" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::m_store_in_checkpoint</definition>
        <argsstring></argsstring>
        <name>m_store_in_checkpoint</name>
        <qualifiedname>amrex::StateDescriptor::m_store_in_checkpoint</qualifiedname>
        <initializer>{true}</initializer>
        <briefdescription>
<para>Should store this in the checkpoint file? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="398" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="398" bodyend="398"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a19d2b43cab064c1ea321f9f25970c68f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::StateDescriptor::names</definition>
        <argsstring></argsstring>
        <name>names</name>
        <qualifiedname>amrex::StateDescriptor::names</qualifiedname>
        <briefdescription>
<para>Printable names of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="399" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a028da3417e8c939df2795b540b9b3533" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;</type>
        <definition>Vector&lt;BCRec&gt; amrex::StateDescriptor::bc</definition>
        <argsstring></argsstring>
        <name>bc</name>
        <qualifiedname>amrex::StateDescriptor::bc</qualifiedname>
        <briefdescription>
<para>Array of bndry types for entire level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="400" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a441b52239a3fe61b2d2fa90f6174ef7a" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">BndryFunc</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;BndryFunc&gt; &gt; amrex::StateDescriptor::bc_func</definition>
        <argsstring></argsstring>
        <name>bc_func</name>
        <qualifiedname>amrex::StateDescriptor::bc_func</qualifiedname>
        <briefdescription>
<para>Array of pointers to bndry fill functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="401" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a7e0f7bd48cf94860e432afd6adbc3747" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::StateDescriptor::m_primary</definition>
        <argsstring></argsstring>
        <name>m_primary</name>
        <qualifiedname>amrex::StateDescriptor::m_primary</qualifiedname>
        <briefdescription>
<para>Are we a primary or secondary? (true or false) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="402" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a507dc54afbf20a888ba1dab3cd62c040" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::StateDescriptor::m_groupsize</definition>
        <argsstring></argsstring>
        <name>m_groupsize</name>
        <qualifiedname>amrex::StateDescriptor::m_groupsize</qualifiedname>
        <briefdescription>
<para>Groupsize if we&apos;re a primary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="403" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a13d32bba91b8bb8d5a707df7147f1fa8" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> * &gt;</type>
        <definition>Vector&lt;InterpBase*&gt; amrex::StateDescriptor::mapper_comp</definition>
        <argsstring></argsstring>
        <name>mapper_comp</name>
        <qualifiedname>amrex::StateDescriptor::mapper_comp</qualifiedname>
        <briefdescription>
<para>If mapper_comp[icomp] != 0, that map is used instead of mapper when interpolating icomp; otherwise, mapper is used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="409" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1a8cfce27efc0fb16d60e975f0f55b39f5" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::StateDescriptor::max_map_start_comp</definition>
        <argsstring></argsstring>
        <name>max_map_start_comp</name>
        <qualifiedname>amrex::StateDescriptor::max_map_start_comp</qualifiedname>
        <briefdescription>
<para>For component icomp, max_map_start_comp[icomp] and min_map_end_comp[icomp] represent the maximum starting index and minimum ending index with which to use mapper_comp[icomp] when interpolating component icomp. These are convenient for using with &quot;coupled&quot; multiple component maps like <ref refid="classamrex_1_1CellConservativeLinear" kindref="compound">CellConservativeLinear</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no need to &quot;couple&quot; a component, max_map_start_comp[icomp] and min_map_end_comp[icomp] simply equal icomp. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="421" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1aa9eb9d029833fd52f74bcb305d5e00bd" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::StateDescriptor::min_map_end_comp</definition>
        <argsstring></argsstring>
        <name>min_map_end_comp</name>
        <qualifiedname>amrex::StateDescriptor::min_map_end_comp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="422" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="422" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1StateDescriptor_1af06461b6b33c771b006b187796d88630" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::StateDescriptor::bf_ext_dir_threadsafe</definition>
        <argsstring></argsstring>
        <name>bf_ext_dir_threadsafe</name>
        <qualifiedname>amrex::StateDescriptor::bf_ext_dir_threadsafe</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="424" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="424" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1ad0751c6380b8996cb85c91ff4dc9f7ea" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::StateDescriptor::StateDescriptor</definition>
        <argsstring>() noexcept</argsstring>
        <name>StateDescriptor</name>
        <qualifiedname>amrex::StateDescriptor::StateDescriptor</qualifiedname>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="138" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a71b48fdb0b98b5fb38c19c20d9fb85bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::StateDescriptor::StateDescriptor</definition>
        <argsstring>(IndexType btyp, TimeCenter ttyp, int ident, int nextra, int num_comp, InterpBase *interp, bool extrap=false, bool store_in_checkpoint=true)</argsstring>
        <name>StateDescriptor</name>
        <qualifiedname>amrex::StateDescriptor::StateDescriptor</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
          <declname>btyp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434" kindref="member">TimeCenter</ref></type>
          <declname>ttyp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ident</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nextra</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
          <declname>interp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>store_in_checkpoint</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor that sets all data members. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btyp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttyp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ident</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nextra</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrap</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_in_checkpoint</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="152" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="185" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a8574181dd052bf94afc4c3d06a5c68b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateDescriptor::define</definition>
        <argsstring>(IndexType btyp, TimeCenter ttyp, int ident, int nextra, int num_comp, InterpBase *interp, bool extrap=false, bool store_in_checkpoint=true)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::StateDescriptor::define</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
          <declname>btyp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434" kindref="member">TimeCenter</ref></type>
          <declname>ttyp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ident</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nextra</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
          <declname>interp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>store_in_checkpoint</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Define the data members if constructed with default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>btyp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttyp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ident</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nextra</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrap</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store_in_checkpoint</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="173" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="306" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a3b6539c147eae1449f8b9ca1751d8867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateDescriptor::setComponent</definition>
        <argsstring>(int comp, const std::string &amp;nm, const BCRec &amp;bc, const BndryFunc &amp;func, InterpBase *interp=nullptr, int max_map_start_comp=-1, int min_map_end_comp=-1)</argsstring>
        <name>setComponent</name>
        <qualifiedname>amrex::StateDescriptor::setComponent</qualifiedname>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">BndryFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
          <declname>interp</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>max_map_start_comp</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>min_map_end_comp</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Sets details of comp component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_map_start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_map_end_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="193" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="337" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a70d556135903355292269f683db595f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateDescriptor::setComponent</definition>
        <argsstring>(int comp, const std::string &amp;nm, const BCRec &amp;bc, const BndryFunc &amp;func, InterpBase *interp, bool a_primary, int groupsize)</argsstring>
        <name>setComponent</name>
        <qualifiedname>amrex::StateDescriptor::setComponent</qualifiedname>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">BndryFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
          <declname>interp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_primary</declname>
        </param>
        <param>
          <type>int</type>
          <declname>groupsize</declname>
        </param>
        <briefdescription>
<para>Sets details of comp component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_primary</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupsize</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="212" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="370" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a5ac46df4129e909631702c6cf11c0df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateDescriptor::resetComponentBCs</definition>
        <argsstring>(int comp, const BCRec &amp;bcr, const BndryFunc &amp;func)</argsstring>
        <name>resetComponentBCs</name>
        <qualifiedname>amrex::StateDescriptor::resetComponentBCs</qualifiedname>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bcr</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">BndryFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Resets boundary condition data for comp component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="227" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="216" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a97b4e7ac1dadacb050889cd919123863" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateDescriptor::setUpMaps</definition>
        <argsstring>(int &amp;use_default_map, const InterpBase *default_map, int start_comp, int num_comp, InterpBase **&amp;maps, int &amp;nmaps, int *&amp;map_start_comp, int *&amp;map_num_comp, int *&amp;max_start_comp, int *&amp;min_end_comp) const</argsstring>
        <name>setUpMaps</name>
        <qualifiedname>amrex::StateDescriptor::setUpMaps</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>use_default_map</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
          <declname>default_map</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> **&amp;</type>
          <declname>maps</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nmaps</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>map_start_comp</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>map_num_comp</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>max_start_comp</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>min_end_comp</declname>
        </param>
        <briefdescription>
<para>Set interpolaters for a subset of the state vector components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>use_default_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maps</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmaps</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_end_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="245" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="398" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1af8ba2875788e8e7b91f4b3fa77063b19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateDescriptor::dumpNames</definition>
        <argsstring>(std::ostream &amp;os, int start_comp, int num_comp) const</argsstring>
        <name>dumpNames</name>
        <qualifiedname>amrex::StateDescriptor::dumpNames</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Output names of components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="278" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="385" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1ac5eb703c82d394b6736620116b12206e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
        <definition>IndexType amrex::StateDescriptor::getType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getType</name>
        <qualifiedname>amrex::StateDescriptor::getType</qualifiedname>
        <briefdescription>
<para>Returns the IndexType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="285" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a338d1a0966e1f91f4f65fd5aed7958cc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434" kindref="member">StateDescriptor::TimeCenter</ref></type>
        <definition>StateDescriptor::TimeCenter amrex::StateDescriptor::timeType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>timeType</name>
        <qualifiedname>amrex::StateDescriptor::timeType</qualifiedname>
        <briefdescription>
<para>Returns <ref refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434" kindref="member">StateDescriptor::TimeCenter</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="290" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a831e9baa65c6e3a16119230c16dec212" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::StateDescriptor::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <qualifiedname>amrex::StateDescriptor::nComp</qualifiedname>
        <briefdescription>
<para>Returns number of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="295" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1ae8e2531823af7371e1df8e414a8c6fd9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::StateDescriptor::nExtra</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nExtra</name>
        <qualifiedname>amrex::StateDescriptor::nExtra</qualifiedname>
        <briefdescription>
<para>Returns the grow factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="300" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a0afe8de243a0504d0a3f57b0c6c1310b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
        <definition>InterpBase * amrex::StateDescriptor::interp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>interp</name>
        <qualifiedname>amrex::StateDescriptor::interp</qualifiedname>
        <briefdescription>
<para>Returns the interpolater. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="305" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a07ab21f13b747541446a303997f24aee" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
        <definition>InterpBase * amrex::StateDescriptor::interp</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>interp</name>
        <qualifiedname>amrex::StateDescriptor::interp</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the interpolater of specified component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="312" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a1c3308f0a08a991d3b3d2576e9d1e149" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::StateDescriptor::name</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>name</name>
        <qualifiedname>amrex::StateDescriptor::name</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the name of specified component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="319" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a289cc1c0fcd4e78b5a363ef048940b70" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
        <definition>const BCRec &amp; amrex::StateDescriptor::getBC</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>getBC</name>
        <qualifiedname>amrex::StateDescriptor::getBC</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> of specified component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="326" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1abbe594f5217319d2ca53015fbaaf73cb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
        <definition>const Vector&lt; BCRec &gt; &amp; amrex::StateDescriptor::getBCs</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBCs</name>
        <qualifiedname>amrex::StateDescriptor::getBCs</qualifiedname>
        <briefdescription>
<para>Returns all BCRecs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="331" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1aee4ddf660e8d5fda7a5944dd35314aed" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">BndryFunc</ref> &amp;</type>
        <definition>const StateDescriptor::BndryFunc &amp; amrex::StateDescriptor::bndryFill</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>bndryFill</name>
        <qualifiedname>amrex::StateDescriptor::bndryFill</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">BndryFunc</ref> of specified component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="338" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a426236914671d1e988849aa8c1435c01" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::StateDescriptor::inRange</definition>
        <argsstring>(int sc, int nc) const noexcept</argsstring>
        <name>inRange</name>
        <qualifiedname>amrex::StateDescriptor::inRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>sc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <briefdescription>
<para>Is sc&gt;=0 &amp;&amp; sc+nc&lt;=ncomp ? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sc</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nc</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="346" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a26a49900d23f1e6dae4904636de28807" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::identicalInterps</definition>
        <argsstring>(int scomp, int ncomp) const noexcept</argsstring>
        <name>identicalInterps</name>
        <qualifiedname>amrex::StateDescriptor::identicalInterps</qualifiedname>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Are the interpolaters in the specified range identical? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="354" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="517" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a8c32673683fea367d4e58db6c28868ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, int &gt; &gt; amrex::StateDescriptor::sameInterps</definition>
        <argsstring>(int scomp, int ncomp) const</argsstring>
        <name>sameInterps</name>
        <qualifiedname>amrex::StateDescriptor::sameInterps</qualifiedname>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="358" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="535" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a831ab234733f1a75b0d42fffa6a3db0a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::extrap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>extrap</name>
        <qualifiedname>amrex::StateDescriptor::extrap</qualifiedname>
        <briefdescription>
<para>Can extrapolate in time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="363" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a66cfbf90a5c1eab91499e5f4d2e080a1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::store_in_checkpoint</definition>
        <argsstring>() const noexcept</argsstring>
        <name>store_in_checkpoint</name>
        <qualifiedname>amrex::StateDescriptor::store_in_checkpoint</qualifiedname>
        <briefdescription>
<para>Should store this <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> in the checkpoint file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="368" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a31a66854b5336c0a76e23a9457877713" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::primary</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>primary</name>
        <qualifiedname>amrex::StateDescriptor::primary</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="370" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="370" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a8bf758be7411312c155ccd5d0513e6b0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::StateDescriptor::groupsize</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>groupsize</name>
        <qualifiedname>amrex::StateDescriptor::groupsize</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="372" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a45c110d37b26e0c322c1af1089ecbfea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::RunOnGPU</definition>
        <argsstring>() const noexcept</argsstring>
        <name>RunOnGPU</name>
        <qualifiedname>amrex::StateDescriptor::RunOnGPU</qualifiedname>
        <briefdescription>
<para>will it run on gpu? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="378" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="378" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1ac2500f92c0477835a434a81535fc5960" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::hasBndryFuncFab</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasBndryFuncFab</name>
        <qualifiedname>amrex::StateDescriptor::hasBndryFuncFab</qualifiedname>
        <briefdescription>
<para>has new fab version of <ref refid="classamrex_1_1StateDescriptor_1_1BndryFunc" kindref="compound">BndryFunc</ref>? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="383" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="383" bodyend="383"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1af4cf311bbaf21d9855bc3d8928f890f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::StateDescriptor::cleanUpMaps</definition>
        <argsstring>(InterpBase **&amp;maps, int *&amp;map_start_comp, int *&amp;map_num_comp, int *&amp;max_start_comp, int *&amp;min_end_comp)</argsstring>
        <name>cleanUpMaps</name>
        <qualifiedname>amrex::StateDescriptor::cleanUpMaps</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> **&amp;</type>
          <declname>maps</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>map_start_comp</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>map_num_comp</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>max_start_comp</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>min_end_comp</declname>
        </param>
        <briefdescription>
<para>Cleanup interpolaters for a subset of the state vector components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maps</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_end_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="265" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="503" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1a5dde8b1156c069f9ec776cb778b2b1c8" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::StateDescriptor::setBndryFuncThreadSafety</definition>
        <argsstring>(int ext_dir_safe) noexcept</argsstring>
        <name>setBndryFuncThreadSafety</name>
        <qualifiedname>amrex::StateDescriptor::setBndryFuncThreadSafety</qualifiedname>
        <param>
          <type>int</type>
          <declname>ext_dir_safe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="385" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="385" bodyend="387"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1StateDescriptor_1ac158f317f5d49b5ba4a4c10223df05bc" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::StateDescriptor::bf_thread_safety</definition>
        <argsstring>(const int *lo, const int *hi, const int *dom_lo, const int *dom_hi, const int *bc, int ng)</argsstring>
        <name>bf_thread_safety</name>
        <qualifiedname>amrex::StateDescriptor::bf_thread_safety</qualifiedname>
        <param>
          <type>const int *</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>dom_lo</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>dom_hi</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="426" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.cpp" bodystart="14" bodyend="27"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Attributes of <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>amrex::IndexTypeND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>T</label>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; amrex::BCRec &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; amrex::InterpBase * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::StateDescriptor::BndryFunc &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="4">
        <label>amrex::InterpBase</label>
        <link refid="classamrex_1_1InterpBase"/>
      </node>
      <node id="1">
        <label>amrex::StateDescriptor</label>
        <link refid="classamrex_1_1StateDescriptor"/>
        <childnode refid="2" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mapper</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>names</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>bc</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>bc_func</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_groupsize</edgelabel>
          <edgelabel>m_primary</edgelabel>
          <edgelabel>max_map_start_comp</edgelabel>
          <edgelabel>min_map_end_comp</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mapper_comp</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="33" bodyend="429"/>
    <listofallmembers>
      <member refid="classamrex_1_1StateDescriptor_1a028da3417e8c939df2795b540b9b3533" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>bc</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a441b52239a3fe61b2d2fa90f6174ef7a" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>bc_func</name></member>
      <member refid="classamrex_1_1StateDescriptor_1af06461b6b33c771b006b187796d88630" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>bf_ext_dir_threadsafe</name></member>
      <member refid="classamrex_1_1StateDescriptor_1ac158f317f5d49b5ba4a4c10223df05bc" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>bf_thread_safety</name></member>
      <member refid="classamrex_1_1StateDescriptor_1aee4ddf660e8d5fda7a5944dd35314aed" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>bndryFill</name></member>
      <member refid="classamrex_1_1StateDescriptor_1af4cf311bbaf21d9855bc3d8928f890f4" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>cleanUpMaps</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a8574181dd052bf94afc4c3d06a5c68b5" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>define</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a3228f3db7c3a74f0144dbed2bf674673" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>DescriptorList</name></member>
      <member refid="classamrex_1_1StateDescriptor_1af8ba2875788e8e7b91f4b3fa77063b19" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>dumpNames</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a831ab234733f1a75b0d42fffa6a3db0a" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>extrap</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a289cc1c0fcd4e78b5a363ef048940b70" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>getBC</name></member>
      <member refid="classamrex_1_1StateDescriptor_1abbe594f5217319d2ca53015fbaaf73cb" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>getBCs</name></member>
      <member refid="classamrex_1_1StateDescriptor_1ac5eb703c82d394b6736620116b12206e" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>getType</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a8bf758be7411312c155ccd5d0513e6b0" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>groupsize</name></member>
      <member refid="classamrex_1_1StateDescriptor_1ac2500f92c0477835a434a81535fc5960" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>hasBndryFuncFab</name></member>
      <member refid="classamrex_1_1StateDescriptor_1aaa15aa2f29efcb1129570ab6ba798db4" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>id</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a26a49900d23f1e6dae4904636de28807" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>identicalInterps</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a426236914671d1e988849aa8c1435c01" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>inRange</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a0afe8de243a0504d0a3f57b0c6c1310b" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>interp</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a07ab21f13b747541446a303997f24aee" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>interp</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434a0135564ab7966e377f4b9fff395b6eb6" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>Interval</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a4316157b8036d764b2c4eab037fc03f3" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>m_extrap</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a507dc54afbf20a888ba1dab3cd62c040" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>m_groupsize</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a7e0f7bd48cf94860e432afd6adbc3747" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>m_primary</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a83266e34a32f66f82481390292960e28" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>m_store_in_checkpoint</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a0bde7d6910db8c5b29d8ea845f7dff88" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>mapper</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a13d32bba91b8bb8d5a707df7147f1fa8" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>mapper_comp</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a8cfce27efc0fb16d60e975f0f55b39f5" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>max_map_start_comp</name></member>
      <member refid="classamrex_1_1StateDescriptor_1aa9eb9d029833fd52f74bcb305d5e00bd" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>min_map_end_comp</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a1c3308f0a08a991d3b3d2576e9d1e149" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>name</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a19d2b43cab064c1ea321f9f25970c68f" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>names</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a831e9baa65c6e3a16119230c16dec212" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>nComp</name></member>
      <member refid="classamrex_1_1StateDescriptor_1ab0fc399bd97c511820bc806a78ac10a9" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>ncomp</name></member>
      <member refid="classamrex_1_1StateDescriptor_1ae8e2531823af7371e1df8e414a8c6fd9" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>nExtra</name></member>
      <member refid="classamrex_1_1StateDescriptor_1ae0e3631c9cd4872714c6d926073d1a51" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>ngrow</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434ab4007993e9c944fbfd42096732e4b430" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>Point</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a31a66854b5336c0a76e23a9457877713" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>primary</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a5ac46df4129e909631702c6cf11c0df7" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>resetComponentBCs</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a45c110d37b26e0c322c1af1089ecbfea" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>RunOnGPU</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a8c32673683fea367d4e58db6c28868ce" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>sameInterps</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a5dde8b1156c069f9ec776cb778b2b1c8" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>setBndryFuncThreadSafety</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a3b6539c147eae1449f8b9ca1751d8867" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>setComponent</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a70d556135903355292269f683db595f6" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>setComponent</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a97b4e7ac1dadacb050889cd919123863" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>setUpMaps</name></member>
      <member refid="classamrex_1_1StateDescriptor_1ad0751c6380b8996cb85c91ff4dc9f7ea" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>StateDescriptor</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a71b48fdb0b98b5fb38c19c20d9fb85bc" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>StateDescriptor</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a66cfbf90a5c1eab91499e5f4d2e080a1" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>store_in_checkpoint</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a75ba4e192cc92deb94fa756eadba363f" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>t_type</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a8e14d2e57bdb2fbd440c8c26c8b99434" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>TimeCenter</name></member>
      <member refid="classamrex_1_1StateDescriptor_1a338d1a0966e1f91f4f65fd5aed7958cc" prot="public" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>timeType</name></member>
      <member refid="classamrex_1_1StateDescriptor_1acb33de9ee20312affa72aa7cc80b8bdd" prot="private" virt="non-virtual"><scope>amrex::StateDescriptor</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
