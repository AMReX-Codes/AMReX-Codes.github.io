<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceamrex_1_1ParallelDescriptor" kind="namespace" language="C++">
    <compoundname>amrex::ParallelDescriptor</compoundname>
    <innerclass refid="classamrex_1_1ParallelDescriptor_1_1Message" prot="public">amrex::ParallelDescriptor::Message</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" prot="public">amrex::ParallelDescriptor::Mpi_typemap</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" prot="public">amrex::ParallelDescriptor::ProcessTeam</innerclass>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor_1_1util">amrex::ParallelDescriptor::util</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1af122c95310b715f9006b650405e56bc8" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::use_gpu_aware_mpi</definition>
        <argsstring></argsstring>
        <name>use_gpu_aware_mpi</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" kindref="compound">ProcessTeam</ref></type>
        <definition>ProcessTeam amrex::ParallelDescriptor::m_Team</definition>
        <argsstring></argsstring>
        <name>m_Team</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" prot="public" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::ParallelDescriptor::m_comm</definition>
        <argsstring></argsstring>
        <name>m_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a715b18055542b3909b818a2eb81ff469" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::m_MinTag</definition>
        <argsstring></argsstring>
        <name>m_MinTag</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a1582152747831aa49cac881d1bbec9ad" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::m_MaxTag</definition>
        <argsstring></argsstring>
        <name>m_MaxTag</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a170c7ee692d457514ef07c0d6206f7e2" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::ParallelDescriptor::ioProcessor</definition>
        <argsstring></argsstring>
        <name>ioProcessor</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The MPI rank number of the I/O Processor (probably rank 0). This rank is usually used to write to stdout. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac6df74b4b37bb6ee58dffea68507d259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string amrex::ParallelDescriptor::Unnamed</definition>
        <argsstring>(&quot;Unnamed&quot;)</argsstring>
        <name>Unnamed</name>
        <param>
          <type>&quot;Unnamed&quot;</type>
        </param>
        <briefdescription>
<para>Used as default argument to <ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adc667e1643fbfe75b057369aed1ca519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::StartParallel</definition>
        <argsstring>(int *argc=0, char ***argv=0, MPI_Comm mpi_comm=MPI_COMM_WORLD)</argsstring>
        <name>StartParallel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>argc</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>char ***</type>
          <declname>argv</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>mpi_comm</declname>
          <defval><ref refid="AMReX__ccse-mpi_8H_1ac57c1fc8484fb9b5c8359a559851107b" kindref="member">MPI_COMM_WORLD</ref></defval>
        </param>
        <briefdescription>
<para>Perform any needed parallel initialization. This MUST be the first routine in this class called from within a program. </para>        </briefdescription>
        <detaileddescription>
<para>BL_USE_MPI </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1764" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a916170832821539e49f051409018ffcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>called in <ref refid="namespaceamrex_1a187cdb4f4273fdf9bcad01ac8e3fcc4d" kindref="member">amrex::Initialize()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2156" bodyend="2164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a95032768c19f94a64196f85fefeee239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="112" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_AsyncOut.cpp" bodystart="58" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3e62b2c32fa5036fc1bb1dff1d819de6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::UseGpuAwareMpi</definition>
        <argsstring>()</argsstring>
        <name>UseGpuAwareMpi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af5ce3cf99985348d87f77ba2c811514f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::StartTeams</definition>
        <argsstring>()</argsstring>
        <name>StartTeams</name>
        <briefdescription>
<para>Split the process pool into teams. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="118" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2176" bodyend="2226"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1f1780bd83ee339ade2a2dd702473e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::EndTeams</definition>
        <argsstring>()</argsstring>
        <name>EndTeams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2230" bodyend="2233"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a990d0a17b08dcd68a0d77a7b35cfebaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::EndParallel</definition>
        <argsstring>()</argsstring>
        <name>EndParallel</name>
        <briefdescription>
<para>Perform any needed parallel finalization. This MUST be the last routine in this class called from within a program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="125" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1799" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyProc</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyProc</name>
        <briefdescription>
<para>return the rank number local to the current Parallel Context </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adc6941c4330302993547bfb867a1df31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyProc</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>MyProc</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="134" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="134" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a705e1be005fbada39a2ca69f6dae9b88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MinTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>MinTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="210" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab1375009d4e5cd0730cada71e3f18c33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MaxTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>MaxTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="211" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::ParallelDescriptor::Communicator</definition>
        <argsstring>() noexcept</argsstring>
        <name>Communicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="214" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NProcs</definition>
        <argsstring>() noexcept</argsstring>
        <name>NProcs</name>
        <briefdescription>
<para>return the number of MPI ranks local to the current Parallel Context </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="218" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7fe765fcc8bfc4c409483424a83fccf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NProcs</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>NProcs</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="224" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="224" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::IOProcessorNumber</definition>
        <argsstring>() noexcept</argsstring>
        <name>IOProcessorNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::IOProcessor</definition>
        <argsstring>() noexcept</argsstring>
        <name>IOProcessor</name>
        <briefdescription>
<para>Is this CPU the I/O Processor? To get the rank number, call <ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">IOProcessorNumber()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="250" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9397b95ec0069183061d45372eed1287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::IOProcessorNumber</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>IOProcessorNumber</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="256" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8780ee1130870c2cd65de891c71b9b76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::IOProcessor</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>IOProcessor</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="262" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9854dea7eb2ee59093ed0bd80af9063e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::TeamSize</definition>
        <argsstring>() noexcept</argsstring>
        <name>TeamSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="269" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af2f4fc272303fdc7f363d88ffd292c4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NTeams</definition>
        <argsstring>() noexcept</argsstring>
        <name>NTeams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a687dc008cc6ce7831496af1f8bbfff96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyTeamColor</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeamColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="279" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a564fb3e90a09a47e8213cdd2de4a2634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyTeamLead</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeamLead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="284" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acccfcdccaefb95d8178c5c9253113b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyRankInTeam</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyRankInTeam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a834c805f44e9aa2724debb07602d999e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::TeamLead</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>TeamLead</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="294" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::isTeamLead</definition>
        <argsstring>() noexcept</argsstring>
        <name>isTeamLead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="299" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="299" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::sameTeam</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>sameTeam</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="304" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a450001e6c4813cc1a122428e5f8c56f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::sameTeam</definition>
        <argsstring>(int rankA, int rankB) noexcept</argsstring>
        <name>sameTeam</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rankA</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rankB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="309" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::RankInLeadComm</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>RankInLeadComm</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="314" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::doTeamReduce</definition>
        <argsstring>() noexcept</argsstring>
        <name>doTeamReduce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" kindref="compound">ProcessTeam</ref> &amp;</type>
        <definition>const ProcessTeam&amp; amrex::ParallelDescriptor::MyTeam</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="324" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae7e03fbd86dab31d19593df2ad5adde6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>std::pair&lt;int,int&gt; amrex::ParallelDescriptor::team_range</definition>
        <argsstring>(int begin, int end, int rit=-1, int nworkers=0) noexcept</argsstring>
        <name>team_range</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nworkers</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="329" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="329" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae9b60ea81eb861f883e02edaa5876d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="373" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="373" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad8cac9ce7c8c2a234cde3400db6512a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, int rit, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="381" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="381" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1b1bd2a6da53acc442dac0945108b376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, int rit, int nworkers, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nworkers</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="389" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="389" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Barrier</definition>
        <argsstring>(const std::string &amp;message=Unnamed)</argsstring>
        <name>Barrier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac6df74b4b37bb6ee58dffea68507d259" kindref="member">Unnamed</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="397" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1815" bodyend="1815"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa8ebad8ea16a50d70821ec935c70aea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Barrier</definition>
        <argsstring>(const MPI_Comm &amp;comm, const std::string &amp;message=Unnamed)</argsstring>
        <name>Barrier</name>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac6df74b4b37bb6ee58dffea68507d259" kindref="member">Unnamed</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="398" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1816" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a38117de7f96b4cf7c923aea5dbc89da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>ParallelDescriptor::Message amrex::ParallelDescriptor::Abarrier</definition>
        <argsstring>()</argsstring>
        <name>Abarrier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1817" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aca030fa426f1c31401d7e46ef3c4ae4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>ParallelDescriptor::Message amrex::ParallelDescriptor::Abarrier</definition>
        <argsstring>(const MPI_Comm &amp;comm)</argsstring>
        <name>Abarrier</name>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="400" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1818" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1affba679357b6ad488b02adc81a353697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Test</definition>
        <argsstring>(MPI_Request &amp;request, int &amp;flag, MPI_Status &amp;status)</argsstring>
        <name>Test</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="402" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1820" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ace0982cd881d1f09d60a8e38b5565e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Comm_dup</definition>
        <argsstring>(MPI_Comm comm, MPI_Comm &amp;newcomm)</argsstring>
        <name>Comm_dup</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>newcomm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="404" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1824" bodyend="1824"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Abort</definition>
        <argsstring>(int errorcode=SIGABRT, bool backtrace=true)</argsstring>
        <name>Abort</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>errorcode</declname>
          <defval>SIGABRT</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>backtrace</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Abort with specified error code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="406" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1804" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a568bbd4bb8f719b9c0ba1950c10678ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * amrex::ParallelDescriptor::ErrorString</definition>
        <argsstring>(int errcode)</argsstring>
        <name>ErrorString</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>errcode</declname>
        </param>
        <briefdescription>
<para>ErrorString return string associated with error internal error condition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="408" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1813" bodyend="1813"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::ParallelDescriptor::second</definition>
        <argsstring>() noexcept</argsstring>
        <name>second</name>
        <briefdescription>
<para>Returns wall-clock seconds since start of execution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="410" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1913" bodyend="1916"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a85f79f28c8cb6cc5762e3edd80c57fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolAnd</definition>
        <argsstring>(bool &amp;rvar)</argsstring>
        <name>ReduceBoolAnd</name>
        <param>
          <type>bool &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>And-wise boolean reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="413" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1904" bodyend="1904"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a45569b295bf42f447fac8a9610790ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolAnd</definition>
        <argsstring>(bool &amp;rvar, int cpu)</argsstring>
        <name>ReduceBoolAnd</name>
        <param>
          <type>bool &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>And-wise boolean reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1907" bodyend="1907"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8e74f51d2321b7e827baae5d86a83824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolOr</definition>
        <argsstring>(bool &amp;rvar)</argsstring>
        <name>ReduceBoolOr</name>
        <param>
          <type>bool &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Or-wise boolean reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="418" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1905" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a45ff8728249b5e214f520e284c04143b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolOr</definition>
        <argsstring>(bool &amp;rvar, int cpu)</argsstring>
        <name>ReduceBoolOr</name>
        <param>
          <type>bool &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Or-wise boolean reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="420" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1908" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Real &amp;rvar)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real sum reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="423" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1828" bodyend="1828"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0329bc7c7dac44f28e589da8b51f90f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Real *rvar, int cnt)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="424" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1836" bodyend="1836"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2e6864b6b7866ce41c7d41cfd961568c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="425" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1842" bodyend="1842"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acf63edc9b791634aaee01966a9f20ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Real &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real sum reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="427" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1832" bodyend="1832"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5ff49950b9307555c1e2bf5bee451642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Real *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="428" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1840" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0b9f9c5bc4f384ba939f0aaeab8d05bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="429" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1846" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Real &amp;rvar)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real max reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="432" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1826" bodyend="1826"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af0fb71557913b8db39b4b44be0247225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Real *rvar, int cnt)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="433" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1834" bodyend="1834"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a64dba21e51015abe9de8ac24fab4811b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="434" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1843" bodyend="1843"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a32b30a9856cf8d162b9a023fcb981e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Real &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real max reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="436" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1830" bodyend="1830"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9cbf72964e4a7c67b590931a5fce45dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Real *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="437" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1838" bodyend="1838"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae433399fc2930cc766ff6a1f7a2e34f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="438" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1847" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Real &amp;rvar)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real min reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="441" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1827" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9afc75968888ce93106cce1beeeb2e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Real *rvar, int cnt)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="442" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1835" bodyend="1835"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a80163550f36a94b2a3426c4da40d1087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="443" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1844" bodyend="1844"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab7ff760f79048d84641347cf9d05c850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Real &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real min reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="445" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1831" bodyend="1831"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2e679e4ae8ac6ba49e52b3b8f19032a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Real *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="446" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1839" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acaab6be7bc06bae9160aa0050a82c719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="447" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1848" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Integer sum reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="450" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1880" bodyend="1880"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0f59b78ddec4caf56f47c2c4aea3b569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int *rvar, int cnt)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="451" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1888" bodyend="1888"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5dc8802a3fdec1698a17fb68be93401b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="452" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1896" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1afbd2261dcc7ea1687666a76188724baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Integer sum reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="454" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1884" bodyend="1884"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9073a119dcda583906de8999b27a65f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="455" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1892" bodyend="1892"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8ad18f3047a8d8412332fabd03ffdf5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="456" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1900" bodyend="1900"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Integer max reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="459" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1881" bodyend="1881"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a557f937eb9820b18b2827d388703087d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int *rvar, int cnt)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="460" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1889" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a14a30ebffe4778a95598aa2b0ed7cc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="461" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1897" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a24bb8ef806f88e3157be27c793ffb345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Integer max reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="463" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1885" bodyend="1885"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af8c25e84b0f1d3d95d4feae13a792367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="464" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1893" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a46ff5f6e7d21e67ec83811ef78127af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="465" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1901" bodyend="1901"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Integer min reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="468" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1882" bodyend="1882"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a870c570152d24fe9ba6e41a8bf4793c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int *rvar, int cnt)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="469" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1890" bodyend="1890"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a223e887828c94c995035d5753aad6734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="470" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1898" bodyend="1898"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8c531d59e55cd4b449b7b1918a6c0980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Integer min reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="472" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1886" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae9af28284188a189e2cca8e4f3c55364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="473" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1894" bodyend="1894"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa2e2eeaa4da6bb9b3db4d9b849421ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="474" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1902" bodyend="1902"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a98c9e67e17bd55e681d9e790611a1289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>Long &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Long sum reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="477" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1851" bodyend="1851"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6e32ab2a67d4b20534985ce164ee95e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long *rvar, int cnt)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>Long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="478" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1861" bodyend="1861"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aac8b23aa38f296b439d0350a26b39d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="479" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1871" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a170da7d288a55d1b23ca2f2648d64f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>Long &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Long sum reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="481" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1856" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad75b6a61b5b1a248d9624768249c8bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>Long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="482" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1866" bodyend="1866"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7f67a5aa0b9bb9f25632f4d018a152e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="483" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1876" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a72761a0aff0775f8f6943062a34fca31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>Long &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Long max reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="486" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1852" bodyend="1852"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8b984f0c9e0047fadde0207cab24f0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long *rvar, int cnt)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>Long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="487" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1862" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8cbacd52d48c07b0ac4eb65038bd84a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="488" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1872" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a926985db9b71c186280e5e4556be41ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>Long &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Long max reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="490" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1857" bodyend="1857"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad2bbf7cf5739f73fdce4de0a6748604d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>Long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="491" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1867" bodyend="1867"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3e22d6eaf1e82ae7d7e41793539a1cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="492" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1877" bodyend="1877"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a42ee71c485b816027db498df7b566a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>Long &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Long min reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="495" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1853" bodyend="1853"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4146864ce7fbbd6bf91317ec4741bb3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long *rvar, int cnt)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>Long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="496" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1863" bodyend="1863"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9f470e5b33d897a87a40d3f86ec55894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="497" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1873" bodyend="1873"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a07c6b4691afed879feab525503e1e267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>Long &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Long min reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="499" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1858" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6659d41da758fa9f98d8cb90b0cc32c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>Long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="500" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1868" bodyend="1868"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3e31085d59ed53186461189113bbac30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="501" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1878" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a476b155089373ad605808b20f38166d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>Long &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Long and-wise reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="504" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1850" bodyend="1850"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab1c54207db7e0179f2a7bdeba6821831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long *rvar, int cnt)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>Long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="505" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1860" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab2c52b2e0ce35c796075012f0a54ed72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="506" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1870" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a01508dabdc47364798a99c9527c870f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>Long &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Long and-wise reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="508" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1855" bodyend="1855"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a419b2fa4d176cbbb136e81d9975453e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>Long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="509" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1865" bodyend="1865"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a15b54bb3e32e4fc768530764b9e8f1db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="510" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1875" bodyend="1875"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5e16712b9f4c3f14537cd0b561758aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(Real *sendbuf, int sendcount, Real *recvbuf, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>Real *</type>
          <declname>sendbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sendcount</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>recvbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Parallel gather. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="513" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1774" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9fa50b376ee8c97f8d84852e244fd916" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::SeqNum</definition>
        <argsstring>() noexcept</argsstring>
        <name>SeqNum</name>
        <briefdescription>
<para>Returns sequential message sequence numbers, usually used as tags for send/recv. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="521" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="521" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0903eb5194f11fcf386f79e6ff3c02f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const T *, size_t n, int pid, int tag)</argsstring>
        <name>Asend</name>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="523" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1085" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a69e9f409844f19f30203ffe423541cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Asend</name>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="524" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1092" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac778e22b0521da836d006d672ed03846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Asend</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="525" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1099" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af5ed8a597f21464e9f2803f0e2afc0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(T *, size_t n, int pid, int tag)</argsstring>
        <name>Arecv</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="527" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1127" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab0ebfbe15f6ff892bd36ecba234fb4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Arecv</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="528" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1134" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad1c34d9de3893126169a033007bf7073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Arecv</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="529" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1141" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a89ca8639338d64c25ee28faf1b829701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const T *buf, size_t n, int dst_pid, int tag)</argsstring>
        <name>Send</name>
        <param>
          <type>const T *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="531" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1106" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab3cede7750fdc21c3c11c9bc62a174ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const T *buf, size_t n, int dst_pid, int tag, MPI_Comm comm)</argsstring>
        <name>Send</name>
        <param>
          <type>const T *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="532" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1113" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aae0327dea4fe1379f7b09210e8e6ebd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;buf, int dst_pid, int tag)</argsstring>
        <name>Send</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="533" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1120" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af4996999fa16efb8ab255e1d26ab2163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(T *, size_t n, int pid, int tag)</argsstring>
        <name>Recv</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="535" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1148" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1edfac65363a39cde188d5f5adb85134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Recv</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="536" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1155" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a01e2509fda38be90b0721b3a1aad439c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;t, int pid, int tag)</argsstring>
        <name>Recv</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="537" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1162" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(T *, size_t n, int root=0)</argsstring>
        <name>Bcast</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="539" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1169" bodyend="1170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab86dba69cfd44465e773abcc8a4bcecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(T *, size_t n, int root, const MPI_Comm &amp;comm)</argsstring>
        <name>Bcast</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="540" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1174" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af925aa247aae6380443c191a6abdbd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(void *buf, int count, MPI_Datatype datatype, int root, MPI_Comm comm)</argsstring>
        <name>Bcast</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></type>
          <declname>datatype</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="541" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1910" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adb4c5fe012593a0ef38394db6c2643f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Scatter</definition>
        <argsstring>(T *, size_t n, const T1 *, size_t n1, int root)</argsstring>
        <name>Scatter</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T1 *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="543" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1204" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad270703aec68e1bad2e5551590f10dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(const T *, size_t n, T1 *, size_t n1, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T1 *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="545" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1179" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a84c9d7d438ae259036461c6db6100a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(const T &amp;, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>const T &amp;</type>
          <defname>t</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="546" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1184" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a211110d15cfcd5d09168c6d415476ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gatherv</definition>
        <argsstring>(const T *send, int sc, T *recv, const std::vector&lt; int &gt; &amp;rc, const std::vector&lt; int &gt; &amp;disp, int root)</argsstring>
        <name>Gatherv</name>
        <param>
          <type>const T *</type>
          <declname>send</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sc</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>recv</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rc</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>disp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aaa8e2b582c52d43645acae3099cbaf4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::GatherLayoutDataToVector</definition>
        <argsstring>(const LayoutData&lt; T &gt; &amp;sendbuf, Vector&lt; T &gt; &amp;recvbuf, int root)</argsstring>
        <name>GatherLayoutDataToVector</name>
        <param>
          <type>const <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; T &gt; &amp;</type>
          <declname>sendbuf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>recvbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Gather <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref> values to a vector on root. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="553" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1193" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4a3a4d36732e6b65907ea76570142b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Wait</definition>
        <argsstring>(MPI_Request &amp;req, MPI_Status &amp;status)</argsstring>
        <name>Wait</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="557" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1919" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab581b8dba6006dbb3457d925c4b0f244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitall</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;reqs, Vector&lt; MPI_Status &gt; &amp;status)</argsstring>
        <name>Waitall</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <declname>reqs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="558" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1924" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a09446a4d2b5bb7632b4c9316c5dd213c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitany</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;reqs, int &amp;index, MPI_Status &amp;status)</argsstring>
        <name>Waitany</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <declname>reqs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="559" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1929" bodyend="1932"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitsome</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, int &amp;, Vector&lt; int &gt; &amp;, Vector&lt; MPI_Status &gt; &amp;)</argsstring>
        <name>Waitsome</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="560" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1935" bodyend="1939"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa123b1406423d74e38759f1412955db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReadAndBcastFile</definition>
        <argsstring>(const std::string &amp;filename, Vector&lt; char &gt; &amp;charBuf, bool bExitOnError=true, const MPI_Comm &amp;comm=Communicator())</argsstring>
        <name>ReadAndBcastFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &amp;</type>
          <declname>charBuf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bExitOnError</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="562" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2102" bodyend="2153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a411cea849dee5d54c8335c79f35af182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::IProbe</definition>
        <argsstring>(int src_pid, int tag, int &amp;mflag, MPI_Status &amp;status)</argsstring>
        <name>IProbe</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>mflag</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="565" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1821" bodyend="1821"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a541d49b91b1284763bebf77877cdff93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::IProbe</definition>
        <argsstring>(int src_pid, int tag, MPI_Comm comm, int &amp;mflag, MPI_Status &amp;status)</argsstring>
        <name>IProbe</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>mflag</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="566" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1822" bodyend="1822"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a888b64c6c10ac205e70f5627921668ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(Box *b, size_t n, int root)</argsstring>
        <name>Bcast</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/amrdata/AMReX_DataServices.cpp" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/amrdata/AMReX_DataServices.cpp" bodystart="67" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parallel frontend that abstracts functionalities needed to spawn processes and handle communication. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ccse-mpi.H" line="66" column="1"/>
  </compounddef>
</doxygen>
