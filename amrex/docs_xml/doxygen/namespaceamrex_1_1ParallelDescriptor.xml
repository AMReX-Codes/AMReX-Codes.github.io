<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceamrex_1_1ParallelDescriptor" kind="namespace" language="C++">
    <compoundname>amrex::ParallelDescriptor</compoundname>
    <innerclass refid="classamrex_1_1ParallelDescriptor_1_1Message" prot="public">amrex::ParallelDescriptor::Message</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" prot="public">amrex::ParallelDescriptor::Mpi_typemap</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" prot="public">amrex::ParallelDescriptor::ProcessTeam</innerclass>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor_1_1util">amrex::ParallelDescriptor::util</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1af122c95310b715f9006b650405e56bc8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::use_gpu_aware_mpi</definition>
        <argsstring></argsstring>
        <name>use_gpu_aware_mpi</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" kindref="compound">ProcessTeam</ref></type>
        <definition>ProcessTeam amrex::ParallelDescriptor::m_Team</definition>
        <argsstring></argsstring>
        <name>m_Team</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" prot="public" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::ParallelDescriptor::m_comm</definition>
        <argsstring></argsstring>
        <name>m_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a715b18055542b3909b818a2eb81ff469" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::m_MinTag</definition>
        <argsstring></argsstring>
        <name>m_MinTag</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a1582152747831aa49cac881d1bbec9ad" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::m_MaxTag</definition>
        <argsstring></argsstring>
        <name>m_MaxTag</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a170c7ee692d457514ef07c0d6206f7e2" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::ParallelDescriptor::ioProcessor</definition>
        <argsstring></argsstring>
        <name>ioProcessor</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The MPI rank number of the I/O Processor (probably rank 0). This rank is usually used to write to stdout. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac6df74b4b37bb6ee58dffea68507d259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string amrex::ParallelDescriptor::Unnamed</definition>
        <argsstring>(&quot;Unnamed&quot;)</argsstring>
        <name>Unnamed</name>
        <param>
          <type>&quot;Unnamed&quot;</type>
        </param>
        <briefdescription>
<para>Used as default argument to <ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adc667e1643fbfe75b057369aed1ca519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::StartParallel</definition>
        <argsstring>(int *argc=0, char ***argv=0, MPI_Comm mpi_comm=MPI_COMM_WORLD)</argsstring>
        <name>StartParallel</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>char ***</type>
          <declname>argv</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>mpi_comm</declname>
          <defval><ref refid="AMReX__ccse-mpi_8H_1ac57c1fc8484fb9b5c8359a559851107b" kindref="member">MPI_COMM_WORLD</ref></defval>
        </param>
        <briefdescription>
<para>Perform any needed parallel initialization. This MUST be the first routine in this class called from within a program. </para>        </briefdescription>
        <detaileddescription>
<para>BL_USE_MPI </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1658" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a916170832821539e49f051409018ffcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>called in <ref refid="namespaceamrex_1a187cdb4f4273fdf9bcad01ac8e3fcc4d" kindref="member">amrex::Initialize()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2043" bodyend="2051"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a95032768c19f94a64196f85fefeee239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Lazy.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3e62b2c32fa5036fc1bb1dff1d819de6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::UseGpuAwareMpi</definition>
        <argsstring>()</argsstring>
        <name>UseGpuAwareMpi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af5ce3cf99985348d87f77ba2c811514f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::StartTeams</definition>
        <argsstring>()</argsstring>
        <name>StartTeams</name>
        <briefdescription>
<para>Split the process pool into teams. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2063" bodyend="2113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1f1780bd83ee339ade2a2dd702473e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::EndTeams</definition>
        <argsstring>()</argsstring>
        <name>EndTeams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2117" bodyend="2120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a990d0a17b08dcd68a0d77a7b35cfebaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::EndParallel</definition>
        <argsstring>()</argsstring>
        <name>EndParallel</name>
        <briefdescription>
<para>Perform any needed parallel finalization. This MUST be the last routine in this class called from within a program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1692" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::MyProc</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyProc</name>
        <briefdescription>
<para>return the rank number local to the current Parallel Context </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="124" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adc6941c4330302993547bfb867a1df31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::MyProc</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>MyProc</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="129" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a705e1be005fbada39a2ca69f6dae9b88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::MinTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>MinTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="204" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab1375009d4e5cd0730cada71e3f18c33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::MaxTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>MaxTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="205" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::ParallelDescriptor::Communicator</definition>
        <argsstring>() noexcept</argsstring>
        <name>Communicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="208" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::NProcs</definition>
        <argsstring>() noexcept</argsstring>
        <name>NProcs</name>
        <briefdescription>
<para>return the number of MPI ranks local to the current Parallel Context </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7fe765fcc8bfc4c409483424a83fccf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::NProcs</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>NProcs</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="218" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="218" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::IOProcessorNumber</definition>
        <argsstring>() noexcept</argsstring>
        <name>IOProcessorNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::IOProcessor</definition>
        <argsstring>() noexcept</argsstring>
        <name>IOProcessor</name>
        <briefdescription>
<para>Is this CPU the I/O Processor? To get the rank number, call <ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">IOProcessorNumber()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="243" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9397b95ec0069183061d45372eed1287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::IOProcessorNumber</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>IOProcessorNumber</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="249" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8780ee1130870c2cd65de891c71b9b76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::IOProcessor</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>IOProcessor</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9854dea7eb2ee59093ed0bd80af9063e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::TeamSize</definition>
        <argsstring>() noexcept</argsstring>
        <name>TeamSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="262" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af2f4fc272303fdc7f363d88ffd292c4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::NTeams</definition>
        <argsstring>() noexcept</argsstring>
        <name>NTeams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="267" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a687dc008cc6ce7831496af1f8bbfff96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::MyTeamColor</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeamColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="272" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a564fb3e90a09a47e8213cdd2de4a2634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::MyTeamLead</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeamLead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acccfcdccaefb95d8178c5c9253113b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::MyRankInTeam</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyRankInTeam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="282" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a834c805f44e9aa2724debb07602d999e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::TeamLead</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>TeamLead</name>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="287" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::isTeamLead</definition>
        <argsstring>() noexcept</argsstring>
        <name>isTeamLead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::sameTeam</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>sameTeam</name>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="297" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a450001e6c4813cc1a122428e5f8c56f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::sameTeam</definition>
        <argsstring>(int rankA, int rankB) noexcept</argsstring>
        <name>sameTeam</name>
        <param>
          <type>int</type>
          <declname>rankA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rankB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="302" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::RankInLeadComm</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>RankInLeadComm</name>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::doTeamReduce</definition>
        <argsstring>() noexcept</argsstring>
        <name>doTeamReduce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="312" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" kindref="compound">ProcessTeam</ref> &amp;</type>
        <definition>const ProcessTeam&amp; amrex::ParallelDescriptor::MyTeam</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="317" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae7e03fbd86dab31d19593df2ad5adde6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; int, int &gt;</type>
        <definition>std::pair&lt;int,int&gt; amrex::ParallelDescriptor::team_range</definition>
        <argsstring>(int begin, int end, int rit=-1, int nworkers=0) noexcept</argsstring>
        <name>team_range</name>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rit</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nworkers</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="322" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="322" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae9b60ea81eb861f883e02edaa5876d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="366" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="366" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad8cac9ce7c8c2a234cde3400db6512a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, int rit, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rit</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="374" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="374" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1b1bd2a6da53acc442dac0945108b376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, int rit, int nworkers, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nworkers</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="382" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="382" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Barrier</definition>
        <argsstring>(const std::string &amp;message=Unnamed)</argsstring>
        <name>Barrier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac6df74b4b37bb6ee58dffea68507d259" kindref="member">Unnamed</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="390" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1708" bodyend="1708"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa8ebad8ea16a50d70821ec935c70aea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Barrier</definition>
        <argsstring>(const MPI_Comm &amp;comm, const std::string &amp;message=Unnamed)</argsstring>
        <name>Barrier</name>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac6df74b4b37bb6ee58dffea68507d259" kindref="member">Unnamed</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="391" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1709" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1affba679357b6ad488b02adc81a353697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Test</definition>
        <argsstring>(MPI_Request &amp;request, int &amp;flag, MPI_Status &amp;status)</argsstring>
        <name>Test</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="393" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1711" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ace0982cd881d1f09d60a8e38b5565e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Comm_dup</definition>
        <argsstring>(MPI_Comm comm, MPI_Comm &amp;newcomm)</argsstring>
        <name>Comm_dup</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>newcomm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="395" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1715" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Abort</definition>
        <argsstring>(int errorcode=SIGABRT, bool backtrace=true)</argsstring>
        <name>Abort</name>
        <param>
          <type>int</type>
          <declname>errorcode</declname>
          <defval>SIGABRT</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>backtrace</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Abort with specified error code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="397" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1697" bodyend="1704"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a568bbd4bb8f719b9c0ba1950c10678ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * amrex::ParallelDescriptor::ErrorString</definition>
        <argsstring>(int errcode)</argsstring>
        <name>ErrorString</name>
        <param>
          <type>int</type>
          <declname>errcode</declname>
        </param>
        <briefdescription>
<para>ErrorString return string associated with error internal error condition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1706" bodyend="1706"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::ParallelDescriptor::second</definition>
        <argsstring>() noexcept</argsstring>
        <name>second</name>
        <briefdescription>
<para>Returns wall-clock seconds since start of execution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="401" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1804" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a85f79f28c8cb6cc5762e3edd80c57fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolAnd</definition>
        <argsstring>(bool &amp;rvar)</argsstring>
        <name>ReduceBoolAnd</name>
        <param>
          <type>bool &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>And-wise boolean reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="404" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1795" bodyend="1795"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a45569b295bf42f447fac8a9610790ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolAnd</definition>
        <argsstring>(bool &amp;rvar, int cpu)</argsstring>
        <name>ReduceBoolAnd</name>
        <param>
          <type>bool &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>And-wise boolean reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="406" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1798" bodyend="1798"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8e74f51d2321b7e827baae5d86a83824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolOr</definition>
        <argsstring>(bool &amp;rvar)</argsstring>
        <name>ReduceBoolOr</name>
        <param>
          <type>bool &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Or-wise boolean reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1796" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a45ff8728249b5e214f520e284c04143b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolOr</definition>
        <argsstring>(bool &amp;rvar, int cpu)</argsstring>
        <name>ReduceBoolOr</name>
        <param>
          <type>bool &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Or-wise boolean reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="411" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1799" bodyend="1799"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Real &amp;rvar)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real sum reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="414" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1719" bodyend="1719"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0329bc7c7dac44f28e589da8b51f90f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Real *rvar, int cnt)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1727" bodyend="1727"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2e6864b6b7866ce41c7d41cfd961568c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="416" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1733" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acf63edc9b791634aaee01966a9f20ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Real &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real sum reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="418" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1723" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5ff49950b9307555c1e2bf5bee451642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Real *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="419" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1731" bodyend="1731"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0b9f9c5bc4f384ba939f0aaeab8d05bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="420" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1737" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Real &amp;rvar)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real max reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="423" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1717" bodyend="1717"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af0fb71557913b8db39b4b44be0247225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Real *rvar, int cnt)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="424" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1725" bodyend="1725"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a64dba21e51015abe9de8ac24fab4811b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="425" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1734" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a32b30a9856cf8d162b9a023fcb981e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Real &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real max reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="427" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1721" bodyend="1721"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9cbf72964e4a7c67b590931a5fce45dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Real *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="428" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1729" bodyend="1729"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae433399fc2930cc766ff6a1f7a2e34f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="429" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1738" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Real &amp;rvar)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real min reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="432" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1718" bodyend="1718"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9afc75968888ce93106cce1beeeb2e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Real *rvar, int cnt)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="433" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1726" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a80163550f36a94b2a3426c4da40d1087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="434" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1735" bodyend="1735"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab7ff760f79048d84641347cf9d05c850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Real &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>Real &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real min reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="436" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1722" bodyend="1722"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2e679e4ae8ac6ba49e52b3b8f19032a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Real *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>Real *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="437" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1730" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acaab6be7bc06bae9160aa0050a82c719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="438" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1739" bodyend="1739"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type>int &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Integer sum reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="441" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1771" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0f59b78ddec4caf56f47c2c4aea3b569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int *rvar, int cnt)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type>int *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="442" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1779" bodyend="1779"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5dc8802a3fdec1698a17fb68be93401b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="443" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1787" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1afbd2261dcc7ea1687666a76188724baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type>int &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Integer sum reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="445" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1775" bodyend="1775"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9073a119dcda583906de8999b27a65f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type>int *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="446" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1783" bodyend="1783"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8ad18f3047a8d8412332fabd03ffdf5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="447" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1791" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type>int &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Integer max reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="450" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1772" bodyend="1772"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a557f937eb9820b18b2827d388703087d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int *rvar, int cnt)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type>int *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="451" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1780" bodyend="1780"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a14a30ebffe4778a95598aa2b0ed7cc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="452" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1788" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a24bb8ef806f88e3157be27c793ffb345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type>int &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Integer max reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="454" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1776" bodyend="1776"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af8c25e84b0f1d3d95d4feae13a792367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type>int *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="455" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1784" bodyend="1784"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a46ff5f6e7d21e67ec83811ef78127af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="456" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1792" bodyend="1792"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type>int &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Integer min reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="459" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1773" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a870c570152d24fe9ba6e41a8bf4793c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int *rvar, int cnt)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type>int *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="460" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1781" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a223e887828c94c995035d5753aad6734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="461" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1789" bodyend="1789"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8c531d59e55cd4b449b7b1918a6c0980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type>int &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Integer min reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="463" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1777" bodyend="1777"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae9af28284188a189e2cca8e4f3c55364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type>int *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="464" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1785" bodyend="1785"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa2e2eeaa4da6bb9b3db4d9b849421ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="465" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1793" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(long &amp;rvar)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>long &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Long sum reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="468" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1742" bodyend="1742"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac01d3bd93daa16d886ef23eb2ac3f90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(long *rvar, int cnt)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="469" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1752" bodyend="1752"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a76fd8a05815e4a0510d23ffd919a7588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="470" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1762" bodyend="1762"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0fc115a9576fd5ea99df60dc609bb8d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>long &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Long sum reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="472" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1747" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa4ac238ce462219c58309e11cf030210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(long *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="473" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1757" bodyend="1757"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6e7e88a823c9006cf1cf97a3df37c84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="474" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1767" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(long &amp;rvar)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>long &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Long max reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="477" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1743" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad7c2bae54b0d885071e9d1ff5077ac69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(long *rvar, int cnt)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="478" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1753" bodyend="1753"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a27a2a9535e744f73fbe4dcecb18e9a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="479" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1763" bodyend="1763"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8f9d3f4488404f6177c46a7c18feb0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>long &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Long max reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="481" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1748" bodyend="1748"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1abf01ed676eeda7c74d69c0a19b1755b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(long *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="482" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1758" bodyend="1758"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aecc845a880b591c7744906a5b1726707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="483" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1768" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(long &amp;rvar)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>long &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Long min reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="486" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1744" bodyend="1744"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5c28fc1b6a076433f74ac4152c0ad870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(long *rvar, int cnt)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="487" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1754" bodyend="1754"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acddcce61786fdb0147699380b2fd5ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="488" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1764" bodyend="1764"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad863340136b375b62c03912e70cbbef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>long &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Long min reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="490" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1749" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa73dad8652fb6c95dd122ef1fd01d748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(long *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="491" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1759" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acf5e6f55bc44cdd76e1cbb53bf395532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="492" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1769" bodyend="1769"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(long &amp;rvar)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>long &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Long and-wise reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="495" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1741" bodyend="1741"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5042632966da7581b8a84910a77010b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(long *rvar, int cnt)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="496" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1751" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a19656a5ad64f61a589d995aafc118201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="497" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1761" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac169a703881764b0b84e2299cb6f92b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>long &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Long and-wise reduction to specified cpu. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="499" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1746" bodyend="1746"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a842fce43c270fc3080181084e0ece83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(long *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>long *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="500" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1756" bodyend="1756"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a49454e9b3e2ba32a8f60e36a60e39534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; long &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="501" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1766" bodyend="1766"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5e16712b9f4c3f14537cd0b561758aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(Real *sendbuf, int sendcount, Real *recvbuf, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>Real *</type>
          <declname>sendbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sendcount</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>recvbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Parallel gather. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="507" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1668" bodyend="1680"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9fa50b376ee8c97f8d84852e244fd916" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParallelDescriptor::SeqNum</definition>
        <argsstring>() noexcept</argsstring>
        <name>SeqNum</name>
        <briefdescription>
<para>Returns sequential message sequence numbers, usually used as tags for send/recv. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="515" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="515" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0903eb5194f11fcf386f79e6ff3c02f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const T *, size_t n, int pid, int tag)</argsstring>
        <name>Asend</name>
        <param>
          <type>const T *</type>
          <defname>buf</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="517" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1033" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a69e9f409844f19f30203ffe423541cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Asend</name>
        <param>
          <type>const T *</type>
          <defname>buf</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="518" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1040" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac778e22b0521da836d006d672ed03846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Asend</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="519" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1047" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af5ed8a597f21464e9f2803f0e2afc0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(T *, size_t n, int pid, int tag)</argsstring>
        <name>Arecv</name>
        <param>
          <type>T *</type>
          <defname>buf</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="521" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1075" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab0ebfbe15f6ff892bd36ecba234fb4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Arecv</name>
        <param>
          <type>T *</type>
          <defname>buf</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="522" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1082" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad1c34d9de3893126169a033007bf7073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Arecv</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="523" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1089" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a89ca8639338d64c25ee28faf1b829701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const T *buf, size_t n, int dst_pid, int tag)</argsstring>
        <name>Send</name>
        <param>
          <type>const T *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="525" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1054" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab3cede7750fdc21c3c11c9bc62a174ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const T *buf, size_t n, int dst_pid, int tag, MPI_Comm comm)</argsstring>
        <name>Send</name>
        <param>
          <type>const T *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="526" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1061" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aae0327dea4fe1379f7b09210e8e6ebd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;buf, int dst_pid, int tag)</argsstring>
        <name>Send</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="527" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1068" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af4996999fa16efb8ab255e1d26ab2163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(T *, size_t n, int pid, int tag)</argsstring>
        <name>Recv</name>
        <param>
          <type>T *</type>
          <defname>buf</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="529" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1096" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1edfac65363a39cde188d5f5adb85134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Recv</name>
        <param>
          <type>T *</type>
          <defname>buf</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="530" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1103" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a01e2509fda38be90b0721b3a1aad439c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;t, int pid, int tag)</argsstring>
        <name>Recv</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="531" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1110" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(T *, size_t n, int root=0)</argsstring>
        <name>Bcast</name>
        <param>
          <type>T *</type>
          <defname>t</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="533" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1117" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab86dba69cfd44465e773abcc8a4bcecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(T *, size_t n, int root, const MPI_Comm &amp;comm)</argsstring>
        <name>Bcast</name>
        <param>
          <type>T *</type>
          <defname>t</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="534" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1122" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af925aa247aae6380443c191a6abdbd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(void *buf, int count, MPI_Datatype datatype, int root, MPI_Comm comm)</argsstring>
        <name>Bcast</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></type>
          <declname>datatype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="535" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1801" bodyend="1801"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adb4c5fe012593a0ef38394db6c2643f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Scatter</definition>
        <argsstring>(T *, size_t n, const T1 *, size_t n1, int root)</argsstring>
        <name>Scatter</name>
        <param>
          <type>T *</type>
          <defname>t</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T1 *</type>
          <defname>t1</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="537" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1141" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad270703aec68e1bad2e5551590f10dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(const T *, size_t n, T1 *, size_t n1, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>const T *</type>
          <defname>t</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T1 *</type>
          <defname>t1</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="539" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1127" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a84c9d7d438ae259036461c6db6100a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(const T &amp;, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>const T &amp;</type>
          <defname>t</defname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="540" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1132" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a211110d15cfcd5d09168c6d415476ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gatherv</definition>
        <argsstring>(const T *send, int sc, T *recv, const std::vector&lt; int &gt; &amp;rc, const std::vector&lt; int &gt; &amp;disp, int root)</argsstring>
        <name>Gatherv</name>
        <param>
          <type>const T *</type>
          <declname>send</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sc</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>recv</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>rc</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>disp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad7dbd222d48d4c31a34c6bca8f9beba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gatherv</definition>
        <argsstring>(const T *send, long sc, T *recv, const std::vector&lt; long &gt; &amp;rc, const std::vector&lt; long &gt; &amp;disp, int root)</argsstring>
        <name>Gatherv</name>
        <param>
          <type>const T *</type>
          <declname>send</declname>
        </param>
        <param>
          <type>long</type>
          <declname>sc</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>recv</declname>
        </param>
        <param>
          <type>const std::vector&lt; long &gt; &amp;</type>
          <declname>rc</declname>
        </param>
        <param>
          <type>const std::vector&lt; long &gt; &amp;</type>
          <declname>disp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4a3a4d36732e6b65907ea76570142b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Wait</definition>
        <argsstring>(MPI_Request &amp;req, MPI_Status &amp;status)</argsstring>
        <name>Wait</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="549" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1810" bodyend="1812"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab581b8dba6006dbb3457d925c4b0f244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitall</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;reqs, Vector&lt; MPI_Status &gt; &amp;status)</argsstring>
        <name>Waitall</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <declname>reqs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="550" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1815" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a09446a4d2b5bb7632b4c9316c5dd213c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitany</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;reqs, int &amp;index, MPI_Status &amp;status)</argsstring>
        <name>Waitany</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <declname>reqs</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="551" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1820" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitsome</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, int &amp;, Vector&lt; int &gt; &amp;, Vector&lt; MPI_Status &gt; &amp;)</argsstring>
        <name>Waitsome</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <defname>reqs</defname>
        </param>
        <param>
          <type>int &amp;</type>
          <defname>completed</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <defname>indx</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="552" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1826" bodyend="1830"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa123b1406423d74e38759f1412955db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReadAndBcastFile</definition>
        <argsstring>(const std::string &amp;filename, Vector&lt; char &gt; &amp;charBuf, bool bExitOnError=true, const MPI_Comm &amp;comm=Communicator())</argsstring>
        <name>ReadAndBcastFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &amp;</type>
          <declname>charBuf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bExitOnError</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="554" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1989" bodyend="2040"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a411cea849dee5d54c8335c79f35af182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::IProbe</definition>
        <argsstring>(int src_pid, int tag, int &amp;mflag, MPI_Status &amp;status)</argsstring>
        <name>IProbe</name>
        <param>
          <type>int</type>
          <declname>src_pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>mflag</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="557" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1712" bodyend="1712"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a541d49b91b1284763bebf77877cdff93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::IProbe</definition>
        <argsstring>(int src_pid, int tag, MPI_Comm comm, int &amp;mflag, MPI_Status &amp;status)</argsstring>
        <name>IProbe</name>
        <param>
          <type>int</type>
          <declname>src_pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>mflag</declname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="558" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1713" bodyend="1713"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a888b64c6c10ac205e70f5627921668ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(Box *b, size_t n, int root)</argsstring>
        <name>Bcast</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/amrdata/AMReX_DataServices.cpp" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/amrdata/AMReX_DataServices.cpp" bodystart="67" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parallel frontend that abstracts functionalities needed to spawn processes and handle communication. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ccse-mpi.H" line="61" column="1"/>
  </compounddef>
</doxygen>
