<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1ParallelDescriptor" kind="namespace" language="C++">
    <compoundname>amrex::ParallelDescriptor</compoundname>
    <innerclass refid="classamrex_1_1ParallelDescriptor_1_1Message" prot="public">amrex::ParallelDescriptor::Message</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" prot="public">amrex::ParallelDescriptor::Mpi_typemap</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_3_01GpuComplex_3_01T_01_4_01_4" prot="public">amrex::ParallelDescriptor::Mpi_typemap&lt; GpuComplex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_3_01ValLocPair_3_01TV_00_01TI_01_4_01_4" prot="public">amrex::ParallelDescriptor::Mpi_typemap&lt; ValLocPair&lt; TV, TI &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" prot="public">amrex::ParallelDescriptor::ProcessTeam</innerclass>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor_1_1detail">amrex::ParallelDescriptor::detail</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a95e4c6ac08c44a34028ade62e7fc3b13" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>AMREX_EXPORT bool amrex::ParallelDescriptor::use_gpu_aware_mpi</definition>
        <argsstring></argsstring>
        <name>use_gpu_aware_mpi</name>
        <qualifiedname>amrex::ParallelDescriptor::use_gpu_aware_mpi</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="60" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="60" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="110" declcolumn="30"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a387acd4f26462ef60c5de9d87ef15c67" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" kindref="compound">ProcessTeam</ref></type>
        <definition>AMREX_EXPORT ProcessTeam amrex::ParallelDescriptor::m_Team</definition>
        <argsstring></argsstring>
        <name>m_Team</name>
        <qualifiedname>amrex::ParallelDescriptor::m_Team</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="65" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="65" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="203" declcolumn="37"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a8b000ab4b491f860c3b4ff0c27810e0e" prot="public" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
        <definition>AMREX_EXPORT MPI_Comm amrex::ParallelDescriptor::m_comm</definition>
        <argsstring></argsstring>
        <name>m_comm</name>
        <qualifiedname>amrex::ParallelDescriptor::m_comm</qualifiedname>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9eb867d9cda6acfce33985d67a31d5fc" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="67" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="67" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="209" declcolumn="34"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a2efa14fb9d9ac2f6288d17e6890132ac" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::m_nprocs_per_node</definition>
        <argsstring></argsstring>
        <name>m_nprocs_per_node</name>
        <qualifiedname>amrex::ParallelDescriptor::m_nprocs_per_node</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="69" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="69" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="212" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1ac28c7a40658a100cdc586086b19a3915" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::m_rank_in_node</definition>
        <argsstring></argsstring>
        <name>m_rank_in_node</name>
        <qualifiedname>amrex::ParallelDescriptor::m_rank_in_node</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="70" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="70" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="218" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a38b3712843db6ceb3877ab59bd4df4f0" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::m_nprocs_per_processor</definition>
        <argsstring></argsstring>
        <name>m_nprocs_per_processor</name>
        <qualifiedname>amrex::ParallelDescriptor::m_nprocs_per_processor</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="72" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="72" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="224" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a089c919e9ff83dd0697192ff37dabbce" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::m_rank_in_processor</definition>
        <argsstring></argsstring>
        <name>m_rank_in_processor</name>
        <qualifiedname>amrex::ParallelDescriptor::m_rank_in_processor</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="73" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="73" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="230" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a1b5ef1a376307bde13dbe55d2f88da41" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1adf4ce151c5bdb0d3323d314ab596eab9" kindref="member">MPI_Datatype</ref> * &gt;</type>
        <definition>Vector&lt; MPI_Datatype * &gt; amrex::ParallelDescriptor::m_mpi_types</definition>
        <argsstring></argsstring>
        <name>m_mpi_types</name>
        <qualifiedname>amrex::ParallelDescriptor::m_mpi_types</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="76" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="76" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="237" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a3461c9bae69de0e75d147ae431f938d4" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a5a1a25e9ccd1a4e3472f0d43950d23d9" kindref="member">MPI_Op</ref> * &gt;</type>
        <definition>Vector&lt; MPI_Op * &gt; amrex::ParallelDescriptor::m_mpi_ops</definition>
        <argsstring></argsstring>
        <name>m_mpi_ops</name>
        <qualifiedname>amrex::ParallelDescriptor::m_mpi_ops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="77" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="77" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="238" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1afecc43d92a1965138657ac90451f9ac6" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::m_MinTag</definition>
        <argsstring></argsstring>
        <name>m_MinTag</name>
        <qualifiedname>amrex::ParallelDescriptor::m_MinTag</qualifiedname>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="80" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="80" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="205" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1ad89c6bbe165273ab677ce92a08419cf3" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::m_MaxTag</definition>
        <argsstring></argsstring>
        <name>m_MaxTag</name>
        <qualifiedname>amrex::ParallelDescriptor::m_MaxTag</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="80" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a0b576ec45a3e69f29b13abda811d7f7d" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT const int amrex::ParallelDescriptor::ioProcessor</definition>
        <argsstring></argsstring>
        <name>ioProcessor</name>
        <qualifiedname>amrex::ParallelDescriptor::ioProcessor</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The MPI rank number of the I/O Processor (probably rank 0). This rank is usually used to write to stdout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="82" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="82" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="264" declcolumn="35"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2769c2600233e299c5ef83ecdb5d3706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::StartParallel</definition>
        <argsstring>(int *argc=nullptr, char ***argv=nullptr, MPI_Comm mpi_comm=MPI_COMM_WORLD)</argsstring>
        <name>StartParallel</name>
        <qualifiedname>amrex::ParallelDescriptor::StartParallel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>argc</defname>
        </param>
        <param>
          <type>char ***</type>
          <defname>argv</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <defname>mpi_comm</defname>
        </param>
        <briefdescription>
<para>Perform any needed parallel initialization. This MUST be the first routine in this class called from within a program. </para>
        </briefdescription>
        <detaileddescription>
<para>BL_USE_MPI </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1152" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1152" bodyend="1157" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="103" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab3aa34d0c55755f52fccec7dd20dd9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(Real const  *sendbuf, int nsend, Real *recvbuf, int root)</argsstring>
        <name>Gather</name>
        <qualifiedname>amrex::ParallelDescriptor::Gather</qualifiedname>
        <param>
          <type>Real const *</type>
          <declname>sendbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nsend</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>recvbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Parallel gather. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1160" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1160" bodyend="1171" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="608" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a990d0a17b08dcd68a0d77a7b35cfebaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::EndParallel</definition>
        <argsstring>()</argsstring>
        <name>EndParallel</name>
        <qualifiedname>amrex::ParallelDescriptor::EndParallel</qualifiedname>
        <briefdescription>
<para>Perform any needed parallel finalization. This MUST be the last routine in this class called from within a program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1184" bodyend="1187" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="121" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Abort</definition>
        <argsstring>(int errorcode=SIGABRT, bool backtrace=true)</argsstring>
        <name>Abort</name>
        <qualifiedname>amrex::ParallelDescriptor::Abort</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>errorcode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>backtrace</declname>
        </param>
        <briefdescription>
<para>Abort with specified error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1191" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1191" bodyend="1198" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="432" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a07f31ae8d095a610856f2443abdcbb3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * amrex::ParallelDescriptor::ErrorString</definition>
        <argsstring>(int errorcode)</argsstring>
        <name>ErrorString</name>
        <qualifiedname>amrex::ParallelDescriptor::ErrorString</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>errorcode</defname>
        </param>
        <briefdescription>
<para>ErrorString return string associated with error internal error condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1200" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1200" bodyend="1200" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="434" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac0861548eabcd3f4b4c72a8826f83f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Barrier</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>Barrier</name>
        <qualifiedname>amrex::ParallelDescriptor::Barrier</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <defname>message</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1202" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1202" bodyend="1202" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="422" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a474bca89f351da66587e049dfa4265d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Barrier</definition>
        <argsstring>(const MPI_Comm &amp;, const std::string &amp;)</argsstring>
        <name>Barrier</name>
        <qualifiedname>amrex::ParallelDescriptor::Barrier</qualifiedname>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref> &amp;</type>
          <defname>comm</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>message</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1203" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1203" bodyend="1203" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="423" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a24603dd135fe7d8badbc0fe3ab25ff1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Abarrier</definition>
        <argsstring>()</argsstring>
        <name>Abarrier</name>
        <qualifiedname>amrex::ParallelDescriptor::Abarrier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1204" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1204" bodyend="1204" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="424" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1afaa2aaedf1b60a37ea26eaeda75973a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Abarrier</definition>
        <argsstring>(const MPI_Comm &amp;)</argsstring>
        <name>Abarrier</name>
        <qualifiedname>amrex::ParallelDescriptor::Abarrier</qualifiedname>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref> &amp;</type>
          <defname>comm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1205" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1205" bodyend="1205" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="425" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a07419f788f738f82f07c288c70af5e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Test</definition>
        <argsstring>(MPI_Request &amp;, int &amp;, MPI_Status &amp;)</argsstring>
        <name>Test</name>
        <qualifiedname>amrex::ParallelDescriptor::Test</qualifiedname>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a23b1c3c102feb1d5cc31dce957bbd51d" kindref="member">MPI_Request</ref> &amp;</type>
          <defname>request</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>flag</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1207" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1207" bodyend="1207" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="427" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa9d7485d566f7b26e48e038d364590cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Test</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, int &amp;, Vector&lt; MPI_Status &gt; &amp;)</argsstring>
        <name>Test</name>
        <qualifiedname>amrex::ParallelDescriptor::Test</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a23b1c3c102feb1d5cc31dce957bbd51d" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <defname>request</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>flag</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1208" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1208" bodyend="1208" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="428" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa6542637438eaa734790f6ab8ae83ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::IProbe</definition>
        <argsstring>(int, int, int &amp;, MPI_Status &amp;)</argsstring>
        <name>IProbe</name>
        <qualifiedname>amrex::ParallelDescriptor::IProbe</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>src_pid</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>tag</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>mflag</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1209" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1209" bodyend="1209" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="657" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0d0639c2781f6e40af7d1b507d3a7a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::IProbe</definition>
        <argsstring>(int, int, MPI_Comm, int &amp;, MPI_Status &amp;)</argsstring>
        <name>IProbe</name>
        <qualifiedname>amrex::ParallelDescriptor::IProbe</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>src_pid</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>tag</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <defname>comm</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>mflag</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1210" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1210" bodyend="1210" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="658" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab513eb7f98a3f225eda4e3dc0d2ec2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Comm_dup</definition>
        <argsstring>(MPI_Comm, MPI_Comm &amp;)</argsstring>
        <name>Comm_dup</name>
        <qualifiedname>amrex::ParallelDescriptor::Comm_dup</qualifiedname>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <defname>comm</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref> &amp;</type>
          <defname>newcomm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1212" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1212" bodyend="1212" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="430" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a39256068b3bc99d6219b39739053461d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;)</argsstring>
        <name>ReduceRealSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealSum</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1214" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1214" bodyend="1214" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="458" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aff6bc74ed06d830d1db5d24040838e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;)</argsstring>
        <name>ReduceRealMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMax</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1215" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1215" bodyend="1215" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="490" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a24c5c1870ba2e6e50b28f77e82a5a4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;)</argsstring>
        <name>ReduceRealMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMin</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1216" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1216" bodyend="1216" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="522" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a19168fb4689cf3a9cd934ef00a71ca4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceRealSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealSum</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1218" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1218" bodyend="1218" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="474" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a25cdb37c12b44c99eca111bd5b286d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceRealMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMax</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1219" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1219" bodyend="1219" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="506" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa9443321dc4601e380e102ffebe6a143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceRealMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMin</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1220" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1220" bodyend="1220" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="538" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a476b155089373ad605808b20f38166d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongAnd</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongAnd</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Long and-wise reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1222" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1222" bodyend="1222" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="599" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a98c9e67e17bd55e681d9e790611a1289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongSum</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Long sum reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1223" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1223" bodyend="1223" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="572" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a72761a0aff0775f8f6943062a34fca31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMax</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Long max reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1224" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1224" bodyend="1224" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="581" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a42ee71c485b816027db498df7b566a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMin</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Long min reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1225" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1225" bodyend="1225" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="590" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a01508dabdc47364798a99c9527c870f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongAnd</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongAnd</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Long and-wise reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1227" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1227" bodyend="1227" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="603" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a170da7d288a55d1b23ca2f2648d64f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongSum</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Long sum reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1228" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1228" bodyend="1228" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="576" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a926985db9b71c186280e5e4556be41ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMax</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Long max reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1229" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1229" bodyend="1229" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="585" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a07c6b4691afed879feab525503e1e267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMin</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Long min reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1230" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1230" bodyend="1230" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="594" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7eb4a01321f954b8f6936ca59547c7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long *, int)</argsstring>
        <name>ReduceLongAnd</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongAnd</qualifiedname>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1232" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1232" bodyend="1232" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="600" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7008a294874001b3b8e5372ff45ebf64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long *, int)</argsstring>
        <name>ReduceLongSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongSum</qualifiedname>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1233" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1233" bodyend="1233" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="573" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3661303172f9bd5b139c1c19adbd93f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long *, int)</argsstring>
        <name>ReduceLongMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMax</qualifiedname>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1234" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1234" bodyend="1234" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="582" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7ae5a5af4ccc5fa61d017ef297455291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long *, int)</argsstring>
        <name>ReduceLongMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMin</qualifiedname>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1235" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1235" bodyend="1235" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="591" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aca77e15a2b4674d2abb34b092306c05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long *, int, int)</argsstring>
        <name>ReduceLongAnd</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongAnd</qualifiedname>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1237" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1237" bodyend="1237" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="604" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a90d832444f2b4ad4af4c8aa56c810a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long *, int, int)</argsstring>
        <name>ReduceLongSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongSum</qualifiedname>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1238" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1238" bodyend="1238" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="577" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a10f34646867ef5dd70d02ecf014de3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long *, int, int)</argsstring>
        <name>ReduceLongMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMax</qualifiedname>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1239" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1239" bodyend="1239" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="586" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a99b02744714ceae31674c2e25ef03029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long *, int, int)</argsstring>
        <name>ReduceLongMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMin</qualifiedname>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1240" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1240" bodyend="1240" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="595" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae65ea1566cda97563752491d899b8997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;)</argsstring>
        <name>ReduceLongAnd</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongAnd</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1242" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1242" bodyend="1242" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="601" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4774b13392beaf5d41c989897fdf5268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;)</argsstring>
        <name>ReduceLongSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongSum</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1243" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1243" bodyend="1243" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="574" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a753035868de2acca4a9ffb1aaa150c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;)</argsstring>
        <name>ReduceLongMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMax</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1244" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1244" bodyend="1244" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="583" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af2e42fa89ea38ff3a43ae0789f850575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;)</argsstring>
        <name>ReduceLongMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMin</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1245" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1245" bodyend="1245" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="592" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aaa59eadac87d81fb68efa1650acc3872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceLongAnd</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongAnd</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1247" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1247" bodyend="1247" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="605" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aac42b493c09470d467ce23133f2cbbc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceLongSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongSum</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1248" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1248" bodyend="1248" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="578" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a56fb59f9a47b9d625ef97d4549007c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceLongMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMax</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1249" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1249" bodyend="1249" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="587" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab7ca980624e045bdd5d349b6605adcbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceLongMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceLongMin</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1250" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1250" bodyend="1250" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="596" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntSum</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Integer sum reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1252" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1252" bodyend="1252" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="545" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMax</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Integer max reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1253" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1253" bodyend="1253" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="554" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMin</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Integer min reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1254" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1254" bodyend="1254" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="563" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1afbd2261dcc7ea1687666a76188724baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntSum</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Integer sum reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1256" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1256" bodyend="1256" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="549" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a24bb8ef806f88e3157be27c793ffb345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMax</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Integer max reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1257" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1257" bodyend="1257" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="558" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8c531d59e55cd4b449b7b1918a6c0980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMin</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Integer min reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1258" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1258" bodyend="1258" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="567" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a16b47250406954c795c3af20e49279a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int *, int)</argsstring>
        <name>ReduceIntSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntSum</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1260" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1260" bodyend="1260" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="546" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a62bf0397eb0f4082f6dab4ae8e5c51d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int *, int)</argsstring>
        <name>ReduceIntMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMax</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1261" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1261" bodyend="1261" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="555" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aef0dcb327a050f0a04520c31486687a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int *, int)</argsstring>
        <name>ReduceIntMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMin</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1262" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1262" bodyend="1262" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="564" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a31842e0bf333c7f85c31e6f227055716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int *, int, int)</argsstring>
        <name>ReduceIntSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntSum</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1264" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1264" bodyend="1264" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="550" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac376fd270c659b4dcb8df316d1bc1938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int *, int, int)</argsstring>
        <name>ReduceIntMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMax</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1265" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1265" bodyend="1265" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="559" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a12ffc8c1e5d0753383b1c4cacd1057dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int *, int, int)</argsstring>
        <name>ReduceIntMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMin</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1266" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1266" bodyend="1266" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="568" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a66f0d2e88581a3502c3d617a7b20249c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; const &amp;)</argsstring>
        <name>ReduceIntSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntSum</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1268" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1268" bodyend="1268" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="547" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acb97f902ad7ed88309b2c336ab7b9291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; const &amp;)</argsstring>
        <name>ReduceIntMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMax</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1269" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1269" bodyend="1269" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="556" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3441f492fc784719d2b872f7a6da54ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; const &amp;)</argsstring>
        <name>ReduceIntMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMin</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1270" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1270" bodyend="1270" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="565" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aea28e27e88f4416c838e39ab243227bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceIntSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntSum</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1272" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1272" bodyend="1272" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="551" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a254f165da975107ee08bd1b829cdd89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceIntMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMax</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1273" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1273" bodyend="1273" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="560" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad0666521a8805bef2e133ca85b3ab38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; const &amp;, int)</argsstring>
        <name>ReduceIntMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceIntMin</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; const &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1274" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1274" bodyend="1274" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="569" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a85f79f28c8cb6cc5762e3edd80c57fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolAnd</definition>
        <argsstring>(bool &amp;rvar)</argsstring>
        <name>ReduceBoolAnd</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceBoolAnd</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>And-wise boolean reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1276" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1276" bodyend="1276" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="439" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8e74f51d2321b7e827baae5d86a83824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolOr</definition>
        <argsstring>(bool &amp;rvar)</argsstring>
        <name>ReduceBoolOr</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceBoolOr</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Or-wise boolean reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1277" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1277" bodyend="1277" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="444" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a45569b295bf42f447fac8a9610790ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolAnd</definition>
        <argsstring>(bool &amp;rvar, int cpu)</argsstring>
        <name>ReduceBoolAnd</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceBoolAnd</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>And-wise boolean reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1279" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1279" bodyend="1279" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="441" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a45ff8728249b5e214f520e284c04143b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolOr</definition>
        <argsstring>(bool &amp;rvar, int cpu)</argsstring>
        <name>ReduceBoolOr</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceBoolOr</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Or-wise boolean reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1280" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1280" bodyend="1280" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="446" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9e67de311d5153ce34e743c7792de733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(void *, int, MPI_Datatype, int, MPI_Comm)</argsstring>
        <name>Bcast</name>
        <qualifiedname>amrex::ParallelDescriptor::Bcast</qualifiedname>
        <param>
          <type>void *</type>
          <defname>buf</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>count</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1adf4ce151c5bdb0d3323d314ab596eab9" kindref="member">MPI_Datatype</ref></type>
          <defname>datatype</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>root</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <defname>comm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1282" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1282" bodyend="1282" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="633" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::ParallelDescriptor::second</definition>
        <argsstring>() noexcept</argsstring>
        <name>second</name>
        <qualifiedname>amrex::ParallelDescriptor::second</qualifiedname>
        <briefdescription>
<para>Returns wall-clock seconds since start of execution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1285" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1285" bodyend="1288" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="436" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a307e6fc3b7df510cca76aff2fda29435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Wait</definition>
        <argsstring>(MPI_Request &amp;, MPI_Status &amp;)</argsstring>
        <name>Wait</name>
        <qualifiedname>amrex::ParallelDescriptor::Wait</qualifiedname>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a23b1c3c102feb1d5cc31dce957bbd51d" kindref="member">MPI_Request</ref> &amp;</type>
          <defname>req</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1291" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1291" bodyend="1292" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="649" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a63d04588d41cd108e9255c231e2562d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitall</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, Vector&lt; MPI_Status &gt; &amp;)</argsstring>
        <name>Waitall</name>
        <qualifiedname>amrex::ParallelDescriptor::Waitall</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a23b1c3c102feb1d5cc31dce957bbd51d" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <defname>reqs</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1295" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1295" bodyend="1296" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="650" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a201290543de69eac17ee181475285844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitany</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, int &amp;, MPI_Status &amp;)</argsstring>
        <name>Waitany</name>
        <qualifiedname>amrex::ParallelDescriptor::Waitany</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a23b1c3c102feb1d5cc31dce957bbd51d" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <defname>reqs</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>index</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1299" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1299" bodyend="1300" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="651" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitsome</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, int &amp;, Vector&lt; int &gt; &amp;, Vector&lt; MPI_Status &gt; &amp;)</argsstring>
        <name>Waitsome</name>
        <qualifiedname>amrex::ParallelDescriptor::Waitsome</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a23b1c3c102feb1d5cc31dce957bbd51d" kindref="member">MPI_Request</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1303" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1303" bodyend="1305" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="652" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aaa5dec01b84a2e49488e12992593591c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_BARRIER, bl_pd_barrier)()</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_BARRIER</type>
        </param>
        <param>
          <type>bl_pd_barrier</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1311" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1311" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae4f551d40d14c8bbfaff946737d15abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_COMMUNICATOR, bl_pd_communicator)(void *vcomm)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_COMMUNICATOR</type>
        </param>
        <param>
          <type>bl_pd_communicator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1316" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1316" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a967ee2806a6203f8fee9dfa5b7cbc3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_MYPROC, bl_pd_myproc)(int *myproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_MYPROC</type>
        </param>
        <param>
          <type>bl_pd_myproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1322" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1322" bodyend="1325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4aaac68a526721b739e82ab88091e834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_NPROCS, bl_pd_nprocs)(int *nprocs)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_NPROCS</type>
        </param>
        <param>
          <type>bl_pd_nprocs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1327" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1327" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a76aa7801d002af637405b25a8e1b2792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_IOPROC, bl_pd_ioproc)(int *ioproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1332" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1332" bodyend="1335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac28f369d555a5ea5f2aab2e6a64c2f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_IS_IOPROC, bl_pd_is_ioproc)(int *ioproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_IS_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_is_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1337" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1337" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adb07a50b62c06d1d041daabf568be368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_SECOND, bl_pd_second)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_SECOND</type>
        </param>
        <param>
          <type>bl_pd_second</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1342" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1342" bodyend="1345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3ff2bd55bb9e1b66ae7bb60cd159483a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_REDUCE_REAL_MAX_TO_IOPROC, bl_pd_reduce_real_max_to_ioproc)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_REDUCE_REAL_MAX_TO_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_reduce_real_max_to_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1358" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1358" bodyend="1361"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3f2139f00295dccb7905968c602d6763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_REDUCE_REAL_SUM_TO_IOPROC, bl_pd_reduce_real_sum_to_ioproc)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_REDUCE_REAL_SUM_TO_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_reduce_real_sum_to_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1363" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1363" bodyend="1366"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6b00ecb0ae5350278a633a75443d947e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_ABORT, bl_pd_abort)()</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <qualifiedname>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</qualifiedname>
        <param>
          <type>BL_PD_ABORT</type>
        </param>
        <param>
          <type>bl_pd_abort</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1369" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1369" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4736dec48acb46827a04cdca7b4045d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReadAndBcastFile</definition>
        <argsstring>(const std::string &amp;filename, Vector&lt; char &gt; &amp;charBuf, bool bExitOnError, const MPI_Comm &amp;comm)</argsstring>
        <name>ReadAndBcastFile</name>
        <qualifiedname>amrex::ParallelDescriptor::ReadAndBcastFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &amp;</type>
          <declname>charBuf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bExitOnError</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1459" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1459" bodyend="1508" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="654" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a916170832821539e49f051409018ffcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <qualifiedname>amrex::ParallelDescriptor::Initialize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1511" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1511" bodyend="1519" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a95032768c19f94a64196f85fefeee239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <qualifiedname>amrex::ParallelDescriptor::Finalize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1522" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1522" bodyend="1527" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="108" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af5ce3cf99985348d87f77ba2c811514f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::StartTeams</definition>
        <argsstring>()</argsstring>
        <name>StartTeams</name>
        <qualifiedname>amrex::ParallelDescriptor::StartTeams</qualifiedname>
        <briefdescription>
<para>Split the process pool into teams. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1531" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1531" bodyend="1581" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="114" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1f1780bd83ee339ade2a2dd702473e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::EndTeams</definition>
        <argsstring>()</argsstring>
        <name>EndTeams</name>
        <qualifiedname>amrex::ParallelDescriptor::EndTeams</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1585" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1585" bodyend="1588" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="115" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3557c1b3ec791b8bf6f9e9cab5c6b0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::ParallelDescriptor::mpi_level_to_string</definition>
        <argsstring>(int mtlev)</argsstring>
        <name>mpi_level_to_string</name>
        <qualifiedname>amrex::ParallelDescriptor::mpi_level_to_string</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mtlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an MPI_THREAD_&lt;X&gt; level to string</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtlev</parametername>
</parameternamelist>
<parameterdescription>
<para>MPI_THREAD_&lt;X&gt; level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string representation of the equivalent MPI macro name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1591" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1591" bodyend="1606" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="666" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac6df74b4b37bb6ee58dffea68507d259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string amrex::ParallelDescriptor::Unnamed</definition>
        <argsstring>(&quot;Unnamed&quot;)</argsstring>
        <name>Unnamed</name>
        <qualifiedname>amrex::ParallelDescriptor::Unnamed</qualifiedname>
        <param>
          <type>&quot;Unnamed&quot;</type>
        </param>
        <briefdescription>
<para>Used as default argument to <ref refid="namespaceamrex_1_1ParallelDescriptor_1ac0861548eabcd3f4b4c72a8826f83f8e" kindref="member">ParallelDescriptor::Barrier()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="53" column="23" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="53" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3e62b2c32fa5036fc1bb1dff1d819de6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::UseGpuAwareMpi</definition>
        <argsstring>()</argsstring>
        <name>UseGpuAwareMpi</name>
        <qualifiedname>amrex::ParallelDescriptor::UseGpuAwareMpi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="111" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyProc</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyProc</name>
        <qualifiedname>amrex::ParallelDescriptor::MyProc</qualifiedname>
        <briefdescription>
<para>return the rank number local to the current Parallel Context </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="125" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adc6941c4330302993547bfb867a1df31" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyProc</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>MyProc</name>
        <qualifiedname>amrex::ParallelDescriptor::MyProc</qualifiedname>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="130" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="130" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a705e1be005fbada39a2ca69f6dae9b88" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MinTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>MinTag</name>
        <qualifiedname>amrex::ParallelDescriptor::MinTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="206" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab1375009d4e5cd0730cada71e3f18c33" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MaxTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>MaxTag</name>
        <qualifiedname>amrex::ParallelDescriptor::MaxTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="207" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::ParallelDescriptor::Communicator</definition>
        <argsstring>() noexcept</argsstring>
        <name>Communicator</name>
        <qualifiedname>amrex::ParallelDescriptor::Communicator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="210" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adc47cf4d3591db8037d74afe5bdfcbb0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NProcsPerNode</definition>
        <argsstring>() noexcept</argsstring>
        <name>NProcsPerNode</name>
        <qualifiedname>amrex::ParallelDescriptor::NProcsPerNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of MPI ranks per node as defined by MPI_COMM_TYPE_SHARED. This might be the same or different from NProcsPerProcessor based on MPI_Get_processor_name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="216" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa6c71d10d121a68af6b6d3b0549a6b3b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyRankInNode</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyRankInNode</name>
        <qualifiedname>amrex::ParallelDescriptor::MyRankInNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the rank in a node defined by MPI_COMM_TYPE_SHARED. This might be the same or different from MyRankInProcessor based on MPI_Get_processor_name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="222" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab8d97816d7145428dcd6bf6d1a1b9a91" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NProcsPerProcessor</definition>
        <argsstring>() noexcept</argsstring>
        <name>NProcsPerProcessor</name>
        <qualifiedname>amrex::ParallelDescriptor::NProcsPerProcessor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of MPI ranks per node as defined by MPI_Get_processor_name. This might be the same or different from NProcsPerNode based on MPI_COMM_TYPE_SHARED. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="228" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a83bd00b0f4fc52881764bcf3e23e7a3f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyRankInProcessor</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyRankInProcessor</name>
        <qualifiedname>amrex::ParallelDescriptor::MyRankInProcessor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the rank in a node defined by MPI_Get_processor_name. This might be the same or different from MyRankInNode based on MPI_COMM_TYPE_SHARED. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="234" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NProcs</definition>
        <argsstring>() noexcept</argsstring>
        <name>NProcs</name>
        <qualifiedname>amrex::ParallelDescriptor::NProcs</qualifiedname>
        <briefdescription>
<para>return the number of MPI ranks local to the current Parallel Context </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="243" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7fe765fcc8bfc4c409483424a83fccf8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NProcs</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>NProcs</name>
        <qualifiedname>amrex::ParallelDescriptor::NProcs</qualifiedname>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="249" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="249" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::IOProcessorNumber</definition>
        <argsstring>() noexcept</argsstring>
        <name>IOProcessorNumber</name>
        <qualifiedname>amrex::ParallelDescriptor::IOProcessorNumber</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="266" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::IOProcessor</definition>
        <argsstring>() noexcept</argsstring>
        <name>IOProcessor</name>
        <qualifiedname>amrex::ParallelDescriptor::IOProcessor</qualifiedname>
        <briefdescription>
<para>Is this CPU the I/O Processor? To get the rank number, call <ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">IOProcessorNumber()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="275" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9397b95ec0069183061d45372eed1287" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::IOProcessorNumber</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>IOProcessorNumber</name>
        <qualifiedname>amrex::ParallelDescriptor::IOProcessorNumber</qualifiedname>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="281" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8780ee1130870c2cd65de891c71b9b76" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::IOProcessor</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>IOProcessor</name>
        <qualifiedname>amrex::ParallelDescriptor::IOProcessor</qualifiedname>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="287" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9854dea7eb2ee59093ed0bd80af9063e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::TeamSize</definition>
        <argsstring>() noexcept</argsstring>
        <name>TeamSize</name>
        <qualifiedname>amrex::ParallelDescriptor::TeamSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="294" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af2f4fc272303fdc7f363d88ffd292c4c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NTeams</definition>
        <argsstring>() noexcept</argsstring>
        <name>NTeams</name>
        <qualifiedname>amrex::ParallelDescriptor::NTeams</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="299" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="299" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a687dc008cc6ce7831496af1f8bbfff96" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyTeamColor</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeamColor</name>
        <qualifiedname>amrex::ParallelDescriptor::MyTeamColor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="304" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a564fb3e90a09a47e8213cdd2de4a2634" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyTeamLead</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeamLead</name>
        <qualifiedname>amrex::ParallelDescriptor::MyTeamLead</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="309" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acccfcdccaefb95d8178c5c9253113b87" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyRankInTeam</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyRankInTeam</name>
        <qualifiedname>amrex::ParallelDescriptor::MyRankInTeam</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="314" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a834c805f44e9aa2724debb07602d999e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::TeamLead</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>TeamLead</name>
        <qualifiedname>amrex::ParallelDescriptor::TeamLead</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="319" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::isTeamLead</definition>
        <argsstring>() noexcept</argsstring>
        <name>isTeamLead</name>
        <qualifiedname>amrex::ParallelDescriptor::isTeamLead</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="324" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::sameTeam</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>sameTeam</name>
        <qualifiedname>amrex::ParallelDescriptor::sameTeam</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="329" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a450001e6c4813cc1a122428e5f8c56f8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::sameTeam</definition>
        <argsstring>(int rankA, int rankB) noexcept</argsstring>
        <name>sameTeam</name>
        <qualifiedname>amrex::ParallelDescriptor::sameTeam</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rankA</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rankB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="334" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::RankInLeadComm</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>RankInLeadComm</name>
        <qualifiedname>amrex::ParallelDescriptor::RankInLeadComm</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="339" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::doTeamReduce</definition>
        <argsstring>() noexcept</argsstring>
        <name>doTeamReduce</name>
        <qualifiedname>amrex::ParallelDescriptor::doTeamReduce</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="344" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1affe2511c09c37d2de3acca0cef5b28d3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" kindref="compound">ProcessTeam</ref> &amp;</type>
        <definition>const ProcessTeam &amp; amrex::ParallelDescriptor::MyTeam</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeam</name>
        <qualifiedname>amrex::ParallelDescriptor::MyTeam</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="349" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4e777f4e51c991a08db9501fffc597c9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>std::pair&lt; int, int &gt; amrex::ParallelDescriptor::team_range</definition>
        <argsstring>(int begin, int end, int rit=-1, int nworkers=0) noexcept</argsstring>
        <name>team_range</name>
        <qualifiedname>amrex::ParallelDescriptor::team_range</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nworkers</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="354" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="354" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae9b60ea81eb861f883e02edaa5876d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, const F &amp;f)</argsstring>
        <name>team_for</name>
        <qualifiedname>amrex::ParallelDescriptor::team_for</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="398" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="398" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad8cac9ce7c8c2a234cde3400db6512a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, int rit, const F &amp;f)</argsstring>
        <name>team_for</name>
        <qualifiedname>amrex::ParallelDescriptor::team_for</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="406" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="406" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1b1bd2a6da53acc442dac0945108b376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, int rit, int nworkers, const F &amp;f)</argsstring>
        <name>team_for</name>
        <qualifiedname>amrex::ParallelDescriptor::team_for</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nworkers</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="414" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="414" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1616e83959240bd41e075cb31cce86ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(T &amp;rvar)</argsstring>
        <name>ReduceRealSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealSum</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real sum reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1275" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1275" bodyend="1277" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="451" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8fee1add10130a7b9b644fc9e058b9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(T *rvar, int cnt)</argsstring>
        <name>ReduceRealSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealSum</qualifiedname>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1281" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1281" bodyend="1283" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="455" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a177d6cb1641d1c8be8eeb14ff4babd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;rvar)</argsstring>
        <name>ReduceRealSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealSum</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1287" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1287" bodyend="1295" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="462" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9d0be85a7606ccb6923d9684f4363b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(T &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealSum</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real sum reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1300" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1300" bodyend="1302" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="467" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1b24514ab2887f8caf7ee0e0610fc54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(T *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealSum</qualifiedname>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1306" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1306" bodyend="1308" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="471" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3cc450539929e272f9477b35edbebe80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealSum</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1312" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1312" bodyend="1320" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="478" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad2a78407b61ee83c69f39f7a9b9ec1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(T &amp;rvar)</argsstring>
        <name>ReduceRealMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMax</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real max reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1325" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1325" bodyend="1327" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="483" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0a160ffd54c33e69175007f868677df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(T *rvar, int cnt)</argsstring>
        <name>ReduceRealMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMax</qualifiedname>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1331" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1331" bodyend="1333" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="487" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab10f03093e521df6b76a4b2bcf15fb57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;rvar)</argsstring>
        <name>ReduceRealMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMax</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1337" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1337" bodyend="1345" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="494" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a15857afcde0bfd0fdbd5edb294ee448c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(T &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMax</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real max reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1350" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1350" bodyend="1352" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="499" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a76e33bbc9645091e5f01d305da73960a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(T *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMax</qualifiedname>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1356" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1356" bodyend="1358" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="503" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a62622aba4b36e6860b55eb502343f93e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMax</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1362" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1362" bodyend="1370" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="510" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a95eed49d43cbcd3d04dd6afcfc1c5935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(T &amp;rvar)</argsstring>
        <name>ReduceRealMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMin</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real min reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1375" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1375" bodyend="1377" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="515" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa916865c8ac81ac3defb694eeec9121b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(T *rvar, int cnt)</argsstring>
        <name>ReduceRealMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMin</qualifiedname>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1381" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1381" bodyend="1383" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="519" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1add077882a08d9df475f94edd75f96f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;rvar)</argsstring>
        <name>ReduceRealMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMin</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1387" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1387" bodyend="1395" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="526" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a84e047e8a88180ba003ae2f94734d733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(T &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMin</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real min reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1400" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1400" bodyend="1402" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="531" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3bd99be9ca704b92d4813a1577648f66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(T *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMin</qualifiedname>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1406" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1406" bodyend="1408" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="535" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a26e7693a89088324db0dc544811f1988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
        <definition>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt; amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <qualifiedname>amrex::ParallelDescriptor::ReduceRealMin</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; const &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1412" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1412" bodyend="1420" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="542" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9fa50b376ee8c97f8d84852e244fd916" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::SeqNum</definition>
        <argsstring>() noexcept</argsstring>
        <name>SeqNum</name>
        <qualifiedname>amrex::ParallelDescriptor::SeqNum</qualifiedname>
        <briefdescription>
<para>Returns sequential message sequence numbers, usually used as tags for send/recv. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="613" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="613" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0903eb5194f11fcf386f79e6ff3c02f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const T *, size_t n, int pid, int tag)</argsstring>
        <name>Asend</name>
        <qualifiedname>amrex::ParallelDescriptor::Asend</qualifiedname>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1088" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1088" bodyend="1091" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="615" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a69e9f409844f19f30203ffe423541cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Asend</name>
        <qualifiedname>amrex::ParallelDescriptor::Asend</qualifiedname>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1095" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1095" bodyend="1098" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="616" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac778e22b0521da836d006d672ed03846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Asend</name>
        <qualifiedname>amrex::ParallelDescriptor::Asend</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1102" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1102" bodyend="1105" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="617" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af5ed8a597f21464e9f2803f0e2afc0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(T *, size_t n, int pid, int tag)</argsstring>
        <name>Arecv</name>
        <qualifiedname>amrex::ParallelDescriptor::Arecv</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1130" bodyend="1133" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="619" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab0ebfbe15f6ff892bd36ecba234fb4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Arecv</name>
        <qualifiedname>amrex::ParallelDescriptor::Arecv</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1137" bodyend="1140" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="620" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad1c34d9de3893126169a033007bf7073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Arecv</name>
        <qualifiedname>amrex::ParallelDescriptor::Arecv</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1144" bodyend="1147" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="621" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a89ca8639338d64c25ee28faf1b829701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const T *buf, size_t n, int dst_pid, int tag)</argsstring>
        <name>Send</name>
        <qualifiedname>amrex::ParallelDescriptor::Send</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1109" bodyend="1112" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="623" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab3cede7750fdc21c3c11c9bc62a174ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const T *buf, size_t n, int dst_pid, int tag, MPI_Comm comm)</argsstring>
        <name>Send</name>
        <qualifiedname>amrex::ParallelDescriptor::Send</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1116" bodyend="1119" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="624" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aae0327dea4fe1379f7b09210e8e6ebd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;buf, int dst_pid, int tag)</argsstring>
        <name>Send</name>
        <qualifiedname>amrex::ParallelDescriptor::Send</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1123" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1123" bodyend="1126" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="625" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af4996999fa16efb8ab255e1d26ab2163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(T *, size_t n, int pid, int tag)</argsstring>
        <name>Recv</name>
        <qualifiedname>amrex::ParallelDescriptor::Recv</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1151" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1151" bodyend="1154" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="627" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1edfac65363a39cde188d5f5adb85134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Recv</name>
        <qualifiedname>amrex::ParallelDescriptor::Recv</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1158" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1158" bodyend="1161" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="628" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aed1beec464cfce027998bc7a249a09b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Recv</name>
        <qualifiedname>amrex::ParallelDescriptor::Recv</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1165" bodyend="1168" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="629" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(T *, size_t n, int root=0)</argsstring>
        <name>Bcast</name>
        <qualifiedname>amrex::ParallelDescriptor::Bcast</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1172" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1172" bodyend="1173" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="631" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab86dba69cfd44465e773abcc8a4bcecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(T *, size_t n, int root, const MPI_Comm &amp;comm)</argsstring>
        <name>Bcast</name>
        <qualifiedname>amrex::ParallelDescriptor::Bcast</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1177" bodyend="1178" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="632" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adb4c5fe012593a0ef38394db6c2643f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Scatter</definition>
        <argsstring>(T *, size_t n, const T1 *, size_t n1, int root)</argsstring>
        <name>Scatter</name>
        <qualifiedname>amrex::ParallelDescriptor::Scatter</qualifiedname>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T1 *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1224" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1224" bodyend="1225" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="635" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad270703aec68e1bad2e5551590f10dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(const T *, size_t n, T1 *, size_t n1, int root)</argsstring>
        <name>Gather</name>
        <qualifiedname>amrex::ParallelDescriptor::Gather</qualifiedname>
        <param>
          <type>const T *</type>
          <defname>t</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T1 *</type>
          <defname>t1</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1182" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1182" bodyend="1189" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="637" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a84c9d7d438ae259036461c6db6100a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(const T &amp;, int root)</argsstring>
        <name>Gather</name>
        <qualifiedname>amrex::ParallelDescriptor::Gather</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <defname>t</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1193" bodyend="1198" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="638" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a211110d15cfcd5d09168c6d415476ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gatherv</definition>
        <argsstring>(const T *send, int sc, T *recv, const std::vector&lt; int &gt; &amp;rc, const std::vector&lt; int &gt; &amp;disp, int root)</argsstring>
        <name>Gatherv</name>
        <qualifiedname>amrex::ParallelDescriptor::Gatherv</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>send</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sc</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>recv</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rc</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>disp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1202" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1202" bodyend="1207" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="640" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aaa8e2b582c52d43645acae3099cbaf4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::GatherLayoutDataToVector</definition>
        <argsstring>(const LayoutData&lt; T &gt; &amp;sendbuf, Vector&lt; T &gt; &amp;recvbuf, int root)</argsstring>
        <name>GatherLayoutDataToVector</name>
        <qualifiedname>amrex::ParallelDescriptor::GatherLayoutDataToVector</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; T &gt; &amp;</type>
          <declname>sendbuf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>recvbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Gather <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref> values to a vector on root. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1211" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1211" bodyend="1220" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="645" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1afd90fafb507b775adeafc707208573eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__ccse-mpi_8H_1a5a1a25e9ccd1a4e3472f0d43950d23d9" kindref="member">MPI_Op</ref></type>
        <definition>MPI_Op amrex::ParallelDescriptor::Mpi_op</definition>
        <argsstring>()</argsstring>
        <name>Mpi_op</name>
        <qualifiedname>amrex::ParallelDescriptor::Mpi_op</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1566" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1566" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a888b64c6c10ac205e70f5627921668ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(Box *b, size_t n, int root)</argsstring>
        <name>Bcast</name>
        <qualifiedname>amrex::ParallelDescriptor::Bcast</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_DataServices.cpp" line="67" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_DataServices.cpp" bodystart="67" bodyend="106"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Parallel frontend that abstracts functionalities needed to spawn processes and handle communication. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ccse-mpi.H" line="63" column="1"/>
  </compounddef>
</doxygen>
