<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceamrex_1_1ParallelDescriptor" kind="namespace" language="C++">
    <compoundname>amrex::ParallelDescriptor</compoundname>
    <innerclass refid="classamrex_1_1ParallelDescriptor_1_1Message" prot="public">amrex::ParallelDescriptor::Message</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" prot="public">amrex::ParallelDescriptor::Mpi_typemap</innerclass>
    <innerclass refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" prot="public">amrex::ParallelDescriptor::ProcessTeam</innerclass>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor_1_1detail">amrex::ParallelDescriptor::detail</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a0157ac983f712e7d9bf90cb5f8fe95cb" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::use_gpu_aware_mpi</definition>
        <argsstring></argsstring>
        <name>use_gpu_aware_mpi</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="59" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="59" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="112" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a387acd4f26462ef60c5de9d87ef15c67" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" kindref="compound">ProcessTeam</ref></type>
        <definition>AMREX_EXPORT ProcessTeam amrex::ParallelDescriptor::m_Team</definition>
        <argsstring></argsstring>
        <name>m_Team</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="64" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="64" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="205" declcolumn="37"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a8b000ab4b491f860c3b4ff0c27810e0e" prot="public" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>AMREX_EXPORT MPI_Comm amrex::ParallelDescriptor::m_comm</definition>
        <argsstring></argsstring>
        <name>m_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="66" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="66" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="211" declcolumn="34"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1afecc43d92a1965138657ac90451f9ac6" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::m_MinTag</definition>
        <argsstring></argsstring>
        <name>m_MinTag</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="68" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="68" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="207" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1ad89c6bbe165273ab677ce92a08419cf3" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::ParallelDescriptor::m_MaxTag</definition>
        <argsstring></argsstring>
        <name>m_MaxTag</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="68" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1ParallelDescriptor_1a6904e26374daf9d4cba0adc51722ea04" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const AMREX_EXPORT int amrex::ParallelDescriptor::ioProcessor</definition>
        <argsstring></argsstring>
        <name>ioProcessor</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The MPI rank number of the I/O Processor (probably rank 0). This rank is usually used to write to stdout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="70" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="70" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="237" declcolumn="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adc667e1643fbfe75b057369aed1ca519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::StartParallel</definition>
        <argsstring>(int *argc=0, char ***argv=0, MPI_Comm mpi_comm=MPI_COMM_WORLD)</argsstring>
        <name>StartParallel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>argc</defname>
        </param>
        <param>
          <type>char ***</type>
          <defname>argv</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <defname>mpi_comm</defname>
        </param>
        <briefdescription>
<para>Perform any needed parallel initialization. This MUST be the first routine in this class called from within a program. </para>
        </briefdescription>
        <detaileddescription>
<para>BL_USE_MPI </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1087" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1087" bodyend="1092" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a5e16712b9f4c3f14537cd0b561758aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(Real *sendbuf, int sendcount, Real *recvbuf, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>Real *</type>
          <declname>sendbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nsend</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>recvbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Parallel gather. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1095" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1095" bodyend="1105" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="581" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a990d0a17b08dcd68a0d77a7b35cfebaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::EndParallel</definition>
        <argsstring>()</argsstring>
        <name>EndParallel</name>
        <briefdescription>
<para>Perform any needed parallel finalization. This MUST be the last routine in this class called from within a program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1118" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1118" bodyend="1121" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Abort</definition>
        <argsstring>(int errorcode=SIGABRT, bool backtrace=true)</argsstring>
        <name>Abort</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>backtrace</declname>
        </param>
        <briefdescription>
<para>Abort with specified error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1124" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1124" bodyend="1131" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="405" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a568bbd4bb8f719b9c0ba1950c10678ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * amrex::ParallelDescriptor::ErrorString</definition>
        <argsstring>(int errcode)</argsstring>
        <name>ErrorString</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>errcode</defname>
        </param>
        <briefdescription>
<para>ErrorString return string associated with error internal error condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1133" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1133" bodyend="1133" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="407" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac0861548eabcd3f4b4c72a8826f83f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Barrier</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>Barrier</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>message</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1135" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1135" bodyend="1135" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="395" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a474bca89f351da66587e049dfa4265d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Barrier</definition>
        <argsstring>(const MPI_Comm &amp;, const std::string &amp;)</argsstring>
        <name>Barrier</name>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <defname>comm</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>message</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1136" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1136" bodyend="1136" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="396" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a24603dd135fe7d8badbc0fe3ab25ff1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Abarrier</definition>
        <argsstring>()</argsstring>
        <name>Abarrier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1137" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1137" bodyend="1137" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="397" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1afaa2aaedf1b60a37ea26eaeda75973a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Abarrier</definition>
        <argsstring>(const MPI_Comm &amp;)</argsstring>
        <name>Abarrier</name>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <defname>comm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1138" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1138" bodyend="1138" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="398" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a07419f788f738f82f07c288c70af5e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Test</definition>
        <argsstring>(MPI_Request &amp;, int &amp;, MPI_Status &amp;)</argsstring>
        <name>Test</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &amp;</type>
          <defname>request</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>flag</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1140" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1140" bodyend="1140" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="400" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa9d7485d566f7b26e48e038d364590cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Test</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, int &amp;, Vector&lt; MPI_Status &gt; &amp;)</argsstring>
        <name>Test</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <defname>request</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>flag</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1141" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1141" bodyend="1141" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="401" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa6542637438eaa734790f6ab8ae83ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::IProbe</definition>
        <argsstring>(int, int, int &amp;, MPI_Status &amp;)</argsstring>
        <name>IProbe</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>src_pid</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>tag</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>mflag</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1142" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1142" bodyend="1142" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="633" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0d0639c2781f6e40af7d1b507d3a7a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::IProbe</definition>
        <argsstring>(int, int, MPI_Comm, int &amp;, MPI_Status &amp;)</argsstring>
        <name>IProbe</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>src_pid</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>tag</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <defname>comm</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>mflag</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1143" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1143" bodyend="1143" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="634" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab513eb7f98a3f225eda4e3dc0d2ec2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Comm_dup</definition>
        <argsstring>(MPI_Comm, MPI_Comm &amp;)</argsstring>
        <name>Comm_dup</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <defname>comm</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <defname>newcomm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1145" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1145" bodyend="1145" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="403" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8277d7550eaf5cf81d0f524b7410ec72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1147" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1147" bodyend="1147" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="431" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a348148608639b17ff12dcda5fb94bfcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1148" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1148" bodyend="1148" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="463" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a547aa72c96b591574810a03f5ab400b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1149" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1149" bodyend="1149" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="495" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3092f0618a27b8f7ed9d8644d55f0175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1151" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1151" bodyend="1151" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="447" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a21b23de379bbd1c89920745e66671353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1152" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1152" bodyend="1152" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="479" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7d3e531a6632a0c5d7ecb2e07d0552b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Real &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1153" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1153" bodyend="1153" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="511" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a476b155089373ad605808b20f38166d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Long and-wise reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1155" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1155" bodyend="1155" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="572" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a98c9e67e17bd55e681d9e790611a1289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Long sum reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1156" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1156" bodyend="1156" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="545" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a72761a0aff0775f8f6943062a34fca31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Long max reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1157" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1157" bodyend="1157" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="554" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a42ee71c485b816027db498df7b566a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long &amp;rvar)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Long min reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1158" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1158" bodyend="1158" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="563" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a01508dabdc47364798a99c9527c870f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Long and-wise reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1160" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1160" bodyend="1160" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="576" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a170da7d288a55d1b23ca2f2648d64f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Long sum reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1161" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1161" bodyend="1161" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="549" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a926985db9b71c186280e5e4556be41ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Long max reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1162" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1162" bodyend="1162" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="558" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a07c6b4691afed879feab525503e1e267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long &amp;rvar, int cpu)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>Long &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Long min reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1163" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1163" bodyend="1163" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="567" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7eb4a01321f954b8f6936ca59547c7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long *, int)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1165" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1165" bodyend="1165" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="573" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7008a294874001b3b8e5372ff45ebf64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long *, int)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1166" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1166" bodyend="1166" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="546" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3661303172f9bd5b139c1c19adbd93f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long *, int)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1167" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1167" bodyend="1167" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="555" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7ae5a5af4ccc5fa61d017ef297455291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long *, int)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1168" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1168" bodyend="1168" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="564" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aca77e15a2b4674d2abb34b092306c05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Long *, int, int)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1170" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1170" bodyend="1170" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="577" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a90d832444f2b4ad4af4c8aa56c810a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Long *, int, int)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1171" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1171" bodyend="1171" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="550" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a10f34646867ef5dd70d02ecf014de3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Long *, int, int)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1172" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1172" bodyend="1172" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="559" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a99b02744714ceae31674c2e25ef03029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Long *, int, int)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type>Long *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1173" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1173" bodyend="1173" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="568" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a442cb7df7045f7e80c1b5b9cf56c3e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1175" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1175" bodyend="1175" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="574" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a08634d889b97ecfc6d1093e15405dd0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1176" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1176" bodyend="1176" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="547" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a85984da1dec3a95553f2520a712d9e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1177" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1177" bodyend="1177" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="556" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a42c495e6f4898574776f5c9758f5ec50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1178" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1178" bodyend="1178" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="565" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aac35790ebafd32d969f28b0303025201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongAnd</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceLongAnd</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1180" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1180" bodyend="1180" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="578" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac3d6c9a59d8263568958d4dcebc97dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceLongSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1181" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1181" bodyend="1181" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="551" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a93e9b4abaacc06301dc81d68e1706b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceLongMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1182" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1182" bodyend="1182" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="560" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac77126021e052d2ec19592a60f4fcd86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceLongMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceLongMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; Long &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1183" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1183" bodyend="1183" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="569" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Integer sum reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1185" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1185" bodyend="1185" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="518" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Integer max reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1186" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1186" bodyend="1186" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="527" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int &amp;rvar)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Integer min reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1187" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1187" bodyend="1187" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="536" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1afbd2261dcc7ea1687666a76188724baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Integer sum reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1189" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1189" bodyend="1189" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="522" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a24bb8ef806f88e3157be27c793ffb345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Integer max reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1190" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1190" bodyend="1190" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="531" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8c531d59e55cd4b449b7b1918a6c0980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int &amp;rvar, int cpu)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Integer min reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1191" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1191" bodyend="1191" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="540" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a16b47250406954c795c3af20e49279a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int *, int)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1193" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1193" bodyend="1193" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="519" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a62bf0397eb0f4082f6dab4ae8e5c51d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int *, int)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1194" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1194" bodyend="1194" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="528" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aef0dcb327a050f0a04520c31486687a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int *, int)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1195" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1195" bodyend="1195" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="537" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a31842e0bf333c7f85c31e6f227055716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(int *, int, int)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1197" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1197" bodyend="1197" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="523" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac376fd270c659b4dcb8df316d1bc1938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(int *, int, int)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1198" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1198" bodyend="1198" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="532" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a12ffc8c1e5d0753383b1c4cacd1057dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(int *, int, int)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cnt</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1199" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1199" bodyend="1199" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="541" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae1fd5fb334fd246fe4509d9809c734ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1201" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1201" bodyend="1201" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="520" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4758dd1d120cf45e14445b4b8a5e2872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1202" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1202" bodyend="1202" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="529" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a18e9e6aa092cdf205079b32f74352ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1203" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1203" bodyend="1203" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="538" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae5535234864d34bb770977848d5a3db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceIntSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1205" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1205" bodyend="1205" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="524" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4a42002873948a204403a43b61af4988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceIntMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1206" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1206" bodyend="1206" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="533" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4d381b0d9806b7703f062db824126143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceIntMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; int &gt; &gt; &amp;&amp;, int)</argsstring>
        <name>ReduceIntMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;&amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1207" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1207" bodyend="1207" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="542" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a85f79f28c8cb6cc5762e3edd80c57fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolAnd</definition>
        <argsstring>(bool &amp;rvar)</argsstring>
        <name>ReduceBoolAnd</name>
        <param>
          <type>bool &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>And-wise boolean reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1209" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1209" bodyend="1209" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="412" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8e74f51d2321b7e827baae5d86a83824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolOr</definition>
        <argsstring>(bool &amp;rvar)</argsstring>
        <name>ReduceBoolOr</name>
        <param>
          <type>bool &amp;</type>
          <defname>rvar</defname>
        </param>
        <briefdescription>
<para>Or-wise boolean reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1210" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1210" bodyend="1210" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="417" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a45569b295bf42f447fac8a9610790ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolAnd</definition>
        <argsstring>(bool &amp;rvar, int cpu)</argsstring>
        <name>ReduceBoolAnd</name>
        <param>
          <type>bool &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>And-wise boolean reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1212" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1212" bodyend="1212" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="414" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a45ff8728249b5e214f520e284c04143b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReduceBoolOr</definition>
        <argsstring>(bool &amp;rvar, int cpu)</argsstring>
        <name>ReduceBoolOr</name>
        <param>
          <type>bool &amp;</type>
          <defname>rvar</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cpu</defname>
        </param>
        <briefdescription>
<para>Or-wise boolean reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1213" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1213" bodyend="1213" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="419" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9e67de311d5153ce34e743c7792de733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(void *, int, MPI_Datatype, int, MPI_Comm)</argsstring>
        <name>Bcast</name>
        <param>
          <type>void *</type>
          <defname>buf</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>count</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></type>
          <defname>datatype</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>root</defname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <defname>comm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1215" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1215" bodyend="1215" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="609" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::ParallelDescriptor::second</definition>
        <argsstring>() noexcept</argsstring>
        <name>second</name>
        <briefdescription>
<para>Returns wall-clock seconds since start of execution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1218" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1218" bodyend="1221" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="409" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a307e6fc3b7df510cca76aff2fda29435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Wait</definition>
        <argsstring>(MPI_Request &amp;, MPI_Status &amp;)</argsstring>
        <name>Wait</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &amp;</type>
          <defname>req</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1224" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1224" bodyend="1225" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="625" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a63d04588d41cd108e9255c231e2562d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitall</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, Vector&lt; MPI_Status &gt; &amp;)</argsstring>
        <name>Waitall</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <defname>reqs</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1228" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1228" bodyend="1229" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="626" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a201290543de69eac17ee181475285844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitany</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, int &amp;, MPI_Status &amp;)</argsstring>
        <name>Waitany</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <defname>reqs</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <defname>index</defname>
        </param>
        <param>
          <type><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &amp;</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1232" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1232" bodyend="1233" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="627" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Waitsome</definition>
        <argsstring>(Vector&lt; MPI_Request &gt; &amp;, int &amp;, Vector&lt; int &gt; &amp;, Vector&lt; MPI_Status &gt; &amp;)</argsstring>
        <name>Waitsome</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1236" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1236" bodyend="1238" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="628" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aaa5dec01b84a2e49488e12992593591c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_BARRIER, bl_pd_barrier)()</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_BARRIER</type>
        </param>
        <param>
          <type>bl_pd_barrier</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1244" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1244" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae4f551d40d14c8bbfaff946737d15abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_COMMUNICATOR, bl_pd_communicator)(void *vcomm)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_COMMUNICATOR</type>
        </param>
        <param>
          <type>bl_pd_communicator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1249" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1249" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a967ee2806a6203f8fee9dfa5b7cbc3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_MYPROC, bl_pd_myproc)(int *myproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_MYPROC</type>
        </param>
        <param>
          <type>bl_pd_myproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1256" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1256" bodyend="1259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4aaac68a526721b739e82ab88091e834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_NPROCS, bl_pd_nprocs)(int *nprocs)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_NPROCS</type>
        </param>
        <param>
          <type>bl_pd_nprocs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1261" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1261" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a76aa7801d002af637405b25a8e1b2792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_IOPROC, bl_pd_ioproc)(int *ioproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1266" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1266" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac28f369d555a5ea5f2aab2e6a64c2f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_IS_IOPROC, bl_pd_is_ioproc)(int *ioproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_IS_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_is_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1271" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1271" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adb07a50b62c06d1d041daabf568be368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_SECOND, bl_pd_second)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_SECOND</type>
        </param>
        <param>
          <type>bl_pd_second</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1276" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1276" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3ff2bd55bb9e1b66ae7bb60cd159483a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_REDUCE_REAL_MAX_TO_IOPROC, bl_pd_reduce_real_max_to_ioproc)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_REDUCE_REAL_MAX_TO_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_reduce_real_max_to_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1292" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1292" bodyend="1295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3f2139f00295dccb7905968c602d6763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_REDUCE_REAL_SUM_TO_IOPROC, bl_pd_reduce_real_sum_to_ioproc)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_REDUCE_REAL_SUM_TO_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_reduce_real_sum_to_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1297" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1297" bodyend="1300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6b00ecb0ae5350278a633a75443d947e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParallelDescriptor::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_ABORT, bl_pd_abort)()</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_ABORT</type>
        </param>
        <param>
          <type>bl_pd_abort</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1303" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1303" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4736dec48acb46827a04cdca7b4045d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::ReadAndBcastFile</definition>
        <argsstring>(const std::string &amp;filename, Vector&lt; char &gt; &amp;charBuf, bool bExitOnError, const MPI_Comm &amp;comm)</argsstring>
        <name>ReadAndBcastFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &amp;</type>
          <declname>charBuf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bExitOnError</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1393" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1393" bodyend="1442" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="630" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a916170832821539e49f051409018ffcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1445" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1445" bodyend="1453" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="109" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a95032768c19f94a64196f85fefeee239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1456" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1456" bodyend="1461" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="110" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af5ce3cf99985348d87f77ba2c811514f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::StartTeams</definition>
        <argsstring>()</argsstring>
        <name>StartTeams</name>
        <briefdescription>
<para>Split the process pool into teams. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1465" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1465" bodyend="1515" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="116" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1f1780bd83ee339ade2a2dd702473e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::EndTeams</definition>
        <argsstring>()</argsstring>
        <name>EndTeams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1519" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1519" bodyend="1522" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="117" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3557c1b3ec791b8bf6f9e9cab5c6b0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::ParallelDescriptor::mpi_level_to_string</definition>
        <argsstring>(int mtlev)</argsstring>
        <name>mpi_level_to_string</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mtlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an MPI_THREAD_&lt;X&gt; level to string</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtlev</parametername>
</parameternamelist>
<parameterdescription>
<para>MPI_THREAD_&lt;X&gt; level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string representation of the equivalent MPI macro name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1525" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1525" bodyend="1539" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="642" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac6df74b4b37bb6ee58dffea68507d259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string amrex::ParallelDescriptor::Unnamed</definition>
        <argsstring>(&quot;Unnamed&quot;)</argsstring>
        <name>Unnamed</name>
        <param>
          <type>&quot;Unnamed&quot;</type>
        </param>
        <briefdescription>
<para>Used as default argument to <ref refid="namespaceamrex_1_1ParallelDescriptor_1ac0861548eabcd3f4b4c72a8826f83f8e" kindref="member">ParallelDescriptor::Barrier()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="51" column="23" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="51" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a3e62b2c32fa5036fc1bb1dff1d819de6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::UseGpuAwareMpi</definition>
        <argsstring>()</argsstring>
        <name>UseGpuAwareMpi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="113" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyProc</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyProc</name>
        <briefdescription>
<para>return the rank number local to the current Parallel Context </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="127" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adc6941c4330302993547bfb867a1df31" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyProc</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>MyProc</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="132" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="132" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a705e1be005fbada39a2ca69f6dae9b88" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MinTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>MinTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="208" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab1375009d4e5cd0730cada71e3f18c33" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MaxTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>MaxTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="209" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::ParallelDescriptor::Communicator</definition>
        <argsstring>() noexcept</argsstring>
        <name>Communicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="212" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NProcs</definition>
        <argsstring>() noexcept</argsstring>
        <name>NProcs</name>
        <briefdescription>
<para>return the number of MPI ranks local to the current Parallel Context </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="216" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a7fe765fcc8bfc4c409483424a83fccf8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NProcs</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>NProcs</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="222" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="222" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::IOProcessorNumber</definition>
        <argsstring>() noexcept</argsstring>
        <name>IOProcessorNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="239" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::IOProcessor</definition>
        <argsstring>() noexcept</argsstring>
        <name>IOProcessor</name>
        <briefdescription>
<para>Is this CPU the I/O Processor? To get the rank number, call <ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">IOProcessorNumber()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="248" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9397b95ec0069183061d45372eed1287" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::IOProcessorNumber</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>IOProcessorNumber</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="254" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a8780ee1130870c2cd65de891c71b9b76" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::IOProcessor</definition>
        <argsstring>(MPI_Comm comm) noexcept</argsstring>
        <name>IOProcessor</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="260" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9854dea7eb2ee59093ed0bd80af9063e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::TeamSize</definition>
        <argsstring>() noexcept</argsstring>
        <name>TeamSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="267" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af2f4fc272303fdc7f363d88ffd292c4c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::NTeams</definition>
        <argsstring>() noexcept</argsstring>
        <name>NTeams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="272" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a687dc008cc6ce7831496af1f8bbfff96" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyTeamColor</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeamColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="277" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a564fb3e90a09a47e8213cdd2de4a2634" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyTeamLead</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeamLead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="282" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1acccfcdccaefb95d8178c5c9253113b87" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::MyRankInTeam</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyRankInTeam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="287" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a834c805f44e9aa2724debb07602d999e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::TeamLead</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>TeamLead</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="292" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::isTeamLead</definition>
        <argsstring>() noexcept</argsstring>
        <name>isTeamLead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="297" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::sameTeam</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>sameTeam</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="302" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a450001e6c4813cc1a122428e5f8c56f8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::sameTeam</definition>
        <argsstring>(int rankA, int rankB) noexcept</argsstring>
        <name>sameTeam</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rankA</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rankB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="307" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::RankInLeadComm</definition>
        <argsstring>(int rank) noexcept</argsstring>
        <name>RankInLeadComm</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="312" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParallelDescriptor::doTeamReduce</definition>
        <argsstring>() noexcept</argsstring>
        <name>doTeamReduce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="317" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam" kindref="compound">ProcessTeam</ref> &amp;</type>
        <definition>const ProcessTeam&amp; amrex::ParallelDescriptor::MyTeam</definition>
        <argsstring>() noexcept</argsstring>
        <name>MyTeam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="322" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae7e03fbd86dab31d19593df2ad5adde6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>std::pair&lt;int,int&gt; amrex::ParallelDescriptor::team_range</definition>
        <argsstring>(int begin, int end, int rit=-1, int nworkers=0) noexcept</argsstring>
        <name>team_range</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nworkers</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="327" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="327" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ae9b60ea81eb861f883e02edaa5876d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="371" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="371" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad8cac9ce7c8c2a234cde3400db6512a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, int rit, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="379" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="379" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1b1bd2a6da53acc442dac0945108b376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::team_for</definition>
        <argsstring>(int begin, int end, int rit, int nworkers, const F &amp;f)</argsstring>
        <name>team_for</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rit</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nworkers</declname>
        </param>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="387" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="387" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab02671f3503dea8f6c07c09175e61111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(T &amp;rvar)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real sum reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1252" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1252" bodyend="1254" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="424" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a733ead8d600721376c648931867e4dcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(T *rvar, int cnt)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1258" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1258" bodyend="1260" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="428" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4a03b98a77c82110dfd9d0895c92153f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1264" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1264" bodyend="1272" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="435" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a46149f294123b3ed4f98a3bb4206317b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(T &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real sum reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1277" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1277" bodyend="1279" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="440" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1d3e6b955f1aa4b39b38149966afcb7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(T *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1283" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1283" bodyend="1285" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="444" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a4ab4c0da7d8fb48042c2c0e6c750393d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealSum</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1289" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1289" bodyend="1297" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="451" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aca96e6b120b1bed51e1578f7d4cd6531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(T &amp;rvar)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real max reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1302" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1302" bodyend="1304" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="456" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1c19a8f613c1774c27c82bb09297667e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(T *rvar, int cnt)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1308" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1308" bodyend="1310" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="460" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aa980446d8b44b47e6e33c1c1ab288ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1314" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1314" bodyend="1322" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="467" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a608fa7b87a54bed47923367902f58707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(T &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real max reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1327" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1327" bodyend="1329" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="472" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab6794ccf7b449990df414fa18ebd4811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(T *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1333" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1333" bodyend="1335" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="476" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a69fddf6c80cea489bcda3208cb9268b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMax</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMax</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1339" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1339" bodyend="1347" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="483" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a35bc7bfdd24bd1c157efa152256c3865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(T &amp;rvar)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
<para>Real min reduction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1352" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1352" bodyend="1354" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="488" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a484bc9221ece93a956d590df004f435e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(T *rvar, int cnt)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1358" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1358" bodyend="1360" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="492" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a71918351aee65c34d7367b816b7e8243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;rvar)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1364" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1364" bodyend="1372" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="499" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac78023e5f2c9a7de41d32a4d214bbb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(T &amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>T &amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Real min reduction to specified cpu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1377" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1377" bodyend="1379" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="504" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a82e63a0c164938bcbbfd9dc57a5786fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(T *rvar, int cnt, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type>T *</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1383" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1383" bodyend="1385" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="508" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a544afd58fdfdbeec6660b0f596853af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value &gt;::type amrex::ParallelDescriptor::ReduceRealMin</definition>
        <argsstring>(Vector&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;rvar, int cpu)</argsstring>
        <name>ReduceRealMin</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::reference_wrapper&lt; T &gt; &gt; &amp;&amp;</type>
          <declname>rvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1389" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1389" bodyend="1397" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="515" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a9fa50b376ee8c97f8d84852e244fd916" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParallelDescriptor::SeqNum</definition>
        <argsstring>() noexcept</argsstring>
        <name>SeqNum</name>
        <briefdescription>
<para>Returns sequential message sequence numbers, usually used as tags for send/recv. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="589" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="589" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a0903eb5194f11fcf386f79e6ff3c02f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const T *, size_t n, int pid, int tag)</argsstring>
        <name>Asend</name>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1065" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1065" bodyend="1068" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="591" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a69e9f409844f19f30203ffe423541cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Asend</name>
        <param>
          <type>const T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1072" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1072" bodyend="1075" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="592" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ac778e22b0521da836d006d672ed03846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Asend</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Asend</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1079" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1079" bodyend="1082" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="593" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af5ed8a597f21464e9f2803f0e2afc0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(T *, size_t n, int pid, int tag)</argsstring>
        <name>Arecv</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1107" bodyend="1110" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="595" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab0ebfbe15f6ff892bd36ecba234fb4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Arecv</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1114" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1114" bodyend="1117" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="596" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad1c34d9de3893126169a033007bf7073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Arecv</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;buf, int pid, int tag)</argsstring>
        <name>Arecv</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1121" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1121" bodyend="1124" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="597" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a89ca8639338d64c25ee28faf1b829701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const T *buf, size_t n, int dst_pid, int tag)</argsstring>
        <name>Send</name>
        <param>
          <type>const T *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1086" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1086" bodyend="1089" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="599" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab3cede7750fdc21c3c11c9bc62a174ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const T *buf, size_t n, int dst_pid, int tag, MPI_Comm comm)</argsstring>
        <name>Send</name>
        <param>
          <type>const T *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1093" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1093" bodyend="1096" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="600" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aae0327dea4fe1379f7b09210e8e6ebd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Send</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;buf, int dst_pid, int tag)</argsstring>
        <name>Send</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1100" bodyend="1103" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="601" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1af4996999fa16efb8ab255e1d26ab2163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(T *, size_t n, int pid, int tag)</argsstring>
        <name>Recv</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1128" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1128" bodyend="1131" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="603" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a1edfac65363a39cde188d5f5adb85134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(T *, size_t n, int pid, int tag, MPI_Comm comm)</argsstring>
        <name>Recv</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1135" bodyend="1138" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="604" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a01e2509fda38be90b0721b3a1aad439c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParallelDescriptor_1_1Message" kindref="compound">Message</ref></type>
        <definition>Message amrex::ParallelDescriptor::Recv</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;t, int pid, int tag)</argsstring>
        <name>Recv</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1142" bodyend="1145" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="605" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(T *, size_t n, int root=0)</argsstring>
        <name>Bcast</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1149" bodyend="1150" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="607" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ab86dba69cfd44465e773abcc8a4bcecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(T *, size_t n, int root, const MPI_Comm &amp;comm)</argsstring>
        <name>Bcast</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1154" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1154" bodyend="1155" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="608" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1adb4c5fe012593a0ef38394db6c2643f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Scatter</definition>
        <argsstring>(T *, size_t n, const T1 *, size_t n1, int root)</argsstring>
        <name>Scatter</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T1 *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1201" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1201" bodyend="1202" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="611" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1ad270703aec68e1bad2e5551590f10dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class T1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(const T *, size_t n, T1 *, size_t n1, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>const T *</type>
          <defname>t</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T1 *</type>
          <defname>t1</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1159" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1159" bodyend="1166" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="613" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a84c9d7d438ae259036461c6db6100a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; amrex::ParallelDescriptor::Gather</definition>
        <argsstring>(const T &amp;, int root)</argsstring>
        <name>Gather</name>
        <param>
          <type>const T &amp;</type>
          <defname>t</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1170" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1170" bodyend="1175" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="614" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a211110d15cfcd5d09168c6d415476ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Gatherv</definition>
        <argsstring>(const T *send, int sc, T *recv, const std::vector&lt; int &gt; &amp;rc, const std::vector&lt; int &gt; &amp;disp, int root)</argsstring>
        <name>Gatherv</name>
        <param>
          <type>const T *</type>
          <declname>send</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sc</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>recv</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rc</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>disp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1179" bodyend="1184" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="616" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1aaa8e2b582c52d43645acae3099cbaf4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::GatherLayoutDataToVector</definition>
        <argsstring>(const LayoutData&lt; T &gt; &amp;sendbuf, Vector&lt; T &gt; &amp;recvbuf, int root)</argsstring>
        <name>GatherLayoutDataToVector</name>
        <param>
          <type>const <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; T &gt; &amp;</type>
          <declname>sendbuf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>recvbuf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Gather <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref> values to a vector on root. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" line="1188" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" bodystart="1188" bodyend="1197" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParallelDescriptor.H" declline="621" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1ParallelDescriptor_1a888b64c6c10ac205e70f5627921668ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelDescriptor::Bcast</definition>
        <argsstring>(Box *b, size_t n, int root)</argsstring>
        <name>Bcast</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_DataServices.cpp" line="67" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_DataServices.cpp" bodystart="67" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parallel frontend that abstracts functionalities needed to spawn processes and handle communication. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ccse-mpi.H" line="67" column="1"/>
  </compounddef>
</doxygen>
