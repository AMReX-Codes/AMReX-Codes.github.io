<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__BLProfUtilities_8cpp" kind="file" language="C++">
    <compoundname>AMReX_BLProfUtilities.cpp</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">cstring</includes>
    <includes local="no">list</includes>
    <includes local="no">vector</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">limits</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">sys/stat.h</includes>
    <includes refid="AMReX__SPACE_8H" local="no">AMReX_SPACE.H</includes>
    <includes refid="AMReX_8H" local="no">AMReX.H</includes>
    <includes refid="AMReX__BLProfStats_8H" local="no">AMReX_BLProfStats.H</includes>
    <includes refid="AMReX__CommProfStats_8H" local="no">AMReX_CommProfStats.H</includes>
    <includes refid="AMReX__RegionsProfStats_8H" local="no">AMReX_RegionsProfStats.H</includes>
    <includes refid="AMReX__Utility_8H" local="no">AMReX_Utility.H</includes>
    <includes refid="AMReX__ParallelDescriptor_8H" local="no">AMReX_ParallelDescriptor.H</includes>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <includes refid="AMReX__Vector_8H" local="no">AMReX_Vector.H</includes>
    <includes refid="AMReX__IntVect_8H" local="no">AMReX_IntVect.H</includes>
    <includes refid="AMReX__Box_8H" local="no">AMReX_Box.H</includes>
    <includes refid="AMReX__FArrayBox_8H" local="no">AMReX_FArrayBox.H</includes>
    <includes refid="AMReX__MultiFab_8H" local="no">AMReX_MultiFab.H</includes>
    <includes refid="AMReX__AVGDOWN__F_8H" local="no">AMReX_AVGDOWN_F.H</includes>
    <includes refid="AMReX__BLProfUtilities_8H" local="no">AMReX_BLProfUtilities.H</includes>
    <incdepgraph>
      <node id="48594">
        <label>sys/stat.h</label>
      </node>
      <node id="48589">
        <label>list</label>
      </node>
      <node id="48649">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48650" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48598" relation="include">
        </childnode>
      </node>
      <node id="48672">
        <label>iomanip</label>
      </node>
      <node id="48601">
        <label>functional</label>
      </node>
      <node id="48645">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48632" relation="include">
        </childnode>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48646" relation="include">
        </childnode>
        <childnode refid="48622" relation="include">
        </childnode>
        <childnode refid="48629" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
      </node>
      <node id="48637">
        <label>AMReX_BoxIterator.H</label>
        <link refid="AMReX__BoxIterator_8H"/>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
      </node>
      <node id="48592">
        <label>limits</label>
      </node>
      <node id="48604">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
      </node>
      <node id="48673">
        <label>AMReX_CudaContainers.H</label>
        <link refid="AMReX__CudaContainers_8H"/>
        <childnode refid="48656" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48670" relation="include">
        </childnode>
      </node>
      <node id="48619">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="48608" relation="include">
        </childnode>
        <childnode refid="48620" relation="include">
        </childnode>
        <childnode refid="48621" relation="include">
        </childnode>
        <childnode refid="48598" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48622" relation="include">
        </childnode>
        <childnode refid="48623" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48624" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
      </node>
      <node id="48695">
        <label>AMReX_AVGDOWN_F.H</label>
        <link refid="AMReX__AVGDOWN__F_8H"/>
        <childnode refid="48621" relation="include">
        </childnode>
      </node>
      <node id="48665">
        <label>AMReX_GpuUtility.H</label>
        <link refid="AMReX__GpuUtility_8H"/>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
        <childnode refid="48662" relation="include">
        </childnode>
        <childnode refid="48606" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48624" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48609" relation="include">
        </childnode>
      </node>
      <node id="48677">
        <label>cstdint</label>
      </node>
      <node id="48686">
        <label>AMReX_FabArrayBase.H</label>
        <link refid="AMReX__FabArrayBase_8H"/>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48645" relation="include">
        </childnode>
        <childnode refid="48647" relation="include">
        </childnode>
        <childnode refid="48648" relation="include">
        </childnode>
        <childnode refid="48687" relation="include">
        </childnode>
        <childnode refid="48685" relation="include">
        </childnode>
        <childnode refid="48671" relation="include">
        </childnode>
        <childnode refid="48631" relation="include">
        </childnode>
        <childnode refid="48657" relation="include">
        </childnode>
      </node>
      <node id="48647">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48632" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48596" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48648" relation="include">
        </childnode>
      </node>
      <node id="48607">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="48608" relation="include">
        </childnode>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48609" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48610" relation="include">
        </childnode>
        <childnode refid="48593" relation="include">
        </childnode>
        <childnode refid="48598" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48618" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48606" relation="include">
        </childnode>
        <childnode refid="48597" relation="include">
        </childnode>
      </node>
      <node id="48693">
        <label>stdlib.h</label>
      </node>
      <node id="48596">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48598" relation="include">
        </childnode>
        <childnode refid="48599" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48601" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48585" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48602" relation="include">
        </childnode>
      </node>
      <node id="48638">
        <label>AMReX_MakeType.H</label>
        <link refid="AMReX__MakeType_8H"/>
      </node>
      <node id="48664">
        <label>AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
      </node>
      <node id="48659">
        <label>AMReX_GpuError.H</label>
        <link refid="AMReX__GpuError_8H"/>
        <childnode refid="48639" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
      </node>
      <node id="48617">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="48593" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
      </node>
      <node id="48671">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="48614" relation="include">
        </childnode>
        <childnode refid="48650" relation="include">
        </childnode>
        <childnode refid="48672" relation="include">
        </childnode>
        <childnode refid="48596" relation="include">
        </childnode>
        <childnode refid="48649" relation="include">
        </childnode>
        <childnode refid="48648" relation="include">
        </childnode>
      </node>
      <node id="48609">
        <label>cmath</label>
      </node>
      <node id="48684">
        <label>cassert</label>
      </node>
      <node id="48694">
        <label>AMReX_RegionsProfStats.H</label>
        <link refid="AMReX__RegionsProfStats_8H"/>
        <childnode refid="48603" relation="include">
        </childnode>
        <childnode refid="48604" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48625" relation="include">
        </childnode>
        <childnode refid="48585" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48650" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48646" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48652" relation="include">
        </childnode>
        <childnode refid="48614" relation="include">
        </childnode>
        <childnode refid="48693" relation="include">
        </childnode>
      </node>
      <node id="48600">
        <label>stdexcept</label>
      </node>
      <node id="48656">
        <label>numeric</label>
      </node>
      <node id="48629">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="48608" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48622" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
      </node>
      <node id="48626">
        <label>AMReX_BaseFab.H</label>
        <link refid="AMReX__BaseFab_8H"/>
        <childnode refid="48609" relation="include">
        </childnode>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48593" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48610" relation="include">
        </childnode>
        <childnode refid="48612" relation="include">
        </childnode>
        <childnode refid="48627" relation="include">
        </childnode>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48606" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48628" relation="include">
        </childnode>
        <childnode refid="48629" relation="include">
        </childnode>
        <childnode refid="48630" relation="include">
        </childnode>
        <childnode refid="48633" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48604" relation="include">
        </childnode>
        <childnode refid="48637" relation="include">
        </childnode>
        <childnode refid="48638" relation="include">
        </childnode>
        <childnode refid="48639" relation="include">
        </childnode>
        <childnode refid="48657" relation="include">
        </childnode>
      </node>
      <node id="48587">
        <label>string</label>
      </node>
      <node id="48670">
        <label>AMReX_CudaAllocators.H</label>
        <link refid="AMReX__CudaAllocators_8H"/>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48671" relation="include">
        </childnode>
        <childnode refid="48631" relation="include">
        </childnode>
        <childnode refid="48662" relation="include">
        </childnode>
      </node>
      <node id="48628">
        <label>AMReX_Loop.H</label>
        <link refid="AMReX__Loop_8H"/>
        <childnode refid="48619" relation="include">
        </childnode>
      </node>
      <node id="48640">
        <label>map</label>
      </node>
      <node id="48676">
        <label>AMReX_MultiFab.H</label>
        <link refid="AMReX__MultiFab_8H"/>
        <childnode refid="48677" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48625" relation="include">
        </childnode>
        <childnode refid="48678" relation="include">
        </childnode>
        <childnode refid="48691" relation="include">
        </childnode>
        <childnode refid="48685" relation="include">
        </childnode>
      </node>
      <node id="48636">
        <label>unordered_set</label>
      </node>
      <node id="48690">
        <label>AMReX_FabArrayCommI.H</label>
        <link refid="AMReX__FabArrayCommI_8H"/>
      </node>
      <node id="48689">
        <label>AMReX_LayoutData.H</label>
        <link refid="AMReX__LayoutData_8H"/>
        <childnode refid="48686" relation="include">
        </childnode>
        <childnode refid="48688" relation="include">
        </childnode>
      </node>
      <node id="48650">
        <label>fstream</label>
      </node>
      <node id="48680">
        <label>AMReX_Geometry.H</label>
        <link refid="AMReX__Geometry_8H"/>
        <childnode refid="48608" relation="include">
        </childnode>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48681" relation="include">
        </childnode>
        <childnode refid="48648" relation="include">
        </childnode>
        <childnode refid="48682" relation="include">
        </childnode>
        <childnode refid="48685" relation="include">
        </childnode>
      </node>
      <node id="48688">
        <label>AMReX_MFIter.H</label>
        <link refid="AMReX__MFIter_8H"/>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48631" relation="include">
        </childnode>
        <childnode refid="48686" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48625" relation="include">
        </childnode>
        <childnode refid="48682" relation="include">
        </childnode>
        <childnode refid="48657" relation="include">
        </childnode>
      </node>
      <node id="48621">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="48605" relation="include">
        </childnode>
      </node>
      <node id="48583">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp</label>
        <link refid="AMReX_BLProfUtilities.cpp"/>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48585" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48588" relation="include">
        </childnode>
        <childnode refid="48589" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48591" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48593" relation="include">
        </childnode>
        <childnode refid="48594" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48596" relation="include">
        </childnode>
        <childnode refid="48603" relation="include">
        </childnode>
        <childnode refid="48692" relation="include">
        </childnode>
        <childnode refid="48694" relation="include">
        </childnode>
        <childnode refid="48639" relation="include">
        </childnode>
        <childnode refid="48648" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48625" relation="include">
        </childnode>
        <childnode refid="48676" relation="include">
        </childnode>
        <childnode refid="48695" relation="include">
        </childnode>
        <childnode refid="48696" relation="include">
        </childnode>
      </node>
      <node id="48682">
        <label>AMReX_RealBox.H</label>
        <link refid="AMReX__RealBox_8H"/>
        <childnode refid="48608" relation="include">
        </childnode>
        <childnode refid="48612" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48683" relation="include">
        </childnode>
      </node>
      <node id="48611">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="48612" relation="include">
        </childnode>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48613" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48614" relation="include">
        </childnode>
        <childnode refid="48585" relation="include">
        </childnode>
        <childnode refid="48596" relation="include">
        </childnode>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
      </node>
      <node id="48669">
        <label>AMReX_GpuReduce.H</label>
        <link refid="AMReX__GpuReduce_8H"/>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
        <childnode refid="48639" relation="include">
        </childnode>
      </node>
      <node id="48595">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="48692">
        <label>AMReX_CommProfStats.H</label>
        <link refid="AMReX__CommProfStats_8H"/>
        <childnode refid="48603" relation="include">
        </childnode>
        <childnode refid="48604" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48625" relation="include">
        </childnode>
        <childnode refid="48676" relation="include">
        </childnode>
        <childnode refid="48585" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48650" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48646" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48652" relation="include">
        </childnode>
        <childnode refid="48614" relation="include">
        </childnode>
        <childnode refid="48693" relation="include">
        </childnode>
      </node>
      <node id="48687">
        <label>AMReX_ParallelReduce.H</label>
        <link refid="AMReX__ParallelReduce_8H"/>
        <childnode refid="48596" relation="include">
        </childnode>
        <childnode refid="48648" relation="include">
        </childnode>
        <childnode refid="48671" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48627" relation="include">
        </childnode>
      </node>
      <node id="48606">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="48658">
        <label>AMReX_GpuLaunch.H</label>
        <link refid="AMReX__GpuLaunch_8H"/>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
        <childnode refid="48659" relation="include">
        </childnode>
        <childnode refid="48660" relation="include">
        </childnode>
        <childnode refid="48662" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48628" relation="include">
        </childnode>
        <childnode refid="48606" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48661" relation="include">
        </childnode>
        <childnode refid="48632" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48593" relation="include">
        </childnode>
        <childnode refid="48663" relation="include">
        </childnode>
        <childnode refid="48664" relation="include">
        </childnode>
      </node>
      <node id="48642">
        <label>sys/types.h</label>
      </node>
      <node id="48685">
        <label>AMReX_Periodicity.H</label>
        <link refid="AMReX__Periodicity_8H"/>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
      </node>
      <node id="48591">
        <label>typeinfo</label>
      </node>
      <node id="48585">
        <label>cstdio</label>
      </node>
      <node id="48661">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="48627" relation="include">
        </childnode>
        <childnode refid="48606" relation="include">
        </childnode>
      </node>
      <node id="48615">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="48597" relation="include">
        </childnode>
      </node>
      <node id="48651">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="48652" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48613" relation="include">
        </childnode>
        <childnode refid="48614" relation="include">
        </childnode>
        <childnode refid="48585" relation="include">
        </childnode>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48653" relation="include">
        </childnode>
        <childnode refid="48654" relation="include">
        </childnode>
        <childnode refid="48655" relation="include">
        </childnode>
      </node>
      <node id="48643">
        <label>unistd.h</label>
      </node>
      <node id="48652">
        <label>stack</label>
      </node>
      <node id="48590">
        <label>vector</label>
      </node>
      <node id="48675">
        <label>AMReX_FabFactory.H</label>
        <link refid="AMReX__FabFactory_8H"/>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48671" relation="include">
        </childnode>
        <childnode refid="48638" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48631" relation="include">
        </childnode>
      </node>
      <node id="48616">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="48596" relation="include">
        </childnode>
      </node>
      <node id="48597">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="48613">
        <label>utility</label>
      </node>
      <node id="48612">
        <label>array</label>
      </node>
      <node id="48678">
        <label>AMReX_FabArray.H</label>
        <link refid="AMReX__FabArray_8H"/>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48588" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48613" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48593" relation="include">
        </childnode>
        <childnode refid="48634" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48596" relation="include">
        </childnode>
        <childnode refid="48645" relation="include">
        </childnode>
        <childnode refid="48679" relation="include">
        </childnode>
        <childnode refid="48675" relation="include">
        </childnode>
        <childnode refid="48647" relation="include">
        </childnode>
        <childnode refid="48680" relation="include">
        </childnode>
        <childnode refid="48648" relation="include">
        </childnode>
        <childnode refid="48639" relation="include">
        </childnode>
        <childnode refid="48598" relation="include">
        </childnode>
        <childnode refid="48604" relation="include">
        </childnode>
        <childnode refid="48685" relation="include">
        </childnode>
        <childnode refid="48671" relation="include">
        </childnode>
        <childnode refid="48686" relation="include">
        </childnode>
        <childnode refid="48688" relation="include">
        </childnode>
        <childnode refid="48638" relation="include">
        </childnode>
        <childnode refid="48661" relation="include">
        </childnode>
        <childnode refid="48689" relation="include">
        </childnode>
        <childnode refid="48626" relation="include">
        </childnode>
        <childnode refid="48657" relation="include">
        </childnode>
        <childnode refid="48690" relation="include">
        </childnode>
      </node>
      <node id="48625">
        <label>AMReX_FArrayBox.H</label>
        <link refid="AMReX__FArrayBox_8H"/>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48626" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48675" relation="include">
        </childnode>
        <childnode refid="48609" relation="include">
        </childnode>
      </node>
      <node id="48614">
        <label>sstream</label>
      </node>
      <node id="48691">
        <label>AMReX_FabArrayUtility.H</label>
        <link refid="AMReX__FabArrayUtility_8H"/>
        <childnode refid="48678" relation="include">
        </childnode>
        <childnode refid="48689" relation="include">
        </childnode>
        <childnode refid="48671" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
      </node>
      <node id="48599">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="48600" relation="include">
        </childnode>
      </node>
      <node id="48603">
        <label>AMReX_BLProfStats.H</label>
        <link refid="AMReX__BLProfStats_8H"/>
        <childnode refid="48604" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48625" relation="include">
        </childnode>
        <childnode refid="48676" relation="include">
        </childnode>
        <childnode refid="48585" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48650" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48634" relation="include">
        </childnode>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48614" relation="include">
        </childnode>
      </node>
      <node id="48620">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="48593" relation="include">
        </childnode>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48606" relation="include">
        </childnode>
        <childnode refid="48618" relation="include">
        </childnode>
      </node>
      <node id="48660">
        <label>AMReX_GpuRange.H</label>
        <link refid="AMReX__GpuRange_8H"/>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
        <childnode refid="48659" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48661" relation="include">
        </childnode>
      </node>
      <node id="48648">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="48598" relation="include">
        </childnode>
        <childnode refid="48649" relation="include">
        </childnode>
        <childnode refid="48651" relation="include">
        </childnode>
        <childnode refid="48604" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48591" relation="include">
        </childnode>
        <childnode refid="48593" relation="include">
        </childnode>
        <childnode refid="48601" relation="include">
        </childnode>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48656" relation="include">
        </childnode>
      </node>
      <node id="48639">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48640" relation="include">
        </childnode>
        <childnode refid="48641" relation="include">
        </childnode>
        <childnode refid="48627" relation="include">
        </childnode>
        <childnode refid="48642" relation="include">
        </childnode>
        <childnode refid="48643" relation="include">
        </childnode>
        <childnode refid="48644" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48645" relation="include">
        </childnode>
        <childnode refid="48647" relation="include">
        </childnode>
        <childnode refid="48648" relation="include">
        </childnode>
      </node>
      <node id="48631">
        <label>AMReX_Arena.H</label>
        <link refid="AMReX__Arena_8H"/>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48632" relation="include">
        </childnode>
        <childnode refid="48584" relation="include">
        </childnode>
      </node>
      <node id="48623">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="48608" relation="include">
        </childnode>
        <childnode refid="48616" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48597" relation="include">
        </childnode>
      </node>
      <node id="48618">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
      </node>
      <node id="48644">
        <label>sys/wait.h</label>
      </node>
      <node id="48608">
        <label>iosfwd</label>
      </node>
      <node id="48584">
        <label>cstdlib</label>
      </node>
      <node id="48655">
        <label>cfenv</label>
      </node>
      <node id="48586">
        <label>iostream</label>
      </node>
      <node id="48622">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="48608" relation="include">
        </childnode>
        <childnode refid="48598" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
      </node>
      <node id="48624">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="48607" relation="include">
        </childnode>
      </node>
      <node id="48632">
        <label>cstddef</label>
      </node>
      <node id="48646">
        <label>unordered_map</label>
      </node>
      <node id="48679">
        <label>AMReX_BoxDomain.H</label>
        <link refid="AMReX__BoxDomain_8H"/>
        <childnode refid="48608" relation="include">
        </childnode>
        <childnode refid="48622" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
        <childnode refid="48629" relation="include">
        </childnode>
      </node>
      <node id="48657">
        <label>AMReX_Gpu.H</label>
        <link refid="AMReX__Gpu_8H"/>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
        <childnode refid="48658" relation="include">
        </childnode>
        <childnode refid="48659" relation="include">
        </childnode>
        <childnode refid="48665" relation="include">
        </childnode>
        <childnode refid="48662" relation="include">
        </childnode>
        <childnode refid="48666" relation="include">
        </childnode>
        <childnode refid="48667" relation="include">
        </childnode>
        <childnode refid="48668" relation="include">
        </childnode>
        <childnode refid="48660" relation="include">
        </childnode>
        <childnode refid="48669" relation="include">
        </childnode>
        <childnode refid="48670" relation="include">
        </childnode>
        <childnode refid="48673" relation="include">
        </childnode>
        <childnode refid="48674" relation="include">
        </childnode>
      </node>
      <node id="48610">
        <label>climits</label>
      </node>
      <node id="48674">
        <label>AMReX_CudaGraph.H</label>
        <link refid="AMReX__CudaGraph_8H"/>
      </node>
      <node id="48635">
        <label>mutex</label>
      </node>
      <node id="48641">
        <label>chrono</label>
      </node>
      <node id="48663">
        <label>AMReX_GpuLaunchMacrosC.H</label>
        <link refid="AMReX__GpuLaunchMacrosC_8H"/>
      </node>
      <node id="48654">
        <label>csignal</label>
      </node>
      <node id="48633">
        <label>AMReX_CArena.H</label>
        <link refid="AMReX__CArena_8H"/>
        <childnode refid="48632" relation="include">
        </childnode>
        <childnode refid="48634" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48635" relation="include">
        </childnode>
        <childnode refid="48636" relation="include">
        </childnode>
        <childnode refid="48601" relation="include">
        </childnode>
        <childnode refid="48631" relation="include">
        </childnode>
      </node>
      <node id="48627">
        <label>type_traits</label>
      </node>
      <node id="48634">
        <label>set</label>
      </node>
      <node id="48630">
        <label>AMReX_BArena.H</label>
        <link refid="AMReX__BArena_8H"/>
        <childnode refid="48631" relation="include">
        </childnode>
      </node>
      <node id="48598">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="48667">
        <label>AMReX_GpuElixir.H</label>
        <link refid="AMReX__GpuElixir_8H"/>
        <childnode refid="48631" relation="include">
        </childnode>
      </node>
      <node id="48593">
        <label>algorithm</label>
      </node>
      <node id="48662">
        <label>AMReX_GpuDevice.H</label>
        <link refid="AMReX__GpuDevice_8H"/>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48612" relation="include">
        </childnode>
        <childnode refid="48596" relation="include">
        </childnode>
        <childnode refid="48639" relation="include">
        </childnode>
        <childnode refid="48659" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
      </node>
      <node id="48653">
        <label>execinfo.h</label>
      </node>
      <node id="48588">
        <label>cstring</label>
      </node>
      <node id="48696">
        <label>AMReX_BLProfUtilities.H</label>
        <link refid="AMReX__BLProfUtilities_8H"/>
        <childnode refid="48587" relation="include">
        </childnode>
        <childnode refid="48588" relation="include">
        </childnode>
        <childnode refid="48591" relation="include">
        </childnode>
        <childnode refid="48603" relation="include">
        </childnode>
        <childnode refid="48692" relation="include">
        </childnode>
        <childnode refid="48694" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
      </node>
      <node id="48683">
        <label>AMReX_RealVect.H</label>
        <link refid="AMReX__RealVect_8H"/>
        <childnode refid="48632" relation="include">
        </childnode>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48588" relation="include">
        </childnode>
        <childnode refid="48586" relation="include">
        </childnode>
        <childnode refid="48609" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48595" relation="include">
        </childnode>
        <childnode refid="48590" relation="include">
        </childnode>
        <childnode refid="48684" relation="include">
        </childnode>
        <childnode refid="48607" relation="include">
        </childnode>
      </node>
      <node id="48681">
        <label>AMReX_CoordSys.H</label>
        <link refid="AMReX__CoordSys_8H"/>
        <childnode refid="48592" relation="include">
        </childnode>
        <childnode refid="48596" relation="include">
        </childnode>
        <childnode refid="48605" relation="include">
        </childnode>
        <childnode refid="48611" relation="include">
        </childnode>
        <childnode refid="48617" relation="include">
        </childnode>
        <childnode refid="48619" relation="include">
        </childnode>
      </node>
      <node id="48602">
        <label>memory</label>
      </node>
      <node id="48666">
        <label>AMReX_GpuAsyncArray.H</label>
        <link refid="AMReX__GpuAsyncArray_8H"/>
        <childnode refid="48632" relation="include">
        </childnode>
        <childnode refid="48588" relation="include">
        </childnode>
        <childnode refid="48584" relation="include">
        </childnode>
        <childnode refid="48602" relation="include">
        </childnode>
        <childnode refid="48631" relation="include">
        </childnode>
        <childnode refid="48661" relation="include">
        </childnode>
        <childnode refid="48662" relation="include">
        </childnode>
      </node>
      <node id="48668">
        <label>AMReX_GpuMemory.H</label>
        <link refid="AMReX__GpuMemory_8H"/>
        <childnode refid="48597" relation="include">
        </childnode>
        <childnode refid="48615" relation="include">
        </childnode>
        <childnode refid="48662" relation="include">
        </childnode>
        <childnode refid="48661" relation="include">
        </childnode>
        <childnode refid="48631" relation="include">
        </childnode>
        <childnode refid="48584" relation="include">
        </childnode>
      </node>
      <node id="48605">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="48606" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="AMReX__BLProfUtilities_8cpp_1a5fd77257044e9f492d0ae6422ec77060" prot="public" static="no">
        <name>BL_BLPROFUTILITIES_CPP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" line="5" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__BLProfUtilities_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" prot="public" static="no">
        <name>SHOWVAL</name>
        <param><defname>val</defname></param>
        <initializer>{ cout &lt;&lt; #val &lt;&lt; &quot; = &quot; &lt;&lt; val &lt;&lt; endl; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" line="42" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="AMReX__BLProfUtilities_8cpp_1aad9b13c926f56c9d115321ff8934b3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int maxFabXDim</definition>
        <argsstring>(1024)</argsstring>
        <name>maxFabXDim</name>
        <param>
          <type>1024</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" line="40" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>AMReX_BLProfUtilities.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BL_BLPROFUTILITIES_CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BL_BLPROFUTILITIES_CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::endl;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::flush;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__SPACE_8H" kindref="compound">AMReX_SPACE.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX_8H" kindref="compound">AMReX.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLProfStats_8H" kindref="compound">AMReX_BLProfStats.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__CommProfStats_8H" kindref="compound">AMReX_CommProfStats.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__RegionsProfStats_8H" kindref="compound">AMReX_RegionsProfStats.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Utility_8H" kindref="compound">AMReX_Utility.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParallelDescriptor_8H" kindref="compound">AMReX_ParallelDescriptor.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Array_8H" kindref="compound">AMReX_Array.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Vector_8H" kindref="compound">AMReX_Vector.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__IntVect_8H" kindref="compound">AMReX_IntVect.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Box_8H" kindref="compound">AMReX_Box.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__FArrayBox_8H" kindref="compound">AMReX_FArrayBox.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__MultiFab_8H" kindref="compound">AMReX_MultiFab.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__AVGDOWN__F_8H" kindref="compound">AMReX_AVGDOWN_F.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLProfUtilities_8H" kindref="compound">AMReX_BLProfUtilities.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__BLProfUtilities_8cpp_1aad9b13c926f56c9d115321ff8934b3cb" kindref="member">maxFabXDim</ref>(1024);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHOWVAL(val)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/>#val<sp/>&lt;&lt;<sp/>&quot;<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/>endl;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">std::string<sp/><ref refid="namespaceamrex_1a41265e28034440c2aaa8fb38d3cd38c5" kindref="member">amrex::SanitizeName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;sname)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>std::string<sp/>s(sname);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>std::size_t<sp/>found;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>Vector&lt;char&gt;<sp/>replaceChars;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>replaceChars.push_back(</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c(0);<sp/>c<sp/>&lt;<sp/>replaceChars.size();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((found<sp/>=<sp/>s.find(replaceChars[c]))<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.replace(found,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----<sp/>this<sp/>resolves<sp/>only<sp/>a<sp/>simple<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1ebc8341ffa9cc6f20e707bfb36ce253" kindref="member">amrex::SimpleRemoveOverlap</ref>(BoxArray<sp/>&amp;ba)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim(0);<sp/>dim<sp/>&lt;<sp/><ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref>;<sp/>++dim)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>ba.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>b(ba[i]);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>ba.size();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>!=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box<sp/>&amp;bn<sp/>=<sp/>ba[n];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b.bigEnd(dim)<sp/>==<sp/>bn.smallEnd(dim))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.growHi(dim,<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ba.set(i,<sp/>b);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a61e745ad34b00278dec10a2723c3d788" kindref="member">amrex::avgDown_doit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FArrayBox<sp/>&amp;fine_fab,<sp/>FArrayBox<sp/>&amp;crse_fab,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box<sp/>&amp;ovlp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scomp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dcomp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>&amp;ratio)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*ovlo<sp/><sp/><sp/>=<sp/>ovlp.loVect();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*ovhi<sp/><sp/><sp/>=<sp/>ovlp.hiVect();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*flo<sp/><sp/><sp/><sp/>=<sp/>fine_fab.loVect();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*fhi<sp/><sp/><sp/><sp/>=<sp/>fine_fab.hiVect();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real<sp/>*f_dat<sp/><sp/>=<sp/>fine_fab.dataPtr(scomp);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*clo<sp/><sp/><sp/><sp/>=<sp/>crse_fab.loVect();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*chi<sp/><sp/><sp/><sp/>=<sp/>crse_fab.hiVect();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*c_dat<sp/><sp/>=<sp/>crse_fab.dataPtr(dcomp);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*rr<sp/><sp/><sp/><sp/><sp/>=<sp/>ratio.dataPtr();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BL_SPACEDIM<sp/>==<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__AVGDOWN__F_8H_1af7e9b29a1a09205f57cd6e1a3f6169fe" kindref="member">FORT_MAXVAL_AVGDOWN</ref>(c_dat,<sp/>AMREX_ARLIM(clo),<sp/>AMREX_ARLIM(chi),<sp/>&amp;ncomp,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_dat,<sp/>AMREX_ARLIM(flo),<sp/>AMREX_ARLIM(fhi),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ovlo,<sp/>ovhi,<sp/>rr);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__AVGDOWN__F_8H_1a9dac8415e7f4da1600a9512fb727d8fa" kindref="member">FORT_CV_AVGDOWN</ref>(c_dat,<sp/>AMREX_ARLIM(clo),<sp/>AMREX_ARLIM(chi),<sp/>&amp;ncomp,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_dat,<sp/>AMREX_ARLIM(flo),<sp/>AMREX_ARLIM(fhi),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ovlo,<sp/>ovhi,<sp/>rr);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref><sp/><ref refid="namespaceamrex_1acdfc31382ab1f46867b783921a6f465e" kindref="member">amrex::FixCoarseBoxSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box<sp/>&amp;fineBox,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rr)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>we<sp/>need<sp/>this<sp/>because<sp/>these<sp/>datasets<sp/>are<sp/>not<sp/>always<sp/>properly<sp/>blocked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>Box<sp/>coarseBox(<ref refid="namespaceamrex_1a9fb6c36ab72dfe92709f0ea89baa4824" kindref="member">amrex::coarsen</ref>(fineBox,<sp/>rr));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim(0);<sp/>dim<sp/>&lt;<sp/><ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref>;<sp/>++dim)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((coarseBox.smallEnd(dim)<sp/>*<sp/>rr)<sp/>&lt;<sp/>fineBox.smallEnd(dim))<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>coarseBox.growLo(dim,<sp/>-1);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((coarseBox.bigEnd(dim)<sp/>*<sp/>rr)<sp/>&gt;<sp/>(fineBox.bigEnd(dim)<sp/>-<sp/>rr))<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>coarseBox.growHi(dim,<sp/>-1);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coarseBox;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a42624827c89b4341f0f95486188ba5c3" kindref="member">amrex::avgDown</ref>(MultiFab<sp/>&amp;S_crse,<sp/>MultiFab<sp/>&amp;S_fine,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scomp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dcomp,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncomp,<sp/>Vector&lt;int&gt;<sp/>&amp;ratio)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;avgDown()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoxArray<sp/>&amp;fgrids<sp/>=<sp/>S_fine.boxArray();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>coarsen<sp/>on<sp/>processors<sp/>owning<sp/>the<sp/>fine<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>BoxArray<sp/>crse_S_fine_BA(fgrids.size());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fgrids.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Box<sp/>fixedCoarseBox(<ref refid="namespaceamrex_1acdfc31382ab1f46867b783921a6f465e" kindref="member">FixCoarseBoxSize</ref>(fgrids[i],<sp/>ratio[0]));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>crse_S_fine_BA.set(i,<sp/>fixedCoarseBox);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistributionMapping<sp/>&amp;S_fine_DM<sp/>=<sp/>S_fine.DistributionMap();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab<sp/>crse_S_fine(crse_S_fine_BA,<sp/>S_fine_DM,<sp/>ncomp,<sp/>0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(MFIter<sp/>mfi(S_fine);<sp/>mfi.isValid();<sp/>++mfi)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(mfi.index());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a61e745ad34b00278dec10a2723c3d788" kindref="member">avgDown_doit</ref>(S_fine[i],<sp/>crse_S_fine[i],<sp/>crse_S_fine_BA[i],</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scomp,<sp/>0,<sp/>ncomp,<sp/>ratio);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>S_crse.copy(crse_S_fine,<sp/>0,<sp/>dcomp,<sp/>ncomp);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aee4cc89e337e42259b850eafbad65cb1" kindref="member">amrex::PrintTimeRangeList</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;RegionsProfStats::TimeRange&gt;<sp/>&amp;trList)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>std::list&lt;RegionsProfStats::TimeRange&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>trList.begin();<sp/>it<sp/>!=<sp/>trList.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;startTime<sp/>&gt;<sp/>it-&gt;stopTime)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>[Time<sp/>Range<sp/>Uninitialized]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*it;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1a6b7be29b3621c9df4db1d93736597b" kindref="member">amrex::RedistFiles</ref>()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;****<sp/>FixMe:<sp/><sp/>RedistFiles()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIOP(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myProc(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nProcs(<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;string&gt;<sp/>&amp;headerFileNames<sp/>=<sp/><ref refid="classCommProfStats_1a0cab8d7c366a08ed7c4ea33d10be5607" kindref="member">CommProfStats::GetHeaderFileNames</ref>();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nProcs<sp/>!=<sp/>headerFileNames.size())<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bIOP)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>run<sp/>with<sp/>nprocs<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>headerFileNames.size()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cpdir(</highlight><highlight class="stringliteral">&quot;bl_comm_prof&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cpredistdir(</highlight><highlight class="stringliteral">&quot;bl_comm_prof_redist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1a913fd7ccf7cab45bc7d8e2a09ddd2824" kindref="member">amrex::UtilCreateDirectory</ref>(cpredistdir,<sp/>0755))<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a894a812531d6362ce4ac5065c3224699" kindref="member">amrex::CreateDirectoryFailed</ref>(cpredistdir);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref>(</highlight><highlight class="stringliteral">&quot;BLProfParser::runRedist::waitfordir&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>hFile(headerFileNames[myProc]);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>dFile(hFile);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>dFile.replace(hFile.find(</highlight><highlight class="stringliteral">&quot;_H_&quot;</highlight><highlight class="normal">),<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;_D_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>readHFile(cpdir<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>hFile);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>readDFile(cpdir<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>dFile);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>writeHFile(cpredistdir<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>hFile);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>writeDFile(cpredistdir<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>dFile);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>iss;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>oss;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bIOP)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>header<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>readCPHFile(cpdir<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;bl_comm_prof_H&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>writeCPHFile(cpredistdir<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;bl_comm_prof_H&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.open(readCPHFile.c_str(),<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.seekg(0,<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::ios::end</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fileLength(iss.tellg());</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>charBuf[fileLength];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.read(charBuf,<sp/>fileLength);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.close();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.open(writeCPHFile.c_str(),<sp/>std::ios::out);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.write(charBuf,<sp/>fileLength);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.close();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>header<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.open(readHFile.c_str(),<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.seekg(0,<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::ios::end</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fileLength(iss.tellg());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>charBuf[fileLength];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.read(charBuf,<sp/>fileLength);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.close();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.open(writeHFile.c_str(),<sp/>std::ios::out);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.write(charBuf,<sp/>fileLength);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.close();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.open(readDFile.c_str(),<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.seekg(0,<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::ios::end</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fileLength(iss.tellg());</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>charBuf[fileLength];</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.read(charBuf,<sp/>fileLength);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.close();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.open(writeDFile.c_str(),<sp/>std::ios::out);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.write(charBuf,<sp/>fileLength);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss.close();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1ace32984e953e92b236d8e765dd2baaf6" kindref="member">amrex::NHops</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Box<sp/>&amp;tbox,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntVect<sp/>&amp;ivfrom,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntVect<sp/>&amp;ivto)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nhops(0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/><ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref>;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bl(tbox.length(d));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ivl(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(ivfrom[d],<sp/>ivto[d]));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ivh(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(ivfrom[d],<sp/>ivto[d]));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(ivh<sp/>-<sp/>ivl,<sp/>ivl<sp/>+<sp/>bl<sp/>-<sp/>ivh));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>nhops<sp/>+=<sp/>dist;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nhops;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">amrex::Write2DFab</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;filenameprefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ydim,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filename(filenameprefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.2d.fab&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>bfabout(filename.c_str());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>bfabout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FAB<sp/>((8,<sp/>(64<sp/>11<sp/>52<sp/>0<sp/>1<sp/>12<sp/>0<sp/>1023)),(8,<sp/>(8<sp/>7<sp/>6<sp/>5<sp/>4<sp/>3<sp/>2<sp/>1)))((0,0)<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>xdim<sp/>-<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ydim<sp/>-<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>(0,0))<sp/>1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>bfabout.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data,<sp/>xdim<sp/>*<sp/>ydim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>bfabout.close();</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a0e9acfad7e7501e9ff98d50a73b1382a" kindref="member">amrex::Write2DText</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;filenameprefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ydim,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filename(filenameprefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.2d.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>bfabout(filename.c_str());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j(0);<sp/>j<sp/>&lt;<sp/>ydim;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>xdim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index(((ydim<sp/>-<sp/>1<sp/>-<sp/>j)<sp/>*<sp/>xdim)<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>xdim<sp/>*<sp/>ydim)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*********<sp/>bad<sp/>index<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-4);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bfabout<sp/>&lt;&lt;<sp/>data[index]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>bfabout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>bfabout.close();</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" kindref="member">amrex::Write3DFab</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;filenameprefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ydim,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filename(filenameprefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.3d.fab&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>bfabout(filename.c_str());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>bfabout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FAB<sp/>((8,<sp/>(64<sp/>11<sp/>52<sp/>0<sp/>1<sp/>12<sp/>0<sp/>1023)),(8,<sp/>(8<sp/>7<sp/>6<sp/>5<sp/>4<sp/>3<sp/>2<sp/>1)))((0,0,0)<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>xdim<sp/>-<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ydim<sp/>-<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>zdim<sp/>-<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>(0,0,0))<sp/>1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>bfabout.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data,<sp/>xdim<sp/>*<sp/>ydim<sp/>*<sp/>zdim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>bfabout.close();</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a6d17597e95ab560d6e8db9bd3bc5c3d5" kindref="member">amrex::WriteFab</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;filenameprefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ydim,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xdim<sp/>&lt;=<sp/><ref refid="AMReX__BLProfUtilities_8cpp_1aad9b13c926f56c9d115321ff8934b3cb" kindref="member">maxFabXDim</ref>)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(filenameprefix,<sp/>xdim,<sp/>ydim,<sp/>data);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wrap<sp/>the<sp/>2d<sp/>fab<sp/>into<sp/>a<sp/>3d<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index(-1);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim3d(<ref refid="AMReX__BLProfUtilities_8cpp_1aad9b13c926f56c9d115321ff8934b3cb" kindref="member">maxFabXDim</ref>),<sp/>ydim3d(ydim),<sp/>zdim3d(xdim<sp/>/<sp/><ref refid="AMReX__BLProfUtilities_8cpp_1aad9b13c926f56c9d115321ff8934b3cb" kindref="member">maxFabXDim</ref>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xdim<sp/>%<sp/><ref refid="AMReX__BLProfUtilities_8cpp_1aad9b13c926f56c9d115321ff8934b3cb" kindref="member">maxFabXDim</ref>)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++zdim3d;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;double&gt;<sp/>data3d(xdim3d<sp/>*<sp/>ydim3d<sp/>*<sp/>zdim3d,<sp/>(Real)<sp/>BLProfiler::InvalidCFT);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy(0);<sp/>iy<sp/>&lt;<sp/>ydim;<sp/>++iy)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix(0);<sp/>ix<sp/>&lt;<sp/>xdim;<sp/>++ix)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(ix%xdim3d)<sp/>+<sp/>(iy*xdim3d)<sp/>+<sp/>((ix/xdim3d)*xdim3d*ydim3d);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data3d[index]<sp/>=<sp/>data[ix<sp/>+<sp/>iy*xdim];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" kindref="member">Write3DFab</ref>(filenameprefix,<sp/>xdim3d,<sp/>ydim3d,<sp/>zdim3d,<sp/>&amp;data3d[0]);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a393accb69353384e42f45a34cb386180" kindref="member">amrex::FileSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>statBuff;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rCode(::stat(filename.c_str(),<sp/>&amp;statBuff));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(rCode<sp/>==<sp/>0<sp/>?<sp/>statBuff.st_size<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aaae16c4ac3245574456ee8dc48c261be" kindref="member">amrex::MakeFuncPctTimesMF</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;Vector&lt;BLProfStats::FuncStat&gt;<sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;<sp/>&amp;blpFNames,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataNProcs)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_TRACE_PROFILING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BL_SPACEDIM<sp/>==<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>Vector&lt;std::pair&lt;Real,<sp/>int&gt;<sp/>&gt;<sp/>funcPctTimes(funcStats.size());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnum(0);<sp/>fnum<sp/>&lt;<sp/>funcStats.size();<sp/>++fnum)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fName(blpFNames[fnum]);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;::const_iterator<sp/>mpsit<sp/>=<sp/>mProfStats.find(fName);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpsit<sp/>!=<sp/>mProfStats.end())<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fNamePS(mpsit-&gt;first);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BLProfiler::ProfStats<sp/>&amp;ps<sp/>=<sp/>mpsit-&gt;second;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fNamePS<sp/>==<sp/>fName<sp/>&amp;&amp;<sp/>runTime<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>percent((ps.totalTime<sp/>/<sp/>dataNProcs)<sp/>/<sp/>runTime);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcPctTimes[fnum].first<sp/><sp/>=<sp/>percent;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcPctTimes[fnum].second<sp/>=<sp/>fnum;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>MakeFuncPctTimesMF:<sp/><sp/>runTime<sp/>&lt;=<sp/>0.0<sp/>||<sp/>fNamePS<sp/>!=<sp/>fname:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>runTime<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fNamePS<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fName<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>fab<sp/>with<sp/>function<sp/>time<sp/>data<sp/>per<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>needs<sp/>to<sp/>be<sp/>parallelized<sp/>and<sp/>plotfiled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(funcPctTimes.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(funcPctTimes.begin(),<sp/>funcPctTimes.end(),<sp/>BLProfiler::fTTComp());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>Box<sp/>fptBox(IntVect(0,0),<sp/>IntVect(dataNProcs<sp/>-<sp/>1,<sp/>funcPctTimes.size()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>FArrayBox<sp/>fptFab(fptBox,<sp/>1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>fptFab.setVal(0.0);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>*dptr<sp/>=<sp/>fptFab.dataPtr(0);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnum(0);<sp/>fnum<sp/>&lt;<sp/>funcStats.size();<sp/>++fnum)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy(funcPctTimes[fnum].<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">second</ref>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize(funcStats[iy].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>xsize;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index(((funcStats.size()<sp/>-<sp/>1<sp/>-<sp/>fnum)<sp/>*<sp/>xsize)<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref><sp/>&amp;fs<sp/>=<sp/>funcStats[iy][p];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dptr[index]<sp/>=<sp/>fs.<ref refid="structBLProfStats_1_1FuncStat_1a950c1731cce4f46316a6e54354ef8882" kindref="member">totalTime</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>tfout(</highlight><highlight class="stringliteral">&quot;funcPctTimes.fab&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>fptFab.writeOn(tfout);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>tfout.close();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1abf61acca5a480f47841ff87d3fc31536" kindref="member">amrex::CollectMProfStats</ref>(std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;Vector&lt;BLProfStats::FuncStat&gt;<sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;<sp/>&amp;fNames,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnum(0);<sp/>fnum<sp/>&lt;<sp/>funcStats.size();<sp/>++fnum)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>BLProfiler::ProfStats<sp/>ps;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>ps.minTime<sp/><sp/><sp/><sp/>=<sp/>runTime;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>ps.maxTime<sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>funcStats[fnum].size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref><sp/>&amp;fs<sp/>=<sp/>funcStats[fnum][p];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>==<sp/>whichProc)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>store<sp/>ncalls<sp/>for<sp/>whichProc<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps.<ref refid="structBLProfStats_1_1FuncStat_1ad1a3f8772ee33935e4bcb30cdd5581a4" kindref="member">nCalls</ref><sp/>=<sp/>fs.<ref refid="structBLProfStats_1_1FuncStat_1ad1a3f8772ee33935e4bcb30cdd5581a4" kindref="member">nCalls</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps.totalTime<sp/>+=<sp/>fs.<ref refid="structBLProfStats_1_1FuncStat_1a950c1731cce4f46316a6e54354ef8882" kindref="member">totalTime</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps.minTime<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(ps.minTime,<sp/>fs.<ref refid="structBLProfStats_1_1FuncStat_1a950c1731cce4f46316a6e54354ef8882" kindref="member">totalTime</ref>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps.maxTime<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(ps.maxTime,<sp/>fs.<ref refid="structBLProfStats_1_1FuncStat_1a950c1731cce4f46316a6e54354ef8882" kindref="member">totalTime</ref>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>numProcs(funcStats[fnum].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numProcs<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps.avgTime<sp/>=<sp/>ps.totalTime<sp/>/<sp/>numProcs;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps.avgTime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>variance(0.0);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>funcStats[fnum].size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref><sp/>&amp;fs<sp/>=<sp/>funcStats[fnum][p];</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>variance<sp/>+=<sp/>(fs.<ref refid="structBLProfStats_1_1FuncStat_1a950c1731cce4f46316a6e54354ef8882" kindref="member">totalTime</ref><sp/>-<sp/>ps.avgTime)<sp/>*<sp/>(fs.<ref refid="structBLProfStats_1_1FuncStat_1a950c1731cce4f46316a6e54354ef8882" kindref="member">totalTime</ref><sp/>-<sp/>ps.avgTime);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(funcStats[fnum].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps.variance<sp/>=<sp/>variance<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Real</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(funcStats[fnum].size());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps.variance<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fName(fNames[fnum]);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>mProfStats.insert(std::pair&lt;std::string,<sp/>BLProfiler::ProfStats&gt;(fName,<sp/>ps));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a171596246077e8bb3d38d0e3a513c481" kindref="member">amrex::GraphTopPct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;Vector&lt;BLProfStats::FuncStat&gt;<sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;<sp/>&amp;fNames,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataNProcs,<sp/>Real<sp/>gPercent)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnum(0);<sp/>fnum<sp/>&lt;<sp/>funcStats.size();<sp/>++fnum)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fName(fNames[fnum]);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mpsit<sp/>=<sp/>mProfStats.find(fName);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpsit<sp/>!=<sp/>mProfStats.end())<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fNamePS(mpsit-&gt;first);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BLProfiler::ProfStats<sp/>&amp;ps<sp/>=<sp/>mpsit-&gt;second;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fNamePS<sp/>==<sp/>fName<sp/>&amp;&amp;<sp/>runTime<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>percent((ps.totalTime<sp/>/<sp/>dataNProcs)<sp/>/<sp/>runTime);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(percent<sp/>&gt;=<sp/>gPercent)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;xgrName(<ref refid="AMReX__BLProfStats_8cpp_1a02b76a92a17338752cdd29335caaa60d" kindref="member">SanitizeName</ref>(fName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.xgr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;xxxxxxxxxxxxxxxxx<sp/>graphing:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xgrName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>percent<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>xgout(xgrName.c_str());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>funcStats[fnum].size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref><sp/>&amp;fs<sp/>=<sp/>funcStats[fnum][p];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xgout<sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fs.<ref refid="structBLProfStats_1_1FuncStat_1a950c1731cce4f46316a6e54354ef8882" kindref="member">totalTime</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xgout.close();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>GraphTopPct:<sp/><sp/>runTime<sp/>&lt;=<sp/>0.0<sp/>||<sp/>fNamePS<sp/>!=<sp/>fname:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>runTime<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fNamePS<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fName<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp"/>
  </compounddef>
</doxygen>
