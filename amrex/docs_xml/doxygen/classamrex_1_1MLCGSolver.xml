<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1MLCGSolver" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLCGSolver</compoundname>
    <includes refid="AMReX__MLCGSolver_8H" local="no">AMReX_MLCGSolver.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" prot="public" static="no" strong="yes">
        <type></type>
        <name>Type</name>
        <enumvalue id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a17f477cd947340d28b9a4d6f49c1e43b" prot="public">
          <name>BiCGStab</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a5202c6586cac8bee468e86d1ff854231" prot="public">
          <name>CG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="21" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="21" bodyend="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1ae0ff5ed0f4b00ad5bc6051960724f77c" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> *</type>
        <definition>MLMG* amrex::MLCGSolver::mlmg</definition>
        <argsstring></argsstring>
        <name>mlmg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="72" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a6545d114e5d595327ffd94ac69f22170" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        <definition>MLLinOp&amp; amrex::MLCGSolver::Lp</definition>
        <argsstring></argsstring>
        <name>Lp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="73" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a4ca8e6c5517dedd10c97e3dae250427f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
        <definition>Type amrex::MLCGSolver::solver_type</definition>
        <argsstring></argsstring>
        <name>solver_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="74" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a05e4c1a43d63239106f5468b33caa6e7" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::MLCGSolver::amrlev</definition>
        <argsstring></argsstring>
        <name>amrlev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="75" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a2fb5e6802fda1f0b39a181bad7ad2780" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::MLCGSolver::mglev</definition>
        <argsstring></argsstring>
        <name>mglev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="76" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a2990c25f5d241b21ac50199c5d0e8fa7" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="77" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a7361747702a9b7661832c6bd26534a01" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::maxiter</definition>
        <argsstring></argsstring>
        <name>maxiter</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="78" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a34ae0aafa5090a14b99247b75d58878e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::nghost</definition>
        <argsstring></argsstring>
        <name>nghost</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="79" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1aaa6a7cb778d7033b2614ac0f6c6d079e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::iter</definition>
        <argsstring></argsstring>
        <name>iter</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="80" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ab03782948a095d52c81071f4926c0fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::MLCGSolver</definition>
        <argsstring>(MLMG *a_mlmg, MLLinOp &amp;_lp, Type _typ=Type::BiCGStab)</argsstring>
        <name>MLCGSolver</name>
        <param>
          <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> *</type>
          <declname>a_mlmg</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
          <declname>_lp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
          <declname>_typ</declname>
          <defval><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a17f477cd947340d28b9a4d6f49c1e43b" kindref="member">Type::BiCGStab</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="23" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac0e9733d5de10430137f949ba8438c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::~MLCGSolver</definition>
        <argsstring>()</argsstring>
        <name>~MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="24" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1af0e22ed0d89dcba1fbe10f3592166a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::MLCGSolver</definition>
        <argsstring>(const MLCGSolver &amp;rhs)=delete</argsstring>
        <name>MLCGSolver</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="26" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a201038cc8017edcd1e5854ce716357a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
        <definition>MLCGSolver&amp; amrex::MLCGSolver::operator=</definition>
        <argsstring>(const MLCGSolver &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="27" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ada4e0d9149b16d5c340fe7c8f2d70d1b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setSolver</definition>
        <argsstring>(Type _typ) noexcept</argsstring>
        <name>setSolver</name>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
          <declname>_typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="29" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac0eadefb7faf267f91879b30fc5aa894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::solve</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>solve the system, Lp(solnL)=rhsL to relative err, tolerance RETURNS AN INT!!!! indicating success or failure. 0 means success 1 means failed for loss of precision 2 means iterations exceeded </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="38" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="69" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a738b756693d0cefe662cc5db938afcd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::solve</definition>
        <argsstring>(Any &amp;solnL, const Any &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve</name>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="43" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a13a48ab17ef5172e248134839b2e5ef8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setVerbose</definition>
        <argsstring>(int _verbose)</argsstring>
        <name>setVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>_verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="48" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1adbb1d386caae183440af51320153898d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::getVerbose</definition>
        <argsstring>() const</argsstring>
        <name>getVerbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="49" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a34f8c9907a6c25ecbb3d52a3ad09f6e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setMaxIter</definition>
        <argsstring>(int _maxiter)</argsstring>
        <name>setMaxIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>_maxiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="51" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ae260ad0587b65daf082814f9cd227e90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::getMaxIter</definition>
        <argsstring>() const</argsstring>
        <name>getMaxIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="52" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a351c3fd9af99a8b2f2bad292bedb9c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setNGhost</definition>
        <argsstring>(int _nghost)</argsstring>
        <name>setNGhost</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>_nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="54" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1af93609cb8e561d2d8417549844fcdf53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::getNGhost</definition>
        <argsstring>()</argsstring>
        <name>getNGhost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="55" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac69d7bd7f9e2c35ce9602d24f93c4e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLCGSolver::dotxy</definition>
        <argsstring>(const MultiFab &amp;r, const MultiFab &amp;z, bool local=false)</argsstring>
        <name>dotxy</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="57" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="407" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a6c5043394d5c5290cb302d38c5d08226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLCGSolver::norm_inf</definition>
        <argsstring>(const MultiFab &amp;res, bool local=false)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="58" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="417" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1aa40411197f3ef314c892e87e6275a351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::solve_bicgstab</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve_bicgstab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="59" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="89" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a8f5383cd09372e80bdf1b309546f8424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::solve_cg</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve_cg</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="63" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="273" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a74ea79e0e5b7d2ffa17752188b1cf73e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::getNumIters</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumIters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="68" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="68" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="66">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="67" relation="public-inheritance">
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
      <node id="74">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="38" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="56">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="41" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="72" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="99">
        <label>amrex::Vector&lt; double &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
      </node>
      <node id="58">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="14" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>K</label>
      </node>
      <node id="57">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="14">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="14" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>T</label>
      </node>
      <node id="27">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="28" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="11">
        <label>Real</label>
      </node>
      <node id="96">
        <label>std::vector&lt; amrex::Any, std::allocator&lt; amrex::Any &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="63" relation="public-inheritance">
        </childnode>
      </node>
      <node id="80">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="81" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Any &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Any &gt; &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="68" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLMG</label>
        <link refid="classamrex_1_1MLMG"/>
        <childnode refid="3" relation="usage">
          <edgelabel>ns_linop</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_iter_fine_resnorm0</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>cor</edgelabel>
          <edgelabel>cor_hold</edgelabel>
          <edgelabel>rescor</edgelabel>
          <edgelabel>res</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>sol_is_alias</edgelabel>
          <edgelabel>m_niters_cg</edgelabel>
        </childnode>
        <childnode refid="95" relation="usage">
          <edgelabel>rhs</edgelabel>
          <edgelabel>sol</edgelabel>
        </childnode>
        <childnode refid="97" relation="usage">
          <edgelabel>ns_mlmg</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>ns_rhs</edgelabel>
          <edgelabel>ns_sol</edgelabel>
        </childnode>
        <childnode refid="99" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>linop</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>bottom_reltol</edgelabel>
          <edgelabel>bottom_abstol</edgelabel>
          <edgelabel>m_final_resnorm0</edgelabel>
          <edgelabel>m_rhsnorm0</edgelabel>
          <edgelabel>m_init_resnorm0</edgelabel>
        </childnode>
      </node>
      <node id="85">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="20" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="21" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="30" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="69" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="45" relation="public-inheritance">
        </childnode>
      </node>
      <node id="59">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="14" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>std::unique_ptr&lt; amrex::MultiFab &gt;</label>
        <childnode refid="15" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="24" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="35">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="14" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="61" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="51">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="52" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>std::unique_ptr&lt; amrex::MLLinOp::CommContainer &gt;</label>
        <childnode refid="89" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="14" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="52">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="65" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="10" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="82">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="86">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="63">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="48" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="88" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="21" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="14" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>amrex::Vector&lt; amrex::Any &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="96" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="23" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="35" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="43" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="74" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="53">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="14" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="97">
        <label>std::unique_ptr&lt; amrex::MLMG &gt;</label>
        <childnode refid="2" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="89">
        <label>amrex::MLLinOp::CommContainer</label>
        <link refid="structamrex_1_1MLLinOp_1_1CommContainer"/>
      </node>
      <node id="41">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="43">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="44" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="78" relation="public-inheritance">
        </childnode>
      </node>
      <node id="70">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="100">
        <label>std::vector&lt; double, std::allocator&lt; double &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="34" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="91">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="50" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::unique_ptr&lt; amrex::MLLinOp &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="66" relation="public-inheritance">
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="17" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="35" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="24" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLCGSolver</label>
        <link refid="classamrex_1_1MLCGSolver"/>
        <childnode refid="2" relation="usage">
          <edgelabel>mlmg</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>Lp</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Any &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="94" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="83">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="32" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="17" bodyend="81"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCGSolver_1a05e4c1a43d63239106f5468b33caa6e7" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>amrlev</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac69d7bd7f9e2c35ce9602d24f93c4e77" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>dotxy</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ae260ad0587b65daf082814f9cd227e90" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getMaxIter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1af93609cb8e561d2d8417549844fcdf53" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getNGhost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a74ea79e0e5b7d2ffa17752188b1cf73e" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getNumIters</name></member>
      <member refid="classamrex_1_1MLCGSolver_1adbb1d386caae183440af51320153898d" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getVerbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1aaa6a7cb778d7033b2614ac0f6c6d079e" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>iter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a6545d114e5d595327ffd94ac69f22170" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>Lp</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a7361747702a9b7661832c6bd26534a01" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>maxiter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a2fb5e6802fda1f0b39a181bad7ad2780" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>mglev</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ab03782948a095d52c81071f4926c0fff" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1af0e22ed0d89dcba1fbe10f3592166a85" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ae0ff5ed0f4b00ad5bc6051960724f77c" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>mlmg</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a34ae0aafa5090a14b99247b75d58878e" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>nghost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a6c5043394d5c5290cb302d38c5d08226" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>norm_inf</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a201038cc8017edcd1e5854ce716357a3" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a34f8c9907a6c25ecbb3d52a3ad09f6e2" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setMaxIter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a351c3fd9af99a8b2f2bad292bedb9c67" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setNGhost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ada4e0d9149b16d5c340fe7c8f2d70d1b" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a13a48ab17ef5172e248134839b2e5ef8" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac0eadefb7faf267f91879b30fc5aa894" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a738b756693d0cefe662cc5db938afcd1" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve</name></member>
      <member refid="classamrex_1_1MLCGSolver_1aa40411197f3ef314c892e87e6275a351" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve_bicgstab</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a8f5383cd09372e80bdf1b309546f8424" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve_cg</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a4ca8e6c5517dedd10c97e3dae250427f" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solver_type</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>Type</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a2990c25f5d241b21ac50199c5d0e8fa7" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac0e9733d5de10430137f949ba8438c9d" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>~MLCGSolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
