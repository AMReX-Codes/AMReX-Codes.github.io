<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1MLCGSolver" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLCGSolver</compoundname>
    <includes refid="AMReX__MLCGSolver_8H" local="no">AMReX_MLCGSolver.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" prot="public" static="no" strong="yes">
        <type></type>
        <name>Type</name>
        <enumvalue id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a17f477cd947340d28b9a4d6f49c1e43b" prot="public">
          <name>BiCGStab</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a5202c6586cac8bee468e86d1ff854231" prot="public">
          <name>CG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="21" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="21" bodyend="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1ae0ff5ed0f4b00ad5bc6051960724f77c" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> *</type>
        <definition>MLMG* amrex::MLCGSolver::mlmg</definition>
        <argsstring></argsstring>
        <name>mlmg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="67" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a6545d114e5d595327ffd94ac69f22170" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        <definition>MLLinOp&amp; amrex::MLCGSolver::Lp</definition>
        <argsstring></argsstring>
        <name>Lp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="68" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a4ca8e6c5517dedd10c97e3dae250427f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
        <definition>Type amrex::MLCGSolver::solver_type</definition>
        <argsstring></argsstring>
        <name>solver_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="69" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a05e4c1a43d63239106f5468b33caa6e7" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::MLCGSolver::amrlev</definition>
        <argsstring></argsstring>
        <name>amrlev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="70" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a2fb5e6802fda1f0b39a181bad7ad2780" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::MLCGSolver::mglev</definition>
        <argsstring></argsstring>
        <name>mglev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="71" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a2990c25f5d241b21ac50199c5d0e8fa7" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="72" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a7361747702a9b7661832c6bd26534a01" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::maxiter</definition>
        <argsstring></argsstring>
        <name>maxiter</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="73" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a34ae0aafa5090a14b99247b75d58878e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::nghost</definition>
        <argsstring></argsstring>
        <name>nghost</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="74" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1aaa6a7cb778d7033b2614ac0f6c6d079e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::iter</definition>
        <argsstring></argsstring>
        <name>iter</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="75" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ab03782948a095d52c81071f4926c0fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::MLCGSolver</definition>
        <argsstring>(MLMG *a_mlmg, MLLinOp &amp;_lp, Type _typ=Type::BiCGStab)</argsstring>
        <name>MLCGSolver</name>
        <param>
          <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> *</type>
          <declname>a_mlmg</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
          <declname>_lp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
          <declname>_typ</declname>
          <defval><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a17f477cd947340d28b9a4d6f49c1e43b" kindref="member">Type::BiCGStab</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="23" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac0e9733d5de10430137f949ba8438c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::~MLCGSolver</definition>
        <argsstring>()</argsstring>
        <name>~MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="24" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1af0e22ed0d89dcba1fbe10f3592166a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::MLCGSolver</definition>
        <argsstring>(const MLCGSolver &amp;rhs)=delete</argsstring>
        <name>MLCGSolver</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="26" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a201038cc8017edcd1e5854ce716357a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
        <definition>MLCGSolver&amp; amrex::MLCGSolver::operator=</definition>
        <argsstring>(const MLCGSolver &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="27" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ada4e0d9149b16d5c340fe7c8f2d70d1b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setSolver</definition>
        <argsstring>(Type _typ) noexcept</argsstring>
        <name>setSolver</name>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
          <declname>_typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="29" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac0eadefb7faf267f91879b30fc5aa894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::solve</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>solve the system, Lp(solnL)=rhsL to relative err, tolerance RETURNS AN INT!!!! indicating success or failure. 0 means success 1 means failed for loss of precision 2 means iterations exceeded </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="38" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="69" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a13a48ab17ef5172e248134839b2e5ef8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setVerbose</definition>
        <argsstring>(int _verbose)</argsstring>
        <name>setVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>_verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="43" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1adbb1d386caae183440af51320153898d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::getVerbose</definition>
        <argsstring>() const</argsstring>
        <name>getVerbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="44" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a34f8c9907a6c25ecbb3d52a3ad09f6e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setMaxIter</definition>
        <argsstring>(int _maxiter)</argsstring>
        <name>setMaxIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>_maxiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="46" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ae260ad0587b65daf082814f9cd227e90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::getMaxIter</definition>
        <argsstring>() const</argsstring>
        <name>getMaxIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="47" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a351c3fd9af99a8b2f2bad292bedb9c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setNGhost</definition>
        <argsstring>(int _nghost)</argsstring>
        <name>setNGhost</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>_nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="49" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1af93609cb8e561d2d8417549844fcdf53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::getNGhost</definition>
        <argsstring>()</argsstring>
        <name>getNGhost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="50" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac69d7bd7f9e2c35ce9602d24f93c4e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLCGSolver::dotxy</definition>
        <argsstring>(const MultiFab &amp;r, const MultiFab &amp;z, bool local=false)</argsstring>
        <name>dotxy</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="52" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="400" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a6c5043394d5c5290cb302d38c5d08226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLCGSolver::norm_inf</definition>
        <argsstring>(const MultiFab &amp;res, bool local=false)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="53" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="410" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1aa40411197f3ef314c892e87e6275a351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::solve_bicgstab</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve_bicgstab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="54" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="82" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a8f5383cd09372e80bdf1b309546f8424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::solve_cg</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve_cg</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="58" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="266" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a74ea79e0e5b7d2ffa17752188b1cf73e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCGSolver::getNumIters</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumIters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="63" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="63" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="46">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="39">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="19">
        <label>amrex::Vector&lt; double &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="32" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>std::vector&lt; Array&lt; BCType, 3 &gt;, std::allocator&lt; Array&lt; BCType, 3 &gt; &gt; &gt;</label>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>amrex::Vector&lt; Array&lt; BCType, 3 &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>Real</label>
      </node>
      <node id="47">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="38" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLMG</label>
        <link refid="classamrex_1_1MLMG"/>
        <childnode refid="3" relation="usage">
          <edgelabel>rescor</edgelabel>
          <edgelabel>res</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_iter_fine_resnorm0</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>sol</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>fine_mask</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_niters_cg</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>scratch</edgelabel>
          <edgelabel>sol_raii</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>volinv</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>rhs</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>cor</edgelabel>
          <edgelabel>cor_hold</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>linop</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>bottom_reltol</edgelabel>
          <edgelabel>bottom_abstol</edgelabel>
          <edgelabel>m_final_resnorm0</edgelabel>
          <edgelabel>m_rhsnorm0</edgelabel>
          <edgelabel>m_init_resnorm0</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="41">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="30">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="38">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="39" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="32" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="6">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
      </node>
      <node id="42">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; amrex::MultiFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="44">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="16">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="28" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
      <node id="54">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="55" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="48">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="12">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="23">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="24" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>std::vector&lt; amrex::MultiFab *, std::allocator&lt; amrex::MultiFab * &gt; &gt;</label>
      </node>
      <node id="56">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="40">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>std::vector&lt; double, std::allocator&lt; double &gt; &gt;</label>
      </node>
      <node id="55">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="22">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="5">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="18">
        <label>std::vector&lt; amrex::MultiFab, std::allocator&lt; amrex::MultiFab &gt; &gt;</label>
      </node>
      <node id="34">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="35" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLCGSolver</label>
        <link refid="classamrex_1_1MLCGSolver"/>
        <childnode refid="2" relation="usage">
          <edgelabel>mlmg</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>Lp</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::Vector&lt; amrex::MultiFab * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
      <node id="51">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="25">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="17" bodyend="76"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCGSolver_1a05e4c1a43d63239106f5468b33caa6e7" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>amrlev</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac69d7bd7f9e2c35ce9602d24f93c4e77" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>dotxy</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ae260ad0587b65daf082814f9cd227e90" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getMaxIter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1af93609cb8e561d2d8417549844fcdf53" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getNGhost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a74ea79e0e5b7d2ffa17752188b1cf73e" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getNumIters</name></member>
      <member refid="classamrex_1_1MLCGSolver_1adbb1d386caae183440af51320153898d" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getVerbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1aaa6a7cb778d7033b2614ac0f6c6d079e" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>iter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a6545d114e5d595327ffd94ac69f22170" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>Lp</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a7361747702a9b7661832c6bd26534a01" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>maxiter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a2fb5e6802fda1f0b39a181bad7ad2780" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>mglev</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ab03782948a095d52c81071f4926c0fff" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1af0e22ed0d89dcba1fbe10f3592166a85" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ae0ff5ed0f4b00ad5bc6051960724f77c" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>mlmg</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a34ae0aafa5090a14b99247b75d58878e" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>nghost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a6c5043394d5c5290cb302d38c5d08226" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>norm_inf</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a201038cc8017edcd1e5854ce716357a3" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a34f8c9907a6c25ecbb3d52a3ad09f6e2" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setMaxIter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a351c3fd9af99a8b2f2bad292bedb9c67" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setNGhost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ada4e0d9149b16d5c340fe7c8f2d70d1b" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a13a48ab17ef5172e248134839b2e5ef8" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac0eadefb7faf267f91879b30fc5aa894" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve</name></member>
      <member refid="classamrex_1_1MLCGSolver_1aa40411197f3ef314c892e87e6275a351" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve_bicgstab</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a8f5383cd09372e80bdf1b309546f8424" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve_cg</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a4ca8e6c5517dedd10c97e3dae250427f" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solver_type</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>Type</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a2990c25f5d241b21ac50199c5d0e8fa7" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac0e9733d5de10430137f949ba8438c9d" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>~MLCGSolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
