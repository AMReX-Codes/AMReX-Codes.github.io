<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1MLCGSolver" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLCGSolver</compoundname>
    <includes refid="AMReX__MLCGSolver_8H" local="no">AMReX_MLCGSolver.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" prot="public" static="no">
        <name>Type</name>
        <enumvalue id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a17f477cd947340d28b9a4d6f49c1e43b" prot="public">
          <name>BiCGStab</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a5202c6586cac8bee468e86d1ff854231" prot="public">
          <name>CG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="19" bodyend="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1ae0ff5ed0f4b00ad5bc6051960724f77c" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> *</type>
        <definition>MLMG* amrex::MLCGSolver::mlmg</definition>
        <argsstring></argsstring>
        <name>mlmg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a6545d114e5d595327ffd94ac69f22170" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        <definition>MLLinOp&amp; amrex::MLCGSolver::Lp</definition>
        <argsstring></argsstring>
        <name>Lp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a4ca8e6c5517dedd10c97e3dae250427f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
        <definition>Type amrex::MLCGSolver::solver_type</definition>
        <argsstring></argsstring>
        <name>solver_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a05e4c1a43d63239106f5468b33caa6e7" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::MLCGSolver::amrlev</definition>
        <argsstring></argsstring>
        <name>amrlev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a2fb5e6802fda1f0b39a181bad7ad2780" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::MLCGSolver::mglev</definition>
        <argsstring></argsstring>
        <name>mglev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a2990c25f5d241b21ac50199c5d0e8fa7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MLCGSolver::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a7361747702a9b7661832c6bd26534a01" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MLCGSolver::maxiter</definition>
        <argsstring></argsstring>
        <name>maxiter</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCGSolver_1a34ae0aafa5090a14b99247b75d58878e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MLCGSolver::nghost</definition>
        <argsstring></argsstring>
        <name>nghost</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ab03782948a095d52c81071f4926c0fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::MLCGSolver</definition>
        <argsstring>(MLMG *a_mlmg, MLLinOp &amp;_lp, Type _typ=Type::BiCGStab)</argsstring>
        <name>MLCGSolver</name>
        <param>
          <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> *</type>
          <declname>a_mlmg</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
          <declname>_lp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
          <declname>_typ</declname>
          <defval><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521a17f477cd947340d28b9a4d6f49c1e43b" kindref="member">Type::BiCGStab</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac0e9733d5de10430137f949ba8438c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::~MLCGSolver</definition>
        <argsstring>()</argsstring>
        <name>~MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="22" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1af0e22ed0d89dcba1fbe10f3592166a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCGSolver::MLCGSolver</definition>
        <argsstring>(const MLCGSolver &amp;rhs)=delete</argsstring>
        <name>MLCGSolver</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a201038cc8017edcd1e5854ce716357a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
        <definition>MLCGSolver&amp; amrex::MLCGSolver::operator=</definition>
        <argsstring>(const MLCGSolver &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCGSolver" kindref="compound">MLCGSolver</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ada4e0d9149b16d5c340fe7c8f2d70d1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setSolver</definition>
        <argsstring>(Type _typ) noexcept</argsstring>
        <name>setSolver</name>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">Type</ref></type>
          <declname>_typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac0eadefb7faf267f91879b30fc5aa894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLCGSolver::solve</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>solve the system, Lp(solnL)=rhsL to relative err, tolerance RETURNS AN INT!!!! indicating success or failure. 0 means success 1 means failed for loss of precision 2 means iterations exceeded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="67" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a13a48ab17ef5172e248134839b2e5ef8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setVerbose</definition>
        <argsstring>(int _verbose)</argsstring>
        <name>setVerbose</name>
        <param>
          <type>int</type>
          <declname>_verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a52223b1ab7ff9cc98553e83f14fa1073" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLCGSolver::getVerbose</definition>
        <argsstring>() const </argsstring>
        <name>getVerbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a34f8c9907a6c25ecbb3d52a3ad09f6e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setMaxIter</definition>
        <argsstring>(int _maxiter)</argsstring>
        <name>setMaxIter</name>
        <param>
          <type>int</type>
          <declname>_maxiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac4066fba2fdfeec391c25731b2ac95f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLCGSolver::getMaxIter</definition>
        <argsstring>() const </argsstring>
        <name>getMaxIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="45" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a351c3fd9af99a8b2f2bad292bedb9c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCGSolver::setNGhost</definition>
        <argsstring>(int _nghost)</argsstring>
        <name>setNGhost</name>
        <param>
          <type>int</type>
          <declname>_nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1af93609cb8e561d2d8417549844fcdf53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLCGSolver::getNGhost</definition>
        <argsstring>()</argsstring>
        <name>getNGhost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1ac69d7bd7f9e2c35ce9602d24f93c4e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLCGSolver::dotxy</definition>
        <argsstring>(const MultiFab &amp;r, const MultiFab &amp;z, bool local=false)</argsstring>
        <name>dotxy</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="395" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a6c5043394d5c5290cb302d38c5d08226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLCGSolver::norm_inf</definition>
        <argsstring>(const MultiFab &amp;res, bool local=false)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="405" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1aa40411197f3ef314c892e87e6275a351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLCGSolver::solve_bicgstab</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve_bicgstab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="80" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCGSolver_1a8f5383cd09372e80bdf1b309546f8424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::MLCGSolver::solve_cg</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, Real eps_rel, Real eps_abs)</argsstring>
        <name>solve_cg</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.cpp" bodystart="262" bodyend="392"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4631">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="4613">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="4614" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="4616">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="4609">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4609" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4592">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4593" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4606">
        <label>Real</label>
      </node>
      <node id="4632">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4633" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4583">
        <label>amrex::MLMG</label>
        <link refid="classamrex_1_1MLMG"/>
        <childnode refid="4584" relation="usage">
          <edgelabel>rescor</edgelabel>
          <edgelabel>res</edgelabel>
        </childnode>
        <childnode refid="4586" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="4588" relation="usage">
          <edgelabel>sol</edgelabel>
        </childnode>
        <childnode refid="4590" relation="usage">
          <edgelabel>fine_mask</edgelabel>
        </childnode>
        <childnode refid="4592" relation="usage">
          <edgelabel>scratch</edgelabel>
          <edgelabel>sol_raii</edgelabel>
        </childnode>
        <childnode refid="4594" relation="usage">
          <edgelabel>volinv</edgelabel>
        </childnode>
        <childnode refid="4596" relation="usage">
          <edgelabel>rhs</edgelabel>
        </childnode>
        <childnode refid="4598" relation="usage">
          <edgelabel>cor</edgelabel>
          <edgelabel>cor_hold</edgelabel>
        </childnode>
        <childnode refid="4600" relation="usage">
          <edgelabel>linop</edgelabel>
        </childnode>
        <childnode refid="4606" relation="usage">
          <edgelabel>bottom_reltol</edgelabel>
          <edgelabel>bottom_abstol</edgelabel>
        </childnode>
      </node>
      <node id="4585">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="4638">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="4626">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="4607">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4608" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4608">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="4617">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4618" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4614">
        <label>string</label>
      </node>
      <node id="4634">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="4609" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="4628">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="4587">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
      </node>
      <node id="4627">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4628" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4596">
        <label>amrex::Vector&lt; amrex::MultiFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4597" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4601">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4602" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4604">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="4629">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="4595">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
      </node>
      <node id="4603">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4604" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4605">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="4605" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="4606" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="4598">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4599" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4635">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4636" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4593">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="4633">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="4618">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="4623">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="4609" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="4624" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="4600">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="4601" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="4603" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="4605" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="4607" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="4609" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="4610" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="4617" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="4635" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="4637" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc</edgelabel>
        </childnode>
        <childnode refid="4600" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="4639" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="4584">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4585" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4590">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4591" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4637">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4638" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4621">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="4622" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="4630">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4631" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4589">
        <label>std::vector&lt; amrex::MultiFab *, std::allocator&lt; amrex::MultiFab * &gt; &gt;</label>
      </node>
      <node id="4639">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="4624">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="4622">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="4617" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="4625">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4626" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4615">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="4619">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="4620" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="4621" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="4599">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4586">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4587" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4610">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="4611" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4591">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="4597">
        <label>std::vector&lt; amrex::MultiFab, std::allocator&lt; amrex::MultiFab &gt; &gt;</label>
      </node>
      <node id="4611">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="4612" relation="public-inheritance">
        </childnode>
        <childnode refid="4609" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="4617" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="4625" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="4627" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="4629" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="4630" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="4632" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="4634" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="4620">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="4582">
        <label>amrex::MLCGSolver</label>
        <link refid="classamrex_1_1MLCGSolver"/>
        <childnode refid="4583" relation="usage">
          <edgelabel>mlmg</edgelabel>
        </childnode>
        <childnode refid="4600" relation="usage">
          <edgelabel>Lp</edgelabel>
        </childnode>
      </node>
      <node id="4594">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4595" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4588">
        <label>amrex::Vector&lt; amrex::MultiFab * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4589" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4612">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4613" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="4615" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="4609" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="4616" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="4617" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="4619" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="4623" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="4636">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="4602">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="15" bodyend="71"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCGSolver_1a05e4c1a43d63239106f5468b33caa6e7" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>amrlev</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac69d7bd7f9e2c35ce9602d24f93c4e77" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>dotxy</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac4066fba2fdfeec391c25731b2ac95f1" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getMaxIter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1af93609cb8e561d2d8417549844fcdf53" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getNGhost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a52223b1ab7ff9cc98553e83f14fa1073" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>getVerbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a6545d114e5d595327ffd94ac69f22170" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>Lp</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a7361747702a9b7661832c6bd26534a01" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>maxiter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a2fb5e6802fda1f0b39a181bad7ad2780" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>mglev</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ab03782948a095d52c81071f4926c0fff" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1af0e22ed0d89dcba1fbe10f3592166a85" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ae0ff5ed0f4b00ad5bc6051960724f77c" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>mlmg</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a34ae0aafa5090a14b99247b75d58878e" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>nghost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a6c5043394d5c5290cb302d38c5d08226" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>norm_inf</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a201038cc8017edcd1e5854ce716357a3" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a34f8c9907a6c25ecbb3d52a3ad09f6e2" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setMaxIter</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a351c3fd9af99a8b2f2bad292bedb9c67" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setNGhost</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ada4e0d9149b16d5c340fe7c8f2d70d1b" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setSolver</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a13a48ab17ef5172e248134839b2e5ef8" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac0eadefb7faf267f91879b30fc5aa894" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve</name></member>
      <member refid="classamrex_1_1MLCGSolver_1aa40411197f3ef314c892e87e6275a351" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve_bicgstab</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a8f5383cd09372e80bdf1b309546f8424" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solve_cg</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a4ca8e6c5517dedd10c97e3dae250427f" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>solver_type</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>Type</name></member>
      <member refid="classamrex_1_1MLCGSolver_1a2990c25f5d241b21ac50199c5d0e8fa7" prot="private" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCGSolver_1ac0e9733d5de10430137f949ba8438c9d" prot="public" virt="non-virtual"><scope>amrex::MLCGSolver</scope><name>~MLCGSolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
