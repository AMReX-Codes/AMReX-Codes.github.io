<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1Array3D" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array3D</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>int</type>
        <declname>XLO</declname>
        <defname>XLO</defname>
      </param>
      <param>
        <type>int</type>
        <declname>XHI</declname>
        <defname>XHI</defname>
      </param>
      <param>
        <type>int</type>
        <declname>YLO</declname>
        <defname>YLO</defname>
      </param>
      <param>
        <type>int</type>
        <declname>YHI</declname>
        <defname>YHI</defname>
      </param>
      <param>
        <type>int</type>
        <declname>ZLO</declname>
        <defname>ZLO</defname>
      </param>
      <param>
        <type>int</type>
        <declname>ZHI</declname>
        <defname>ZHI</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array3D_1a8434ec94124e414497999f2bbf293ae0" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::arr[(XHI-XLO+1) *(YHI-YLO+1) *(ZHI-ZLO+1)]</definition>
        <argsstring>[(XHI-XLO+1) *(YHI-YLO+1) *(ZHI-ZLO+1)]</argsstring>
        <name>arr</name>
        <qualifiedname>amrex::Array3D::arr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="991" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="991" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Array3D_1ad3d96bc2cbb5ea42245d0a884016e325" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::Array3D::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the total number of elements in the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="654" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="654" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a0c3c839a5c5d07ffda7065c451fb7e7b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::xlo</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlo</name>
        <qualifiedname>amrex::Array3D::xlo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>x</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="662" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="662" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1ad5dfca70054e15d3a7c7525113fef6c7" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::xhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>xhi</name>
        <qualifiedname>amrex::Array3D::xhi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>x</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="669" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="669" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a33e821c40d07edce8f719247c1548cc6" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::xlen</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlen</name>
        <qualifiedname>amrex::Array3D::xlen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>x</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="676" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="676" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1afaed6c8fe2f209a8c99c5609c7d4b9b1" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::ylo</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylo</name>
        <qualifiedname>amrex::Array3D::ylo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>y</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="684" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="684" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1af6eb1a102c236012d794aa811a60a413" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::yhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>yhi</name>
        <qualifiedname>amrex::Array3D::yhi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>y</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="691" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="691" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1ae79c2a7232bada3e5884e49623c43cb7" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::ylen</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylen</name>
        <qualifiedname>amrex::Array3D::ylen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>y</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="699" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="699" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1aed54a5a1eed853d656d0659203ebc3c1" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::zlo</definition>
        <argsstring>() noexcept</argsstring>
        <name>zlo</name>
        <qualifiedname>amrex::Array3D::zlo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>z</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="707" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="707" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a2b4a6bcc252308d07bd5959e118fe2f7" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::zhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>zhi</name>
        <qualifiedname>amrex::Array3D::zhi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>z</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="714" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="714" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1afe1ff40dfe2348bf8b3da36f99e3674b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::zlen</definition>
        <argsstring>() noexcept</argsstring>
        <name>zlen</name>
        <qualifiedname>amrex::Array3D::zlen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>z</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="721" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="721" bodyend="721"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array3D_1a5e67916dd642d9999fa0c0a234a3f486" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array3D::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="728" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="728" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1af5a12f14408ab5b38b945de6e4f1cc68" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array3D::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="735" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="735" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1aa9975fea286fe238ef0ebf7beeb93648" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array3D::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="742" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="742" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a613b6ce6d43bceb04b5ff8519c7ca197" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array3D::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="749" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="749" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a6f9df7151532e4a2020670bc05c091db" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ const T &amp;</type>
        <definition>__host__ __device__ const T &amp; amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array3D::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j,k)</computeroutput>, instead of using square brackets. If the order is not specified, Fortran column-major order is assumed (the index <computeroutput>i</computeroutput> moves the fastest) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="759" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="759" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1afc21a8194267033b416be6e0005e952e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T &amp;</type>
        <definition>__host__ __device__ T &amp; amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array3D::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j,k)</computeroutput>, instead of using square brackets. If the order is not specified, Fortran column-major order is assumed (the index <computeroutput>i</computeroutput> moves the fastest) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="775" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="775" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a6f9df7151532e4a2020670bc05c091db" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ const T &amp;</type>
        <definition>__host__ __device__ const T &amp; amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array3D::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j,k)</computeroutput>, instead of using square brackets. When the order is manually specified as <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, row-major order is used (the index <computeroutput>k</computeroutput> moves the fastest). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="791" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="791" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1afc21a8194267033b416be6e0005e952e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T &amp;</type>
        <definition>__host__ __device__ T &amp; amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array3D::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j,k)</computeroutput>, instead of using square brackets. When the order is manually specified as <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, row-major order is used (the index <computeroutput>k</computeroutput> moves the fastest). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="807" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="807" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a58b2e9e407ccb9cb4886bbaf37e90056" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::Array3D::sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called without any arguments, returns the sum of all elements in the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="820" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="820" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1abd289021cfa997d98303c5f3d31e89d1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::sum</definition>
        <argsstring>(int axis, int loc0, int loc1) const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::Array3D::sum</qualifiedname>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called with three arguments, performs a sum reduction over the specified <computeroutput>axis</computeroutput>, for a particular set of location indices <computeroutput>loc0</computeroutput> and <computeroutput>loc1</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to reduce (0 for <emphasis>x</emphasis> dimension, 1 for <emphasis>y</emphasis> dimension, 2 for <emphasis>z</emphasis> dimension) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc0</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index (either <computeroutput>i</computeroutput> or <computeroutput>j</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index (either <computeroutput>j</computeroutput> or <computeroutput>k</computeroutput>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This can be used, for instance, to calculate the sum over the <emphasis>x</emphasis> dimension of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object that was instantiated as <programlisting filename=".cpp"><codeline><highlight class="normal">Array3D&lt;amrex::Real,<sp/>1,<sp/>M,<sp/>1,<sp/>N,<sp/>1,<sp/>K&gt;<sp/>array;</highlight></codeline>
</programlisting></para>
<para>One could instantiate an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object to hold the results, <programlisting filename=".cpp"><codeline><highlight class="normal">Array2D&lt;amrex::Real,<sp/>1,<sp/>N,<sp/>1,<sp/>K&gt;<sp/>mat;</highlight></codeline>
</programlisting> and then perform the summation for each element of the resulting matrix. <programlisting filename=".cpp"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>N;<sp/>++j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>K;<sp/>++k)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat(j,k)<sp/>=<sp/>array.sum(0,j,k)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> In this example, the axis is 0 and the location indices are <computeroutput>loc0</computeroutput> = <computeroutput>j</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>. For axis = 1, the location indices are treated as <computeroutput>loc0</computeroutput> = <computeroutput>i</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>; for axis = 2, <computeroutput>loc0</computeroutput> = <computeroutput>j</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="864" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="864" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1ab4bf11b287b96c04ddc82dbaccf53bc4" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::Array3D::product</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called without any arguments, returns the product of all elements in the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="894" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="894" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a32b74d80233945db270c430e0d92b134" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::product</definition>
        <argsstring>(const int axis, const int loc0, const int loc1) const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::Array3D::product</qualifiedname>
        <param>
          <type>const int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>loc0</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>loc1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called with three arguments, performs a product reduction over the specified <computeroutput>axis</computeroutput>, for a particular set of location indices <computeroutput>loc0</computeroutput> and <computeroutput>loc1</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to reduce (0 for <emphasis>x</emphasis> dimension, 1 for <emphasis>y</emphasis> dimension, 2 for <emphasis>z</emphasis> dimension) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc0</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index (either <computeroutput>i</computeroutput> or <computeroutput>j</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index (either <computeroutput>j</computeroutput> or <computeroutput>k</computeroutput>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This can be used, for instance, to calculate the sum over the <emphasis>z</emphasis> dimension of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object that was instantiated as <programlisting filename=".cpp"><codeline><highlight class="normal">Array3D&lt;amrex::Real,<sp/>1,<sp/>M,<sp/>1,<sp/>N,<sp/>1,<sp/>K&gt;<sp/>array;</highlight></codeline>
</programlisting></para>
<para>One could instantiate an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object to hold the results, <programlisting filename=".cpp"><codeline><highlight class="normal">Array2D&lt;amrex::Real,<sp/>1,<sp/>M,<sp/>1,<sp/>N&gt;<sp/>mat;</highlight></codeline>
</programlisting> and then perform the summation for each element of the resulting matrix. <programlisting filename=".cpp"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>N;<sp/>++j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>M;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat(i,j)<sp/>=<sp/>array.sum(2,i,j)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> In this example, the axis is 2 and the location indices are <computeroutput>loc0</computeroutput> = <computeroutput>i</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>j</computeroutput>. For axis = 0, the location indices are treated as <computeroutput>loc0</computeroutput> = <computeroutput>j</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>; for axis = 1, <computeroutput>loc0</computeroutput> = <computeroutput>i</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="939" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="939" bodyend="962"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A GPU-compatible three-dimensional array.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>XLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>x</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>XHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>x</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>YLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>y</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>YHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>y</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ZLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>z</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ZHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>z</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ORDER</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref> (C/C++ row-major order) or <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref> (Fortran column-major order, which is the default if not given) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;</label>
        <link refid="structamrex_1_1Array3D"/>
        <childnode refid="2" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="647" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="648" bodyend="992"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array3D_1a8434ec94124e414497999f2bbf293ae0" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>arr</name></member>
      <member refid="structamrex_1_1Array3D_1a5e67916dd642d9999fa0c0a234a3f486" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array3D_1aa9975fea286fe238ef0ebf7beeb93648" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array3D_1af5a12f14408ab5b38b945de6e4f1cc68" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array3D_1a613b6ce6d43bceb04b5ff8519c7ca197" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array3D_1a6f9df7151532e4a2020670bc05c091db" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array3D_1afc21a8194267033b416be6e0005e952e" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array3D_1a6f9df7151532e4a2020670bc05c091db" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array3D_1afc21a8194267033b416be6e0005e952e" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array3D_1ab4bf11b287b96c04ddc82dbaccf53bc4" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array3D_1a32b74d80233945db270c430e0d92b134" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array3D_1ad3d96bc2cbb5ea42245d0a884016e325" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>size</name></member>
      <member refid="structamrex_1_1Array3D_1a58b2e9e407ccb9cb4886bbaf37e90056" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>sum</name></member>
      <member refid="structamrex_1_1Array3D_1abd289021cfa997d98303c5f3d31e89d1" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>sum</name></member>
      <member refid="structamrex_1_1Array3D_1ad5dfca70054e15d3a7c7525113fef6c7" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>xhi</name></member>
      <member refid="structamrex_1_1Array3D_1a33e821c40d07edce8f719247c1548cc6" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>xlen</name></member>
      <member refid="structamrex_1_1Array3D_1a0c3c839a5c5d07ffda7065c451fb7e7b" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>xlo</name></member>
      <member refid="structamrex_1_1Array3D_1af6eb1a102c236012d794aa811a60a413" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>yhi</name></member>
      <member refid="structamrex_1_1Array3D_1ae79c2a7232bada3e5884e49623c43cb7" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>ylen</name></member>
      <member refid="structamrex_1_1Array3D_1afaed6c8fe2f209a8c99c5609c7d4b9b1" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>ylo</name></member>
      <member refid="structamrex_1_1Array3D_1a2b4a6bcc252308d07bd5959e118fe2f7" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>zhi</name></member>
      <member refid="structamrex_1_1Array3D_1afe1ff40dfe2348bf8b3da36f99e3674b" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>zlen</name></member>
      <member refid="structamrex_1_1Array3D_1aed54a5a1eed853d656d0659203ebc3c1" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>zlo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
