<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1Array3D" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array3D</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>XLO</declname>
        <defname>XLO</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>XHI</declname>
        <defname>XHI</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>YLO</declname>
        <defname>YLO</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>YHI</declname>
        <defname>YHI</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>ZLO</declname>
        <defname>ZLO</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>ZHI</declname>
        <defname>ZHI</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
        <declname>ORDER</declname>
        <defname>ORDER</defname>
        <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array3D_1a8434ec94124e414497999f2bbf293ae0" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::arr[(XHI-XLO+1) *(YHI-YLO+1) *(ZHI-ZLO+1)]</definition>
        <argsstring>[(XHI-XLO+1) *(YHI-YLO+1) *(ZHI-ZLO+1)]</argsstring>
        <name>arr</name>
        <qualifiedname>amrex::Array3D::arr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="975" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="975" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Array3D_1a0b71b669dd2c7dd43413c013f6ece155" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr unsigned int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::Array3D::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the total number of elements in the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="646" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="646" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a0cce33ce62ef00ee92ef8a221c56d3d1" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::xlo</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlo</name>
        <qualifiedname>amrex::Array3D::xlo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>x</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="654" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="654" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a7ac30720f2fbf9c5ac7aa9582d0ee5ea" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::xhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>xhi</name>
        <qualifiedname>amrex::Array3D::xhi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>x</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="661" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="661" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a35ee241b54e6f76e55a5dccc3d93df70" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr unsigned int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::xlen</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlen</name>
        <qualifiedname>amrex::Array3D::xlen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>x</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="668" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="668" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1ae781d648d96c4954de40fd262bc26c0b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::ylo</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylo</name>
        <qualifiedname>amrex::Array3D::ylo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>y</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="676" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="676" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a2617b307a861c6a86669045595f2c421" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::yhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>yhi</name>
        <qualifiedname>amrex::Array3D::yhi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>y</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="683" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="683" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a21bfbb1871a699253053906996e83ade" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr unsigned int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::ylen</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylen</name>
        <qualifiedname>amrex::Array3D::ylen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>y</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="691" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="691" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a91093842864e607fcb651ac61966c2a7" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::zlo</definition>
        <argsstring>() noexcept</argsstring>
        <name>zlo</name>
        <qualifiedname>amrex::Array3D::zlo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>z</emphasis> direction. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="699" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="699" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1aaab3fa80feb2977147500e4be20ef1c6" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::zhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>zhi</name>
        <qualifiedname>amrex::Array3D::zhi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>z</emphasis> direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="706" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="706" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a75a84ff0a44187bd73162a6d8c88201c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr unsigned int amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::zlen</definition>
        <argsstring>() noexcept</argsstring>
        <name>zlen</name>
        <qualifiedname>amrex::Array3D::zlen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object in the <emphasis>z</emphasis> direction as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="713" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="713" bodyend="713"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array3D_1ae26b820675943198f0d2fd479ced2ec0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T * amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array3D::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="720" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="720" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1aa026d20d39194820e32d0d89d3509aae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T * amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array3D::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="727" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="727" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a7af80ae25e107be40c01405e16941bf1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T * amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array3D::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="734" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="734" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a522de6d8f30e3cba307e0be2a84a34a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T * amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array3D::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object, as if the object is treated as one-dimensional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="741" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="741" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a1bc30361ffad899c8ebe73cfc8c21f3b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T &amp; amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array3D::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j,k)</computeroutput>, instead of using square brackets. If the order is not specified, Fortran column-major order is assumed (the index <computeroutput>i</computeroutput> moves the fastest) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="751" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="751" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1ae25fdbd729dbc64358e52c81d43b76cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T &amp; amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array3D::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j,k)</computeroutput>, instead of using square brackets. If the order is not specified, Fortran column-major order is assumed (the index <computeroutput>i</computeroutput> moves the fastest) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="767" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="767" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a1bc30361ffad899c8ebe73cfc8c21f3b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T &amp; amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array3D::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j,k)</computeroutput>, instead of using square brackets. When the order is manually specified as <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, row-major order is used (the index <computeroutput>k</computeroutput> moves the fastest). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="783" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="783" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1ae25fdbd729dbc64358e52c81d43b76cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20" kindref="member">Order</ref></type>
            <declname>Ord</declname>
            <defname>Ord</defname>
            <defval>ORDER</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; Ord==<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T &amp; amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array3D::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i,j,k)</computeroutput>, instead of using square brackets. When the order is manually specified as <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref>, row-major order is used (the index <computeroutput>k</computeroutput> moves the fastest). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="799" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="799" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1af90837be80320f2c423e0857bb27233a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::Array3D::sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called without any arguments, returns the sum of all elements in the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="812" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="812" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a4c7319c38f3a3817d9ade3992bb043c6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::sum</definition>
        <argsstring>(int axis, int loc0, int loc1) const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::Array3D::sum</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>loc0</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>loc1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called with three arguments, performs a sum reduction over the specified <computeroutput>axis</computeroutput>, for a particular set of location indices <computeroutput>loc0</computeroutput> and <computeroutput>loc1</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to reduce (0 for <emphasis>x</emphasis> dimension, 1 for <emphasis>y</emphasis> dimension, 2 for <emphasis>z</emphasis> dimension) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc0</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index (either <computeroutput>i</computeroutput> or <computeroutput>j</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index (either <computeroutput>j</computeroutput> or <computeroutput>k</computeroutput>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This can be used, for instance, to calculate the sum over the <emphasis>x</emphasis> dimension of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object that was instantiated as <verbatim>Array3D&lt;amrex::Real, 1, M, 1, N, 1, K&gt; array; </verbatim></para>
<para>One could instantiate an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object to hold the results, <verbatim>Array2D&lt;amrex::Real, 1, N, 1, K&gt; mat; </verbatim> and then perform the summation for each element of the resulting matrix. <verbatim>for     (int j = 1; j &lt;= N; ++j) {
    for (int k = 1; k &lt;= K; ++k) {
        mat(j,k) = array.sum(0,j,k)
    }
}
</verbatim> In this example, the axis is 0 and the location indices are <computeroutput>loc0</computeroutput> = <computeroutput>j</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>. For axis = 1, the location indices are treated as <computeroutput>loc0</computeroutput> = <computeroutput>i</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>; for axis = 2, <computeroutput>loc0</computeroutput> = <computeroutput>j</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="852" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="852" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1afd3f44a272e10e70ccd9936bde83c14c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::Array3D::product</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called without any arguments, returns the product of all elements in the <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="882" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="882" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array3D_1a44bce1615dc9dd7f8843d62092a76204" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;::product</definition>
        <argsstring>(const int axis, const int loc0, const int loc1) const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::Array3D::product</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>loc0</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>loc1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When called with three arguments, performs a product reduction over the specified <computeroutput>axis</computeroutput>, for a particular set of location indices <computeroutput>loc0</computeroutput> and <computeroutput>loc1</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to reduce (0 for <emphasis>x</emphasis> dimension, 1 for <emphasis>y</emphasis> dimension, 2 for <emphasis>z</emphasis> dimension) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc0</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index (either <computeroutput>i</computeroutput> or <computeroutput>j</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The appropriate location index (either <computeroutput>j</computeroutput> or <computeroutput>k</computeroutput>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This can be used, for instance, to calculate the sum over the <emphasis>z</emphasis> dimension of an <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> object that was instantiated as <verbatim>Array3D&lt;amrex::Real, 1, M, 1, N, 1, K&gt; array; </verbatim></para>
<para>One could instantiate an <ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> object to hold the results, <verbatim>Array2D&lt;amrex::Real, 1, M, 1, N&gt; mat; </verbatim> and then perform the summation for each element of the resulting matrix. <verbatim>for     (int j = 1; j &lt;= N; ++j) {
    for (int i = 1; i &lt;= M; ++i) {
        mat(i,j) = array.sum(2,i,j)
    }
}
</verbatim> In this example, the axis is 2 and the location indices are <computeroutput>loc0</computeroutput> = <computeroutput>i</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>j</computeroutput>. For axis = 0, the location indices are treated as <computeroutput>loc0</computeroutput> = <computeroutput>j</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>; for axis = 1, <computeroutput>loc0</computeroutput> = <computeroutput>i</computeroutput> and <computeroutput>loc1</computeroutput> = <computeroutput>k</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="923" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="923" bodyend="946"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A GPU-compatible three-dimensional array.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>XLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>x</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>XHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>x</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>YLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>y</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>YHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>y</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ZLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound in <emphasis>z</emphasis> dimension. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ZHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound in <emphasis>z</emphasis> dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ORDER</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">Order::C</ref> (C/C++ row-major order) or <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">Order::F</ref> (Fortran column-major order, which is the default if not given) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::Array3D&lt; T, XLO, XHI, YLO, YHI, ZLO, ZHI, ORDER &gt;</label>
        <link refid="structamrex_1_1Array3D"/>
        <childnode refid="2" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="639" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="640" bodyend="976"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array3D_1a8434ec94124e414497999f2bbf293ae0" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>arr</name></member>
      <member refid="structamrex_1_1Array3D_1ae26b820675943198f0d2fd479ced2ec0" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array3D_1a7af80ae25e107be40c01405e16941bf1" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array3D_1aa026d20d39194820e32d0d89d3509aae" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array3D_1a522de6d8f30e3cba307e0be2a84a34a9" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array3D_1a1bc30361ffad899c8ebe73cfc8c21f3b" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array3D_1ae25fdbd729dbc64358e52c81d43b76cf" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array3D_1a1bc30361ffad899c8ebe73cfc8c21f3b" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array3D_1ae25fdbd729dbc64358e52c81d43b76cf" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array3D_1afd3f44a272e10e70ccd9936bde83c14c" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array3D_1a44bce1615dc9dd7f8843d62092a76204" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array3D_1a0b71b669dd2c7dd43413c013f6ece155" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>size</name></member>
      <member refid="structamrex_1_1Array3D_1af90837be80320f2c423e0857bb27233a" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>sum</name></member>
      <member refid="structamrex_1_1Array3D_1a4c7319c38f3a3817d9ade3992bb043c6" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>sum</name></member>
      <member refid="structamrex_1_1Array3D_1a7ac30720f2fbf9c5ac7aa9582d0ee5ea" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>xhi</name></member>
      <member refid="structamrex_1_1Array3D_1a35ee241b54e6f76e55a5dccc3d93df70" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>xlen</name></member>
      <member refid="structamrex_1_1Array3D_1a0cce33ce62ef00ee92ef8a221c56d3d1" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>xlo</name></member>
      <member refid="structamrex_1_1Array3D_1a2617b307a861c6a86669045595f2c421" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>yhi</name></member>
      <member refid="structamrex_1_1Array3D_1a21bfbb1871a699253053906996e83ade" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>ylen</name></member>
      <member refid="structamrex_1_1Array3D_1ae781d648d96c4954de40fd262bc26c0b" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>ylo</name></member>
      <member refid="structamrex_1_1Array3D_1aaab3fa80feb2977147500e4be20ef1c6" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>zhi</name></member>
      <member refid="structamrex_1_1Array3D_1a75a84ff0a44187bd73162a6d8c88201c" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>zlen</name></member>
      <member refid="structamrex_1_1Array3D_1a91093842864e607fcb651ac61966c2a7" prot="public" virt="non-virtual"><scope>amrex::Array3D</scope><name>zlo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
