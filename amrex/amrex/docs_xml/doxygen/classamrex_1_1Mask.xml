<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1Mask" kind="class" language="C++" prot="public">
    <compoundname>amrex::Mask</compoundname>
    <basecompoundref refid="classamrex_1_1BaseFab" prot="public" virt="non-virtual">amrex::BaseFab&lt; int &gt;</basecompoundref>
    <includes refid="AMReX__Mask_8H" local="no">AMReX_Mask.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Mask_1a5c614b68bcc988e86e52c106c20c5d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>() noexcept</argsstring>
        <name>Mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="8" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a1bbe56597e75e9487f95ea8a720ee5e7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="11" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ae6d52518e33c58ca5c4ea5e118fcec5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Box &amp;bx, int nc, Arena *ar)</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="14" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a230355fcd3e68a68f02f4ebd6ad2ce17" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Box &amp;bx, int nc=1, bool alloc=true, bool shared=false, Arena *ar=nullptr)</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="17" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a6b295b191764969c7033a967abd45d97" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>Mask</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>construct from input stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a2e99ed3b0c4632c5e758c88928b97202" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int &gt; const &amp;a) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a9018e9168017880e0243ad751f931cac" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a95db54d25c0f6cf6bdb4d3833045cb58" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int const &gt; const &amp;a) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a1fa2d5c56c30c372187e9e7954c7c393" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int const &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa617881bf0f1a46ef377ba655d84f595" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::~Mask</definition>
        <argsstring>() noexcept</argsstring>
        <name>~Mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa1437a1b1611cb70a4d8c6a581c7a5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Mask &amp;&amp;rhs) noexcept=default</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a42404772901ea5f0d3a72d98fc48497d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Mask const &amp;rhs, MakeType make_type, int scomp, int ncomp)</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>make_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ab3bc08bd2f3deea5af111c3720a02b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Mask &amp;)=delete</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a2d7bc995fb1eddf4211d4e93d63d9534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator=</definition>
        <argsstring>(const Mask &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ac8e651aa7881ce8282167ad72e4a1af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator=</definition>
        <argsstring>(Mask &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa99a533ca8b84883dd44bf870fb7c5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Mask::readFrom</definition>
        <argsstring>(std::istream &amp;)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <briefdescription>
<para>initialize from stream, FAB-style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="89" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a924617bc66416c85d920ec7dcbdae3a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Mask::writeOn</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <briefdescription>
<para>output to stream, FAB-style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a8f5fafe917dfe4f8b67ba72615c63d51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator&amp;=</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>operator &amp;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place And operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a187ebef1089afa8f5b0c251fc84974da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place And </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a96f1c0a3f48e6f4ed9b6509b55bfe86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, but specify source/destination/number of components </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="125" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="260" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ac79eca6126b2c2707ca883dca7545ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, and specify subregion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="143" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="270" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a00fc670ea311d38034fcb05f6cfdeca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>in-pace And, over source components to destination components, and on intersection of source and destination boxes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="164" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="281" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ad70cc656ea2eab2e5ed1a8b06c00785d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator|=</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place Or operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a16aac9b4caf7d3aa715c35e1473a4254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place Or </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="189" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ad5797578c04b5614ce848331711d3fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, but specify source/destination/number of components </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="204" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="309" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a8fcf8e088c4ea7f800d327c9842b0986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, and specify subregion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="222" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="319" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ada0a58519cfd7ec1ab414bf65365c72c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" kindref="member">RunOn::Host</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>in-pace Or, over source components to destination components, and on intersection of source and destination boxes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="330" bodyend="347"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Mask_1abfff64dce9dca205fc9d3fdde790dc44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, Mask &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
<para>Initialize from stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="54" bodyend="76"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Mask_1ae8ef1e1e84d4d8e51b1b765e0f057de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Mask &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
<para>output to stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="30" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> is a derived Fab class whose elements maintain a logical &quot;TRUE&quot; or &quot;FALSE&quot; state. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> can perform several elementary logical operations on its data members.</para><para>Implement a logical class <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> to maintain the TRUE or FALSE state of elements in a box. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> can perform element-wise logical operations, but is otherwise very similar to an <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> object. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> object can set its components based on comparing (a subregion of a) real-valued <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> element magnitudes to a scalar value, or by &quot;and&quot;, &quot;or&quot; operations with (the a subregion of) other Masks.</para><para>This class does NOT provide a copy constructor or assignment operator. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2582">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="2583" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2583">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
      </node>
      <node id="2581">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="2582" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2585">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="2586" relation="public-inheritance">
        </childnode>
        <childnode refid="2589" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="2588">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="2590">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="2590" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="2586">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="2587" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="2587">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="2588" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="2589">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="2590" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="2591" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="2591">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="2584">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="2585" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" line="29" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.H" bodystart="26" bodyend="249"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1af827e9a5df2baf21d45239e49567f4c6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1ae730734f6c370cc53bdfb51efe618033" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a4f6421e1246d3830573c1865f1138f60" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a24d42c66b16642a5aee1a390b1b0c39a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b1536046ed1e2201f48955b47243327" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>addproduct</name></member>
      <member refid="structamrex_1_1DataAllocator_1adcabda73bbd0120b08dbb2cda22a6427" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>alloc</name></member>
      <member refid="classamrex_1_1Mask_1a187ebef1089afa8f5b0c251fc84974da" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1a96f1c0a3f48e6f4ed9b6509b55bfe86c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1ac79eca6126b2c2707ca883dca7545ef5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1a00fc670ea311d38034fcb05f6cfdeca7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="structamrex_1_1DataAllocator_1a477a75a5d73137b29f1a6ddf31af40f7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>arena</name></member>
      <member refid="classamrex_1_1BaseFab_1a757e00b16f837e3d092aeb625a9dfa6a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a5d54525d2d54f617a0072900458729e1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a587f263a697ccd87db4db2b7d6f42c87" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a972c0b6366edff5f72a8b6777ac8ac45" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1ac207e54e7824190b984a17f3bbeaa40b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a129c6d062f25b04c99aeef00c129fde8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2775774e0005f2e3d56acc4d23c44a1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1afa1f8f3a9048c2da47559555e5cc7e43" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e470d7e72db0c3169e83e34ce4f657b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5d9786facded55bfce06cc443594cab" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a83d88e02757dac7e30b2ac7a13020b22" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa42c6cb505873cad1b9c9de64a20c407" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a53ab00ff398b5beb473bf85810189532" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a2fe573448f0463cc140a1452a9510eb0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a27f1fbad6aff0f97e0291664ab11a4e4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8adcfedaa62f241b766513fd9dd3f830" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a2689fd4a972a4121943d51dc61eee166" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1acdde994980673c595f2348d982aeb70e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1aa288a917ca5613e3e984c58a7975a89d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseFab_1a25ed9ead805e064c8f9dbe34ebbf3a95" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5723c1af2b115b682869e760b1033a0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1a40dca3a0efea6d6ac5e3103e34b1f3e3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a9121f1816f016bc765e3acea392169b8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a977d18ce746c0f9cdaa0c30d24dafc38" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d461c954f07f4f27315007cd6142897" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a6713c5a40c37784163c28eed7db1d3ae" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a2780bcacf15ff9c08602ddc8fd279434" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a08ef88a8fe68f56114c7a647c04772bd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a882788c51b335c17a01231f1a1fe5da2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a1e8c677d4f03b86f4a6e1d1caac46b02" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copyToMem</name></member>
      <member refid="structamrex_1_1DataAllocator_1a21273a9c68a6101940451a9f6abf7f6e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>DataAllocator</name></member>
      <member refid="structamrex_1_1DataAllocator_1ad2f91458d09a1484857061ff235e73bd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>DataAllocator</name></member>
      <member refid="classamrex_1_1BaseFab_1a5c99c1592a80ba46ab6faf9929773f8d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a94be04911ba375a16941883fe1c1d247" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a06a400fb85117c65737b171b07e478aa" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a156632a48b54792083eb05adec16155d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1a9d0d2a00cc4e3fa23e019b24016b912b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a3a8094b23b240faf25973fea41ef0ef0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a244a45e4bf0eba8069ab27cfe5feed67" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a755fa68b5cfdd5fadd88a234766c271c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a8418cc9903556d471e1d637cb49eef1d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a0f2ae3ab88fb6542eb2c11990f29ef86" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a9541126c9461236acb64d2f0b32a1781" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ae979617b60ec6cd4d9b5d14dd512b3c2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acb13bca4e903870c960bbe7cc0880cec" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e95d8cfaadfe53080ae0092b53202fb" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1a9cd1fd0c353673dae4a5138f5ea79f1e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a6e60b15550e6ba0b5bf63c3ff825232a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1ab78500dde194e48f6e5c50593a7c678a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a7dcaef3f1c196a9b0fd30d0cda3d6f8e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1ae238c88f700fceb3525dccccc6888135" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b0abe9713e52fd03cfb469278dc223c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a9236f2f88feff79c1d50b9b830750f91" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1ac5a36d719054f74a00bfc52e10ec9918" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>elixir</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b42e2b61ac6d8050def0a5e9bde849f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Finalize</name></member>
      <member refid="structamrex_1_1DataAllocator_1a5fa328945c30133a9b9c7f93ccf6e78f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>free</name></member>
      <member refid="classamrex_1_1BaseFab_1ac195a2bbff03a7f02e30788342473d18" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1af8f8e7b8b678678f74f235b0ebdeed9f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ac527239df242562c1cd6d05106299041" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1a4d9eb1a365feee57e8b622f92f42a676" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1BaseFab_1a1d6dfeb0de1a785895b2a26e05c8ce4a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BaseFab_1a036652731192eba6c828802295f0345c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1aac923d72a718d82db66bc8aeaf38b0ed" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1adc3c76cad27b8ebcac50f472ee28086a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a3d7a22be04a9f14666b5b6dea43c7aab" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a4342e997e189d6fe00b281776f9400e6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1ad69dbb55d91cc9784e3f9ee622c53d91" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1a34dd0c1642740071a0bf70d986e9f52a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1af49fda526f1f93ba846db273906cd29b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1a666cac025454c374a1e2db655b133aa9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1a5598302356ad5c6af7482fc392c8bb8b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>loVect</name></member>
      <member refid="structamrex_1_1DataAllocator_1a901b7f1e68950afc823ebc10c093cb94" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1Mask_1a5c614b68bcc988e86e52c106c20c5d59" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a1bbe56597e75e9487f95ea8a720ee5e7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ae6d52518e33c58ca5c4ea5e118fcec5a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a230355fcd3e68a68f02f4ebd6ad2ce17" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a6b295b191764969c7033a967abd45d97" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a2e99ed3b0c4632c5e758c88928b97202" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a9018e9168017880e0243ad751f931cac" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a95db54d25c0f6cf6bdb4d3833045cb58" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a1fa2d5c56c30c372187e9e7954c7c393" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1aa1437a1b1611cb70a4d8c6a581c7a5bf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a42404772901ea5f0d3a72d98fc48497d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ab3bc08bd2f3deea5af111c3720a02b9c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1BaseFab_1a3e4a9401acaa07ed7747907ccaa18a8e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1a02d3c8e98d8d4b237eabc0ce1756fc33" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1ae1a6b0d582503d0257d5927534619526" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1a51c1b72c4a3a04fe392247242467d27f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a2daea766f3544b7e920b9ca9b3cb870e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a976274fa8a099dc6ccd77fb63a3a0650" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a939ad0219e8ede03540eadef78ba7cbb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a776fd1a3ef930d751d3399d380850f1c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a67147a4e532939aaab59f3d83ae93361" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1ad84e4433b485caf6c9cf76d87a04f4a0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ac69c6e4896f54d8ea5ca9fe1114c64f6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d83038ff68df032038f2062af731088" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1aeb7994e6d44cea18d2b9a0b92f641b64" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1a6a67cc88f93b200472fba8ee3ba8263c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1af53146ccb7317b937c89ebd12e19efd5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d45160a5d6cf9f1329ca8b38b1aa6c7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1af6d66895d4ba3fe45a6ba4705521e282" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a6d0bff982fafed20210cfdd290c51922" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1aa4e7563980826bc199c9f0189b6c9b26" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a4f4c18fd897e957e12ccb7597d82764b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2cafb2b37fd53db25b7ae67bc8e3eecd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a841032e4c22463cfc3acc7f6e383384d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a5f90e282b02c4e55e3568396ae439235" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a18ae3e9b17daaf81946b264928babfb6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3d568e9a805b719ccf750d68e9f0b563" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a77c23670c3820173af82382063a8525d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a72337bc09214fce473bf77e724ef9e93" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a986a4f2008cd82f26730291a78bd5d28" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a7df0d47826c9b346e9a5df0ff0a32666" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ac7dbe04481b0bd6c6f532fc2d06f95d1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a30f381aceead942f8c703b4c5bba99ab" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e596c1fdc1cdef0bfd6a60cd3d3b81a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a31b9d3f58d3529cc2ac64dab553eb294" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a5be7479b2a46eaefb945b066cb21de8a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a32e96a4bbc00ecec58d2763ca697bea6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a267006cc0717e9dfbcbd22afc1c89d8c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytesOwned</name></member>
      <member refid="classamrex_1_1BaseFab_1ae16c6f70417dc8f84e2196afe27b2b15" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1aa5764439bdbcc0d060f92f5a6ca41fab" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1ab3e63e01d12f7d5c2679f451729fa171" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1acf4c056e581c461ab116dd7974f82e3a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a5f348c3d0404aa11bb71c5252cc6efe9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf765bafa403ca72a2f136a6efff2b14" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1aeeeca728d91a6741ad70d131e6e9b442" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1af2d0316b0abd438adbf7c3234ed2282b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1a0cfed6fcd597be27e9d069f9e7a3d18b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1ac6480baad7fdde57bec1e2ad32387300" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BaseFab_1a99b1638f6702821a6b6e63cb860d938f" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>nvar</name></member>
      <member refid="classamrex_1_1Mask_1a8f5fafe917dfe4f8b67ba72615c63d51" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator &amp;=</name></member>
      <member refid="classamrex_1_1BaseFab_1ad76ae6115f341053b2eb94affc5e3eee" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1a408be29fc4bfc85971ac414c165ee" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a10931b31715309bfb452dc2c7fa662df" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a3427e5ed98498ff54da5f75d22923f5f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a397a547f55264106c669f9ecbecf8897" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a7433945e87d1450ad2aedd284a1af52b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a7c31f46231419fb8c062439a11694b03" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0e5226efe7308e09b4464b4ae91aa6ff" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a48a7d3febdafd19ca651c5eed88147cd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a7bf50c91d4dc7df9c983947f84da3dfb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa2bf19636336c318059fd497e35c023" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae2402a734250fad951d41376d469365a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1Mask_1ae8ef1e1e84d4d8e51b1b765e0f057de7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1Mask_1a2d7bc995fb1eddf4211d4e93d63d9534" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Mask_1ac8e651aa7881ce8282167ad72e4a1af3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3101a71fce4d1d50de1fca73ff4b0f4" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b81fe99b0146870a40f702e63dd1415" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Mask_1abfff64dce9dca205fc9d3fdde790dc44" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1Mask_1ad70cc656ea2eab2e5ed1a8b06c00785d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator|=</name></member>
      <member refid="classamrex_1_1Mask_1a16aac9b4caf7d3aa715c35e1473a4254" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1ad5797578c04b5614ce848331711d3fe5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1a8fcf8e088c4ea7f800d327c9842b0986" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1ada0a58519cfd7ec1ab414bf65365c72c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1BaseFab_1abb7c6d23546e6178c5c17bc87a2d5ef6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a30dff1ddf3809400a88f85f546ecbe84" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1af7a3fdd2cfd65a5f9a2d7e2126973917" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1aa9c3a519a02df76b99bef93795d6cba3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a8eac05318ddeb7bf09d5c1b25acc6d55" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e3c0c27f4451b4962368e70bb9c0825" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1afa601e460f4af5ec79144dbcd527ff58" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ae637024575b35a0f95b58020e31b79ac" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a56197b4668f634207c4031bcd9e05909" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1acc3fa2566c4bf2de3e6f0773e3b0601b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1BaseFab_1aea7b9b15c8959be232fa8d0b14b2b507" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1BaseFab_1ad858d100150acd894cee6a1de10d61fb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a45109ddf32816d958a662cd23e576d4f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a9b6d8b5d08a022612232194b8c3f098d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ab2918e0d3ea4dae441569909e73a8db7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acf3b50d012730dd3521fb2be517573b9" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1Mask_1aa99a533ca8b84883dd44bf870fb7c5b3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1BaseFab_1a4390286fe2327bd5f0561a75ee14499b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>release</name></member>
      <member refid="classamrex_1_1BaseFab_1a48099208f15f741c739316388f61737a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1a051da6643de6a48ee66ec046d560033a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e5c589a24384ac09b58364b7b7d45a7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a70a02b9f0a717280df913cead8729dbc" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1af1143312b97b8dabe016e041fa440e85" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a07de9150fcf46f6d94ba6d0b6eaf6c74" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a347010e29c31f4b83480011d98908389" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1afe4c37ad8df44d218528981fa43bcbe2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1acbfe1bff2de3daad93c1234eae1f0cf3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ad2b35980de651c0823ee08f5f20f642c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a898fc7d64ff6e5e26fb612bcbd6a111d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a610a4c5031eb9061cbd54febc80ea0b5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a5373ee74f195b1f31ffc9b37502bcdb4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a49749f076cd8c9e2bed72a9d7ac1041f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a401f8319f76f329c535a637b5135f67e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a573b66fa2db975827a4da4bce09d893e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1ac78f21924ff160a279d17ae73351c05b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e65169d29942cf3adde870d63a91834" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1a92cb12158a09c20c51ef9347c11d31e4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1ad511764daeaedb9d3de8afc17ca7140c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1af9080211623ae547d4a77076be42eeba" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a55589bcc8819d6c8a9291e79a05fbb81" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1aba615c949d4831e48be7fbb76605df0a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>size</name></member>
      <member refid="classamrex_1_1BaseFab_1ab265b95d14a167ea57faaf998d39f113" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a0a8a30db2ab622857ba9ba7c64f940cb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1ae146eaf863b19ed32754ed09757d53a3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a768eeb824dfd37e3b53c00d79155b36b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a86d1b4b6478205b0fcec165260df5772" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1aac8f37b7bba5334a86bf90b58fb062d8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>value_type</name></member>
      <member refid="classamrex_1_1Mask_1a924617bc66416c85d920ec7dcbdae3a4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BaseFab_1a588b01925c451678d621fe58797a5bd7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1acf7c1ac49465810a70b9ae1757263f30" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>~BaseFab</name></member>
      <member refid="classamrex_1_1Mask_1aa617881bf0f1a46ef377ba655d84f595" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>~Mask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
