<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1FluxRegister" kind="class" language="C++" prot="public">
    <compoundname>amrex::FluxRegister</compoundname>
    <basecompoundref refid="classamrex_1_1BndryRegister" prot="public" virt="non-virtual">amrex::BndryRegister</basecompoundref>
    <includes refid="AMReX__FluxRegister_8H" local="no">AMReX_FluxRegister.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7" prot="public" static="no">
        <name>FrOp</name>
        <enumvalue id="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7ad52ae5c71ab1fc1193bbc006a73ab613" prot="public">
          <name>COPY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7a6ddca7001a16a7ff26dc0c2c3910ae3a" prot="public">
          <name>ADD</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enum that says whether to add or copy src data to members. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" bodystart="56" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1FluxRegister_1a8d33188a1ba19154997256c66083b10e" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FluxRegister::ratio</definition>
        <argsstring></argsstring>
        <name>ratio</name>
        <briefdescription>
<para>Refinement ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="382" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FluxRegister_1a43c7c6ca83e0c49296f131ecf5eb8b0e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FluxRegister::fine_level</definition>
        <argsstring></argsstring>
        <name>fine_level</name>
        <briefdescription>
<para>Current level + 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="385" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FluxRegister_1a311b5caaf3b58835f84598f46315953d" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FluxRegister::ncomp</definition>
        <argsstring></argsstring>
        <name>ncomp</name>
        <briefdescription>
<para>Number of state components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="388" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" bodystart="388" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a935b4c43c77115935fcf76b3e4a6e009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FluxRegister::FluxRegister</definition>
        <argsstring>()</argsstring>
        <name>FluxRegister</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="17" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1aea5e30aea810dbb261555f307106d406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FluxRegister::FluxRegister</definition>
        <argsstring>(const BoxArray &amp;fine_boxes, const DistributionMapping &amp;dm, const IntVect &amp;ref_ratio, int fine_lev, int nvar)</argsstring>
        <name>FluxRegister</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fine_boxes</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
<para>The constructor. This version allows setting the <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fine_boxes</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_lev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1adeb4921e0fc8e801973647452a3ad7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::FluxRegister::~FluxRegister</definition>
        <argsstring>()</argsstring>
        <name>~FluxRegister</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a443996c9a22893bae492440a1f716096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FluxRegister::FluxRegister</definition>
        <argsstring>(FluxRegister &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FluxRegister</name>
        <param>
          <type><ref refid="classamrex_1_1FluxRegister" kindref="compound">FluxRegister</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a534089570aa27c91fc783470dc34edc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FluxRegister::FluxRegister</definition>
        <argsstring>(const FluxRegister &amp;rhs)=delete</argsstring>
        <name>FluxRegister</name>
        <param>
          <type>const <ref refid="classamrex_1_1FluxRegister" kindref="compound">FluxRegister</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1ad0bad9568c98a4a189a906541ccbad41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FluxRegister" kindref="compound">FluxRegister</ref> &amp;</type>
        <definition>FluxRegister&amp; amrex::FluxRegister::operator=</definition>
        <argsstring>(const FluxRegister &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FluxRegister" kindref="compound">FluxRegister</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a8cc3f9a89b01e82521248e4bb7ce6074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FluxRegister" kindref="compound">FluxRegister</ref> &amp;</type>
        <definition>FluxRegister&amp; amrex::FluxRegister::operator=</definition>
        <argsstring>(FluxRegister &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FluxRegister" kindref="compound">FluxRegister</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1ae0f19ac94fa685e649d56cbdec3eebca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::define</definition>
        <argsstring>(const BoxArray &amp;fine_boxes, const DistributionMapping &amp;dm, const IntVect &amp;ref_ratio, int fine_lev, int nvar)</argsstring>
        <name>define</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fine_boxes</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
<para>Initialize after using default constructor. This version allows setting the <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fine_boxes</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_lev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="64" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a453233dd69feba7dad7ae904a24d7aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1acee4de5e4f610fb4bc86bdae1ac7fd49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect &amp; amrex::FluxRegister::refRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>refRatio</name>
        <briefdescription>
<para>Returns the refinement ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a7aa00b34c175fadfdb6bae33c68bf5d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FluxRegister::fineLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>fineLevel</name>
        <briefdescription>
<para>Returns the level number of the fine level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="85" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1aef5f291512ba1c3e9208ff5c8216f3ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FluxRegister::crseLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crseLevel</name>
        <briefdescription>
<para>Returns the level number of the coarse level (<ref refid="classamrex_1_1FluxRegister_1a7aa00b34c175fadfdb6bae33c68bf5d1" kindref="member">fineLevel()</ref>-1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1af8c25dc77c81cfd2e133f1ed79fe0032" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FluxRegister::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
<para>The number of components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a93804af47daca2ba0d18983401fe5f00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray &amp; amrex::FluxRegister::coarsenedBoxes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>coarsenedBoxes</name>
        <briefdescription>
<para>The coarsened boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a8eb3103253e2e3aba75f6d67574243f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::FluxRegister::SumReg</definition>
        <argsstring>(int comp) const</argsstring>
        <name>SumReg</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>Returns the sum of the registers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="103" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1ac930be53c9ed97f2b650d00d9922d375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::CrseInit</definition>
        <argsstring>(const MultiFab &amp;mflx, const MultiFab &amp;area, int dir, int srccomp, int destcomp, int numcomp, Real mult=-1.0, FrOp op=FluxRegister::COPY)</argsstring>
        <name>CrseInit</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mflx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>mult</declname>
          <defval>-1.0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7" kindref="member">FrOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7ad52ae5c71ab1fc1193bbc006a73ab613" kindref="member">FluxRegister::COPY</ref></defval>
        </param>
        <briefdescription>
<para>Initialize flux correction with coarse data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mflx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="121" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="168" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1aec1bb41bffa8b078895f0f75149cdae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::CrseInit</definition>
        <argsstring>(const MultiFab &amp;mflx, int dir, int srccomp, int destcomp, int numcomp, Real mult=-1.0, FrOp op=FluxRegister::COPY)</argsstring>
        <name>CrseInit</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mflx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>mult</declname>
          <defval>-1.0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7" kindref="member">FrOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7ad52ae5c71ab1fc1193bbc006a73ab613" kindref="member">FluxRegister::COPY</ref></defval>
        </param>
        <briefdescription>
<para>Initialize flux correction with coarse data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mflx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="141" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="235" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a4f11b763bb868b4245b5135f02da8217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::CrseAdd</definition>
        <argsstring>(const MultiFab &amp;mflx, const MultiFab &amp;area, int dir, int srccomp, int destcomp, int numcomp, Real mult, const Geometry &amp;geom)</argsstring>
        <name>CrseAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mflx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>mult</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Add coarse fluxes to the flux register. This is different from CrseInit with <ref refid="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7a6ddca7001a16a7ff26dc0c2c3910ae3a" kindref="member">FluxRegister::ADD</ref>. This is used for cases in which the grids covered by fine do not have fluxes computed (e.g., FLASH). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mflx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="164" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="255" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1ac01db2619376c784ccb95918f39d483e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::CrseAdd</definition>
        <argsstring>(const MultiFab &amp;mflx, int dir, int srccomp, int destcomp, int numcomp, Real mult, const Geometry &amp;geom)</argsstring>
        <name>CrseAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mflx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>mult</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>/in this version the area is assumed to muliplied into the flux (if not, use scale to fix) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mflx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="296" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1ab43d78762f0ea9fe8a2146dab58b9cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::FineAdd</definition>
        <argsstring>(const MultiFab &amp;mflx, int dir, int srccomp, int destcomp, int numcomp, Real mult)</argsstring>
        <name>FineAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mflx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>mult</declname>
        </param>
        <briefdescription>
<para>Increment flux correction with fine data. </para>        </briefdescription>
        <detaileddescription>
<para>/in this version the area is assumed to muliplied into the flux (if not, use scale to fix)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mflx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="204" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="316" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a95d4c8d650762923da71c09c414b2258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::FineAdd</definition>
        <argsstring>(const MultiFab &amp;mflx, const MultiFab &amp;area, int dir, int srccomp, int destcomp, int numcomp, Real mult)</argsstring>
        <name>FineAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mflx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>mult</declname>
        </param>
        <briefdescription>
<para>Increment flux correction with fine data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mflx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="222" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="334" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a1582def7c899c525632403f386978bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::FineAdd</definition>
        <argsstring>(const FArrayBox &amp;flux, int dir, int boxno, int srccomp, int destcomp, int numcomp, Real mult, RunOn gpu_or_cpu) noexcept</argsstring>
        <name>FineAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxno</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>mult</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
<para>Increment flux correction with fine data. </para>        </briefdescription>
        <detaileddescription>
<para>in this version the area is assumed to muliplied into the flux (if not, use scale to fix)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flux</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boxno</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="353" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1af8d3fecfe518f17fa6d3c97676a558a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::FineAdd</definition>
        <argsstring>(const FArrayBox &amp;flux, const FArrayBox &amp;area, int dir, int boxno, int srccomp, int destcomp, int numcomp, Real mult, RunOn gpu_or_cpu) noexcept</argsstring>
        <name>FineAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxno</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>mult</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
<para>Increment flux correction with fine data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flux</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boxno</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="264" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="400" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a99889f53192e4ffabcfeb4362c1f6ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::FineSetVal</definition>
        <argsstring>(int dir, int boxno, int destcomp, int numcomp, Real val, RunOn gpu_or_cpu) noexcept</argsstring>
        <name>FineSetVal</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxno</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
<para>Set flux correction data for a fine box (given by boxno) to a given value. This routine used by FLASH does NOT run on gpu for safety. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boxno</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="284" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="453" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a3b7dcde1bef78b1384644323ddc8e4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::Reflux</definition>
        <argsstring>(MultiFab &amp;mf, const MultiFab &amp;volume, Real scale, int srccomp, int destcomp, int numcomp, const Geometry &amp;crse_geom)</argsstring>
        <name>Reflux</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>volume</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
<para>Apply flux correction. Note that this takes the coarse <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="302" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="476" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a028780603be1fd71e5e7d7069b48c007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::Reflux</definition>
        <argsstring>(MultiFab &amp;mf, const MultiFab &amp;volume, int dir, Real scale, int srccomp, int destcomp, int numcomp, const Geometry &amp;crse_geom)</argsstring>
        <name>Reflux</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>volume</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="310" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="492" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a93f3ce536f756195336c930ef6c5c22b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::Reflux</definition>
        <argsstring>(MultiFab &amp;mf, Real scale, int srccomp, int destcomp, int numcomp, const Geometry &amp;crse_geom)</argsstring>
        <name>Reflux</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
<para>Constant volume version of <ref refid="classamrex_1_1FluxRegister_1a3b7dcde1bef78b1384644323ddc8e4e8" kindref="member">Reflux()</ref>. Note that this takes the coarse <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="329" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="510" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1ad9d645f04a0b8c09399c691540fa74d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::Reflux</definition>
        <argsstring>(MultiFab &amp;mf, int dir, Real scale, int srccomp, int destcomp, int numcomp, const Geometry &amp;crse_geom)</argsstring>
        <name>Reflux</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="336" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="528" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a4230b5a0ec42a59e2f6e48e51ca77f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::OverwriteFlux</definition>
        <argsstring>(Array&lt; MultiFab *, AMREX_SPACEDIM &gt; const &amp;crse_fluxes, Real scale, int srccomp, int destcomp, int numcomp, const Geometry &amp;crse_geom)</argsstring>
        <name>OverwriteFlux</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>crse_fluxes</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="345" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="639" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1ab1a936eb5769156da6cb7d2dac23b4d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::ClearInternalBorders</definition>
        <argsstring>(const Geometry &amp;crse_geom)</argsstring>
        <name>ClearInternalBorders</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
<para>Set internal borders to zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse_geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="356" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="577" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a0c8efd8e75a881af49dbfc1e6bdc5184" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::write</definition>
        <argsstring>(const std::string &amp;name, std::ostream &amp;os) const</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Write (used for writing to checkpoint) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="364" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="715" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a13861fcb5290d2ce4fe7e6510d3fee34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::read</definition>
        <argsstring>(const std::string &amp;name, std::istream &amp;is)</argsstring>
        <name>read</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Read (used for reading from checkpoint) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="372" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="731" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FluxRegister_1a6bc89bc8c2613160d25e7fd2bd0afb97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FluxRegister::Reflux</definition>
        <argsstring>(MultiFab &amp;mf, const MultiFab &amp;volume, Orientation face, Real scale, int scomp, int dcomp, int nc, const Geometry &amp;geom)</argsstring>
        <name>Reflux</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>volume</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="376" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.cpp" bodystart="547" bodyend="574"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Flux Register. </para>    </briefdescription>
    <detaileddescription>
<para>Stores and manipulates fluxes at coarse-fine interfaces. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1575">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
      </node>
      <node id="1574">
        <label>amrex::FluxRegister</label>
        <link refid="classamrex_1_1FluxRegister"/>
        <childnode refid="1575" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1603">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1582">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1583" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1586">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1598">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1585">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1585" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1604">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1605" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1596">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="1597" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="1595">
        <label>std::vector&lt; char *, std::allocator&lt; char *&gt; &gt;</label>
      </node>
      <node id="1600">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="1597">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="1598" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="1587">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1588" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1583">
        <label>string</label>
      </node>
      <node id="1606">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="1585" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="1601">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="1594">
        <label>amrex::Vector&lt; char *&gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1595" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1605">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="1588">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1590">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1591" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1602">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1603" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1591">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1587" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1578">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="1579" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="1599">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1600" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1584">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1589">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1590" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1579">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="1580" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1577">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
        <childnode refid="1578" relation="usage">
          <edgelabel>bndry</edgelabel>
        </childnode>
      </node>
      <node id="1576">
        <label>amrex::FluxRegister</label>
        <link refid="classamrex_1_1FluxRegister"/>
        <childnode refid="1577" relation="public-inheritance">
        </childnode>
        <childnode refid="1585" relation="usage">
          <edgelabel>ratio</edgelabel>
        </childnode>
      </node>
      <node id="1580">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1581" relation="public-inheritance">
        </childnode>
        <childnode refid="1592" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="1594" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="1585" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="1596" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="1587" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="1599" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="1601" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="1602" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="1604" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="1606" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="1592">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1593" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1581">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1582" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1584" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1585" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1586" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1587" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1589" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
      <node id="1593">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxRegister.H" bodystart="18" bodyend="389"/>
    <listofallmembers>
      <member refid="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7a6ddca7001a16a7ff26dc0c2c3910ae3a" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>ADD</name></member>
      <member refid="classamrex_1_1BndryRegister_1adb20e61942a04f1783a0e82598583bc9" prot="protected" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>bndry</name></member>
      <member refid="classamrex_1_1BndryRegister_1aa4688ce12aed07218f4eb52082c290c2" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>BndryRegister</name></member>
      <member refid="classamrex_1_1BndryRegister_1aecf2bfb5d33fc73dc7fff1da73df6cb3" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>BndryRegister</name></member>
      <member refid="classamrex_1_1BndryRegister_1ada2a8c68444266b0a43501e0bbbfb187" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>BndryRegister</name></member>
      <member refid="classamrex_1_1BndryRegister_1ae816eecbaf5ba41568607d00441d3420" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>BndryRegister</name></member>
      <member refid="classamrex_1_1BndryRegister_1a013d3c766ec5b97ea88fa71f9cc810cb" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>boxes</name></member>
      <member refid="classamrex_1_1FluxRegister_1a453233dd69feba7dad7ae904a24d7aa2" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>clear</name></member>
      <member refid="classamrex_1_1FluxRegister_1ab1a936eb5769156da6cb7d2dac23b4d3" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>ClearInternalBorders</name></member>
      <member refid="classamrex_1_1FluxRegister_1a93804af47daca2ba0d18983401fe5f00" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>coarsenedBoxes</name></member>
      <member refid="classamrex_1_1BndryRegister_1a361e5f4f34fe99325481f704c661c2ed" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>Copy</name></member>
      <member refid="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7ad52ae5c71ab1fc1193bbc006a73ab613" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>COPY</name></member>
      <member refid="classamrex_1_1BndryRegister_1af9a7b006622b33878423e6be4fd7fcc3" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1FluxRegister_1a4f11b763bb868b4245b5135f02da8217" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>CrseAdd</name></member>
      <member refid="classamrex_1_1FluxRegister_1ac01db2619376c784ccb95918f39d483e" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>CrseAdd</name></member>
      <member refid="classamrex_1_1FluxRegister_1ac930be53c9ed97f2b650d00d9922d375" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>CrseInit</name></member>
      <member refid="classamrex_1_1FluxRegister_1aec1bb41bffa8b078895f0f75149cdae1" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>CrseInit</name></member>
      <member refid="classamrex_1_1FluxRegister_1aef5f291512ba1c3e9208ff5c8216f3ab" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>crseLevel</name></member>
      <member refid="classamrex_1_1FluxRegister_1ae0f19ac94fa685e649d56cbdec3eebca" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>define</name></member>
      <member refid="classamrex_1_1BndryRegister_1a7ac16569b9b981389bb8a08a6d99e89e" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::FluxRegister</scope><name>define</name></member>
      <member refid="classamrex_1_1BndryRegister_1a50339ee95902a57f40f9251322cbd143" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::FluxRegister</scope><name>define</name></member>
      <member refid="classamrex_1_1BndryRegister_1a543c6c7f9abadfda4cb25368007d14f8" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FluxRegister_1a43c7c6ca83e0c49296f131ecf5eb8b0e" prot="private" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>fine_level</name></member>
      <member refid="classamrex_1_1FluxRegister_1ab43d78762f0ea9fe8a2146dab58b9cf3" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1FluxRegister_1a95d4c8d650762923da71c09c414b2258" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1FluxRegister_1a1582def7c899c525632403f386978bfd" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1FluxRegister_1af8d3fecfe518f17fa6d3c97676a558a7" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1FluxRegister_1a7aa00b34c175fadfdb6bae33c68bf5d1" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>fineLevel</name></member>
      <member refid="classamrex_1_1FluxRegister_1a99889f53192e4ffabcfeb4362c1f6ab0" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FineSetVal</name></member>
      <member refid="classamrex_1_1FluxRegister_1a935b4c43c77115935fcf76b3e4a6e009" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FluxRegister</name></member>
      <member refid="classamrex_1_1FluxRegister_1aea5e30aea810dbb261555f307106d406" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FluxRegister</name></member>
      <member refid="classamrex_1_1FluxRegister_1a443996c9a22893bae492440a1f716096" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FluxRegister</name></member>
      <member refid="classamrex_1_1FluxRegister_1a534089570aa27c91fc783470dc34edc2" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FluxRegister</name></member>
      <member refid="classamrex_1_1FluxRegister_1a0886ce290105f66be4dc23059aa69cc7" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>FrOp</name></member>
      <member refid="classamrex_1_1BndryRegister_1ae15db9f8fcfd9583ae5907d4cf69eeb9" prot="protected" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>grids</name></member>
      <member refid="classamrex_1_1BndryRegister_1a02832dac3fe498a4a60c84024d2fa2ad" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>init</name></member>
      <member refid="classamrex_1_1BndryRegister_1a081060fb3475eb5b2a2b5a620ca98bcb" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>linComb</name></member>
      <member refid="classamrex_1_1FluxRegister_1af8c25dc77c81cfd2e133f1ed79fe0032" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FluxRegister_1a311b5caaf3b58835f84598f46315953d" prot="private" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>ncomp</name></member>
      <member refid="classamrex_1_1BndryRegister_1ad0674b001bc3b0a4b75d1029e94312c2" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1FluxRegister_1ad0bad9568c98a4a189a906541ccbad41" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FluxRegister_1a8cc3f9a89b01e82521248e4bb7ce6074" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryRegister_1aca9e7d7c7f5c551ed60dde97cab4cc76" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::FluxRegister</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryRegister_1a09b5da018d193a820c808b1f2cab5095" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::FluxRegister</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryRegister_1ab8aa5237e5f88e11d7f0222c0732f0c8" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BndryRegister_1a8ca292141cd5f3342448df53bd8771ca" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FluxRegister_1a4230b5a0ec42a59e2f6e48e51ca77f83" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>OverwriteFlux</name></member>
      <member refid="classamrex_1_1BndryRegister_1a1fbfbedbc701bb9f20fa7487bff20bdf" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>plus</name></member>
      <member refid="classamrex_1_1BndryRegister_1ab19d96f57df527f106a7f53c2590b65a" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1FluxRegister_1a8d33188a1ba19154997256c66083b10e" prot="private" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>ratio</name></member>
      <member refid="classamrex_1_1FluxRegister_1a13861fcb5290d2ce4fe7e6510d3fee34" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>read</name></member>
      <member refid="classamrex_1_1FluxRegister_1a3b7dcde1bef78b1384644323ddc8e4e8" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1FluxRegister_1a028780603be1fd71e5e7d7069b48c007" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1FluxRegister_1a93f3ce536f756195336c930ef6c5c22b" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1FluxRegister_1ad9d645f04a0b8c09399c691540fa74d0" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1FluxRegister_1a6bc89bc8c2613160d25e7fd2bd0afb97" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1FluxRegister_1acee4de5e4f610fb4bc86bdae1ac7fd49" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1BndryRegister_1a4da05261825b0d26b246bf5c5b5fb586" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>setBoxes</name></member>
      <member refid="classamrex_1_1BndryRegister_1a8a45cb99b2e11388c149bf277120fbc9" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BndryRegister_1a32eadb3490dbaa29c79ebea0c0c8b8bd" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>size</name></member>
      <member refid="classamrex_1_1FluxRegister_1a8eb3103253e2e3aba75f6d67574243f1" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>SumReg</name></member>
      <member refid="classamrex_1_1FluxRegister_1a0c8efd8e75a881af49dbfc1e6bdc5184" prot="public" virt="non-virtual"><scope>amrex::FluxRegister</scope><name>write</name></member>
      <member refid="classamrex_1_1BndryRegister_1a3607c6a07e3dd764daaf2cb5301f1a59" prot="public" virt="virtual"><scope>amrex::FluxRegister</scope><name>~BndryRegister</name></member>
      <member refid="classamrex_1_1FluxRegister_1adeb4921e0fc8e801973647452a3ad7f3" prot="public" virt="virtual"><scope>amrex::FluxRegister</scope><name>~FluxRegister</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
