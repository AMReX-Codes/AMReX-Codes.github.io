<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1EB2_1_1IndexSpaceImp" kind="class" language="C++" prot="public">
    <compoundname>amrex::EB2::IndexSpaceImp</compoundname>
    <basecompoundref refid="classamrex_1_1EB2_1_1IndexSpace" prot="public" virt="non-virtual">amrex::EB2::IndexSpace</basecompoundref>
    <includes refid="AMReX__EB2_8H" local="no">AMReX_EB2.H</includes>
    <templateparamlist>
      <param>
        <type>typename G</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a025225cea3416a0f7b91e3c5e8424f59" prot="public" static="no">
        <type>typename G::FunctionType</type>
        <definition>using amrex::EB2::IndexSpaceImp&lt; G &gt;::F =  typename G::FunctionType</definition>
        <argsstring></argsstring>
        <name>F</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a472b17e9e1003aa3003cc26d234bc926" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EB2_1_1GShopLevel" kindref="compound">GShopLevel</ref>&lt; G &gt; &gt;</type>
        <definition>Vector&lt;GShopLevel&lt;G&gt; &gt; amrex::EB2::IndexSpaceImp&lt; G &gt;::m_gslevel</definition>
        <argsstring></argsstring>
        <name>m_gslevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a67b71508a8ce8db6d5ab58b35d00beab" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt;Geometry&gt; amrex::EB2::IndexSpaceImp&lt; G &gt;::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a961c595a3d22b06da38b244becb9f3e3" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt;</type>
        <definition>Vector&lt;Box&gt; amrex::EB2::IndexSpaceImp&lt; G &gt;::m_domain</definition>
        <argsstring></argsstring>
        <name>m_domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a49bcede42d9af444fdc2894b3454b63a" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::EB2::IndexSpaceImp&lt; G &gt;::m_ngrow</definition>
        <argsstring></argsstring>
        <name>m_ngrow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a91cc4ee76d747205e74f543a9d37337f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a025225cea3416a0f7b91e3c5e8424f59" kindref="member">F</ref> &gt;</type>
        <definition>std::unique_ptr&lt;F&gt; amrex::EB2::IndexSpaceImp&lt; G &gt;::m_impfunc</definition>
        <argsstring></argsstring>
        <name>m_impfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a3c60583ac6b127ae5a75f08b503a6724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IndexSpaceImp::IndexSpaceImp</definition>
        <argsstring>(const G &amp;gshop, const Geometry &amp;geom, int required_coarsening_level, int max_coarsening_level, int ngrow, bool build_coarse_level_by_coarsening, bool extend_domain_face)</argsstring>
        <name>IndexSpaceImp</name>
        <param>
          <type>const G &amp;</type>
          <declname>gshop</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>required_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>build_coarse_level_by_coarsening</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extend_domain_face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpaceI.H" bodystart="3" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a6797ef86d23bba92fa8a6479d8bfac51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::IndexSpaceImp&lt; G &gt;::IndexSpaceImp</definition>
        <argsstring>(IndexSpaceImp&lt; G &gt; const &amp;)=delete</argsstring>
        <name>IndexSpaceImp</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpaceImp" kindref="compound">IndexSpaceImp</ref>&lt; G &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1ac2dc5fdef32fb9bbd2843e6b2d91ac97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::IndexSpaceImp&lt; G &gt;::IndexSpaceImp</definition>
        <argsstring>(IndexSpaceImp&lt; G &gt; &amp;&amp;)=delete</argsstring>
        <name>IndexSpaceImp</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpaceImp" kindref="compound">IndexSpaceImp</ref>&lt; G &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1acd1ec386ca611eae4f102c7bc4562168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpaceImp&lt; G &gt;::operator=</definition>
        <argsstring>(IndexSpaceImp&lt; G &gt; const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpaceImp" kindref="compound">IndexSpaceImp</ref>&lt; G &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1af6b6248eceb701c542539a952c5808d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpaceImp&lt; G &gt;::operator=</definition>
        <argsstring>(IndexSpaceImp&lt; G &gt; &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpaceImp" kindref="compound">IndexSpaceImp</ref>&lt; G &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1af85151aa9d48dd55db4e270b56d87ccd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual amrex::EB2::IndexSpaceImp&lt; G &gt;::~IndexSpaceImp</definition>
        <argsstring>()</argsstring>
        <name>~IndexSpaceImp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1a1eeaab4266c11166a3072eea2f888f52" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">Level</ref> &amp;</type>
        <definition>const Level &amp; IndexSpaceImp::getLevel</definition>
        <argsstring>(const Geometry &amp;geom) const final</argsstring>
        <name>getLevel</name>
        <reimplements refid="classamrex_1_1EB2_1_1IndexSpace_1a71aa6d39a145bc12424b2fc6c9a7e015">getLevel</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpaceI.H" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1ac216284322537eefb6a3817e784a716d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; IndexSpaceImp::getGeometry</definition>
        <argsstring>(const Box &amp;dom) const final</argsstring>
        <name>getGeometry</name>
        <reimplements refid="classamrex_1_1EB2_1_1IndexSpace_1a683092cb9c842fb986c79f0aedcd05bb">getGeometry</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpaceI.H" bodystart="73" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceImp_1aeb660db350d2d8ea329bdbd72e6f258d" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>virtual const Box&amp; amrex::EB2::IndexSpaceImp&lt; G &gt;::coarsestDomain</definition>
        <argsstring>() const final</argsstring>
        <name>coarsestDomain</name>
        <reimplements refid="classamrex_1_1EB2_1_1IndexSpace_1a7795703119c27937004c54f50532a369">coarsestDomain</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="80" bodyend="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2138">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
      </node>
      <node id="2137">
        <label>amrex::EB2::IndexSpaceImp&lt; G &gt;</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceImp"/>
        <childnode refid="2138" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2148">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
      </node>
      <node id="2140">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
        <childnode refid="2141" relation="usage">
          <edgelabel>m_instance</edgelabel>
        </childnode>
      </node>
      <node id="2150">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="2145">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2146" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2142">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt; &gt;</label>
      </node>
      <node id="2144">
        <label>std::vector&lt; amrex::EB2::GShopLevel&lt; G &gt;, std::allocator&lt; amrex::EB2::GShopLevel&lt; G &gt; &gt; &gt;</label>
      </node>
      <node id="2146">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="2139">
        <label>amrex::EB2::IndexSpaceImp&lt; G &gt;</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceImp"/>
        <childnode refid="2140" relation="public-inheritance">
        </childnode>
        <childnode refid="2143" relation="usage">
          <edgelabel>m_gslevel</edgelabel>
        </childnode>
        <childnode refid="2145" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="2147" relation="usage">
          <edgelabel>m_domain</edgelabel>
        </childnode>
        <childnode refid="2149" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
      </node>
      <node id="2141">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2143">
        <label>amrex::Vector&lt; amrex::EB2::GShopLevel&lt; G &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2144" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2149">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2150" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2147">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2148" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="61" bodyend="93"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ac2b149fea822702476a70d1b12ae2f21" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>clear</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1aeb660db350d2d8ea329bdbd72e6f258d" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>coarsestDomain</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a7ebc7ce80aded82313b3f96ba0f14d8e" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>empty</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aff6283995254b7660c80cd420d99886b" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>erase</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a025225cea3416a0f7b91e3c5e8424f59" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>F</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1ac216284322537eefb6a3817e784a716d" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>getGeometry</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a1eeaab4266c11166a3072eea2f888f52" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>getLevel</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a3c60583ac6b127ae5a75f08b503a6724" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>IndexSpaceImp</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a6797ef86d23bba92fa8a6479d8bfac51" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>IndexSpaceImp</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1ac2dc5fdef32fb9bbd2843e6b2d91ac97" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>IndexSpaceImp</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a961c595a3d22b06da38b244becb9f3e3" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>m_domain</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a67b71508a8ce8db6d5ab58b35d00beab" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a472b17e9e1003aa3003cc26d234bc926" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>m_gslevel</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a91cc4ee76d747205e74f543a9d37337f" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>m_impfunc</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a8d0ae0b87400d58e5fe0e17e947b8f9f" prot="protected" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>m_instance</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a49bcede42d9af444fdc2894b3454b63a" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>m_ngrow</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1acd1ec386ca611eae4f102c7bc4562168" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1af6b6248eceb701c542539a952c5808d8" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a45b714be9d0d45f3ecb339085a73c6ec" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>pop</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a5a3c0ce524a4c0bff9901548d9e8648d" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>push</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aa263203c4d632942992a81436d22d658" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>size</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ad17160a9839f2d64ac20460b4cefbaee" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>top</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ac4076fe625fa22e660fed58771f6b2d5" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>~IndexSpace</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceImp_1af85151aa9d48dd55db4e270b56d87ccd" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceImp</scope><name>~IndexSpaceImp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
